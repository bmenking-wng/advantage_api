<?php
/**
 * DirectDebitPaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * DirectDebitPaymentMethod Class Doc Comment
 *
 * @category Class
 * @description Information pertaining to a payment method.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectDebitPaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DirectDebitPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'save_for_future_use' => 'string',
        'prompt_for_bank_id' => 'string',
        'prompt_for_branch_name' => 'string',
        'prompt_for_checking_saving' => 'string',
        'prompt_for_consent_date' => 'string',
        'prompt_for_origin' => 'string',
        'prompt_for_personal_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'save_for_future_use' => null,
        'prompt_for_bank_id' => null,
        'prompt_for_branch_name' => null,
        'prompt_for_checking_saving' => null,
        'prompt_for_consent_date' => null,
        'prompt_for_origin' => null,
        'prompt_for_personal_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'save_for_future_use' => 'SaveForFutureUse',
        'prompt_for_bank_id' => 'PromptForBankId',
        'prompt_for_branch_name' => 'PromptForBranchName',
        'prompt_for_checking_saving' => 'PromptForCheckingSaving',
        'prompt_for_consent_date' => 'PromptForConsentDate',
        'prompt_for_origin' => 'PromptForOrigin',
        'prompt_for_personal_id' => 'PromptForPersonalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'save_for_future_use' => 'setSaveForFutureUse',
        'prompt_for_bank_id' => 'setPromptForBankId',
        'prompt_for_branch_name' => 'setPromptForBranchName',
        'prompt_for_checking_saving' => 'setPromptForCheckingSaving',
        'prompt_for_consent_date' => 'setPromptForConsentDate',
        'prompt_for_origin' => 'setPromptForOrigin',
        'prompt_for_personal_id' => 'setPromptForPersonalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'save_for_future_use' => 'getSaveForFutureUse',
        'prompt_for_bank_id' => 'getPromptForBankId',
        'prompt_for_branch_name' => 'getPromptForBranchName',
        'prompt_for_checking_saving' => 'getPromptForCheckingSaving',
        'prompt_for_consent_date' => 'getPromptForConsentDate',
        'prompt_for_origin' => 'getPromptForOrigin',
        'prompt_for_personal_id' => 'getPromptForPersonalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROMPT_FOR_BANK_ID_CLOSED = 'Closed';
    const PROMPT_FOR_BANK_ID_HIDDEN = 'Hidden';
    const PROMPT_FOR_BANK_ID_OPTIONAL = 'Optional';
    const PROMPT_FOR_BANK_ID_REQUIRED = 'Required';
    const PROMPT_FOR_BRANCH_NAME_CLOSED = 'Closed';
    const PROMPT_FOR_BRANCH_NAME_HIDDEN = 'Hidden';
    const PROMPT_FOR_BRANCH_NAME_OPTIONAL = 'Optional';
    const PROMPT_FOR_BRANCH_NAME_REQUIRED = 'Required';
    const PROMPT_FOR_CHECKING_SAVING_CLOSED = 'Closed';
    const PROMPT_FOR_CHECKING_SAVING_HIDDEN = 'Hidden';
    const PROMPT_FOR_CHECKING_SAVING_OPTIONAL = 'Optional';
    const PROMPT_FOR_CHECKING_SAVING_REQUIRED = 'Required';
    const PROMPT_FOR_CONSENT_DATE_CLOSED = 'Closed';
    const PROMPT_FOR_CONSENT_DATE_HIDDEN = 'Hidden';
    const PROMPT_FOR_CONSENT_DATE_OPTIONAL = 'Optional';
    const PROMPT_FOR_CONSENT_DATE_REQUIRED = 'Required';
    const PROMPT_FOR_ORIGIN_CLOSED = 'Closed';
    const PROMPT_FOR_ORIGIN_HIDDEN = 'Hidden';
    const PROMPT_FOR_ORIGIN_OPTIONAL = 'Optional';
    const PROMPT_FOR_ORIGIN_REQUIRED = 'Required';
    const PROMPT_FOR_PERSONAL_ID_CLOSED = 'Closed';
    const PROMPT_FOR_PERSONAL_ID_HIDDEN = 'Hidden';
    const PROMPT_FOR_PERSONAL_ID_OPTIONAL = 'Optional';
    const PROMPT_FOR_PERSONAL_ID_REQUIRED = 'Required';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForBankIdAllowableValues()
    {
        return [
            self::PROMPT_FOR_BANK_ID_CLOSED,
            self::PROMPT_FOR_BANK_ID_HIDDEN,
            self::PROMPT_FOR_BANK_ID_OPTIONAL,
            self::PROMPT_FOR_BANK_ID_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForBranchNameAllowableValues()
    {
        return [
            self::PROMPT_FOR_BRANCH_NAME_CLOSED,
            self::PROMPT_FOR_BRANCH_NAME_HIDDEN,
            self::PROMPT_FOR_BRANCH_NAME_OPTIONAL,
            self::PROMPT_FOR_BRANCH_NAME_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForCheckingSavingAllowableValues()
    {
        return [
            self::PROMPT_FOR_CHECKING_SAVING_CLOSED,
            self::PROMPT_FOR_CHECKING_SAVING_HIDDEN,
            self::PROMPT_FOR_CHECKING_SAVING_OPTIONAL,
            self::PROMPT_FOR_CHECKING_SAVING_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForConsentDateAllowableValues()
    {
        return [
            self::PROMPT_FOR_CONSENT_DATE_CLOSED,
            self::PROMPT_FOR_CONSENT_DATE_HIDDEN,
            self::PROMPT_FOR_CONSENT_DATE_OPTIONAL,
            self::PROMPT_FOR_CONSENT_DATE_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForOriginAllowableValues()
    {
        return [
            self::PROMPT_FOR_ORIGIN_CLOSED,
            self::PROMPT_FOR_ORIGIN_HIDDEN,
            self::PROMPT_FOR_ORIGIN_OPTIONAL,
            self::PROMPT_FOR_ORIGIN_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromptForPersonalIdAllowableValues()
    {
        return [
            self::PROMPT_FOR_PERSONAL_ID_CLOSED,
            self::PROMPT_FOR_PERSONAL_ID_HIDDEN,
            self::PROMPT_FOR_PERSONAL_ID_OPTIONAL,
            self::PROMPT_FOR_PERSONAL_ID_REQUIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['save_for_future_use'] = isset($data['save_for_future_use']) ? $data['save_for_future_use'] : null;
        $this->container['prompt_for_bank_id'] = isset($data['prompt_for_bank_id']) ? $data['prompt_for_bank_id'] : null;
        $this->container['prompt_for_branch_name'] = isset($data['prompt_for_branch_name']) ? $data['prompt_for_branch_name'] : null;
        $this->container['prompt_for_checking_saving'] = isset($data['prompt_for_checking_saving']) ? $data['prompt_for_checking_saving'] : null;
        $this->container['prompt_for_consent_date'] = isset($data['prompt_for_consent_date']) ? $data['prompt_for_consent_date'] : null;
        $this->container['prompt_for_origin'] = isset($data['prompt_for_origin']) ? $data['prompt_for_origin'] : null;
        $this->container['prompt_for_personal_id'] = isset($data['prompt_for_personal_id']) ? $data['prompt_for_personal_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPromptForBankIdAllowableValues();
        if (!is_null($this->container['prompt_for_bank_id']) && !in_array($this->container['prompt_for_bank_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_bank_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPromptForBranchNameAllowableValues();
        if (!is_null($this->container['prompt_for_branch_name']) && !in_array($this->container['prompt_for_branch_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_branch_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPromptForCheckingSavingAllowableValues();
        if (!is_null($this->container['prompt_for_checking_saving']) && !in_array($this->container['prompt_for_checking_saving'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_checking_saving', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPromptForConsentDateAllowableValues();
        if (!is_null($this->container['prompt_for_consent_date']) && !in_array($this->container['prompt_for_consent_date'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_consent_date', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPromptForOriginAllowableValues();
        if (!is_null($this->container['prompt_for_origin']) && !in_array($this->container['prompt_for_origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_origin', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPromptForPersonalIdAllowableValues();
        if (!is_null($this->container['prompt_for_personal_id']) && !in_array($this->container['prompt_for_personal_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'prompt_for_personal_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code identifying the payment method.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this payment method.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets save_for_future_use
     *
     * @return string
     */
    public function getSaveForFutureUse()
    {
        return $this->container['save_for_future_use'];
    }

    /**
     * Sets save_for_future_use
     *
     * @param string $save_for_future_use The default value of Save For Future Use for this payment method
     *
     * @return $this
     */
    public function setSaveForFutureUse($save_for_future_use)
    {
        $this->container['save_for_future_use'] = $save_for_future_use;

        return $this;
    }

    /**
     * Gets prompt_for_bank_id
     *
     * @return string
     */
    public function getPromptForBankId()
    {
        return $this->container['prompt_for_bank_id'];
    }

    /**
     * Sets prompt_for_bank_id
     *
     * @param string $prompt_for_bank_id How to prompt user for Bank Id
     *
     * @return $this
     */
    public function setPromptForBankId($prompt_for_bank_id)
    {
        $allowedValues = $this->getPromptForBankIdAllowableValues();
        if (!is_null($prompt_for_bank_id) && !in_array($prompt_for_bank_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_bank_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_bank_id'] = $prompt_for_bank_id;

        return $this;
    }

    /**
     * Gets prompt_for_branch_name
     *
     * @return string
     */
    public function getPromptForBranchName()
    {
        return $this->container['prompt_for_branch_name'];
    }

    /**
     * Sets prompt_for_branch_name
     *
     * @param string $prompt_for_branch_name How to prompt user for Branch Name
     *
     * @return $this
     */
    public function setPromptForBranchName($prompt_for_branch_name)
    {
        $allowedValues = $this->getPromptForBranchNameAllowableValues();
        if (!is_null($prompt_for_branch_name) && !in_array($prompt_for_branch_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_branch_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_branch_name'] = $prompt_for_branch_name;

        return $this;
    }

    /**
     * Gets prompt_for_checking_saving
     *
     * @return string
     */
    public function getPromptForCheckingSaving()
    {
        return $this->container['prompt_for_checking_saving'];
    }

    /**
     * Sets prompt_for_checking_saving
     *
     * @param string $prompt_for_checking_saving How to prompt user for Account Type
     *
     * @return $this
     */
    public function setPromptForCheckingSaving($prompt_for_checking_saving)
    {
        $allowedValues = $this->getPromptForCheckingSavingAllowableValues();
        if (!is_null($prompt_for_checking_saving) && !in_array($prompt_for_checking_saving, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_checking_saving', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_checking_saving'] = $prompt_for_checking_saving;

        return $this;
    }

    /**
     * Gets prompt_for_consent_date
     *
     * @return string
     */
    public function getPromptForConsentDate()
    {
        return $this->container['prompt_for_consent_date'];
    }

    /**
     * Sets prompt_for_consent_date
     *
     * @param string $prompt_for_consent_date How to prompt user for Consent Date
     *
     * @return $this
     */
    public function setPromptForConsentDate($prompt_for_consent_date)
    {
        $allowedValues = $this->getPromptForConsentDateAllowableValues();
        if (!is_null($prompt_for_consent_date) && !in_array($prompt_for_consent_date, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_consent_date', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_consent_date'] = $prompt_for_consent_date;

        return $this;
    }

    /**
     * Gets prompt_for_origin
     *
     * @return string
     */
    public function getPromptForOrigin()
    {
        return $this->container['prompt_for_origin'];
    }

    /**
     * Sets prompt_for_origin
     *
     * @param string $prompt_for_origin How to prompt user for Origin
     *
     * @return $this
     */
    public function setPromptForOrigin($prompt_for_origin)
    {
        $allowedValues = $this->getPromptForOriginAllowableValues();
        if (!is_null($prompt_for_origin) && !in_array($prompt_for_origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_origin', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_origin'] = $prompt_for_origin;

        return $this;
    }

    /**
     * Gets prompt_for_personal_id
     *
     * @return string
     */
    public function getPromptForPersonalId()
    {
        return $this->container['prompt_for_personal_id'];
    }

    /**
     * Sets prompt_for_personal_id
     *
     * @param string $prompt_for_personal_id How to prompt user for Personal Id
     *
     * @return $this
     */
    public function setPromptForPersonalId($prompt_for_personal_id)
    {
        $allowedValues = $this->getPromptForPersonalIdAllowableValues();
        if (!is_null($prompt_for_personal_id) && !in_array($prompt_for_personal_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prompt_for_personal_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prompt_for_personal_id'] = $prompt_for_personal_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


