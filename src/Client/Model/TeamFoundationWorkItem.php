<?php
/**
 * TeamFoundationWorkItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * TeamFoundationWorkItem Class Doc Comment
 *
 * @category Class
 * @description This class is part of the CSL module.  It is used internally at ACS.  Represents a team foundation work item
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamFoundationWorkItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TeamFoundationWorkItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'work_item_id' => 'int',
        'activated_date' => '\DateTime',
        'area_id' => 'int',
        'area_path' => 'string',
        'assigned_to' => 'string',
        'backlog_priority' => 'double',
        'changed_by' => 'string',
        'changed_date' => '\DateTime',
        'client_abbreviation' => 'string',
        'created_by' => 'string',
        'created_date' => '\DateTime',
        'csl_number' => 'string',
        'description' => 'string',
        'history' => 'string',
        'iteration_id' => 'int',
        'iteration_path' => 'string',
        'node_name' => 'string',
        'resolved_reason' => 'string',
        'revised_date' => '\DateTime',
        'revision' => 'int',
        'state' => 'string',
        'tags' => 'string',
        'title' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'work_item_id' => 'int32',
        'activated_date' => 'date-time',
        'area_id' => 'int32',
        'area_path' => null,
        'assigned_to' => null,
        'backlog_priority' => 'double',
        'changed_by' => null,
        'changed_date' => 'date-time',
        'client_abbreviation' => null,
        'created_by' => null,
        'created_date' => 'date-time',
        'csl_number' => null,
        'description' => null,
        'history' => null,
        'iteration_id' => 'int32',
        'iteration_path' => null,
        'node_name' => null,
        'resolved_reason' => null,
        'revised_date' => 'date-time',
        'revision' => 'int32',
        'state' => null,
        'tags' => null,
        'title' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'work_item_id' => 'WorkItemId',
        'activated_date' => 'ActivatedDate',
        'area_id' => 'AreaId',
        'area_path' => 'AreaPath',
        'assigned_to' => 'AssignedTo',
        'backlog_priority' => 'BacklogPriority',
        'changed_by' => 'ChangedBy',
        'changed_date' => 'ChangedDate',
        'client_abbreviation' => 'ClientAbbreviation',
        'created_by' => 'CreatedBy',
        'created_date' => 'CreatedDate',
        'csl_number' => 'CslNumber',
        'description' => 'Description',
        'history' => 'History',
        'iteration_id' => 'IterationId',
        'iteration_path' => 'IterationPath',
        'node_name' => 'NodeName',
        'resolved_reason' => 'ResolvedReason',
        'revised_date' => 'RevisedDate',
        'revision' => 'Revision',
        'state' => 'State',
        'tags' => 'Tags',
        'title' => 'Title',
        'url' => 'Url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'work_item_id' => 'setWorkItemId',
        'activated_date' => 'setActivatedDate',
        'area_id' => 'setAreaId',
        'area_path' => 'setAreaPath',
        'assigned_to' => 'setAssignedTo',
        'backlog_priority' => 'setBacklogPriority',
        'changed_by' => 'setChangedBy',
        'changed_date' => 'setChangedDate',
        'client_abbreviation' => 'setClientAbbreviation',
        'created_by' => 'setCreatedBy',
        'created_date' => 'setCreatedDate',
        'csl_number' => 'setCslNumber',
        'description' => 'setDescription',
        'history' => 'setHistory',
        'iteration_id' => 'setIterationId',
        'iteration_path' => 'setIterationPath',
        'node_name' => 'setNodeName',
        'resolved_reason' => 'setResolvedReason',
        'revised_date' => 'setRevisedDate',
        'revision' => 'setRevision',
        'state' => 'setState',
        'tags' => 'setTags',
        'title' => 'setTitle',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'work_item_id' => 'getWorkItemId',
        'activated_date' => 'getActivatedDate',
        'area_id' => 'getAreaId',
        'area_path' => 'getAreaPath',
        'assigned_to' => 'getAssignedTo',
        'backlog_priority' => 'getBacklogPriority',
        'changed_by' => 'getChangedBy',
        'changed_date' => 'getChangedDate',
        'client_abbreviation' => 'getClientAbbreviation',
        'created_by' => 'getCreatedBy',
        'created_date' => 'getCreatedDate',
        'csl_number' => 'getCslNumber',
        'description' => 'getDescription',
        'history' => 'getHistory',
        'iteration_id' => 'getIterationId',
        'iteration_path' => 'getIterationPath',
        'node_name' => 'getNodeName',
        'resolved_reason' => 'getResolvedReason',
        'revised_date' => 'getRevisedDate',
        'revision' => 'getRevision',
        'state' => 'getState',
        'tags' => 'getTags',
        'title' => 'getTitle',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['work_item_id'] = isset($data['work_item_id']) ? $data['work_item_id'] : null;
        $this->container['activated_date'] = isset($data['activated_date']) ? $data['activated_date'] : null;
        $this->container['area_id'] = isset($data['area_id']) ? $data['area_id'] : null;
        $this->container['area_path'] = isset($data['area_path']) ? $data['area_path'] : null;
        $this->container['assigned_to'] = isset($data['assigned_to']) ? $data['assigned_to'] : null;
        $this->container['backlog_priority'] = isset($data['backlog_priority']) ? $data['backlog_priority'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['changed_date'] = isset($data['changed_date']) ? $data['changed_date'] : null;
        $this->container['client_abbreviation'] = isset($data['client_abbreviation']) ? $data['client_abbreviation'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['csl_number'] = isset($data['csl_number']) ? $data['csl_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['iteration_id'] = isset($data['iteration_id']) ? $data['iteration_id'] : null;
        $this->container['iteration_path'] = isset($data['iteration_path']) ? $data['iteration_path'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['resolved_reason'] = isset($data['resolved_reason']) ? $data['resolved_reason'] : null;
        $this->container['revised_date'] = isset($data['revised_date']) ? $data['revised_date'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets work_item_id
     *
     * @return int
     */
    public function getWorkItemId()
    {
        return $this->container['work_item_id'];
    }

    /**
     * Sets work_item_id
     *
     * @param int $work_item_id The unique identification number for the work item
     *
     * @return $this
     */
    public function setWorkItemId($work_item_id)
    {
        $this->container['work_item_id'] = $work_item_id;

        return $this;
    }

    /**
     * Gets activated_date
     *
     * @return \DateTime
     */
    public function getActivatedDate()
    {
        return $this->container['activated_date'];
    }

    /**
     * Sets activated_date
     *
     * @param \DateTime $activated_date The date and time the work item was activated
     *
     * @return $this
     */
    public function setActivatedDate($activated_date)
    {
        $this->container['activated_date'] = $activated_date;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int $area_id The area id for the work item
     *
     * @return $this
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets area_path
     *
     * @return string
     */
    public function getAreaPath()
    {
        return $this->container['area_path'];
    }

    /**
     * Sets area_path
     *
     * @param string $area_path The area path for the work item
     *
     * @return $this
     */
    public function setAreaPath($area_path)
    {
        $this->container['area_path'] = $area_path;

        return $this;
    }

    /**
     * Gets assigned_to
     *
     * @return string
     */
    public function getAssignedTo()
    {
        return $this->container['assigned_to'];
    }

    /**
     * Sets assigned_to
     *
     * @param string $assigned_to The person who the work item is assigned to
     *
     * @return $this
     */
    public function setAssignedTo($assigned_to)
    {
        $this->container['assigned_to'] = $assigned_to;

        return $this;
    }

    /**
     * Gets backlog_priority
     *
     * @return double
     */
    public function getBacklogPriority()
    {
        return $this->container['backlog_priority'];
    }

    /**
     * Sets backlog_priority
     *
     * @param double $backlog_priority The Backlog Priority for the work item
     *
     * @return $this
     */
    public function setBacklogPriority($backlog_priority)
    {
        $this->container['backlog_priority'] = $backlog_priority;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by The person who last changed the work item
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets changed_date
     *
     * @return \DateTime
     */
    public function getChangedDate()
    {
        return $this->container['changed_date'];
    }

    /**
     * Sets changed_date
     *
     * @param \DateTime $changed_date The date and time that the work item was last changed
     *
     * @return $this
     */
    public function setChangedDate($changed_date)
    {
        $this->container['changed_date'] = $changed_date;

        return $this;
    }

    /**
     * Gets client_abbreviation
     *
     * @return string
     */
    public function getClientAbbreviation()
    {
        return $this->container['client_abbreviation'];
    }

    /**
     * Sets client_abbreviation
     *
     * @param string $client_abbreviation The client who is associated with the work item
     *
     * @return $this
     */
    public function setClientAbbreviation($client_abbreviation)
    {
        $this->container['client_abbreviation'] = $client_abbreviation;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The person who created the work item
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date and time that the work item was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets csl_number
     *
     * @return string
     */
    public function getCslNumber()
    {
        return $this->container['csl_number'];
    }

    /**
     * Sets csl_number
     *
     * @param string $csl_number The CSL number that is associated with the work item
     *
     * @return $this
     */
    public function setCslNumber($csl_number)
    {
        $this->container['csl_number'] = $csl_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the work item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets history
     *
     * @return string
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param string $history The History for the work item
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets iteration_id
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iteration_id'];
    }

    /**
     * Sets iteration_id
     *
     * @param int $iteration_id The iteration ID of the work item
     *
     * @return $this
     */
    public function setIterationId($iteration_id)
    {
        $this->container['iteration_id'] = $iteration_id;

        return $this;
    }

    /**
     * Gets iteration_path
     *
     * @return string
     */
    public function getIterationPath()
    {
        return $this->container['iteration_path'];
    }

    /**
     * Sets iteration_path
     *
     * @param string $iteration_path The iteration path of the work item
     *
     * @return $this
     */
    public function setIterationPath($iteration_path)
    {
        $this->container['iteration_path'] = $iteration_path;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name The node name for the work item
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets resolved_reason
     *
     * @return string
     */
    public function getResolvedReason()
    {
        return $this->container['resolved_reason'];
    }

    /**
     * Sets resolved_reason
     *
     * @param string $resolved_reason The reason the work item was marked as Resolved
     *
     * @return $this
     */
    public function setResolvedReason($resolved_reason)
    {
        $this->container['resolved_reason'] = $resolved_reason;

        return $this;
    }

    /**
     * Gets revised_date
     *
     * @return \DateTime
     */
    public function getRevisedDate()
    {
        return $this->container['revised_date'];
    }

    /**
     * Sets revised_date
     *
     * @param \DateTime $revised_date The date and time the work item was revised
     *
     * @return $this
     */
    public function setRevisedDate($revised_date)
    {
        $this->container['revised_date'] = $revised_date;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision The revision number of the work item
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state A string that describes the state of the work item
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags The tags associated with the work item
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the work item
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL for the work item
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


