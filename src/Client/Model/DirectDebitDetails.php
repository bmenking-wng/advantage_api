<?php
/**
 * DirectDebitDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * DirectDebitDetails Class Doc Comment
 *
 * @category Class
 * @description Contains fields that may be required by ARPDDP prompts for Branch name/address, origin and consent date
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectDebitDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DirectDebitDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branch_name' => 'string',
        'branch_street' => 'string',
        'branch_street2' => 'string',
        'branch_street3' => 'string',
        'branch_city' => 'string',
        'branch_state' => 'string',
        'branch_country' => 'string',
        'branch_postal_code' => 'string',
        'origin' => 'string',
        'consent_date' => '\DateTime',
        'personal_id' => 'string',
        'collection_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branch_name' => null,
        'branch_street' => null,
        'branch_street2' => null,
        'branch_street3' => null,
        'branch_city' => null,
        'branch_state' => null,
        'branch_country' => null,
        'branch_postal_code' => null,
        'origin' => null,
        'consent_date' => 'date-time',
        'personal_id' => null,
        'collection_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch_name' => 'BranchName',
        'branch_street' => 'BranchStreet',
        'branch_street2' => 'BranchStreet2',
        'branch_street3' => 'BranchStreet3',
        'branch_city' => 'BranchCity',
        'branch_state' => 'BranchState',
        'branch_country' => 'BranchCountry',
        'branch_postal_code' => 'BranchPostalCode',
        'origin' => 'Origin',
        'consent_date' => 'ConsentDate',
        'personal_id' => 'PersonalId',
        'collection_date' => 'CollectionDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch_name' => 'setBranchName',
        'branch_street' => 'setBranchStreet',
        'branch_street2' => 'setBranchStreet2',
        'branch_street3' => 'setBranchStreet3',
        'branch_city' => 'setBranchCity',
        'branch_state' => 'setBranchState',
        'branch_country' => 'setBranchCountry',
        'branch_postal_code' => 'setBranchPostalCode',
        'origin' => 'setOrigin',
        'consent_date' => 'setConsentDate',
        'personal_id' => 'setPersonalId',
        'collection_date' => 'setCollectionDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch_name' => 'getBranchName',
        'branch_street' => 'getBranchStreet',
        'branch_street2' => 'getBranchStreet2',
        'branch_street3' => 'getBranchStreet3',
        'branch_city' => 'getBranchCity',
        'branch_state' => 'getBranchState',
        'branch_country' => 'getBranchCountry',
        'branch_postal_code' => 'getBranchPostalCode',
        'origin' => 'getOrigin',
        'consent_date' => 'getConsentDate',
        'personal_id' => 'getPersonalId',
        'collection_date' => 'getCollectionDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch_name'] = isset($data['branch_name']) ? $data['branch_name'] : null;
        $this->container['branch_street'] = isset($data['branch_street']) ? $data['branch_street'] : null;
        $this->container['branch_street2'] = isset($data['branch_street2']) ? $data['branch_street2'] : null;
        $this->container['branch_street3'] = isset($data['branch_street3']) ? $data['branch_street3'] : null;
        $this->container['branch_city'] = isset($data['branch_city']) ? $data['branch_city'] : null;
        $this->container['branch_state'] = isset($data['branch_state']) ? $data['branch_state'] : null;
        $this->container['branch_country'] = isset($data['branch_country']) ? $data['branch_country'] : null;
        $this->container['branch_postal_code'] = isset($data['branch_postal_code']) ? $data['branch_postal_code'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['consent_date'] = isset($data['consent_date']) ? $data['consent_date'] : null;
        $this->container['personal_id'] = isset($data['personal_id']) ? $data['personal_id'] : null;
        $this->container['collection_date'] = isset($data['collection_date']) ? $data['collection_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch_name
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branch_name'];
    }

    /**
     * Sets branch_name
     *
     * @param string $branch_name The name of this bank branch
     *
     * @return $this
     */
    public function setBranchName($branch_name)
    {
        $this->container['branch_name'] = $branch_name;

        return $this;
    }

    /**
     * Gets branch_street
     *
     * @return string
     */
    public function getBranchStreet()
    {
        return $this->container['branch_street'];
    }

    /**
     * Sets branch_street
     *
     * @param string $branch_street Street address of this bank
     *
     * @return $this
     */
    public function setBranchStreet($branch_street)
    {
        $this->container['branch_street'] = $branch_street;

        return $this;
    }

    /**
     * Gets branch_street2
     *
     * @return string
     */
    public function getBranchStreet2()
    {
        return $this->container['branch_street2'];
    }

    /**
     * Sets branch_street2
     *
     * @param string $branch_street2 Second line street address for bank
     *
     * @return $this
     */
    public function setBranchStreet2($branch_street2)
    {
        $this->container['branch_street2'] = $branch_street2;

        return $this;
    }

    /**
     * Gets branch_street3
     *
     * @return string
     */
    public function getBranchStreet3()
    {
        return $this->container['branch_street3'];
    }

    /**
     * Sets branch_street3
     *
     * @param string $branch_street3 Third line of street address for bank
     *
     * @return $this
     */
    public function setBranchStreet3($branch_street3)
    {
        $this->container['branch_street3'] = $branch_street3;

        return $this;
    }

    /**
     * Gets branch_city
     *
     * @return string
     */
    public function getBranchCity()
    {
        return $this->container['branch_city'];
    }

    /**
     * Sets branch_city
     *
     * @param string $branch_city City in which this bank branch is located
     *
     * @return $this
     */
    public function setBranchCity($branch_city)
    {
        $this->container['branch_city'] = $branch_city;

        return $this;
    }

    /**
     * Gets branch_state
     *
     * @return string
     */
    public function getBranchState()
    {
        return $this->container['branch_state'];
    }

    /**
     * Sets branch_state
     *
     * @param string $branch_state State in which this bank branch is located
     *
     * @return $this
     */
    public function setBranchState($branch_state)
    {
        $this->container['branch_state'] = $branch_state;

        return $this;
    }

    /**
     * Gets branch_country
     *
     * @return string
     */
    public function getBranchCountry()
    {
        return $this->container['branch_country'];
    }

    /**
     * Sets branch_country
     *
     * @param string $branch_country Country in which this bank branch is located
     *
     * @return $this
     */
    public function setBranchCountry($branch_country)
    {
        $this->container['branch_country'] = $branch_country;

        return $this;
    }

    /**
     * Gets branch_postal_code
     *
     * @return string
     */
    public function getBranchPostalCode()
    {
        return $this->container['branch_postal_code'];
    }

    /**
     * Sets branch_postal_code
     *
     * @param string $branch_postal_code The postal (zip) code of this bank branch
     *
     * @return $this
     */
    public function setBranchPostalCode($branch_postal_code)
    {
        $this->container['branch_postal_code'] = $branch_postal_code;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Bank Account Origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets consent_date
     *
     * @return \DateTime
     */
    public function getConsentDate()
    {
        return $this->container['consent_date'];
    }

    /**
     * Sets consent_date
     *
     * @param \DateTime $consent_date The account consent date
     *
     * @return $this
     */
    public function setConsentDate($consent_date)
    {
        $this->container['consent_date'] = $consent_date;

        return $this;
    }

    /**
     * Gets personal_id
     *
     * @return string
     */
    public function getPersonalId()
    {
        return $this->container['personal_id'];
    }

    /**
     * Sets personal_id
     *
     * @param string $personal_id Personal ID number associated with direct debit account
     *
     * @return $this
     */
    public function setPersonalId($personal_id)
    {
        $this->container['personal_id'] = $personal_id;

        return $this;
    }

    /**
     * Gets collection_date
     *
     * @return \DateTime
     */
    public function getCollectionDate()
    {
        return $this->container['collection_date'];
    }

    /**
     * Sets collection_date
     *
     * @param \DateTime $collection_date The account collection date
     *
     * @return $this
     */
    public function setCollectionDate($collection_date)
    {
        $this->container['collection_date'] = $collection_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


