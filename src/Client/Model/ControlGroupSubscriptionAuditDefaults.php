<?php
/**
 * ControlGroupSubscriptionAuditDefaults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ControlGroupSubscriptionAuditDefaults Class Doc Comment
 *
 * @category Class
 * @description Subscription Audit Defaults for Control Group Model
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ControlGroupSubscriptionAuditDefaults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ControlGroupSubscriptionAuditDefaults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_industry_code' => 'string',
        'business_title_code' => 'string',
        'address_type_code' => 'string',
        'qualification_source_code' => 'string',
        'date_signed' => '\DateTime',
        'date_classified' => '\DateTime',
        'back_to_audit_flag' => 'bool',
        'unit_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'business_industry_code' => null,
        'business_title_code' => null,
        'address_type_code' => null,
        'qualification_source_code' => null,
        'date_signed' => 'date-time',
        'date_classified' => 'date-time',
        'back_to_audit_flag' => null,
        'unit_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_industry_code' => 'BusinessIndustryCode',
        'business_title_code' => 'BusinessTitleCode',
        'address_type_code' => 'AddressTypeCode',
        'qualification_source_code' => 'QualificationSourceCode',
        'date_signed' => 'DateSigned',
        'date_classified' => 'DateClassified',
        'back_to_audit_flag' => 'BackToAuditFlag',
        'unit_number' => 'UnitNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_industry_code' => 'setBusinessIndustryCode',
        'business_title_code' => 'setBusinessTitleCode',
        'address_type_code' => 'setAddressTypeCode',
        'qualification_source_code' => 'setQualificationSourceCode',
        'date_signed' => 'setDateSigned',
        'date_classified' => 'setDateClassified',
        'back_to_audit_flag' => 'setBackToAuditFlag',
        'unit_number' => 'setUnitNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_industry_code' => 'getBusinessIndustryCode',
        'business_title_code' => 'getBusinessTitleCode',
        'address_type_code' => 'getAddressTypeCode',
        'qualification_source_code' => 'getQualificationSourceCode',
        'date_signed' => 'getDateSigned',
        'date_classified' => 'getDateClassified',
        'back_to_audit_flag' => 'getBackToAuditFlag',
        'unit_number' => 'getUnitNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_industry_code'] = isset($data['business_industry_code']) ? $data['business_industry_code'] : null;
        $this->container['business_title_code'] = isset($data['business_title_code']) ? $data['business_title_code'] : null;
        $this->container['address_type_code'] = isset($data['address_type_code']) ? $data['address_type_code'] : null;
        $this->container['qualification_source_code'] = isset($data['qualification_source_code']) ? $data['qualification_source_code'] : null;
        $this->container['date_signed'] = isset($data['date_signed']) ? $data['date_signed'] : null;
        $this->container['date_classified'] = isset($data['date_classified']) ? $data['date_classified'] : null;
        $this->container['back_to_audit_flag'] = isset($data['back_to_audit_flag']) ? $data['back_to_audit_flag'] : null;
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_industry_code
     *
     * @return string
     */
    public function getBusinessIndustryCode()
    {
        return $this->container['business_industry_code'];
    }

    /**
     * Sets business_industry_code
     *
     * @param string $business_industry_code Default business/industry code
     *
     * @return $this
     */
    public function setBusinessIndustryCode($business_industry_code)
    {
        $this->container['business_industry_code'] = $business_industry_code;

        return $this;
    }

    /**
     * Gets business_title_code
     *
     * @return string
     */
    public function getBusinessTitleCode()
    {
        return $this->container['business_title_code'];
    }

    /**
     * Sets business_title_code
     *
     * @param string $business_title_code Default Business Title
     *
     * @return $this
     */
    public function setBusinessTitleCode($business_title_code)
    {
        $this->container['business_title_code'] = $business_title_code;

        return $this;
    }

    /**
     * Gets address_type_code
     *
     * @return string
     */
    public function getAddressTypeCode()
    {
        return $this->container['address_type_code'];
    }

    /**
     * Sets address_type_code
     *
     * @param string $address_type_code Default Address Type
     *
     * @return $this
     */
    public function setAddressTypeCode($address_type_code)
    {
        $this->container['address_type_code'] = $address_type_code;

        return $this;
    }

    /**
     * Gets qualification_source_code
     *
     * @return string
     */
    public function getQualificationSourceCode()
    {
        return $this->container['qualification_source_code'];
    }

    /**
     * Sets qualification_source_code
     *
     * @param string $qualification_source_code Default Qualification Source
     *
     * @return $this
     */
    public function setQualificationSourceCode($qualification_source_code)
    {
        $this->container['qualification_source_code'] = $qualification_source_code;

        return $this;
    }

    /**
     * Gets date_signed
     *
     * @return \DateTime
     */
    public function getDateSigned()
    {
        return $this->container['date_signed'];
    }

    /**
     * Sets date_signed
     *
     * @param \DateTime $date_signed Default Date Signed
     *
     * @return $this
     */
    public function setDateSigned($date_signed)
    {
        $this->container['date_signed'] = $date_signed;

        return $this;
    }

    /**
     * Gets date_classified
     *
     * @return \DateTime
     */
    public function getDateClassified()
    {
        return $this->container['date_classified'];
    }

    /**
     * Sets date_classified
     *
     * @param \DateTime $date_classified Default Class Date
     *
     * @return $this
     */
    public function setDateClassified($date_classified)
    {
        $this->container['date_classified'] = $date_classified;

        return $this;
    }

    /**
     * Gets back_to_audit_flag
     *
     * @return bool
     */
    public function getBackToAuditFlag()
    {
        return $this->container['back_to_audit_flag'];
    }

    /**
     * Sets back_to_audit_flag
     *
     * @param bool $back_to_audit_flag Are back-to-audit (BTA) transactions allowed in this control group?
     *
     * @return $this
     */
    public function setBackToAuditFlag($back_to_audit_flag)
    {
        $this->container['back_to_audit_flag'] = $back_to_audit_flag;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number Default unit number
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


