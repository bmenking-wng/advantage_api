<?php
/**
 * ShipVia
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ShipVia Class Doc Comment
 *
 * @category Class
 * @description Information for ShipVia
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipVia implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipVia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_currency_code' => 'string',
        'charge_customer_account' => 'string',
        'company_name' => 'string',
        'customer_account_mask' => 'string',
        'name' => 'string',
        'flat_shipping_rate' => 'double',
        'is_web_enabled' => 'bool',
        'shipper_url' => 'string',
        'shipping_company_name' => 'string',
        'ship_via_code' => 'string',
        'ship_via_type_code' => 'string',
        'surcharge_percent' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_currency_code' => null,
        'charge_customer_account' => null,
        'company_name' => null,
        'customer_account_mask' => null,
        'name' => null,
        'flat_shipping_rate' => 'double',
        'is_web_enabled' => null,
        'shipper_url' => null,
        'shipping_company_name' => null,
        'ship_via_code' => null,
        'ship_via_type_code' => null,
        'surcharge_percent' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_currency_code' => 'BillingCurrencyCode',
        'charge_customer_account' => 'ChargeCustomerAccount',
        'company_name' => 'CompanyName',
        'customer_account_mask' => 'CustomerAccountMask',
        'name' => 'Name',
        'flat_shipping_rate' => 'FlatShippingRate',
        'is_web_enabled' => 'IsWebEnabled',
        'shipper_url' => 'ShipperUrl',
        'shipping_company_name' => 'ShippingCompanyName',
        'ship_via_code' => 'ShipViaCode',
        'ship_via_type_code' => 'ShipViaTypeCode',
        'surcharge_percent' => 'SurchargePercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_currency_code' => 'setBillingCurrencyCode',
        'charge_customer_account' => 'setChargeCustomerAccount',
        'company_name' => 'setCompanyName',
        'customer_account_mask' => 'setCustomerAccountMask',
        'name' => 'setName',
        'flat_shipping_rate' => 'setFlatShippingRate',
        'is_web_enabled' => 'setIsWebEnabled',
        'shipper_url' => 'setShipperUrl',
        'shipping_company_name' => 'setShippingCompanyName',
        'ship_via_code' => 'setShipViaCode',
        'ship_via_type_code' => 'setShipViaTypeCode',
        'surcharge_percent' => 'setSurchargePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_currency_code' => 'getBillingCurrencyCode',
        'charge_customer_account' => 'getChargeCustomerAccount',
        'company_name' => 'getCompanyName',
        'customer_account_mask' => 'getCustomerAccountMask',
        'name' => 'getName',
        'flat_shipping_rate' => 'getFlatShippingRate',
        'is_web_enabled' => 'getIsWebEnabled',
        'shipper_url' => 'getShipperUrl',
        'shipping_company_name' => 'getShippingCompanyName',
        'ship_via_code' => 'getShipViaCode',
        'ship_via_type_code' => 'getShipViaTypeCode',
        'surcharge_percent' => 'getSurchargePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPPING_COMPANY_NAME_DHL_GLOBAL = 'DhlGlobal';
    const SHIPPING_COMPANY_NAME_FEDERAL_EXPRESS = 'FederalExpress';
    const SHIPPING_COMPANY_NAME_UNITED_PARCEL_SERVICE = 'UnitedParcelService';
    const SHIPPING_COMPANY_NAME_UNITED_STATES_POSTAL_SERVICE = 'UnitedStatesPostalService';
    const SHIPPING_COMPANY_NAME_YELLOW_TRANSPORTATION = 'YellowTransportation';
    const SHIP_VIA_TYPE_CODE_CHANGE_BY_WEIGHT_AND_PRICE = 'ChangeByWeightAndPrice';
    const SHIP_VIA_TYPE_CODE_CHANGE_BY_NEITHER_WEIGHT_NOR_PRICE = 'ChangeByNeitherWeightNorPrice';
    const SHIP_VIA_TYPE_CODE_CHARGE_BY_ORDER_PRICE_ONLY = 'ChargeByOrderPriceOnly';
    const SHIP_VIA_TYPE_CODE_CHARGE_BY_PRICE_ONLY = 'ChargeByPriceOnly';
    const SHIP_VIA_TYPE_CODE_CHARGE_BY_TYPE_OF_PRODUCT = 'ChargeByTypeOfProduct';
    const SHIP_VIA_TYPE_CODE_CHARGE_BY_WEIGHT_ONLY = 'ChargeByWeightOnly';
    const SHIP_VIA_TYPE_CODE_CHARGE_BY_ZONE_AND_WEIGHT = 'ChargeByZoneAndWeight';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingCompanyNameAllowableValues()
    {
        return [
            self::SHIPPING_COMPANY_NAME_DHL_GLOBAL,
            self::SHIPPING_COMPANY_NAME_FEDERAL_EXPRESS,
            self::SHIPPING_COMPANY_NAME_UNITED_PARCEL_SERVICE,
            self::SHIPPING_COMPANY_NAME_UNITED_STATES_POSTAL_SERVICE,
            self::SHIPPING_COMPANY_NAME_YELLOW_TRANSPORTATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipViaTypeCodeAllowableValues()
    {
        return [
            self::SHIP_VIA_TYPE_CODE_CHANGE_BY_WEIGHT_AND_PRICE,
            self::SHIP_VIA_TYPE_CODE_CHANGE_BY_NEITHER_WEIGHT_NOR_PRICE,
            self::SHIP_VIA_TYPE_CODE_CHARGE_BY_ORDER_PRICE_ONLY,
            self::SHIP_VIA_TYPE_CODE_CHARGE_BY_PRICE_ONLY,
            self::SHIP_VIA_TYPE_CODE_CHARGE_BY_TYPE_OF_PRODUCT,
            self::SHIP_VIA_TYPE_CODE_CHARGE_BY_WEIGHT_ONLY,
            self::SHIP_VIA_TYPE_CODE_CHARGE_BY_ZONE_AND_WEIGHT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['charge_customer_account'] = isset($data['charge_customer_account']) ? $data['charge_customer_account'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['customer_account_mask'] = isset($data['customer_account_mask']) ? $data['customer_account_mask'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['flat_shipping_rate'] = isset($data['flat_shipping_rate']) ? $data['flat_shipping_rate'] : null;
        $this->container['is_web_enabled'] = isset($data['is_web_enabled']) ? $data['is_web_enabled'] : null;
        $this->container['shipper_url'] = isset($data['shipper_url']) ? $data['shipper_url'] : null;
        $this->container['shipping_company_name'] = isset($data['shipping_company_name']) ? $data['shipping_company_name'] : null;
        $this->container['ship_via_code'] = isset($data['ship_via_code']) ? $data['ship_via_code'] : null;
        $this->container['ship_via_type_code'] = isset($data['ship_via_type_code']) ? $data['ship_via_type_code'] : null;
        $this->container['surcharge_percent'] = isset($data['surcharge_percent']) ? $data['surcharge_percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShippingCompanyNameAllowableValues();
        if (!is_null($this->container['shipping_company_name']) && !in_array($this->container['shipping_company_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_company_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipViaTypeCodeAllowableValues();
        if (!is_null($this->container['ship_via_type_code']) && !in_array($this->container['ship_via_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ship_via_type_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_currency_code
     *
     * @return string
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     *
     * @param string $billing_currency_code Billing Currency Code
     *
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets charge_customer_account
     *
     * @return string
     */
    public function getChargeCustomerAccount()
    {
        return $this->container['charge_customer_account'];
    }

    /**
     * Sets charge_customer_account
     *
     * @param string $charge_customer_account Charge Customer Account?
     *
     * @return $this
     */
    public function setChargeCustomerAccount($charge_customer_account)
    {
        $this->container['charge_customer_account'] = $charge_customer_account;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Value of Company Name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets customer_account_mask
     *
     * @return string
     */
    public function getCustomerAccountMask()
    {
        return $this->container['customer_account_mask'];
    }

    /**
     * Sets customer_account_mask
     *
     * @param string $customer_account_mask Customer Account Mask
     *
     * @return $this
     */
    public function setCustomerAccountMask($customer_account_mask)
    {
        $this->container['customer_account_mask'] = $customer_account_mask;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets flat_shipping_rate
     *
     * @return double
     */
    public function getFlatShippingRate()
    {
        return $this->container['flat_shipping_rate'];
    }

    /**
     * Sets flat_shipping_rate
     *
     * @param double $flat_shipping_rate Flat Shipping Rate
     *
     * @return $this
     */
    public function setFlatShippingRate($flat_shipping_rate)
    {
        $this->container['flat_shipping_rate'] = $flat_shipping_rate;

        return $this;
    }

    /**
     * Gets is_web_enabled
     *
     * @return bool
     */
    public function getIsWebEnabled()
    {
        return $this->container['is_web_enabled'];
    }

    /**
     * Sets is_web_enabled
     *
     * @param bool $is_web_enabled Web Enabled?
     *
     * @return $this
     */
    public function setIsWebEnabled($is_web_enabled)
    {
        $this->container['is_web_enabled'] = $is_web_enabled;

        return $this;
    }

    /**
     * Gets shipper_url
     *
     * @return string
     */
    public function getShipperUrl()
    {
        return $this->container['shipper_url'];
    }

    /**
     * Sets shipper_url
     *
     * @param string $shipper_url Value of Shipper URL
     *
     * @return $this
     */
    public function setShipperUrl($shipper_url)
    {
        $this->container['shipper_url'] = $shipper_url;

        return $this;
    }

    /**
     * Gets shipping_company_name
     *
     * @return string
     */
    public function getShippingCompanyName()
    {
        return $this->container['shipping_company_name'];
    }

    /**
     * Sets shipping_company_name
     *
     * @param string $shipping_company_name Shipping Company Name
     *
     * @return $this
     */
    public function setShippingCompanyName($shipping_company_name)
    {
        $allowedValues = $this->getShippingCompanyNameAllowableValues();
        if (!is_null($shipping_company_name) && !in_array($shipping_company_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_company_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_company_name'] = $shipping_company_name;

        return $this;
    }

    /**
     * Gets ship_via_code
     *
     * @return string
     */
    public function getShipViaCode()
    {
        return $this->container['ship_via_code'];
    }

    /**
     * Sets ship_via_code
     *
     * @param string $ship_via_code Ship Via Code
     *
     * @return $this
     */
    public function setShipViaCode($ship_via_code)
    {
        $this->container['ship_via_code'] = $ship_via_code;

        return $this;
    }

    /**
     * Gets ship_via_type_code
     *
     * @return string
     */
    public function getShipViaTypeCode()
    {
        return $this->container['ship_via_type_code'];
    }

    /**
     * Sets ship_via_type_code
     *
     * @param string $ship_via_type_code Ship Via Type Code
     *
     * @return $this
     */
    public function setShipViaTypeCode($ship_via_type_code)
    {
        $allowedValues = $this->getShipViaTypeCodeAllowableValues();
        if (!is_null($ship_via_type_code) && !in_array($ship_via_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ship_via_type_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ship_via_type_code'] = $ship_via_type_code;

        return $this;
    }

    /**
     * Gets surcharge_percent
     *
     * @return double
     */
    public function getSurchargePercent()
    {
        return $this->container['surcharge_percent'];
    }

    /**
     * Sets surcharge_percent
     *
     * @param double $surcharge_percent Surcharge Percent
     *
     * @return $this
     */
    public function setSurchargePercent($surcharge_percent)
    {
        $this->container['surcharge_percent'] = $surcharge_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


