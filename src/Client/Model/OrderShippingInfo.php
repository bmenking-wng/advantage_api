<?php
/**
 * OrderShippingInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderShippingInfo Class Doc Comment
 *
 * @category Class
 * @description Information pertaining to shipping an order.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderShippingInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderShippingInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_return' => 'bool',
        'is_rush_ship' => 'bool',
        'requested_ship_via_code' => 'string',
        'is_free_shipping' => 'bool',
        'ship_date' => '\DateTime',
        'actual_ship_date' => '\DateTime',
        'is_post_shipped' => 'bool',
        'is_drop_shipped' => 'bool',
        'actual_ship_via_code' => 'string',
        'ship_through_customer_number' => 'string',
        'ship_to_count' => 'int',
        'tracking_information' => '\Advantage\Client\Model\OrderTrackingInformation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_return' => null,
        'is_rush_ship' => null,
        'requested_ship_via_code' => null,
        'is_free_shipping' => null,
        'ship_date' => 'date-time',
        'actual_ship_date' => 'date-time',
        'is_post_shipped' => null,
        'is_drop_shipped' => null,
        'actual_ship_via_code' => null,
        'ship_through_customer_number' => null,
        'ship_to_count' => 'int32',
        'tracking_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_return' => 'IsReturn',
        'is_rush_ship' => 'IsRushShip',
        'requested_ship_via_code' => 'RequestedShipViaCode',
        'is_free_shipping' => 'IsFreeShipping',
        'ship_date' => 'ShipDate',
        'actual_ship_date' => 'ActualShipDate',
        'is_post_shipped' => 'IsPostShipped',
        'is_drop_shipped' => 'IsDropShipped',
        'actual_ship_via_code' => 'ActualShipViaCode',
        'ship_through_customer_number' => 'ShipThroughCustomerNumber',
        'ship_to_count' => 'ShipToCount',
        'tracking_information' => 'TrackingInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_return' => 'setIsReturn',
        'is_rush_ship' => 'setIsRushShip',
        'requested_ship_via_code' => 'setRequestedShipViaCode',
        'is_free_shipping' => 'setIsFreeShipping',
        'ship_date' => 'setShipDate',
        'actual_ship_date' => 'setActualShipDate',
        'is_post_shipped' => 'setIsPostShipped',
        'is_drop_shipped' => 'setIsDropShipped',
        'actual_ship_via_code' => 'setActualShipViaCode',
        'ship_through_customer_number' => 'setShipThroughCustomerNumber',
        'ship_to_count' => 'setShipToCount',
        'tracking_information' => 'setTrackingInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_return' => 'getIsReturn',
        'is_rush_ship' => 'getIsRushShip',
        'requested_ship_via_code' => 'getRequestedShipViaCode',
        'is_free_shipping' => 'getIsFreeShipping',
        'ship_date' => 'getShipDate',
        'actual_ship_date' => 'getActualShipDate',
        'is_post_shipped' => 'getIsPostShipped',
        'is_drop_shipped' => 'getIsDropShipped',
        'actual_ship_via_code' => 'getActualShipViaCode',
        'ship_through_customer_number' => 'getShipThroughCustomerNumber',
        'ship_to_count' => 'getShipToCount',
        'tracking_information' => 'getTrackingInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_return'] = isset($data['is_return']) ? $data['is_return'] : null;
        $this->container['is_rush_ship'] = isset($data['is_rush_ship']) ? $data['is_rush_ship'] : null;
        $this->container['requested_ship_via_code'] = isset($data['requested_ship_via_code']) ? $data['requested_ship_via_code'] : null;
        $this->container['is_free_shipping'] = isset($data['is_free_shipping']) ? $data['is_free_shipping'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['actual_ship_date'] = isset($data['actual_ship_date']) ? $data['actual_ship_date'] : null;
        $this->container['is_post_shipped'] = isset($data['is_post_shipped']) ? $data['is_post_shipped'] : null;
        $this->container['is_drop_shipped'] = isset($data['is_drop_shipped']) ? $data['is_drop_shipped'] : null;
        $this->container['actual_ship_via_code'] = isset($data['actual_ship_via_code']) ? $data['actual_ship_via_code'] : null;
        $this->container['ship_through_customer_number'] = isset($data['ship_through_customer_number']) ? $data['ship_through_customer_number'] : null;
        $this->container['ship_to_count'] = isset($data['ship_to_count']) ? $data['ship_to_count'] : null;
        $this->container['tracking_information'] = isset($data['tracking_information']) ? $data['tracking_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_return
     *
     * @return bool
     */
    public function getIsReturn()
    {
        return $this->container['is_return'];
    }

    /**
     * Sets is_return
     *
     * @param bool $is_return Is this a return order? A return order is generated to track products that are returned by the customer.
     *
     * @return $this
     */
    public function setIsReturn($is_return)
    {
        $this->container['is_return'] = $is_return;

        return $this;
    }

    /**
     * Gets is_rush_ship
     *
     * @return bool
     */
    public function getIsRushShip()
    {
        return $this->container['is_rush_ship'];
    }

    /**
     * Sets is_rush_ship
     *
     * @param bool $is_rush_ship Is this order flagged to be shipped immediately?
     *
     * @return $this
     */
    public function setIsRushShip($is_rush_ship)
    {
        $this->container['is_rush_ship'] = $is_rush_ship;

        return $this;
    }

    /**
     * Gets requested_ship_via_code
     *
     * @return string
     */
    public function getRequestedShipViaCode()
    {
        return $this->container['requested_ship_via_code'];
    }

    /**
     * Sets requested_ship_via_code
     *
     * @param string $requested_ship_via_code The requested shipping method for the order.
     *
     * @return $this
     */
    public function setRequestedShipViaCode($requested_ship_via_code)
    {
        $this->container['requested_ship_via_code'] = $requested_ship_via_code;

        return $this;
    }

    /**
     * Gets is_free_shipping
     *
     * @return bool
     */
    public function getIsFreeShipping()
    {
        return $this->container['is_free_shipping'];
    }

    /**
     * Sets is_free_shipping
     *
     * @param bool $is_free_shipping Do all items in this order receive free shipping?
     *
     * @return $this
     */
    public function setIsFreeShipping($is_free_shipping)
    {
        $this->container['is_free_shipping'] = $is_free_shipping;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime $ship_date The requested date for the order to be picked for shipping.
     *
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets actual_ship_date
     *
     * @return \DateTime
     */
    public function getActualShipDate()
    {
        return $this->container['actual_ship_date'];
    }

    /**
     * Sets actual_ship_date
     *
     * @param \DateTime $actual_ship_date The actual ship date for the order.
     *
     * @return $this
     */
    public function setActualShipDate($actual_ship_date)
    {
        $this->container['actual_ship_date'] = $actual_ship_date;

        return $this;
    }

    /**
     * Gets is_post_shipped
     *
     * @return bool
     */
    public function getIsPostShipped()
    {
        return $this->container['is_post_shipped'];
    }

    /**
     * Sets is_post_shipped
     *
     * @param bool $is_post_shipped Has the order already been shipped?
     *
     * @return $this
     */
    public function setIsPostShipped($is_post_shipped)
    {
        $this->container['is_post_shipped'] = $is_post_shipped;

        return $this;
    }

    /**
     * Gets is_drop_shipped
     *
     * @return bool
     */
    public function getIsDropShipped()
    {
        return $this->container['is_drop_shipped'];
    }

    /**
     * Sets is_drop_shipped
     *
     * @param bool $is_drop_shipped Has the order shipped from the printer?
     *
     * @return $this
     */
    public function setIsDropShipped($is_drop_shipped)
    {
        $this->container['is_drop_shipped'] = $is_drop_shipped;

        return $this;
    }

    /**
     * Gets actual_ship_via_code
     *
     * @return string
     */
    public function getActualShipViaCode()
    {
        return $this->container['actual_ship_via_code'];
    }

    /**
     * Sets actual_ship_via_code
     *
     * @param string $actual_ship_via_code The actual shipping method for the order.
     *
     * @return $this
     */
    public function setActualShipViaCode($actual_ship_via_code)
    {
        $this->container['actual_ship_via_code'] = $actual_ship_via_code;

        return $this;
    }

    /**
     * Gets ship_through_customer_number
     *
     * @return string
     */
    public function getShipThroughCustomerNumber()
    {
        return $this->container['ship_through_customer_number'];
    }

    /**
     * Sets ship_through_customer_number
     *
     * @param string $ship_through_customer_number The customer number of the freight forwarder that will receive the shipment to distribute to the ship-to.
     *
     * @return $this
     */
    public function setShipThroughCustomerNumber($ship_through_customer_number)
    {
        $this->container['ship_through_customer_number'] = $ship_through_customer_number;

        return $this;
    }

    /**
     * Gets ship_to_count
     *
     * @return int
     */
    public function getShipToCount()
    {
        return $this->container['ship_to_count'];
    }

    /**
     * Sets ship_to_count
     *
     * @param int $ship_to_count The number of distinct ship-to addresses.
     *
     * @return $this
     */
    public function setShipToCount($ship_to_count)
    {
        $this->container['ship_to_count'] = $ship_to_count;

        return $this;
    }

    /**
     * Gets tracking_information
     *
     * @return \Advantage\Client\Model\OrderTrackingInformation[]
     */
    public function getTrackingInformation()
    {
        return $this->container['tracking_information'];
    }

    /**
     * Sets tracking_information
     *
     * @param \Advantage\Client\Model\OrderTrackingInformation[] $tracking_information Tracking information for the various shipments for the order.
     *
     * @return $this
     */
    public function setTrackingInformation($tracking_information)
    {
        $this->container['tracking_information'] = $tracking_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


