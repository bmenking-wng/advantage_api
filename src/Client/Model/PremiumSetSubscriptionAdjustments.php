<?php
/**
 * PremiumSetSubscriptionAdjustments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PremiumSetSubscriptionAdjustments Class Doc Comment
 *
 * @category Class
 * @description Information for subscription adjustments on a premium set.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PremiumSetSubscriptionAdjustments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PremiumSetSubscriptionAdjustments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'publication_code' => 'string',
        'issues_to_extend' => 'int',
        'reduction_rate_by_amount' => 'double',
        'reduction_rate_by_currency' => 'string',
        'adjustment_reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'publication_code' => null,
        'issues_to_extend' => 'int32',
        'reduction_rate_by_amount' => 'double',
        'reduction_rate_by_currency' => null,
        'adjustment_reason_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'publication_code' => 'PublicationCode',
        'issues_to_extend' => 'IssuesToExtend',
        'reduction_rate_by_amount' => 'ReductionRateByAmount',
        'reduction_rate_by_currency' => 'ReductionRateByCurrency',
        'adjustment_reason_code' => 'AdjustmentReasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'publication_code' => 'setPublicationCode',
        'issues_to_extend' => 'setIssuesToExtend',
        'reduction_rate_by_amount' => 'setReductionRateByAmount',
        'reduction_rate_by_currency' => 'setReductionRateByCurrency',
        'adjustment_reason_code' => 'setAdjustmentReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'publication_code' => 'getPublicationCode',
        'issues_to_extend' => 'getIssuesToExtend',
        'reduction_rate_by_amount' => 'getReductionRateByAmount',
        'reduction_rate_by_currency' => 'getReductionRateByCurrency',
        'adjustment_reason_code' => 'getAdjustmentReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['publication_code'] = isset($data['publication_code']) ? $data['publication_code'] : null;
        $this->container['issues_to_extend'] = isset($data['issues_to_extend']) ? $data['issues_to_extend'] : null;
        $this->container['reduction_rate_by_amount'] = isset($data['reduction_rate_by_amount']) ? $data['reduction_rate_by_amount'] : null;
        $this->container['reduction_rate_by_currency'] = isset($data['reduction_rate_by_currency']) ? $data['reduction_rate_by_currency'] : null;
        $this->container['adjustment_reason_code'] = isset($data['adjustment_reason_code']) ? $data['adjustment_reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets publication_code
     *
     * @return string
     */
    public function getPublicationCode()
    {
        return $this->container['publication_code'];
    }

    /**
     * Sets publication_code
     *
     * @param string $publication_code The Publication Code that identifies a magazine.
     *
     * @return $this
     */
    public function setPublicationCode($publication_code)
    {
        $this->container['publication_code'] = $publication_code;

        return $this;
    }

    /**
     * Gets issues_to_extend
     *
     * @return int
     */
    public function getIssuesToExtend()
    {
        return $this->container['issues_to_extend'];
    }

    /**
     * Sets issues_to_extend
     *
     * @param int $issues_to_extend Number of issues to extend subscription.
     *
     * @return $this
     */
    public function setIssuesToExtend($issues_to_extend)
    {
        $this->container['issues_to_extend'] = $issues_to_extend;

        return $this;
    }

    /**
     * Gets reduction_rate_by_amount
     *
     * @return double
     */
    public function getReductionRateByAmount()
    {
        return $this->container['reduction_rate_by_amount'];
    }

    /**
     * Sets reduction_rate_by_amount
     *
     * @param double $reduction_rate_by_amount Reduction Rate amount
     *
     * @return $this
     */
    public function setReductionRateByAmount($reduction_rate_by_amount)
    {
        $this->container['reduction_rate_by_amount'] = $reduction_rate_by_amount;

        return $this;
    }

    /**
     * Gets reduction_rate_by_currency
     *
     * @return string
     */
    public function getReductionRateByCurrency()
    {
        return $this->container['reduction_rate_by_currency'];
    }

    /**
     * Sets reduction_rate_by_currency
     *
     * @param string $reduction_rate_by_currency Currency code of the reduction rate
     *
     * @return $this
     */
    public function setReductionRateByCurrency($reduction_rate_by_currency)
    {
        $this->container['reduction_rate_by_currency'] = $reduction_rate_by_currency;

        return $this;
    }

    /**
     * Gets adjustment_reason_code
     *
     * @return string
     */
    public function getAdjustmentReasonCode()
    {
        return $this->container['adjustment_reason_code'];
    }

    /**
     * Sets adjustment_reason_code
     *
     * @param string $adjustment_reason_code The Adjustment Reason code used to describe the reason for a transaction.
     *
     * @return $this
     */
    public function setAdjustmentReasonCode($adjustment_reason_code)
    {
        $this->container['adjustment_reason_code'] = $adjustment_reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


