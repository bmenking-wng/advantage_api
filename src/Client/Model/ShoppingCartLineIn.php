<?php
/**
 * ShoppingCartLineIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ShoppingCartLineIn Class Doc Comment
 *
 * @category Class
 * @description Information for adding an item to a shopping cart.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShoppingCartLineIn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShoppingCartLineIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_id' => 'int',
        'ship_to' => '\Advantage\Client\Model\CustomerAddressKey',
        'item_number' => 'string',
        'promotion_code' => 'string',
        'promotion_choice' => 'string',
        'quantity' => 'int',
        'unit_price' => 'double',
        'profile' => '\Advantage\Client\Model\Profile',
        'subscription' => '\Advantage\Client\Model\ShoppingCartSubscriptionLineIn',
        'donation' => '\Advantage\Client\Model\ShoppingCartDonationLine',
        'association_structure_node_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_id' => 'int32',
        'ship_to' => null,
        'item_number' => null,
        'promotion_code' => null,
        'promotion_choice' => null,
        'quantity' => 'int32',
        'unit_price' => 'double',
        'profile' => null,
        'subscription' => null,
        'donation' => null,
        'association_structure_node_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_id' => 'LineId',
        'ship_to' => 'ShipTo',
        'item_number' => 'ItemNumber',
        'promotion_code' => 'PromotionCode',
        'promotion_choice' => 'PromotionChoice',
        'quantity' => 'Quantity',
        'unit_price' => 'UnitPrice',
        'profile' => 'Profile',
        'subscription' => 'Subscription',
        'donation' => 'Donation',
        'association_structure_node_id' => 'AssociationStructureNodeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_id' => 'setLineId',
        'ship_to' => 'setShipTo',
        'item_number' => 'setItemNumber',
        'promotion_code' => 'setPromotionCode',
        'promotion_choice' => 'setPromotionChoice',
        'quantity' => 'setQuantity',
        'unit_price' => 'setUnitPrice',
        'profile' => 'setProfile',
        'subscription' => 'setSubscription',
        'donation' => 'setDonation',
        'association_structure_node_id' => 'setAssociationStructureNodeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_id' => 'getLineId',
        'ship_to' => 'getShipTo',
        'item_number' => 'getItemNumber',
        'promotion_code' => 'getPromotionCode',
        'promotion_choice' => 'getPromotionChoice',
        'quantity' => 'getQuantity',
        'unit_price' => 'getUnitPrice',
        'profile' => 'getProfile',
        'subscription' => 'getSubscription',
        'donation' => 'getDonation',
        'association_structure_node_id' => 'getAssociationStructureNodeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['promotion_choice'] = isset($data['promotion_choice']) ? $data['promotion_choice'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['donation'] = isset($data['donation']) ? $data['donation'] : null;
        $this->container['association_structure_node_id'] = isset($data['association_structure_node_id']) ? $data['association_structure_node_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_id
     *
     * @return int
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     *
     * @param int $line_id The line number. This identifies the shopping cart line. This value can not be changed in Advantage.   This property is only used to identify the line to apply changes to.
     *
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $ship_to The ship-to for this order line.  (Optional.  The ship-to need not be identified until  the cart is converted to an order.  The line-level ship-to can default from the cart-level  ship-to when the cart is converted to an order.)
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number The item number identifying the product.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code applied to the item.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets promotion_choice
     *
     * @return string
     */
    public function getPromotionChoice()
    {
        return $this->container['promotion_choice'];
    }

    /**
     * Sets promotion_choice
     *
     * @param string $promotion_choice The promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoice($promotion_choice)
    {
        $this->container['promotion_choice'] = $promotion_choice;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of this particular item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price The override unit price.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Advantage\Client\Model\Profile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Advantage\Client\Model\Profile $profile The optional profile element contains responses to a set of questions asked at order entry time.    Profiles are typically used to store customer demographic information for audited subscriptions or   custom inputs used for order fulfillment.
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Advantage\Client\Model\ShoppingCartSubscriptionLineIn
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Advantage\Client\Model\ShoppingCartSubscriptionLineIn $subscription Information about a subscription (CIR) shopping cart line
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets donation
     *
     * @return \Advantage\Client\Model\ShoppingCartDonationLine
     */
    public function getDonation()
    {
        return $this->container['donation'];
    }

    /**
     * Sets donation
     *
     * @param \Advantage\Client\Model\ShoppingCartDonationLine $donation Information about a donation (DNT) shopping cart line
     *
     * @return $this
     */
    public function setDonation($donation)
    {
        $this->container['donation'] = $donation;

        return $this;
    }

    /**
     * Gets association_structure_node_id
     *
     * @return string
     */
    public function getAssociationStructureNodeId()
    {
        return $this->container['association_structure_node_id'];
    }

    /**
     * Sets association_structure_node_id
     *
     * @param string $association_structure_node_id The Association Structure Node Id indicates the structure node that an association member has selected.  The structure node is usually an association chapter.
     *
     * @return $this
     */
    public function setAssociationStructureNodeId($association_structure_node_id)
    {
        $this->container['association_structure_node_id'] = $association_structure_node_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


