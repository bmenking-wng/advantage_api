<?php
/**
 * Agreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Agreement Class Doc Comment
 *
 * @category Class
 * @description Information about a customer&#39;s existing agreement.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Agreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Agreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_expires' => '\DateTime',
        'adjustment_days' => 'int',
        'agreement_days' => 'int',
        'agreement_id' => 'string',
        'agreement_type' => 'string',
        'autorenew_chain_id' => 'string',
        'autorenew_chain_sequence' => 'int',
        'billing_currency_code' => 'string',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'cancellation_reason_code' => 'string',
        'last_renewal_promotion_code' => 'string',
        'last_renewed' => '\DateTime',
        'direct_debit_request_id' => 'string',
        'is_usage_based' => 'bool',
        'credit_days' => 'int',
        'discount_amount' => 'double',
        'term_expires' => '\DateTime',
        'extension_days' => 'int',
        'agreement_expires' => '\DateTime',
        'free_days' => 'int',
        'grace_days' => 'int',
        'is_billing_suspended' => 'bool',
        'is_complimentary' => 'bool',
        'is_eula_accepted' => 'bool',
        'is_invoiceable' => 'bool',
        'is_posted' => 'bool',
        'is_proforma' => 'bool',
        'is_released' => 'bool',
        'is_suspended' => 'bool',
        'is_term_paid' => 'bool',
        'is_trial' => 'bool',
        'is_version_paid' => 'bool',
        'linked_premiums' => '\Advantage\Client\Model\LinkedPremium[]',
        'maximum_participants' => 'int',
        'order_by' => '\Advantage\Client\Model\CustomerAddressKey',
        'order_number' => 'string',
        'participant_count' => 'int',
        'participant_with_access_count' => 'int',
        'promotion_code' => 'string',
        'purchase_order_number' => 'string',
        'referred_by' => '\Advantage\Client\Model\CustomerAddressKey',
        'renewal_policy' => '\Advantage\Client\Model\RenewalPolicy',
        'access_period' => '\Advantage\Client\Model\AccessPeriod',
        'access_service' => '\Advantage\Client\Model\AccessService',
        'term_starts' => '\DateTime',
        'join_date' => '\DateTime',
        'status' => '\Advantage\Client\Model\AgreementStatus',
        'suspended_days' => 'int',
        'suspend_reason_code' => 'string',
        'sub_total' => 'double',
        'tax' => 'double',
        'net_cost' => 'double',
        'agreement_level_discount' => 'double',
        'term_number' => 'int',
        'version_number' => 'int',
        'master_agreement_id' => 'string',
        'payment_method' => '\Advantage\Client\Model\PaymentMethod',
        'products' => '\Advantage\Client\Model\Product[]',
        'subscriptions' => '\Advantage\Client\Model\Subscription[]',
        'access_points' => '\Advantage\Client\Model\AccessPoint[]',
        'participants' => '\Advantage\Client\Model\AgreementParticipant[]',
        'related_debits' => '\Advantage\Client\Model\Debit[]',
        'related_credits' => '\Advantage\Client\Model\Credit[]',
        'association_membership' => '\Advantage\Client\Model\AssociationMembership',
        'electronic_payment_id' => 'string',
        'auto_charge_settings' => '\Advantage\Client\Model\SubscriptionAutoChargeSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_expires' => 'date-time',
        'adjustment_days' => 'int32',
        'agreement_days' => 'int32',
        'agreement_id' => null,
        'agreement_type' => null,
        'autorenew_chain_id' => null,
        'autorenew_chain_sequence' => 'int32',
        'billing_currency_code' => null,
        'bill_to' => null,
        'cancellation_reason_code' => null,
        'last_renewal_promotion_code' => null,
        'last_renewed' => 'date-time',
        'direct_debit_request_id' => null,
        'is_usage_based' => null,
        'credit_days' => 'int32',
        'discount_amount' => 'double',
        'term_expires' => 'date-time',
        'extension_days' => 'int32',
        'agreement_expires' => 'date-time',
        'free_days' => 'int32',
        'grace_days' => 'int32',
        'is_billing_suspended' => null,
        'is_complimentary' => null,
        'is_eula_accepted' => null,
        'is_invoiceable' => null,
        'is_posted' => null,
        'is_proforma' => null,
        'is_released' => null,
        'is_suspended' => null,
        'is_term_paid' => null,
        'is_trial' => null,
        'is_version_paid' => null,
        'linked_premiums' => null,
        'maximum_participants' => 'int32',
        'order_by' => null,
        'order_number' => null,
        'participant_count' => 'int32',
        'participant_with_access_count' => 'int32',
        'promotion_code' => null,
        'purchase_order_number' => null,
        'referred_by' => null,
        'renewal_policy' => null,
        'access_period' => null,
        'access_service' => null,
        'term_starts' => 'date-time',
        'join_date' => 'date-time',
        'status' => null,
        'suspended_days' => 'int32',
        'suspend_reason_code' => null,
        'sub_total' => 'double',
        'tax' => 'double',
        'net_cost' => 'double',
        'agreement_level_discount' => 'double',
        'term_number' => 'int32',
        'version_number' => 'int32',
        'master_agreement_id' => null,
        'payment_method' => null,
        'products' => null,
        'subscriptions' => null,
        'access_points' => null,
        'participants' => null,
        'related_debits' => null,
        'related_credits' => null,
        'association_membership' => null,
        'electronic_payment_id' => null,
        'auto_charge_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_expires' => 'AccessExpires',
        'adjustment_days' => 'AdjustmentDays',
        'agreement_days' => 'AgreementDays',
        'agreement_id' => 'AgreementId',
        'agreement_type' => 'AgreementType',
        'autorenew_chain_id' => 'AutorenewChainId',
        'autorenew_chain_sequence' => 'AutorenewChainSequence',
        'billing_currency_code' => 'BillingCurrencyCode',
        'bill_to' => 'BillTo',
        'cancellation_reason_code' => 'CancellationReasonCode',
        'last_renewal_promotion_code' => 'LastRenewalPromotionCode',
        'last_renewed' => 'LastRenewed',
        'direct_debit_request_id' => 'DirectDebitRequestId',
        'is_usage_based' => 'IsUsageBased',
        'credit_days' => 'CreditDays',
        'discount_amount' => 'DiscountAmount',
        'term_expires' => 'TermExpires',
        'extension_days' => 'ExtensionDays',
        'agreement_expires' => 'AgreementExpires',
        'free_days' => 'FreeDays',
        'grace_days' => 'GraceDays',
        'is_billing_suspended' => 'IsBillingSuspended',
        'is_complimentary' => 'IsComplimentary',
        'is_eula_accepted' => 'IsEulaAccepted',
        'is_invoiceable' => 'IsInvoiceable',
        'is_posted' => 'IsPosted',
        'is_proforma' => 'IsProforma',
        'is_released' => 'IsReleased',
        'is_suspended' => 'IsSuspended',
        'is_term_paid' => 'IsTermPaid',
        'is_trial' => 'IsTrial',
        'is_version_paid' => 'IsVersionPaid',
        'linked_premiums' => 'LinkedPremiums',
        'maximum_participants' => 'MaximumParticipants',
        'order_by' => 'OrderBy',
        'order_number' => 'OrderNumber',
        'participant_count' => 'ParticipantCount',
        'participant_with_access_count' => 'ParticipantWithAccessCount',
        'promotion_code' => 'PromotionCode',
        'purchase_order_number' => 'PurchaseOrderNumber',
        'referred_by' => 'ReferredBy',
        'renewal_policy' => 'RenewalPolicy',
        'access_period' => 'AccessPeriod',
        'access_service' => 'AccessService',
        'term_starts' => 'TermStarts',
        'join_date' => 'JoinDate',
        'status' => 'Status',
        'suspended_days' => 'SuspendedDays',
        'suspend_reason_code' => 'SuspendReasonCode',
        'sub_total' => 'SubTotal',
        'tax' => 'Tax',
        'net_cost' => 'NetCost',
        'agreement_level_discount' => 'AgreementLevelDiscount',
        'term_number' => 'TermNumber',
        'version_number' => 'VersionNumber',
        'master_agreement_id' => 'MasterAgreementId',
        'payment_method' => 'PaymentMethod',
        'products' => 'Products',
        'subscriptions' => 'Subscriptions',
        'access_points' => 'AccessPoints',
        'participants' => 'Participants',
        'related_debits' => 'RelatedDebits',
        'related_credits' => 'RelatedCredits',
        'association_membership' => 'AssociationMembership',
        'electronic_payment_id' => 'ElectronicPaymentId',
        'auto_charge_settings' => 'AutoChargeSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_expires' => 'setAccessExpires',
        'adjustment_days' => 'setAdjustmentDays',
        'agreement_days' => 'setAgreementDays',
        'agreement_id' => 'setAgreementId',
        'agreement_type' => 'setAgreementType',
        'autorenew_chain_id' => 'setAutorenewChainId',
        'autorenew_chain_sequence' => 'setAutorenewChainSequence',
        'billing_currency_code' => 'setBillingCurrencyCode',
        'bill_to' => 'setBillTo',
        'cancellation_reason_code' => 'setCancellationReasonCode',
        'last_renewal_promotion_code' => 'setLastRenewalPromotionCode',
        'last_renewed' => 'setLastRenewed',
        'direct_debit_request_id' => 'setDirectDebitRequestId',
        'is_usage_based' => 'setIsUsageBased',
        'credit_days' => 'setCreditDays',
        'discount_amount' => 'setDiscountAmount',
        'term_expires' => 'setTermExpires',
        'extension_days' => 'setExtensionDays',
        'agreement_expires' => 'setAgreementExpires',
        'free_days' => 'setFreeDays',
        'grace_days' => 'setGraceDays',
        'is_billing_suspended' => 'setIsBillingSuspended',
        'is_complimentary' => 'setIsComplimentary',
        'is_eula_accepted' => 'setIsEulaAccepted',
        'is_invoiceable' => 'setIsInvoiceable',
        'is_posted' => 'setIsPosted',
        'is_proforma' => 'setIsProforma',
        'is_released' => 'setIsReleased',
        'is_suspended' => 'setIsSuspended',
        'is_term_paid' => 'setIsTermPaid',
        'is_trial' => 'setIsTrial',
        'is_version_paid' => 'setIsVersionPaid',
        'linked_premiums' => 'setLinkedPremiums',
        'maximum_participants' => 'setMaximumParticipants',
        'order_by' => 'setOrderBy',
        'order_number' => 'setOrderNumber',
        'participant_count' => 'setParticipantCount',
        'participant_with_access_count' => 'setParticipantWithAccessCount',
        'promotion_code' => 'setPromotionCode',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'referred_by' => 'setReferredBy',
        'renewal_policy' => 'setRenewalPolicy',
        'access_period' => 'setAccessPeriod',
        'access_service' => 'setAccessService',
        'term_starts' => 'setTermStarts',
        'join_date' => 'setJoinDate',
        'status' => 'setStatus',
        'suspended_days' => 'setSuspendedDays',
        'suspend_reason_code' => 'setSuspendReasonCode',
        'sub_total' => 'setSubTotal',
        'tax' => 'setTax',
        'net_cost' => 'setNetCost',
        'agreement_level_discount' => 'setAgreementLevelDiscount',
        'term_number' => 'setTermNumber',
        'version_number' => 'setVersionNumber',
        'master_agreement_id' => 'setMasterAgreementId',
        'payment_method' => 'setPaymentMethod',
        'products' => 'setProducts',
        'subscriptions' => 'setSubscriptions',
        'access_points' => 'setAccessPoints',
        'participants' => 'setParticipants',
        'related_debits' => 'setRelatedDebits',
        'related_credits' => 'setRelatedCredits',
        'association_membership' => 'setAssociationMembership',
        'electronic_payment_id' => 'setElectronicPaymentId',
        'auto_charge_settings' => 'setAutoChargeSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_expires' => 'getAccessExpires',
        'adjustment_days' => 'getAdjustmentDays',
        'agreement_days' => 'getAgreementDays',
        'agreement_id' => 'getAgreementId',
        'agreement_type' => 'getAgreementType',
        'autorenew_chain_id' => 'getAutorenewChainId',
        'autorenew_chain_sequence' => 'getAutorenewChainSequence',
        'billing_currency_code' => 'getBillingCurrencyCode',
        'bill_to' => 'getBillTo',
        'cancellation_reason_code' => 'getCancellationReasonCode',
        'last_renewal_promotion_code' => 'getLastRenewalPromotionCode',
        'last_renewed' => 'getLastRenewed',
        'direct_debit_request_id' => 'getDirectDebitRequestId',
        'is_usage_based' => 'getIsUsageBased',
        'credit_days' => 'getCreditDays',
        'discount_amount' => 'getDiscountAmount',
        'term_expires' => 'getTermExpires',
        'extension_days' => 'getExtensionDays',
        'agreement_expires' => 'getAgreementExpires',
        'free_days' => 'getFreeDays',
        'grace_days' => 'getGraceDays',
        'is_billing_suspended' => 'getIsBillingSuspended',
        'is_complimentary' => 'getIsComplimentary',
        'is_eula_accepted' => 'getIsEulaAccepted',
        'is_invoiceable' => 'getIsInvoiceable',
        'is_posted' => 'getIsPosted',
        'is_proforma' => 'getIsProforma',
        'is_released' => 'getIsReleased',
        'is_suspended' => 'getIsSuspended',
        'is_term_paid' => 'getIsTermPaid',
        'is_trial' => 'getIsTrial',
        'is_version_paid' => 'getIsVersionPaid',
        'linked_premiums' => 'getLinkedPremiums',
        'maximum_participants' => 'getMaximumParticipants',
        'order_by' => 'getOrderBy',
        'order_number' => 'getOrderNumber',
        'participant_count' => 'getParticipantCount',
        'participant_with_access_count' => 'getParticipantWithAccessCount',
        'promotion_code' => 'getPromotionCode',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'referred_by' => 'getReferredBy',
        'renewal_policy' => 'getRenewalPolicy',
        'access_period' => 'getAccessPeriod',
        'access_service' => 'getAccessService',
        'term_starts' => 'getTermStarts',
        'join_date' => 'getJoinDate',
        'status' => 'getStatus',
        'suspended_days' => 'getSuspendedDays',
        'suspend_reason_code' => 'getSuspendReasonCode',
        'sub_total' => 'getSubTotal',
        'tax' => 'getTax',
        'net_cost' => 'getNetCost',
        'agreement_level_discount' => 'getAgreementLevelDiscount',
        'term_number' => 'getTermNumber',
        'version_number' => 'getVersionNumber',
        'master_agreement_id' => 'getMasterAgreementId',
        'payment_method' => 'getPaymentMethod',
        'products' => 'getProducts',
        'subscriptions' => 'getSubscriptions',
        'access_points' => 'getAccessPoints',
        'participants' => 'getParticipants',
        'related_debits' => 'getRelatedDebits',
        'related_credits' => 'getRelatedCredits',
        'association_membership' => 'getAssociationMembership',
        'electronic_payment_id' => 'getElectronicPaymentId',
        'auto_charge_settings' => 'getAutoChargeSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGREEMENT_TYPE_COMPLIMENTARY = 'Complimentary';
    const AGREEMENT_TYPE_INVOICEABLE = 'Invoiceable';
    const AGREEMENT_TYPE_PROFORMA = 'Proforma';
    const AGREEMENT_TYPE_TRIAL = 'Trial';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgreementTypeAllowableValues()
    {
        return [
            self::AGREEMENT_TYPE_COMPLIMENTARY,
            self::AGREEMENT_TYPE_INVOICEABLE,
            self::AGREEMENT_TYPE_PROFORMA,
            self::AGREEMENT_TYPE_TRIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_expires'] = isset($data['access_expires']) ? $data['access_expires'] : null;
        $this->container['adjustment_days'] = isset($data['adjustment_days']) ? $data['adjustment_days'] : null;
        $this->container['agreement_days'] = isset($data['agreement_days']) ? $data['agreement_days'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['agreement_type'] = isset($data['agreement_type']) ? $data['agreement_type'] : null;
        $this->container['autorenew_chain_id'] = isset($data['autorenew_chain_id']) ? $data['autorenew_chain_id'] : null;
        $this->container['autorenew_chain_sequence'] = isset($data['autorenew_chain_sequence']) ? $data['autorenew_chain_sequence'] : null;
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['cancellation_reason_code'] = isset($data['cancellation_reason_code']) ? $data['cancellation_reason_code'] : null;
        $this->container['last_renewal_promotion_code'] = isset($data['last_renewal_promotion_code']) ? $data['last_renewal_promotion_code'] : null;
        $this->container['last_renewed'] = isset($data['last_renewed']) ? $data['last_renewed'] : null;
        $this->container['direct_debit_request_id'] = isset($data['direct_debit_request_id']) ? $data['direct_debit_request_id'] : null;
        $this->container['is_usage_based'] = isset($data['is_usage_based']) ? $data['is_usage_based'] : null;
        $this->container['credit_days'] = isset($data['credit_days']) ? $data['credit_days'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['term_expires'] = isset($data['term_expires']) ? $data['term_expires'] : null;
        $this->container['extension_days'] = isset($data['extension_days']) ? $data['extension_days'] : null;
        $this->container['agreement_expires'] = isset($data['agreement_expires']) ? $data['agreement_expires'] : null;
        $this->container['free_days'] = isset($data['free_days']) ? $data['free_days'] : null;
        $this->container['grace_days'] = isset($data['grace_days']) ? $data['grace_days'] : null;
        $this->container['is_billing_suspended'] = isset($data['is_billing_suspended']) ? $data['is_billing_suspended'] : null;
        $this->container['is_complimentary'] = isset($data['is_complimentary']) ? $data['is_complimentary'] : null;
        $this->container['is_eula_accepted'] = isset($data['is_eula_accepted']) ? $data['is_eula_accepted'] : null;
        $this->container['is_invoiceable'] = isset($data['is_invoiceable']) ? $data['is_invoiceable'] : null;
        $this->container['is_posted'] = isset($data['is_posted']) ? $data['is_posted'] : null;
        $this->container['is_proforma'] = isset($data['is_proforma']) ? $data['is_proforma'] : null;
        $this->container['is_released'] = isset($data['is_released']) ? $data['is_released'] : null;
        $this->container['is_suspended'] = isset($data['is_suspended']) ? $data['is_suspended'] : null;
        $this->container['is_term_paid'] = isset($data['is_term_paid']) ? $data['is_term_paid'] : null;
        $this->container['is_trial'] = isset($data['is_trial']) ? $data['is_trial'] : null;
        $this->container['is_version_paid'] = isset($data['is_version_paid']) ? $data['is_version_paid'] : null;
        $this->container['linked_premiums'] = isset($data['linked_premiums']) ? $data['linked_premiums'] : null;
        $this->container['maximum_participants'] = isset($data['maximum_participants']) ? $data['maximum_participants'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['participant_count'] = isset($data['participant_count']) ? $data['participant_count'] : null;
        $this->container['participant_with_access_count'] = isset($data['participant_with_access_count']) ? $data['participant_with_access_count'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['referred_by'] = isset($data['referred_by']) ? $data['referred_by'] : null;
        $this->container['renewal_policy'] = isset($data['renewal_policy']) ? $data['renewal_policy'] : null;
        $this->container['access_period'] = isset($data['access_period']) ? $data['access_period'] : null;
        $this->container['access_service'] = isset($data['access_service']) ? $data['access_service'] : null;
        $this->container['term_starts'] = isset($data['term_starts']) ? $data['term_starts'] : null;
        $this->container['join_date'] = isset($data['join_date']) ? $data['join_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suspended_days'] = isset($data['suspended_days']) ? $data['suspended_days'] : null;
        $this->container['suspend_reason_code'] = isset($data['suspend_reason_code']) ? $data['suspend_reason_code'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['net_cost'] = isset($data['net_cost']) ? $data['net_cost'] : null;
        $this->container['agreement_level_discount'] = isset($data['agreement_level_discount']) ? $data['agreement_level_discount'] : null;
        $this->container['term_number'] = isset($data['term_number']) ? $data['term_number'] : null;
        $this->container['version_number'] = isset($data['version_number']) ? $data['version_number'] : null;
        $this->container['master_agreement_id'] = isset($data['master_agreement_id']) ? $data['master_agreement_id'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
        $this->container['access_points'] = isset($data['access_points']) ? $data['access_points'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['related_debits'] = isset($data['related_debits']) ? $data['related_debits'] : null;
        $this->container['related_credits'] = isset($data['related_credits']) ? $data['related_credits'] : null;
        $this->container['association_membership'] = isset($data['association_membership']) ? $data['association_membership'] : null;
        $this->container['electronic_payment_id'] = isset($data['electronic_payment_id']) ? $data['electronic_payment_id'] : null;
        $this->container['auto_charge_settings'] = isset($data['auto_charge_settings']) ? $data['auto_charge_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAgreementTypeAllowableValues();
        if (!is_null($this->container['agreement_type']) && !in_array($this->container['agreement_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agreement_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_expires
     *
     * @return \DateTime
     */
    public function getAccessExpires()
    {
        return $this->container['access_expires'];
    }

    /**
     * Sets access_expires
     *
     * @param \DateTime $access_expires Access Expire date.
     *
     * @return $this
     */
    public function setAccessExpires($access_expires)
    {
        $this->container['access_expires'] = $access_expires;

        return $this;
    }

    /**
     * Gets adjustment_days
     *
     * @return int
     */
    public function getAdjustmentDays()
    {
        return $this->container['adjustment_days'];
    }

    /**
     * Sets adjustment_days
     *
     * @param int $adjustment_days Returns the number of adjustment days
     *
     * @return $this
     */
    public function setAdjustmentDays($adjustment_days)
    {
        $this->container['adjustment_days'] = $adjustment_days;

        return $this;
    }

    /**
     * Gets agreement_days
     *
     * @return int
     */
    public function getAgreementDays()
    {
        return $this->container['agreement_days'];
    }

    /**
     * Sets agreement_days
     *
     * @param int $agreement_days Returns number of days.
     *
     * @return $this
     */
    public function setAgreementDays($agreement_days)
    {
        $this->container['agreement_days'] = $agreement_days;

        return $this;
    }

    /**
     * Gets agreement_id
     *
     * @return string
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     *
     * @param string $agreement_id Agreement ID.
     *
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets agreement_type
     *
     * @return string
     */
    public function getAgreementType()
    {
        return $this->container['agreement_type'];
    }

    /**
     * Sets agreement_type
     *
     * @param string $agreement_type Agreement type.
     *
     * @return $this
     */
    public function setAgreementType($agreement_type)
    {
        $allowedValues = $this->getAgreementTypeAllowableValues();
        if (!is_null($agreement_type) && !in_array($agreement_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agreement_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agreement_type'] = $agreement_type;

        return $this;
    }

    /**
     * Gets autorenew_chain_id
     *
     * @return string
     */
    public function getAutorenewChainId()
    {
        return $this->container['autorenew_chain_id'];
    }

    /**
     * Sets autorenew_chain_id
     *
     * @param string $autorenew_chain_id Auto-Renew Chain ID.
     *
     * @return $this
     */
    public function setAutorenewChainId($autorenew_chain_id)
    {
        $this->container['autorenew_chain_id'] = $autorenew_chain_id;

        return $this;
    }

    /**
     * Gets autorenew_chain_sequence
     *
     * @return int
     */
    public function getAutorenewChainSequence()
    {
        return $this->container['autorenew_chain_sequence'];
    }

    /**
     * Sets autorenew_chain_sequence
     *
     * @param int $autorenew_chain_sequence Auto-Renew Chain Sequence.
     *
     * @return $this
     */
    public function setAutorenewChainSequence($autorenew_chain_sequence)
    {
        $this->container['autorenew_chain_sequence'] = $autorenew_chain_sequence;

        return $this;
    }

    /**
     * Gets billing_currency_code
     *
     * @return string
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     *
     * @param string $billing_currency_code The currency code of the currency to bill the order in.
     *
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $bill_to The bill-to customer
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets cancellation_reason_code
     *
     * @return string
     */
    public function getCancellationReasonCode()
    {
        return $this->container['cancellation_reason_code'];
    }

    /**
     * Sets cancellation_reason_code
     *
     * @param string $cancellation_reason_code Cancellation Reason Code.
     *
     * @return $this
     */
    public function setCancellationReasonCode($cancellation_reason_code)
    {
        $this->container['cancellation_reason_code'] = $cancellation_reason_code;

        return $this;
    }

    /**
     * Gets last_renewal_promotion_code
     *
     * @return string
     */
    public function getLastRenewalPromotionCode()
    {
        return $this->container['last_renewal_promotion_code'];
    }

    /**
     * Sets last_renewal_promotion_code
     *
     * @param string $last_renewal_promotion_code Last Renewal Promotion.
     *
     * @return $this
     */
    public function setLastRenewalPromotionCode($last_renewal_promotion_code)
    {
        $this->container['last_renewal_promotion_code'] = $last_renewal_promotion_code;

        return $this;
    }

    /**
     * Gets last_renewed
     *
     * @return \DateTime
     */
    public function getLastRenewed()
    {
        return $this->container['last_renewed'];
    }

    /**
     * Sets last_renewed
     *
     * @param \DateTime $last_renewed Last Renewal Date.
     *
     * @return $this
     */
    public function setLastRenewed($last_renewed)
    {
        $this->container['last_renewed'] = $last_renewed;

        return $this;
    }

    /**
     * Gets direct_debit_request_id
     *
     * @return string
     */
    public function getDirectDebitRequestId()
    {
        return $this->container['direct_debit_request_id'];
    }

    /**
     * Sets direct_debit_request_id
     *
     * @param string $direct_debit_request_id The recurring payment number on the agreement.
     *
     * @return $this
     */
    public function setDirectDebitRequestId($direct_debit_request_id)
    {
        $this->container['direct_debit_request_id'] = $direct_debit_request_id;

        return $this;
    }

    /**
     * Gets is_usage_based
     *
     * @return bool
     */
    public function getIsUsageBased()
    {
        return $this->container['is_usage_based'];
    }

    /**
     * Sets is_usage_based
     *
     * @param bool $is_usage_based The usage-based flag on the agreement.
     *
     * @return $this
     */
    public function setIsUsageBased($is_usage_based)
    {
        $this->container['is_usage_based'] = $is_usage_based;

        return $this;
    }

    /**
     * Gets credit_days
     *
     * @return int
     */
    public function getCreditDays()
    {
        return $this->container['credit_days'];
    }

    /**
     * Sets credit_days
     *
     * @param int $credit_days Returns the number of credit days.
     *
     * @return $this
     */
    public function setCreditDays($credit_days)
    {
        $this->container['credit_days'] = $credit_days;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount The discount amount.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets term_expires
     *
     * @return \DateTime
     */
    public function getTermExpires()
    {
        return $this->container['term_expires'];
    }

    /**
     * Sets term_expires
     *
     * @param \DateTime $term_expires Expire date.
     *
     * @return $this
     */
    public function setTermExpires($term_expires)
    {
        $this->container['term_expires'] = $term_expires;

        return $this;
    }

    /**
     * Gets extension_days
     *
     * @return int
     */
    public function getExtensionDays()
    {
        return $this->container['extension_days'];
    }

    /**
     * Sets extension_days
     *
     * @param int $extension_days Returns the number of Extension Days.
     *
     * @return $this
     */
    public function setExtensionDays($extension_days)
    {
        $this->container['extension_days'] = $extension_days;

        return $this;
    }

    /**
     * Gets agreement_expires
     *
     * @return \DateTime
     */
    public function getAgreementExpires()
    {
        return $this->container['agreement_expires'];
    }

    /**
     * Sets agreement_expires
     *
     * @param \DateTime $agreement_expires Final expire date.
     *
     * @return $this
     */
    public function setAgreementExpires($agreement_expires)
    {
        $this->container['agreement_expires'] = $agreement_expires;

        return $this;
    }

    /**
     * Gets free_days
     *
     * @return int
     */
    public function getFreeDays()
    {
        return $this->container['free_days'];
    }

    /**
     * Sets free_days
     *
     * @param int $free_days Returns the number of Pre Free Days.
     *
     * @return $this
     */
    public function setFreeDays($free_days)
    {
        $this->container['free_days'] = $free_days;

        return $this;
    }

    /**
     * Gets grace_days
     *
     * @return int
     */
    public function getGraceDays()
    {
        return $this->container['grace_days'];
    }

    /**
     * Sets grace_days
     *
     * @param int $grace_days Returns the number of grace days.
     *
     * @return $this
     */
    public function setGraceDays($grace_days)
    {
        $this->container['grace_days'] = $grace_days;

        return $this;
    }

    /**
     * Gets is_billing_suspended
     *
     * @return bool
     */
    public function getIsBillingSuspended()
    {
        return $this->container['is_billing_suspended'];
    }

    /**
     * Sets is_billing_suspended
     *
     * @param bool $is_billing_suspended Returns true if billing suspended.
     *
     * @return $this
     */
    public function setIsBillingSuspended($is_billing_suspended)
    {
        $this->container['is_billing_suspended'] = $is_billing_suspended;

        return $this;
    }

    /**
     * Gets is_complimentary
     *
     * @return bool
     */
    public function getIsComplimentary()
    {
        return $this->container['is_complimentary'];
    }

    /**
     * Sets is_complimentary
     *
     * @param bool $is_complimentary Returns true if complimentary.
     *
     * @return $this
     */
    public function setIsComplimentary($is_complimentary)
    {
        $this->container['is_complimentary'] = $is_complimentary;

        return $this;
    }

    /**
     * Gets is_eula_accepted
     *
     * @return bool
     */
    public function getIsEulaAccepted()
    {
        return $this->container['is_eula_accepted'];
    }

    /**
     * Sets is_eula_accepted
     *
     * @param bool $is_eula_accepted true if EULA is accepted.
     *
     * @return $this
     */
    public function setIsEulaAccepted($is_eula_accepted)
    {
        $this->container['is_eula_accepted'] = $is_eula_accepted;

        return $this;
    }

    /**
     * Gets is_invoiceable
     *
     * @return bool
     */
    public function getIsInvoiceable()
    {
        return $this->container['is_invoiceable'];
    }

    /**
     * Sets is_invoiceable
     *
     * @param bool $is_invoiceable Returns true if invoiceable.
     *
     * @return $this
     */
    public function setIsInvoiceable($is_invoiceable)
    {
        $this->container['is_invoiceable'] = $is_invoiceable;

        return $this;
    }

    /**
     * Gets is_posted
     *
     * @return bool
     */
    public function getIsPosted()
    {
        return $this->container['is_posted'];
    }

    /**
     * Sets is_posted
     *
     * @param bool $is_posted Returns true if posted.
     *
     * @return $this
     */
    public function setIsPosted($is_posted)
    {
        $this->container['is_posted'] = $is_posted;

        return $this;
    }

    /**
     * Gets is_proforma
     *
     * @return bool
     */
    public function getIsProforma()
    {
        return $this->container['is_proforma'];
    }

    /**
     * Sets is_proforma
     *
     * @param bool $is_proforma Returns true if proforma.
     *
     * @return $this
     */
    public function setIsProforma($is_proforma)
    {
        $this->container['is_proforma'] = $is_proforma;

        return $this;
    }

    /**
     * Gets is_released
     *
     * @return bool
     */
    public function getIsReleased()
    {
        return $this->container['is_released'];
    }

    /**
     * Sets is_released
     *
     * @param bool $is_released Has the agreement been released?
     *
     * @return $this
     */
    public function setIsReleased($is_released)
    {
        $this->container['is_released'] = $is_released;

        return $this;
    }

    /**
     * Gets is_suspended
     *
     * @return bool
     */
    public function getIsSuspended()
    {
        return $this->container['is_suspended'];
    }

    /**
     * Sets is_suspended
     *
     * @param bool $is_suspended Returns true if suspended.
     *
     * @return $this
     */
    public function setIsSuspended($is_suspended)
    {
        $this->container['is_suspended'] = $is_suspended;

        return $this;
    }

    /**
     * Gets is_term_paid
     *
     * @return bool
     */
    public function getIsTermPaid()
    {
        return $this->container['is_term_paid'];
    }

    /**
     * Sets is_term_paid
     *
     * @param bool $is_term_paid Returns true if the Term is completely paid.
     *
     * @return $this
     */
    public function setIsTermPaid($is_term_paid)
    {
        $this->container['is_term_paid'] = $is_term_paid;

        return $this;
    }

    /**
     * Gets is_trial
     *
     * @return bool
     */
    public function getIsTrial()
    {
        return $this->container['is_trial'];
    }

    /**
     * Sets is_trial
     *
     * @param bool $is_trial Returns true if trial.
     *
     * @return $this
     */
    public function setIsTrial($is_trial)
    {
        $this->container['is_trial'] = $is_trial;

        return $this;
    }

    /**
     * Gets is_version_paid
     *
     * @return bool
     */
    public function getIsVersionPaid()
    {
        return $this->container['is_version_paid'];
    }

    /**
     * Sets is_version_paid
     *
     * @param bool $is_version_paid Returns true if the Version is totally paid.
     *
     * @return $this
     */
    public function setIsVersionPaid($is_version_paid)
    {
        $this->container['is_version_paid'] = $is_version_paid;

        return $this;
    }

    /**
     * Gets linked_premiums
     *
     * @return \Advantage\Client\Model\LinkedPremium[]
     */
    public function getLinkedPremiums()
    {
        return $this->container['linked_premiums'];
    }

    /**
     * Sets linked_premiums
     *
     * @param \Advantage\Client\Model\LinkedPremium[] $linked_premiums Returns a list of linked premiums
     *
     * @return $this
     */
    public function setLinkedPremiums($linked_premiums)
    {
        $this->container['linked_premiums'] = $linked_premiums;

        return $this;
    }

    /**
     * Gets maximum_participants
     *
     * @return int
     */
    public function getMaximumParticipants()
    {
        return $this->container['maximum_participants'];
    }

    /**
     * Sets maximum_participants
     *
     * @param int $maximum_participants Returns the maximum number of participants.
     *
     * @return $this
     */
    public function setMaximumParticipants($maximum_participants)
    {
        $this->container['maximum_participants'] = $maximum_participants;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $order_by Agreement order by.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number Last agreement order number.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets participant_count
     *
     * @return int
     */
    public function getParticipantCount()
    {
        return $this->container['participant_count'];
    }

    /**
     * Sets participant_count
     *
     * @param int $participant_count Number of participants.
     *
     * @return $this
     */
    public function setParticipantCount($participant_count)
    {
        $this->container['participant_count'] = $participant_count;

        return $this;
    }

    /**
     * Gets participant_with_access_count
     *
     * @return int
     */
    public function getParticipantWithAccessCount()
    {
        return $this->container['participant_with_access_count'];
    }

    /**
     * Sets participant_with_access_count
     *
     * @param int $participant_with_access_count Returns the number of participants with access to the content.
     *
     * @return $this
     */
    public function setParticipantWithAccessCount($participant_with_access_count)
    {
        $this->container['participant_with_access_count'] = $participant_with_access_count;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion code.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number Purchase order number.
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets referred_by
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getReferredBy()
    {
        return $this->container['referred_by'];
    }

    /**
     * Sets referred_by
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $referred_by Agreement referred by.
     *
     * @return $this
     */
    public function setReferredBy($referred_by)
    {
        $this->container['referred_by'] = $referred_by;

        return $this;
    }

    /**
     * Gets renewal_policy
     *
     * @return \Advantage\Client\Model\RenewalPolicy
     */
    public function getRenewalPolicy()
    {
        return $this->container['renewal_policy'];
    }

    /**
     * Sets renewal_policy
     *
     * @param \Advantage\Client\Model\RenewalPolicy $renewal_policy Renewal policy
     *
     * @return $this
     */
    public function setRenewalPolicy($renewal_policy)
    {
        $this->container['renewal_policy'] = $renewal_policy;

        return $this;
    }

    /**
     * Gets access_period
     *
     * @return \Advantage\Client\Model\AccessPeriod
     */
    public function getAccessPeriod()
    {
        return $this->container['access_period'];
    }

    /**
     * Sets access_period
     *
     * @param \Advantage\Client\Model\AccessPeriod $access_period The access period (length of term)
     *
     * @return $this
     */
    public function setAccessPeriod($access_period)
    {
        $this->container['access_period'] = $access_period;

        return $this;
    }

    /**
     * Gets access_service
     *
     * @return \Advantage\Client\Model\AccessService
     */
    public function getAccessService()
    {
        return $this->container['access_service'];
    }

    /**
     * Sets access_service
     *
     * @param \Advantage\Client\Model\AccessService $access_service The access service associated with this agreement.
     *
     * @return $this
     */
    public function setAccessService($access_service)
    {
        $this->container['access_service'] = $access_service;

        return $this;
    }

    /**
     * Gets term_starts
     *
     * @return \DateTime
     */
    public function getTermStarts()
    {
        return $this->container['term_starts'];
    }

    /**
     * Sets term_starts
     *
     * @param \DateTime $term_starts Agreement start date.
     *
     * @return $this
     */
    public function setTermStarts($term_starts)
    {
        $this->container['term_starts'] = $term_starts;

        return $this;
    }

    /**
     * Gets join_date
     *
     * @return \DateTime
     */
    public function getJoinDate()
    {
        return $this->container['join_date'];
    }

    /**
     * Sets join_date
     *
     * @param \DateTime $join_date Agreement join date. This is the start date for the first term of the agreement.
     *
     * @return $this
     */
    public function setJoinDate($join_date)
    {
        $this->container['join_date'] = $join_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Advantage\Client\Model\AgreementStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Advantage\Client\Model\AgreementStatus $status The status of this agreement
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suspended_days
     *
     * @return int
     */
    public function getSuspendedDays()
    {
        return $this->container['suspended_days'];
    }

    /**
     * Sets suspended_days
     *
     * @param int $suspended_days The number of suspended days for the current term.
     *
     * @return $this
     */
    public function setSuspendedDays($suspended_days)
    {
        $this->container['suspended_days'] = $suspended_days;

        return $this;
    }

    /**
     * Gets suspend_reason_code
     *
     * @return string
     */
    public function getSuspendReasonCode()
    {
        return $this->container['suspend_reason_code'];
    }

    /**
     * Sets suspend_reason_code
     *
     * @param string $suspend_reason_code Suspend reason.
     *
     * @return $this
     */
    public function setSuspendReasonCode($suspend_reason_code)
    {
        $this->container['suspend_reason_code'] = $suspend_reason_code;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return double
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param double $sub_total The sum of the individual prices.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax The total tax on the agreement.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets net_cost
     *
     * @return double
     */
    public function getNetCost()
    {
        return $this->container['net_cost'];
    }

    /**
     * Sets net_cost
     *
     * @param double $net_cost The agreement's total cost.
     *
     * @return $this
     */
    public function setNetCost($net_cost)
    {
        $this->container['net_cost'] = $net_cost;

        return $this;
    }

    /**
     * Gets agreement_level_discount
     *
     * @return double
     */
    public function getAgreementLevelDiscount()
    {
        return $this->container['agreement_level_discount'];
    }

    /**
     * Sets agreement_level_discount
     *
     * @param double $agreement_level_discount Agreement level discount.
     *
     * @return $this
     */
    public function setAgreementLevelDiscount($agreement_level_discount)
    {
        $this->container['agreement_level_discount'] = $agreement_level_discount;

        return $this;
    }

    /**
     * Gets term_number
     *
     * @return int
     */
    public function getTermNumber()
    {
        return $this->container['term_number'];
    }

    /**
     * Sets term_number
     *
     * @param int $term_number Agreement version term number.
     *
     * @return $this
     */
    public function setTermNumber($term_number)
    {
        $this->container['term_number'] = $term_number;

        return $this;
    }

    /**
     * Gets version_number
     *
     * @return int
     */
    public function getVersionNumber()
    {
        return $this->container['version_number'];
    }

    /**
     * Sets version_number
     *
     * @param int $version_number Agreement version number.
     *
     * @return $this
     */
    public function setVersionNumber($version_number)
    {
        $this->container['version_number'] = $version_number;

        return $this;
    }

    /**
     * Gets master_agreement_id
     *
     * @return string
     */
    public function getMasterAgreementId()
    {
        return $this->container['master_agreement_id'];
    }

    /**
     * Sets master_agreement_id
     *
     * @param string $master_agreement_id Master Agreement Id.
     *
     * @return $this
     */
    public function setMasterAgreementId($master_agreement_id)
    {
        $this->container['master_agreement_id'] = $master_agreement_id;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Advantage\Client\Model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Advantage\Client\Model\PaymentMethod $payment_method The initial payment method for the term.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Advantage\Client\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Advantage\Client\Model\Product[] $products List of products that are part of this agreement.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \Advantage\Client\Model\Subscription[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \Advantage\Client\Model\Subscription[] $subscriptions List of circulation subscriptions that are part of this agreement.
     *
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets access_points
     *
     * @return \Advantage\Client\Model\AccessPoint[]
     */
    public function getAccessPoints()
    {
        return $this->container['access_points'];
    }

    /**
     * Sets access_points
     *
     * @param \Advantage\Client\Model\AccessPoint[] $access_points List of access points on this agreement.
     *
     * @return $this
     */
    public function setAccessPoints($access_points)
    {
        $this->container['access_points'] = $access_points;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Advantage\Client\Model\AgreementParticipant[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Advantage\Client\Model\AgreementParticipant[] $participants List of participants on the agreement level.
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets related_debits
     *
     * @return \Advantage\Client\Model\Debit[]
     */
    public function getRelatedDebits()
    {
        return $this->container['related_debits'];
    }

    /**
     * Sets related_debits
     *
     * @param \Advantage\Client\Model\Debit[] $related_debits The debits associated with this Agreement term/version
     *
     * @return $this
     */
    public function setRelatedDebits($related_debits)
    {
        $this->container['related_debits'] = $related_debits;

        return $this;
    }

    /**
     * Gets related_credits
     *
     * @return \Advantage\Client\Model\Credit[]
     */
    public function getRelatedCredits()
    {
        return $this->container['related_credits'];
    }

    /**
     * Sets related_credits
     *
     * @param \Advantage\Client\Model\Credit[] $related_credits The credits associated with this Agreement term/version
     *
     * @return $this
     */
    public function setRelatedCredits($related_credits)
    {
        $this->container['related_credits'] = $related_credits;

        return $this;
    }

    /**
     * Gets association_membership
     *
     * @return \Advantage\Client\Model\AssociationMembership
     */
    public function getAssociationMembership()
    {
        return $this->container['association_membership'];
    }

    /**
     * Sets association_membership
     *
     * @param \Advantage\Client\Model\AssociationMembership $association_membership Information about the current agreement's association membership.  This will be null if the agreement is not an association membership
     *
     * @return $this
     */
    public function setAssociationMembership($association_membership)
    {
        $this->container['association_membership'] = $association_membership;

        return $this;
    }

    /**
     * Gets electronic_payment_id
     *
     * @return string
     */
    public function getElectronicPaymentId()
    {
        return $this->container['electronic_payment_id'];
    }

    /**
     * Sets electronic_payment_id
     *
     * @param string $electronic_payment_id The electronic payment ID on the agreement.
     *
     * @return $this
     */
    public function setElectronicPaymentId($electronic_payment_id)
    {
        $this->container['electronic_payment_id'] = $electronic_payment_id;

        return $this;
    }

    /**
     * Gets auto_charge_settings
     *
     * @return \Advantage\Client\Model\SubscriptionAutoChargeSettings
     */
    public function getAutoChargeSettings()
    {
        return $this->container['auto_charge_settings'];
    }

    /**
     * Sets auto_charge_settings
     *
     * @param \Advantage\Client\Model\SubscriptionAutoChargeSettings $auto_charge_settings This agreement's auto charge settings. Null if auto-charge has not been set up for the current   agreement.
     *
     * @return $this
     */
    public function setAutoChargeSettings($auto_charge_settings)
    {
        $this->container['auto_charge_settings'] = $auto_charge_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


