<?php
/**
 * OrderCreditMemoPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderCreditMemoPaymentRequest Class Doc Comment
 *
 * @category Class
 * @description Information about a payment made toward an order from a credit memo method.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCreditMemoPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCreditMemoPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'payment_method_code' => 'string',
        'currency_code' => 'string',
        'amount' => 'double',
        'credit_comment' => 'string',
        'distribution_account' => 'string',
        'credit_reason_code' => 'string',
        'promotion_code' => 'string',
        'control_group_date' => '\DateTime',
        'control_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'payment_method_code' => null,
        'currency_code' => null,
        'amount' => 'double',
        'credit_comment' => null,
        'distribution_account' => null,
        'credit_reason_code' => null,
        'promotion_code' => null,
        'control_group_date' => 'date-time',
        'control_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'payment_method_code' => 'PaymentMethodCode',
        'currency_code' => 'CurrencyCode',
        'amount' => 'Amount',
        'credit_comment' => 'CreditComment',
        'distribution_account' => 'DistributionAccount',
        'credit_reason_code' => 'CreditReasonCode',
        'promotion_code' => 'PromotionCode',
        'control_group_date' => 'ControlGroupDate',
        'control_group_id' => 'ControlGroupId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'payment_method_code' => 'setPaymentMethodCode',
        'currency_code' => 'setCurrencyCode',
        'amount' => 'setAmount',
        'credit_comment' => 'setCreditComment',
        'distribution_account' => 'setDistributionAccount',
        'credit_reason_code' => 'setCreditReasonCode',
        'promotion_code' => 'setPromotionCode',
        'control_group_date' => 'setControlGroupDate',
        'control_group_id' => 'setControlGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'payment_method_code' => 'getPaymentMethodCode',
        'currency_code' => 'getCurrencyCode',
        'amount' => 'getAmount',
        'credit_comment' => 'getCreditComment',
        'distribution_account' => 'getDistributionAccount',
        'credit_reason_code' => 'getCreditReasonCode',
        'promotion_code' => 'getPromotionCode',
        'control_group_date' => 'getControlGroupDate',
        'control_group_id' => 'getControlGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['payment_method_code'] = isset($data['payment_method_code']) ? $data['payment_method_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['credit_comment'] = isset($data['credit_comment']) ? $data['credit_comment'] : null;
        $this->container['distribution_account'] = isset($data['distribution_account']) ? $data['distribution_account'] : null;
        $this->container['credit_reason_code'] = isset($data['credit_reason_code']) ? $data['credit_reason_code'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['control_group_date'] = isset($data['control_group_date']) ? $data['control_group_date'] : null;
        $this->container['control_group_id'] = isset($data['control_group_id']) ? $data['control_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The Advantage customer number of the customer providing the payment.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets payment_method_code
     *
     * @return string
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     *
     * @param string $payment_method_code Miscellaneous Credit Code. Also maps to a distribution account.
     *
     * @return $this
     */
    public function setPaymentMethodCode($payment_method_code)
    {
        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Currency Code associated with payment amount (ex, USD, GBP, EUR)
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount to pay on the order
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets credit_comment
     *
     * @return string
     */
    public function getCreditComment()
    {
        return $this->container['credit_comment'];
    }

    /**
     * Sets credit_comment
     *
     * @param string $credit_comment Comments on the credit
     *
     * @return $this
     */
    public function setCreditComment($credit_comment)
    {
        $this->container['credit_comment'] = $credit_comment;

        return $this;
    }

    /**
     * Gets distribution_account
     *
     * @return string
     */
    public function getDistributionAccount()
    {
        return $this->container['distribution_account'];
    }

    /**
     * Sets distribution_account
     *
     * @param string $distribution_account Distribution account.
     *
     * @return $this
     */
    public function setDistributionAccount($distribution_account)
    {
        $this->container['distribution_account'] = $distribution_account;

        return $this;
    }

    /**
     * Gets credit_reason_code
     *
     * @return string
     */
    public function getCreditReasonCode()
    {
        return $this->container['credit_reason_code'];
    }

    /**
     * Sets credit_reason_code
     *
     * @param string $credit_reason_code Credit Reason Code
     *
     * @return $this
     */
    public function setCreditReasonCode($credit_reason_code)
    {
        $this->container['credit_reason_code'] = $credit_reason_code;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion Code
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets control_group_date
     *
     * @return \DateTime
     */
    public function getControlGroupDate()
    {
        return $this->container['control_group_date'];
    }

    /**
     * Sets control_group_date
     *
     * @param \DateTime $control_group_date The control group date
     *
     * @return $this
     */
    public function setControlGroupDate($control_group_date)
    {
        $this->container['control_group_date'] = $control_group_date;

        return $this;
    }

    /**
     * Gets control_group_id
     *
     * @return string
     */
    public function getControlGroupId()
    {
        return $this->container['control_group_id'];
    }

    /**
     * Sets control_group_id
     *
     * @param string $control_group_id Control Group ID
     *
     * @return $this
     */
    public function setControlGroupId($control_group_id)
    {
        $this->container['control_group_id'] = $control_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


