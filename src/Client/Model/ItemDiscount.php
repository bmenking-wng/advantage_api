<?php
/**
 * ItemDiscount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ItemDiscount Class Doc Comment
 *
 * @category Class
 * @description Information about a discount that was applied to an item.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemDiscount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemDiscount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'source' => 'string',
        'percent' => 'double',
        'combination_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'source' => null,
        'percent' => 'double',
        'combination_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source' => 'Source',
        'percent' => 'Percent',
        'combination_code' => 'CombinationCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source' => 'setSource',
        'percent' => 'setPercent',
        'combination_code' => 'setCombinationCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source' => 'getSource',
        'percent' => 'getPercent',
        'combination_code' => 'getCombinationCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCE_ASSOCIATION_CLIENT_PROGRAM_DISCOUNT = 'AssociationClientProgramDiscount';
    const SOURCE_AGENCY_DISCOUNT = 'AgencyDiscount';
    const SOURCE_NO_DISCOUNT_ASSOCIATION_COMPONENT = 'NoDiscountAssociationComponent';
    const SOURCE_CUSTOMER_DISCOUNT = 'CustomerDiscount';
    const SOURCE_DROP_SHIPMENT_DISCOUNT = 'DropShipmentDiscount';
    const SOURCE_DONOR_TYPE_DISCOUNT = 'DonorTypeDiscount';
    const SOURCE_ITEM_MAXIMUM_DISCOUNT = 'ItemMaximumDiscount';
    const SOURCE_INDIVIDUAL_ITEM_DISCOUNT = 'IndividualItemDiscount';
    const SOURCE_NO_DISCOUNT_FROM_LIST_PRICE = 'NoDiscountFromListPrice';
    const SOURCE_ORDER_DEFAULT_DISCOUNT = 'OrderDefaultDiscount';
    const SOURCE_ORDER_VOLUME_DISCOUNT = 'OrderVolumeDiscount';
    const SOURCE_PROFORMA_ACTIVATION_DISCOUNT = 'ProformaActivationDiscount';
    const SOURCE_PROMOTION_DISCOUNT = 'PromotionDiscount';
    const SOURCE_VOLUME_DISCOUNT = 'VolumeDiscount';
    const SOURCE_RENEWAL_CHAIN_REPEATED_DISCOUNT = 'RenewalChainRepeatedDiscount';
    const SOURCE_CONTRIBUTOR_VOLUME_DISCOUNT = 'ContributorVolumeDiscount';
    const SOURCE_AUTO_RENEW_CHAIN_CHOICE_DISCOUNT = 'AutoRenewChainChoiceDiscount';
    const SOURCE_NO_BOOK_CLUB_DISCOUNT = 'NoBookClubDiscount';
    const SOURCE_COUPON_DISCOUNT = 'CouponDiscount';
    const SOURCE_ASSOCIATION_BENEFIT_DISCOUNT = 'AssociationBenefitDiscount';
    const COMBINATION_CODE_COMPOUND = 'Compound';
    const COMBINATION_CODE_ADD = 'Add';
    const COMBINATION_CODE_USE_SMALLER = 'UseSmaller';
    const COMBINATION_CODE_USE_GREATER = 'UseGreater';
    const COMBINATION_CODE_USE_FIRST = 'UseFirst';
    const COMBINATION_CODE_USE_SECOND = 'UseSecond';
    const COMBINATION_CODE_USE_FIRST_OR_DEFAULT = 'UseFirstOrDefault';
    const COMBINATION_CODE_USE_SECOND_OR_DEFAULT = 'UseSecondOrDefault';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_ASSOCIATION_CLIENT_PROGRAM_DISCOUNT,
            self::SOURCE_AGENCY_DISCOUNT,
            self::SOURCE_NO_DISCOUNT_ASSOCIATION_COMPONENT,
            self::SOURCE_CUSTOMER_DISCOUNT,
            self::SOURCE_DROP_SHIPMENT_DISCOUNT,
            self::SOURCE_DONOR_TYPE_DISCOUNT,
            self::SOURCE_ITEM_MAXIMUM_DISCOUNT,
            self::SOURCE_INDIVIDUAL_ITEM_DISCOUNT,
            self::SOURCE_NO_DISCOUNT_FROM_LIST_PRICE,
            self::SOURCE_ORDER_DEFAULT_DISCOUNT,
            self::SOURCE_ORDER_VOLUME_DISCOUNT,
            self::SOURCE_PROFORMA_ACTIVATION_DISCOUNT,
            self::SOURCE_PROMOTION_DISCOUNT,
            self::SOURCE_VOLUME_DISCOUNT,
            self::SOURCE_RENEWAL_CHAIN_REPEATED_DISCOUNT,
            self::SOURCE_CONTRIBUTOR_VOLUME_DISCOUNT,
            self::SOURCE_AUTO_RENEW_CHAIN_CHOICE_DISCOUNT,
            self::SOURCE_NO_BOOK_CLUB_DISCOUNT,
            self::SOURCE_COUPON_DISCOUNT,
            self::SOURCE_ASSOCIATION_BENEFIT_DISCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCombinationCodeAllowableValues()
    {
        return [
            self::COMBINATION_CODE_COMPOUND,
            self::COMBINATION_CODE_ADD,
            self::COMBINATION_CODE_USE_SMALLER,
            self::COMBINATION_CODE_USE_GREATER,
            self::COMBINATION_CODE_USE_FIRST,
            self::COMBINATION_CODE_USE_SECOND,
            self::COMBINATION_CODE_USE_FIRST_OR_DEFAULT,
            self::COMBINATION_CODE_USE_SECOND_OR_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['percent'] = isset($data['percent']) ? $data['percent'] : null;
        $this->container['combination_code'] = isset($data['combination_code']) ? $data['combination_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCombinationCodeAllowableValues();
        if (!is_null($this->container['combination_code']) && !in_array($this->container['combination_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'combination_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Discount source code.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets percent
     *
     * @return double
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     *
     * @param double $percent The percentage of the discount applied to the item price.  A 40% discount is indicated by a value of 40.
     *
     * @return $this
     */
    public function setPercent($percent)
    {
        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets combination_code
     *
     * @return string
     */
    public function getCombinationCode()
    {
        return $this->container['combination_code'];
    }

    /**
     * Sets combination_code
     *
     * @param string $combination_code The discount combination code, indicating how the discount is combined with other discounts.
     *
     * @return $this
     */
    public function setCombinationCode($combination_code)
    {
        $allowedValues = $this->getCombinationCodeAllowableValues();
        if (!is_null($combination_code) && !in_array($combination_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'combination_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['combination_code'] = $combination_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


