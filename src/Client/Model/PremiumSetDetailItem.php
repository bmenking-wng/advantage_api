<?php
/**
 * PremiumSetDetailItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PremiumSetDetailItem Class Doc Comment
 *
 * @category Class
 * @description An item on a premium set detail
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PremiumSetDetailItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PremiumSetDetailItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_number' => 'string',
        'send_to' => 'string',
        'ship_via_code' => 'string',
        'lifetime_maximum' => 'int',
        'subscription_choice_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_number' => null,
        'send_to' => null,
        'ship_via_code' => null,
        'lifetime_maximum' => 'int32',
        'subscription_choice_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_number' => 'ItemNumber',
        'send_to' => 'SendTo',
        'ship_via_code' => 'ShipViaCode',
        'lifetime_maximum' => 'LifetimeMaximum',
        'subscription_choice_code' => 'SubscriptionChoiceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_number' => 'setItemNumber',
        'send_to' => 'setSendTo',
        'ship_via_code' => 'setShipViaCode',
        'lifetime_maximum' => 'setLifetimeMaximum',
        'subscription_choice_code' => 'setSubscriptionChoiceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_number' => 'getItemNumber',
        'send_to' => 'getSendTo',
        'ship_via_code' => 'getShipViaCode',
        'lifetime_maximum' => 'getLifetimeMaximum',
        'subscription_choice_code' => 'getSubscriptionChoiceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEND_TO_BILL_TO_CUSTOMER = 'BillToCustomer';
    const SEND_TO_REFERRING_CUSTOMER = 'ReferringCustomer';
    const SEND_TO_SHIP_TO_CUSTOMER = 'ShipToCustomer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendToAllowableValues()
    {
        return [
            self::SEND_TO_BILL_TO_CUSTOMER,
            self::SEND_TO_REFERRING_CUSTOMER,
            self::SEND_TO_SHIP_TO_CUSTOMER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['send_to'] = isset($data['send_to']) ? $data['send_to'] : null;
        $this->container['ship_via_code'] = isset($data['ship_via_code']) ? $data['ship_via_code'] : null;
        $this->container['lifetime_maximum'] = isset($data['lifetime_maximum']) ? $data['lifetime_maximum'] : null;
        $this->container['subscription_choice_code'] = isset($data['subscription_choice_code']) ? $data['subscription_choice_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSendToAllowableValues();
        if (!is_null($this->container['send_to']) && !in_array($this->container['send_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_to', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number The Item Number is a code used to identify the stock item.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets send_to
     *
     * @return string
     */
    public function getSendTo()
    {
        return $this->container['send_to'];
    }

    /**
     * Sets send_to
     *
     * @param string $send_to Specify who to send the premium earned to.
     *
     * @return $this
     */
    public function setSendTo($send_to)
    {
        $allowedValues = $this->getSendToAllowableValues();
        if (!is_null($send_to) && !in_array($send_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_to', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_to'] = $send_to;

        return $this;
    }

    /**
     * Gets ship_via_code
     *
     * @return string
     */
    public function getShipViaCode()
    {
        return $this->container['ship_via_code'];
    }

    /**
     * Sets ship_via_code
     *
     * @param string $ship_via_code Indicates how the order was actually shipped.
     *
     * @return $this
     */
    public function setShipViaCode($ship_via_code)
    {
        $this->container['ship_via_code'] = $ship_via_code;

        return $this;
    }

    /**
     * Gets lifetime_maximum
     *
     * @return int
     */
    public function getLifetimeMaximum()
    {
        return $this->container['lifetime_maximum'];
    }

    /**
     * Sets lifetime_maximum
     *
     * @param int $lifetime_maximum Maximum number of times a customer can receive an item as a premium.
     *
     * @return $this
     */
    public function setLifetimeMaximum($lifetime_maximum)
    {
        $this->container['lifetime_maximum'] = $lifetime_maximum;

        return $this;
    }

    /**
     * Gets subscription_choice_code
     *
     * @return string
     */
    public function getSubscriptionChoiceCode()
    {
        return $this->container['subscription_choice_code'];
    }

    /**
     * Sets subscription_choice_code
     *
     * @param string $subscription_choice_code Code that uniquely identifies a subscription choice.
     *
     * @return $this
     */
    public function setSubscriptionChoiceCode($subscription_choice_code)
    {
        $this->container['subscription_choice_code'] = $subscription_choice_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


