<?php
/**
 * ItemInventoryReceipt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ItemInventoryReceipt Class Doc Comment
 *
 * @category Class
 * @description Information pertaining to a item inventory receipt.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemInventoryReceipt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemInventoryReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comments' => 'string',
        'cost_currency' => 'string',
        'is_zero_cost_hold' => 'bool',
        'receipt_date' => '\DateTime',
        'receipt_value' => 'string',
        'receiving_number' => 'double',
        'total_cost' => 'double',
        'total_units' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comments' => null,
        'cost_currency' => null,
        'is_zero_cost_hold' => null,
        'receipt_date' => 'date-time',
        'receipt_value' => null,
        'receiving_number' => 'double',
        'total_cost' => 'double',
        'total_units' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comments' => 'Comments',
        'cost_currency' => 'CostCurrency',
        'is_zero_cost_hold' => 'IsZeroCostHold',
        'receipt_date' => 'ReceiptDate',
        'receipt_value' => 'ReceiptValue',
        'receiving_number' => 'ReceivingNumber',
        'total_cost' => 'TotalCost',
        'total_units' => 'TotalUnits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comments' => 'setComments',
        'cost_currency' => 'setCostCurrency',
        'is_zero_cost_hold' => 'setIsZeroCostHold',
        'receipt_date' => 'setReceiptDate',
        'receipt_value' => 'setReceiptValue',
        'receiving_number' => 'setReceivingNumber',
        'total_cost' => 'setTotalCost',
        'total_units' => 'setTotalUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comments' => 'getComments',
        'cost_currency' => 'getCostCurrency',
        'is_zero_cost_hold' => 'getIsZeroCostHold',
        'receipt_date' => 'getReceiptDate',
        'receipt_value' => 'getReceiptValue',
        'receiving_number' => 'getReceivingNumber',
        'total_cost' => 'getTotalCost',
        'total_units' => 'getTotalUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['cost_currency'] = isset($data['cost_currency']) ? $data['cost_currency'] : null;
        $this->container['is_zero_cost_hold'] = isset($data['is_zero_cost_hold']) ? $data['is_zero_cost_hold'] : null;
        $this->container['receipt_date'] = isset($data['receipt_date']) ? $data['receipt_date'] : null;
        $this->container['receipt_value'] = isset($data['receipt_value']) ? $data['receipt_value'] : null;
        $this->container['receiving_number'] = isset($data['receiving_number']) ? $data['receiving_number'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['total_units'] = isset($data['total_units']) ? $data['total_units'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments Comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets cost_currency
     *
     * @return string
     */
    public function getCostCurrency()
    {
        return $this->container['cost_currency'];
    }

    /**
     * Sets cost_currency
     *
     * @param string $cost_currency Entry Currency
     *
     * @return $this
     */
    public function setCostCurrency($cost_currency)
    {
        $this->container['cost_currency'] = $cost_currency;

        return $this;
    }

    /**
     * Gets is_zero_cost_hold
     *
     * @return bool
     */
    public function getIsZeroCostHold()
    {
        return $this->container['is_zero_cost_hold'];
    }

    /**
     * Sets is_zero_cost_hold
     *
     * @param bool $is_zero_cost_hold Hold if Zero Cost?
     *
     * @return $this
     */
    public function setIsZeroCostHold($is_zero_cost_hold)
    {
        $this->container['is_zero_cost_hold'] = $is_zero_cost_hold;

        return $this;
    }

    /**
     * Gets receipt_date
     *
     * @return \DateTime
     */
    public function getReceiptDate()
    {
        return $this->container['receipt_date'];
    }

    /**
     * Sets receipt_date
     *
     * @param \DateTime $receipt_date Receipt Date
     *
     * @return $this
     */
    public function setReceiptDate($receipt_date)
    {
        $this->container['receipt_date'] = $receipt_date;

        return $this;
    }

    /**
     * Gets receipt_value
     *
     * @return string
     */
    public function getReceiptValue()
    {
        return $this->container['receipt_value'];
    }

    /**
     * Sets receipt_value
     *
     * @param string $receipt_value The Purchase Order number, Job Number, or Receipt Number.
     *
     * @return $this
     */
    public function setReceiptValue($receipt_value)
    {
        $this->container['receipt_value'] = $receipt_value;

        return $this;
    }

    /**
     * Gets receiving_number
     *
     * @return double
     */
    public function getReceivingNumber()
    {
        return $this->container['receiving_number'];
    }

    /**
     * Sets receiving_number
     *
     * @param double $receiving_number Receiving Number
     *
     * @return $this
     */
    public function setReceivingNumber($receiving_number)
    {
        $this->container['receiving_number'] = $receiving_number;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost Total Cost
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_units
     *
     * @return double
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     *
     * @param double $total_units Total Units
     *
     * @return $this
     */
    public function setTotalUnits($total_units)
    {
        $this->container['total_units'] = $total_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


