<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description Information for a customer.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'promote' => 'string',
        'promote_by_partners' => 'string',
        'birth_date' => '\DateTime',
        'sex_code' => 'string',
        'tax_exemption_id' => 'string',
        'credit_status_code' => 'string',
        'customer_type_code' => 'string',
        'change_source' => 'string',
        'credit_summary' => '\Advantage\Client\Model\CustomerCreditSummary',
        'addresses' => '\Advantage\Client\Model\CustomerAddress[]',
        'demographics' => '\Advantage\Client\Model\DemographicValue[]',
        'customer_url' => 'string',
        'subscription_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'promote' => null,
        'promote_by_partners' => null,
        'birth_date' => 'date-time',
        'sex_code' => null,
        'tax_exemption_id' => null,
        'credit_status_code' => null,
        'customer_type_code' => null,
        'change_source' => null,
        'credit_summary' => null,
        'addresses' => null,
        'demographics' => null,
        'customer_url' => null,
        'subscription_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'promote' => 'Promote',
        'promote_by_partners' => 'PromoteByPartners',
        'birth_date' => 'BirthDate',
        'sex_code' => 'SexCode',
        'tax_exemption_id' => 'TaxExemptionId',
        'credit_status_code' => 'CreditStatusCode',
        'customer_type_code' => 'CustomerTypeCode',
        'change_source' => 'ChangeSource',
        'credit_summary' => 'CreditSummary',
        'addresses' => 'Addresses',
        'demographics' => 'Demographics',
        'customer_url' => 'CustomerUrl',
        'subscription_list' => 'SubscriptionList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'promote' => 'setPromote',
        'promote_by_partners' => 'setPromoteByPartners',
        'birth_date' => 'setBirthDate',
        'sex_code' => 'setSexCode',
        'tax_exemption_id' => 'setTaxExemptionId',
        'credit_status_code' => 'setCreditStatusCode',
        'customer_type_code' => 'setCustomerTypeCode',
        'change_source' => 'setChangeSource',
        'credit_summary' => 'setCreditSummary',
        'addresses' => 'setAddresses',
        'demographics' => 'setDemographics',
        'customer_url' => 'setCustomerUrl',
        'subscription_list' => 'setSubscriptionList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'promote' => 'getPromote',
        'promote_by_partners' => 'getPromoteByPartners',
        'birth_date' => 'getBirthDate',
        'sex_code' => 'getSexCode',
        'tax_exemption_id' => 'getTaxExemptionId',
        'credit_status_code' => 'getCreditStatusCode',
        'customer_type_code' => 'getCustomerTypeCode',
        'change_source' => 'getChangeSource',
        'credit_summary' => 'getCreditSummary',
        'addresses' => 'getAddresses',
        'demographics' => 'getDemographics',
        'customer_url' => 'getCustomerUrl',
        'subscription_list' => 'getSubscriptionList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['promote'] = isset($data['promote']) ? $data['promote'] : null;
        $this->container['promote_by_partners'] = isset($data['promote_by_partners']) ? $data['promote_by_partners'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['sex_code'] = isset($data['sex_code']) ? $data['sex_code'] : null;
        $this->container['tax_exemption_id'] = isset($data['tax_exemption_id']) ? $data['tax_exemption_id'] : null;
        $this->container['credit_status_code'] = isset($data['credit_status_code']) ? $data['credit_status_code'] : null;
        $this->container['customer_type_code'] = isset($data['customer_type_code']) ? $data['customer_type_code'] : null;
        $this->container['change_source'] = isset($data['change_source']) ? $data['change_source'] : null;
        $this->container['credit_summary'] = isset($data['credit_summary']) ? $data['credit_summary'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['customer_url'] = isset($data['customer_url']) ? $data['customer_url'] : null;
        $this->container['subscription_list'] = isset($data['subscription_list']) ? $data['subscription_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The Advantage customer number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets promote
     *
     * @return string
     */
    public function getPromote()
    {
        return $this->container['promote'];
    }

    /**
     * Sets promote
     *
     * @param string $promote A setting that denotes whether or not the customer is OK to promote to.
     *
     * @return $this
     */
    public function setPromote($promote)
    {
        $this->container['promote'] = $promote;

        return $this;
    }

    /**
     * Gets promote_by_partners
     *
     * @return string
     */
    public function getPromoteByPartners()
    {
        return $this->container['promote_by_partners'];
    }

    /**
     * Sets promote_by_partners
     *
     * @param string $promote_by_partners A setting that denotes whether or not the customer is OK to promote to by third-parties.
     *
     * @return $this
     */
    public function setPromoteByPartners($promote_by_partners)
    {
        $this->container['promote_by_partners'] = $promote_by_partners;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date The customer's date of birth
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets sex_code
     *
     * @return string
     */
    public function getSexCode()
    {
        return $this->container['sex_code'];
    }

    /**
     * Sets sex_code
     *
     * @param string $sex_code The customer's gender
     *
     * @return $this
     */
    public function setSexCode($sex_code)
    {
        $this->container['sex_code'] = $sex_code;

        return $this;
    }

    /**
     * Gets tax_exemption_id
     *
     * @return string
     */
    public function getTaxExemptionId()
    {
        return $this->container['tax_exemption_id'];
    }

    /**
     * Sets tax_exemption_id
     *
     * @param string $tax_exemption_id The customer's tax exemption ID
     *
     * @return $this
     */
    public function setTaxExemptionId($tax_exemption_id)
    {
        $this->container['tax_exemption_id'] = $tax_exemption_id;

        return $this;
    }

    /**
     * Gets credit_status_code
     *
     * @return string
     */
    public function getCreditStatusCode()
    {
        return $this->container['credit_status_code'];
    }

    /**
     * Sets credit_status_code
     *
     * @param string $credit_status_code The customer's credit status
     *
     * @return $this
     */
    public function setCreditStatusCode($credit_status_code)
    {
        $this->container['credit_status_code'] = $credit_status_code;

        return $this;
    }

    /**
     * Gets customer_type_code
     *
     * @return string
     */
    public function getCustomerTypeCode()
    {
        return $this->container['customer_type_code'];
    }

    /**
     * Sets customer_type_code
     *
     * @param string $customer_type_code The customer type is used to categorize customers
     *
     * @return $this
     */
    public function setCustomerTypeCode($customer_type_code)
    {
        $this->container['customer_type_code'] = $customer_type_code;

        return $this;
    }

    /**
     * Gets change_source
     *
     * @return string
     */
    public function getChangeSource()
    {
        return $this->container['change_source'];
    }

    /**
     * Sets change_source
     *
     * @param string $change_source The system that last changed the customer record
     *
     * @return $this
     */
    public function setChangeSource($change_source)
    {
        $this->container['change_source'] = $change_source;

        return $this;
    }

    /**
     * Gets credit_summary
     *
     * @return \Advantage\Client\Model\CustomerCreditSummary
     */
    public function getCreditSummary()
    {
        return $this->container['credit_summary'];
    }

    /**
     * Sets credit_summary
     *
     * @param \Advantage\Client\Model\CustomerCreditSummary $credit_summary A summary of the customer A/R, reflecting all posted credits and debits.
     *
     * @return $this
     */
    public function setCreditSummary($credit_summary)
    {
        $this->container['credit_summary'] = $credit_summary;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Advantage\Client\Model\CustomerAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Advantage\Client\Model\CustomerAddress[] $addresses The customer's saved addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Advantage\Client\Model\DemographicValue[]
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Advantage\Client\Model\DemographicValue[] $demographics Customer demographic values (from the CUS-DMO1, CUS-DMO2, CUS-DMO3 partitions) saved on the customer record.
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets customer_url
     *
     * @return string
     */
    public function getCustomerUrl()
    {
        return $this->container['customer_url'];
    }

    /**
     * Sets customer_url
     *
     * @param string $customer_url Returns the value of the Customer URL for the current customer
     *
     * @return $this
     */
    public function setCustomerUrl($customer_url)
    {
        $this->container['customer_url'] = $customer_url;

        return $this;
    }

    /**
     * Gets subscription_list
     *
     * @return string[]
     */
    public function getSubscriptionList()
    {
        return $this->container['subscription_list'];
    }

    /**
     * Sets subscription_list
     *
     * @param string[] $subscription_list Returns a list of pub codes of the first 16 subscriptions found for the customer
     *
     * @return $this
     */
    public function setSubscriptionList($subscription_list)
    {
        $this->container['subscription_list'] = $subscription_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


