<?php
/**
 * CallListAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CallListAssignment Class Doc Comment
 *
 * @category Class
 * @description Data transfer object for CallList data
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallListAssignment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallListAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'call_list' => '\Advantage\Client\Model\CallList',
        'number_of_callbacks' => 'int',
        'quantity_assigned' => 'int',
        'quantity_completed' => 'int',
        'sales_rep' => '\Advantage\Client\Model\SalesRep',
        'total_remaining' => 'int',
        'total_remaining_on_list' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'call_list' => null,
        'number_of_callbacks' => 'int32',
        'quantity_assigned' => 'int32',
        'quantity_completed' => 'int32',
        'sales_rep' => null,
        'total_remaining' => 'int32',
        'total_remaining_on_list' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_list' => 'CallList',
        'number_of_callbacks' => 'NumberOfCallbacks',
        'quantity_assigned' => 'QuantityAssigned',
        'quantity_completed' => 'QuantityCompleted',
        'sales_rep' => 'SalesRep',
        'total_remaining' => 'TotalRemaining',
        'total_remaining_on_list' => 'TotalRemainingOnList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_list' => 'setCallList',
        'number_of_callbacks' => 'setNumberOfCallbacks',
        'quantity_assigned' => 'setQuantityAssigned',
        'quantity_completed' => 'setQuantityCompleted',
        'sales_rep' => 'setSalesRep',
        'total_remaining' => 'setTotalRemaining',
        'total_remaining_on_list' => 'setTotalRemainingOnList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_list' => 'getCallList',
        'number_of_callbacks' => 'getNumberOfCallbacks',
        'quantity_assigned' => 'getQuantityAssigned',
        'quantity_completed' => 'getQuantityCompleted',
        'sales_rep' => 'getSalesRep',
        'total_remaining' => 'getTotalRemaining',
        'total_remaining_on_list' => 'getTotalRemainingOnList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_list'] = isset($data['call_list']) ? $data['call_list'] : null;
        $this->container['number_of_callbacks'] = isset($data['number_of_callbacks']) ? $data['number_of_callbacks'] : null;
        $this->container['quantity_assigned'] = isset($data['quantity_assigned']) ? $data['quantity_assigned'] : null;
        $this->container['quantity_completed'] = isset($data['quantity_completed']) ? $data['quantity_completed'] : null;
        $this->container['sales_rep'] = isset($data['sales_rep']) ? $data['sales_rep'] : null;
        $this->container['total_remaining'] = isset($data['total_remaining']) ? $data['total_remaining'] : null;
        $this->container['total_remaining_on_list'] = isset($data['total_remaining_on_list']) ? $data['total_remaining_on_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_list
     *
     * @return \Advantage\Client\Model\CallList
     */
    public function getCallList()
    {
        return $this->container['call_list'];
    }

    /**
     * Sets call_list
     *
     * @param \Advantage\Client\Model\CallList $call_list Call list on which this rep has assigned calls
     *
     * @return $this
     */
    public function setCallList($call_list)
    {
        $this->container['call_list'] = $call_list;

        return $this;
    }

    /**
     * Gets number_of_callbacks
     *
     * @return int
     */
    public function getNumberOfCallbacks()
    {
        return $this->container['number_of_callbacks'];
    }

    /**
     * Sets number_of_callbacks
     *
     * @param int $number_of_callbacks Number of callbacks
     *
     * @return $this
     */
    public function setNumberOfCallbacks($number_of_callbacks)
    {
        $this->container['number_of_callbacks'] = $number_of_callbacks;

        return $this;
    }

    /**
     * Gets quantity_assigned
     *
     * @return int
     */
    public function getQuantityAssigned()
    {
        return $this->container['quantity_assigned'];
    }

    /**
     * Sets quantity_assigned
     *
     * @param int $quantity_assigned Number of calls assigned to this sales rep
     *
     * @return $this
     */
    public function setQuantityAssigned($quantity_assigned)
    {
        $this->container['quantity_assigned'] = $quantity_assigned;

        return $this;
    }

    /**
     * Gets quantity_completed
     *
     * @return int
     */
    public function getQuantityCompleted()
    {
        return $this->container['quantity_completed'];
    }

    /**
     * Sets quantity_completed
     *
     * @param int $quantity_completed Number of calls this sales rep has completed
     *
     * @return $this
     */
    public function setQuantityCompleted($quantity_completed)
    {
        $this->container['quantity_completed'] = $quantity_completed;

        return $this;
    }

    /**
     * Gets sales_rep
     *
     * @return \Advantage\Client\Model\SalesRep
     */
    public function getSalesRep()
    {
        return $this->container['sales_rep'];
    }

    /**
     * Sets sales_rep
     *
     * @param \Advantage\Client\Model\SalesRep $sales_rep Sales Representative
     *
     * @return $this
     */
    public function setSalesRep($sales_rep)
    {
        $this->container['sales_rep'] = $sales_rep;

        return $this;
    }

    /**
     * Gets total_remaining
     *
     * @return int
     */
    public function getTotalRemaining()
    {
        return $this->container['total_remaining'];
    }

    /**
     * Sets total_remaining
     *
     * @param int $total_remaining Number of remaining calls for this sales rep
     *
     * @return $this
     */
    public function setTotalRemaining($total_remaining)
    {
        $this->container['total_remaining'] = $total_remaining;

        return $this;
    }

    /**
     * Gets total_remaining_on_list
     *
     * @return int
     */
    public function getTotalRemainingOnList()
    {
        return $this->container['total_remaining_on_list'];
    }

    /**
     * Sets total_remaining_on_list
     *
     * @param int $total_remaining_on_list Total number of remaining calls on the list
     *
     * @return $this
     */
    public function setTotalRemainingOnList($total_remaining_on_list)
    {
        $this->container['total_remaining_on_list'] = $total_remaining_on_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


