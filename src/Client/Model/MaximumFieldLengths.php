<?php
/**
 * MaximumFieldLengths
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * MaximumFieldLengths Class Doc Comment
 *
 * @category Class
 * @description The maximum lengths for fields.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaximumFieldLengths implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaximumFieldLengths';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_name' => 'int',
        'email' => 'int',
        'phone' => 'int',
        'city' => 'int',
        'state_code' => 'int',
        'postal_code' => 'int',
        'user_name' => 'int',
        'password' => 'int',
        'customer_name' => 'int',
        'address_line' => 'int',
        'campaign_code' => 'int',
        'campaign_name' => 'int',
        'promotion_code' => 'int',
        'promotion_name' => 'int',
        'offer_code' => 'int',
        'offer_name' => 'int',
        'initiator' => 'int',
        'promotion_choice_code' => 'int',
        'promotion_choice_name' => 'int',
        'customer_number' => 'int',
        'department_name' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_name' => 'int32',
        'email' => 'int32',
        'phone' => 'int32',
        'city' => 'int32',
        'state_code' => 'int32',
        'postal_code' => 'int32',
        'user_name' => 'int32',
        'password' => 'int32',
        'customer_name' => 'int32',
        'address_line' => 'int32',
        'campaign_code' => 'int32',
        'campaign_name' => 'int32',
        'promotion_code' => 'int32',
        'promotion_name' => 'int32',
        'offer_code' => 'int32',
        'offer_name' => 'int32',
        'initiator' => 'int32',
        'promotion_choice_code' => 'int32',
        'promotion_choice_name' => 'int32',
        'customer_number' => 'int32',
        'department_name' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'CompanyName',
        'email' => 'Email',
        'phone' => 'Phone',
        'city' => 'City',
        'state_code' => 'StateCode',
        'postal_code' => 'PostalCode',
        'user_name' => 'UserName',
        'password' => 'Password',
        'customer_name' => 'CustomerName',
        'address_line' => 'AddressLine',
        'campaign_code' => 'CampaignCode',
        'campaign_name' => 'CampaignName',
        'promotion_code' => 'PromotionCode',
        'promotion_name' => 'PromotionName',
        'offer_code' => 'OfferCode',
        'offer_name' => 'OfferName',
        'initiator' => 'Initiator',
        'promotion_choice_code' => 'PromotionChoiceCode',
        'promotion_choice_name' => 'PromotionChoiceName',
        'customer_number' => 'CustomerNumber',
        'department_name' => 'DepartmentName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'city' => 'setCity',
        'state_code' => 'setStateCode',
        'postal_code' => 'setPostalCode',
        'user_name' => 'setUserName',
        'password' => 'setPassword',
        'customer_name' => 'setCustomerName',
        'address_line' => 'setAddressLine',
        'campaign_code' => 'setCampaignCode',
        'campaign_name' => 'setCampaignName',
        'promotion_code' => 'setPromotionCode',
        'promotion_name' => 'setPromotionName',
        'offer_code' => 'setOfferCode',
        'offer_name' => 'setOfferName',
        'initiator' => 'setInitiator',
        'promotion_choice_code' => 'setPromotionChoiceCode',
        'promotion_choice_name' => 'setPromotionChoiceName',
        'customer_number' => 'setCustomerNumber',
        'department_name' => 'setDepartmentName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'city' => 'getCity',
        'state_code' => 'getStateCode',
        'postal_code' => 'getPostalCode',
        'user_name' => 'getUserName',
        'password' => 'getPassword',
        'customer_name' => 'getCustomerName',
        'address_line' => 'getAddressLine',
        'campaign_code' => 'getCampaignCode',
        'campaign_name' => 'getCampaignName',
        'promotion_code' => 'getPromotionCode',
        'promotion_name' => 'getPromotionName',
        'offer_code' => 'getOfferCode',
        'offer_name' => 'getOfferName',
        'initiator' => 'getInitiator',
        'promotion_choice_code' => 'getPromotionChoiceCode',
        'promotion_choice_name' => 'getPromotionChoiceName',
        'customer_number' => 'getCustomerNumber',
        'department_name' => 'getDepartmentName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['address_line'] = isset($data['address_line']) ? $data['address_line'] : null;
        $this->container['campaign_code'] = isset($data['campaign_code']) ? $data['campaign_code'] : null;
        $this->container['campaign_name'] = isset($data['campaign_name']) ? $data['campaign_name'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['promotion_name'] = isset($data['promotion_name']) ? $data['promotion_name'] : null;
        $this->container['offer_code'] = isset($data['offer_code']) ? $data['offer_code'] : null;
        $this->container['offer_name'] = isset($data['offer_name']) ? $data['offer_name'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
        $this->container['promotion_choice_code'] = isset($data['promotion_choice_code']) ? $data['promotion_choice_code'] : null;
        $this->container['promotion_choice_name'] = isset($data['promotion_choice_name']) ? $data['promotion_choice_name'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['department_name'] = isset($data['department_name']) ? $data['department_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_name
     *
     * @return int
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param int $company_name The maximum length of a company name.
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return int
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param int $email The maximum length of an email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return int
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param int $phone The maximum length of a phone number.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets city
     *
     * @return int
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param int $city The maximum length of a city name.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return int
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param int $state_code The maximum length of a state code.
     *
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return int
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param int $postal_code The maximum length of a postal code.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return int
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param int $user_name The maximum length of a username.
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return int
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param int $password The maximum length of a password.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return int
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param int $customer_name The maximum length of a customer name.
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets address_line
     *
     * @return int
     */
    public function getAddressLine()
    {
        return $this->container['address_line'];
    }

    /**
     * Sets address_line
     *
     * @param int $address_line The maximum length of a line of an address.
     *
     * @return $this
     */
    public function setAddressLine($address_line)
    {
        $this->container['address_line'] = $address_line;

        return $this;
    }

    /**
     * Gets campaign_code
     *
     * @return int
     */
    public function getCampaignCode()
    {
        return $this->container['campaign_code'];
    }

    /**
     * Sets campaign_code
     *
     * @param int $campaign_code The maximum length of a campaign code.
     *
     * @return $this
     */
    public function setCampaignCode($campaign_code)
    {
        $this->container['campaign_code'] = $campaign_code;

        return $this;
    }

    /**
     * Gets campaign_name
     *
     * @return int
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     *
     * @param int $campaign_name The maximum length of the name of a campaign.
     *
     * @return $this
     */
    public function setCampaignName($campaign_name)
    {
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return int
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param int $promotion_code The maximum length of a promotion code.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets promotion_name
     *
     * @return int
     */
    public function getPromotionName()
    {
        return $this->container['promotion_name'];
    }

    /**
     * Sets promotion_name
     *
     * @param int $promotion_name The maximum length of the name of a promotion.
     *
     * @return $this
     */
    public function setPromotionName($promotion_name)
    {
        $this->container['promotion_name'] = $promotion_name;

        return $this;
    }

    /**
     * Gets offer_code
     *
     * @return int
     */
    public function getOfferCode()
    {
        return $this->container['offer_code'];
    }

    /**
     * Sets offer_code
     *
     * @param int $offer_code The maximum length of an offer code.
     *
     * @return $this
     */
    public function setOfferCode($offer_code)
    {
        $this->container['offer_code'] = $offer_code;

        return $this;
    }

    /**
     * Gets offer_name
     *
     * @return int
     */
    public function getOfferName()
    {
        return $this->container['offer_name'];
    }

    /**
     * Sets offer_name
     *
     * @param int $offer_name The maximum length of the name of an offer.
     *
     * @return $this
     */
    public function setOfferName($offer_name)
    {
        $this->container['offer_name'] = $offer_name;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return int
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param int $initiator The maximum length of the initiator of a promotion.
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets promotion_choice_code
     *
     * @return int
     */
    public function getPromotionChoiceCode()
    {
        return $this->container['promotion_choice_code'];
    }

    /**
     * Sets promotion_choice_code
     *
     * @param int $promotion_choice_code The maximum length of the code of a promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoiceCode($promotion_choice_code)
    {
        $this->container['promotion_choice_code'] = $promotion_choice_code;

        return $this;
    }

    /**
     * Gets promotion_choice_name
     *
     * @return int
     */
    public function getPromotionChoiceName()
    {
        return $this->container['promotion_choice_name'];
    }

    /**
     * Sets promotion_choice_name
     *
     * @param int $promotion_choice_name The maximum length of the name of a promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoiceName($promotion_choice_name)
    {
        $this->container['promotion_choice_name'] = $promotion_choice_name;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return int
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param int $customer_number The maximum length of a customer number.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets department_name
     *
     * @return int
     */
    public function getDepartmentName()
    {
        return $this->container['department_name'];
    }

    /**
     * Sets department_name
     *
     * @param int $department_name The maximum length of a department name.
     *
     * @return $this
     */
    public function setDepartmentName($department_name)
    {
        $this->container['department_name'] = $department_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


