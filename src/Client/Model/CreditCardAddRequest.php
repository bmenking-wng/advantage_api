<?php
/**
 * CreditCardAddRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CreditCardAddRequest Class Doc Comment
 *
 * @category Class
 * @description Information for adding a credit card to a customer account.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardAddRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardAddRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_vault_token' => 'string',
        'token' => 'string',
        'number' => 'string',
        'payment_method_code' => 'string',
        'expire_month' => 'int',
        'expire_year' => 'int',
        'start_year' => 'string',
        'start_month' => 'string',
        'issue_number' => 'string',
        'save_for_future_payments' => 'bool',
        'is_web_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_vault_token' => null,
        'token' => null,
        'number' => null,
        'payment_method_code' => null,
        'expire_month' => 'int32',
        'expire_year' => 'int32',
        'start_year' => null,
        'start_month' => null,
        'issue_number' => null,
        'save_for_future_payments' => null,
        'is_web_default' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_vault_token' => 'CardVaultToken',
        'token' => 'Token',
        'number' => 'Number',
        'payment_method_code' => 'PaymentMethodCode',
        'expire_month' => 'ExpireMonth',
        'expire_year' => 'ExpireYear',
        'start_year' => 'StartYear',
        'start_month' => 'StartMonth',
        'issue_number' => 'IssueNumber',
        'save_for_future_payments' => 'SaveForFuturePayments',
        'is_web_default' => 'IsWebDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_vault_token' => 'setCardVaultToken',
        'token' => 'setToken',
        'number' => 'setNumber',
        'payment_method_code' => 'setPaymentMethodCode',
        'expire_month' => 'setExpireMonth',
        'expire_year' => 'setExpireYear',
        'start_year' => 'setStartYear',
        'start_month' => 'setStartMonth',
        'issue_number' => 'setIssueNumber',
        'save_for_future_payments' => 'setSaveForFuturePayments',
        'is_web_default' => 'setIsWebDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_vault_token' => 'getCardVaultToken',
        'token' => 'getToken',
        'number' => 'getNumber',
        'payment_method_code' => 'getPaymentMethodCode',
        'expire_month' => 'getExpireMonth',
        'expire_year' => 'getExpireYear',
        'start_year' => 'getStartYear',
        'start_month' => 'getStartMonth',
        'issue_number' => 'getIssueNumber',
        'save_for_future_payments' => 'getSaveForFuturePayments',
        'is_web_default' => 'getIsWebDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_vault_token'] = isset($data['card_vault_token']) ? $data['card_vault_token'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['payment_method_code'] = isset($data['payment_method_code']) ? $data['payment_method_code'] : null;
        $this->container['expire_month'] = isset($data['expire_month']) ? $data['expire_month'] : null;
        $this->container['expire_year'] = isset($data['expire_year']) ? $data['expire_year'] : null;
        $this->container['start_year'] = isset($data['start_year']) ? $data['start_year'] : null;
        $this->container['start_month'] = isset($data['start_month']) ? $data['start_month'] : null;
        $this->container['issue_number'] = isset($data['issue_number']) ? $data['issue_number'] : null;
        $this->container['save_for_future_payments'] = isset($data['save_for_future_payments']) ? $data['save_for_future_payments'] : null;
        $this->container['is_web_default'] = isset($data['is_web_default']) ? $data['is_web_default'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_vault_token
     *
     * @return string
     */
    public function getCardVaultToken()
    {
        return $this->container['card_vault_token'];
    }

    /**
     * Sets card_vault_token
     *
     * @param string $card_vault_token Card vault token value. Provide this value only if the card was already deposited into Card Vault.
     *
     * @return $this
     */
    public function setCardVaultToken($card_vault_token)
    {
        $this->container['card_vault_token'] = $card_vault_token;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Card vendor token value. Provide this value only if the card was already tokenized outside Advantage with the card vendor.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The card number, or card mask if supplying Token.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets payment_method_code
     *
     * @return string
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     *
     * @param string $payment_method_code The Advantage payment code for the type of card to use.
     *
     * @return $this
     */
    public function setPaymentMethodCode($payment_method_code)
    {
        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets expire_month
     *
     * @return int
     */
    public function getExpireMonth()
    {
        return $this->container['expire_month'];
    }

    /**
     * Sets expire_month
     *
     * @param int $expire_month Card expiration month.
     *
     * @return $this
     */
    public function setExpireMonth($expire_month)
    {
        $this->container['expire_month'] = $expire_month;

        return $this;
    }

    /**
     * Gets expire_year
     *
     * @return int
     */
    public function getExpireYear()
    {
        return $this->container['expire_year'];
    }

    /**
     * Sets expire_year
     *
     * @param int $expire_year Card expiration year (four digits).
     *
     * @return $this
     */
    public function setExpireYear($expire_year)
    {
        $this->container['expire_year'] = $expire_year;

        return $this;
    }

    /**
     * Gets start_year
     *
     * @return string
     */
    public function getStartYear()
    {
        return $this->container['start_year'];
    }

    /**
     * Sets start_year
     *
     * @param string $start_year The card start year (required for some types of credit cards)
     *
     * @return $this
     */
    public function setStartYear($start_year)
    {
        $this->container['start_year'] = $start_year;

        return $this;
    }

    /**
     * Gets start_month
     *
     * @return string
     */
    public function getStartMonth()
    {
        return $this->container['start_month'];
    }

    /**
     * Sets start_month
     *
     * @param string $start_month The card start month (required for some types of credit cards)
     *
     * @return $this
     */
    public function setStartMonth($start_month)
    {
        $this->container['start_month'] = $start_month;

        return $this;
    }

    /**
     * Gets issue_number
     *
     * @return string
     */
    public function getIssueNumber()
    {
        return $this->container['issue_number'];
    }

    /**
     * Sets issue_number
     *
     * @param string $issue_number The card issue number (required for some types of credit cards)
     *
     * @return $this
     */
    public function setIssueNumber($issue_number)
    {
        $this->container['issue_number'] = $issue_number;

        return $this;
    }

    /**
     * Gets save_for_future_payments
     *
     * @return bool
     */
    public function getSaveForFuturePayments()
    {
        return $this->container['save_for_future_payments'];
    }

    /**
     * Sets save_for_future_payments
     *
     * @param bool $save_for_future_payments Is this card valid for future use?
     *
     * @return $this
     */
    public function setSaveForFuturePayments($save_for_future_payments)
    {
        $this->container['save_for_future_payments'] = $save_for_future_payments;

        return $this;
    }

    /**
     * Gets is_web_default
     *
     * @return bool
     */
    public function getIsWebDefault()
    {
        return $this->container['is_web_default'];
    }

    /**
     * Sets is_web_default
     *
     * @param bool $is_web_default Is this card a default for orders from the web?
     *
     * @return $this
     */
    public function setIsWebDefault($is_web_default)
    {
        $this->container['is_web_default'] = $is_web_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


