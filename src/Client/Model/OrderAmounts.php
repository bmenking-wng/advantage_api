<?php
/**
 * OrderAmounts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderAmounts Class Doc Comment
 *
 * @category Class
 * @description Pricing amounts for an order. Some properties may not be set for some types of orders.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderAmounts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderAmounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'minimum_payment' => 'double',
        'discount_percent' => 'double',
        'total_discount_ordered' => 'double',
        'misc_charges_ordered' => 'double',
        'shipping_charges_ordered' => 'double',
        'total_sales_amount_ordered' => 'double',
        'sales_tax_ordered' => 'double',
        'total_cost_ordered' => 'double',
        'misc_charges' => 'double',
        'total_cost' => 'double',
        'total_discount' => 'double',
        'total_sales_amount' => 'double',
        'shipping_charges' => 'double',
        'sales_tax' => 'double',
        'payments_received' => 'double',
        'balance_due' => 'double',
        'initial_payment' => 'double',
        'is_tax_included_in_price' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'minimum_payment' => 'double',
        'discount_percent' => 'double',
        'total_discount_ordered' => 'double',
        'misc_charges_ordered' => 'double',
        'shipping_charges_ordered' => 'double',
        'total_sales_amount_ordered' => 'double',
        'sales_tax_ordered' => 'double',
        'total_cost_ordered' => 'double',
        'misc_charges' => 'double',
        'total_cost' => 'double',
        'total_discount' => 'double',
        'total_sales_amount' => 'double',
        'shipping_charges' => 'double',
        'sales_tax' => 'double',
        'payments_received' => 'double',
        'balance_due' => 'double',
        'initial_payment' => 'double',
        'is_tax_included_in_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'minimum_payment' => 'MinimumPayment',
        'discount_percent' => 'DiscountPercent',
        'total_discount_ordered' => 'TotalDiscountOrdered',
        'misc_charges_ordered' => 'MiscChargesOrdered',
        'shipping_charges_ordered' => 'ShippingChargesOrdered',
        'total_sales_amount_ordered' => 'TotalSalesAmountOrdered',
        'sales_tax_ordered' => 'SalesTaxOrdered',
        'total_cost_ordered' => 'TotalCostOrdered',
        'misc_charges' => 'MiscCharges',
        'total_cost' => 'TotalCost',
        'total_discount' => 'TotalDiscount',
        'total_sales_amount' => 'TotalSalesAmount',
        'shipping_charges' => 'ShippingCharges',
        'sales_tax' => 'SalesTax',
        'payments_received' => 'PaymentsReceived',
        'balance_due' => 'BalanceDue',
        'initial_payment' => 'InitialPayment',
        'is_tax_included_in_price' => 'IsTaxIncludedInPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'minimum_payment' => 'setMinimumPayment',
        'discount_percent' => 'setDiscountPercent',
        'total_discount_ordered' => 'setTotalDiscountOrdered',
        'misc_charges_ordered' => 'setMiscChargesOrdered',
        'shipping_charges_ordered' => 'setShippingChargesOrdered',
        'total_sales_amount_ordered' => 'setTotalSalesAmountOrdered',
        'sales_tax_ordered' => 'setSalesTaxOrdered',
        'total_cost_ordered' => 'setTotalCostOrdered',
        'misc_charges' => 'setMiscCharges',
        'total_cost' => 'setTotalCost',
        'total_discount' => 'setTotalDiscount',
        'total_sales_amount' => 'setTotalSalesAmount',
        'shipping_charges' => 'setShippingCharges',
        'sales_tax' => 'setSalesTax',
        'payments_received' => 'setPaymentsReceived',
        'balance_due' => 'setBalanceDue',
        'initial_payment' => 'setInitialPayment',
        'is_tax_included_in_price' => 'setIsTaxIncludedInPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'minimum_payment' => 'getMinimumPayment',
        'discount_percent' => 'getDiscountPercent',
        'total_discount_ordered' => 'getTotalDiscountOrdered',
        'misc_charges_ordered' => 'getMiscChargesOrdered',
        'shipping_charges_ordered' => 'getShippingChargesOrdered',
        'total_sales_amount_ordered' => 'getTotalSalesAmountOrdered',
        'sales_tax_ordered' => 'getSalesTaxOrdered',
        'total_cost_ordered' => 'getTotalCostOrdered',
        'misc_charges' => 'getMiscCharges',
        'total_cost' => 'getTotalCost',
        'total_discount' => 'getTotalDiscount',
        'total_sales_amount' => 'getTotalSalesAmount',
        'shipping_charges' => 'getShippingCharges',
        'sales_tax' => 'getSalesTax',
        'payments_received' => 'getPaymentsReceived',
        'balance_due' => 'getBalanceDue',
        'initial_payment' => 'getInitialPayment',
        'is_tax_included_in_price' => 'getIsTaxIncludedInPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minimum_payment'] = isset($data['minimum_payment']) ? $data['minimum_payment'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['total_discount_ordered'] = isset($data['total_discount_ordered']) ? $data['total_discount_ordered'] : null;
        $this->container['misc_charges_ordered'] = isset($data['misc_charges_ordered']) ? $data['misc_charges_ordered'] : null;
        $this->container['shipping_charges_ordered'] = isset($data['shipping_charges_ordered']) ? $data['shipping_charges_ordered'] : null;
        $this->container['total_sales_amount_ordered'] = isset($data['total_sales_amount_ordered']) ? $data['total_sales_amount_ordered'] : null;
        $this->container['sales_tax_ordered'] = isset($data['sales_tax_ordered']) ? $data['sales_tax_ordered'] : null;
        $this->container['total_cost_ordered'] = isset($data['total_cost_ordered']) ? $data['total_cost_ordered'] : null;
        $this->container['misc_charges'] = isset($data['misc_charges']) ? $data['misc_charges'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['total_sales_amount'] = isset($data['total_sales_amount']) ? $data['total_sales_amount'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['sales_tax'] = isset($data['sales_tax']) ? $data['sales_tax'] : null;
        $this->container['payments_received'] = isset($data['payments_received']) ? $data['payments_received'] : null;
        $this->container['balance_due'] = isset($data['balance_due']) ? $data['balance_due'] : null;
        $this->container['initial_payment'] = isset($data['initial_payment']) ? $data['initial_payment'] : null;
        $this->container['is_tax_included_in_price'] = isset($data['is_tax_included_in_price']) ? $data['is_tax_included_in_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets minimum_payment
     *
     * @return double
     */
    public function getMinimumPayment()
    {
        return $this->container['minimum_payment'];
    }

    /**
     * Sets minimum_payment
     *
     * @param double $minimum_payment The minimum payment amount required for the order.
     *
     * @return $this
     */
    public function setMinimumPayment($minimum_payment)
    {
        $this->container['minimum_payment'] = $minimum_payment;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent The discount percentage of the order.  A 40% discount is entered as 40.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets total_discount_ordered
     *
     * @return double
     */
    public function getTotalDiscountOrdered()
    {
        return $this->container['total_discount_ordered'];
    }

    /**
     * Sets total_discount_ordered
     *
     * @param double $total_discount_ordered The total amount discounted from the total cost of the items ordered.
     *
     * @return $this
     */
    public function setTotalDiscountOrdered($total_discount_ordered)
    {
        $this->container['total_discount_ordered'] = $total_discount_ordered;

        return $this;
    }

    /**
     * Gets misc_charges_ordered
     *
     * @return double
     */
    public function getMiscChargesOrdered()
    {
        return $this->container['misc_charges_ordered'];
    }

    /**
     * Sets misc_charges_ordered
     *
     * @param double $misc_charges_ordered Any other charges being billed to the customer for the items ordered.
     *
     * @return $this
     */
    public function setMiscChargesOrdered($misc_charges_ordered)
    {
        $this->container['misc_charges_ordered'] = $misc_charges_ordered;

        return $this;
    }

    /**
     * Gets shipping_charges_ordered
     *
     * @return double
     */
    public function getShippingChargesOrdered()
    {
        return $this->container['shipping_charges_ordered'];
    }

    /**
     * Sets shipping_charges_ordered
     *
     * @param double $shipping_charges_ordered The amount charged for shipping the items ordered.
     *
     * @return $this
     */
    public function setShippingChargesOrdered($shipping_charges_ordered)
    {
        $this->container['shipping_charges_ordered'] = $shipping_charges_ordered;

        return $this;
    }

    /**
     * Gets total_sales_amount_ordered
     *
     * @return double
     */
    public function getTotalSalesAmountOrdered()
    {
        return $this->container['total_sales_amount_ordered'];
    }

    /**
     * Sets total_sales_amount_ordered
     *
     * @param double $total_sales_amount_ordered The total sales amount for the items ordered.
     *
     * @return $this
     */
    public function setTotalSalesAmountOrdered($total_sales_amount_ordered)
    {
        $this->container['total_sales_amount_ordered'] = $total_sales_amount_ordered;

        return $this;
    }

    /**
     * Gets sales_tax_ordered
     *
     * @return double
     */
    public function getSalesTaxOrdered()
    {
        return $this->container['sales_tax_ordered'];
    }

    /**
     * Sets sales_tax_ordered
     *
     * @param double $sales_tax_ordered The sales tax on the items ordered.
     *
     * @return $this
     */
    public function setSalesTaxOrdered($sales_tax_ordered)
    {
        $this->container['sales_tax_ordered'] = $sales_tax_ordered;

        return $this;
    }

    /**
     * Gets total_cost_ordered
     *
     * @return double
     */
    public function getTotalCostOrdered()
    {
        return $this->container['total_cost_ordered'];
    }

    /**
     * Sets total_cost_ordered
     *
     * @param double $total_cost_ordered The total cost for the items ordered.
     *
     * @return $this
     */
    public function setTotalCostOrdered($total_cost_ordered)
    {
        $this->container['total_cost_ordered'] = $total_cost_ordered;

        return $this;
    }

    /**
     * Gets misc_charges
     *
     * @return double
     */
    public function getMiscCharges()
    {
        return $this->container['misc_charges'];
    }

    /**
     * Sets misc_charges
     *
     * @param double $misc_charges Any other charges being billed to the customer for the order.
     *
     * @return $this
     */
    public function setMiscCharges($misc_charges)
    {
        $this->container['misc_charges'] = $misc_charges;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost The order total.
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return double
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param double $total_discount The total amount discounted from the total cost of the order.
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_sales_amount
     *
     * @return double
     */
    public function getTotalSalesAmount()
    {
        return $this->container['total_sales_amount'];
    }

    /**
     * Sets total_sales_amount
     *
     * @param double $total_sales_amount The total sales amount for the order.
     *
     * @return $this
     */
    public function setTotalSalesAmount($total_sales_amount)
    {
        $this->container['total_sales_amount'] = $total_sales_amount;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return double
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param double $shipping_charges The amount charged for shipping the order.
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {
        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return double
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param double $sales_tax The amount of sales tax on the order.
     *
     * @return $this
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets payments_received
     *
     * @return double
     */
    public function getPaymentsReceived()
    {
        return $this->container['payments_received'];
    }

    /**
     * Sets payments_received
     *
     * @param double $payments_received The total amount credited to the order.
     *
     * @return $this
     */
    public function setPaymentsReceived($payments_received)
    {
        $this->container['payments_received'] = $payments_received;

        return $this;
    }

    /**
     * Gets balance_due
     *
     * @return double
     */
    public function getBalanceDue()
    {
        return $this->container['balance_due'];
    }

    /**
     * Sets balance_due
     *
     * @param double $balance_due The amount due for the order.
     *
     * @return $this
     */
    public function setBalanceDue($balance_due)
    {
        $this->container['balance_due'] = $balance_due;

        return $this;
    }

    /**
     * Gets initial_payment
     *
     * @return double
     */
    public function getInitialPayment()
    {
        return $this->container['initial_payment'];
    }

    /**
     * Sets initial_payment
     *
     * @param double $initial_payment The initial payment for the order
     *
     * @return $this
     */
    public function setInitialPayment($initial_payment)
    {
        $this->container['initial_payment'] = $initial_payment;

        return $this;
    }

    /**
     * Gets is_tax_included_in_price
     *
     * @return bool
     */
    public function getIsTaxIncludedInPrice()
    {
        return $this->container['is_tax_included_in_price'];
    }

    /**
     * Sets is_tax_included_in_price
     *
     * @param bool $is_tax_included_in_price Are taxes included in the prices?
     *
     * @return $this
     */
    public function setIsTaxIncludedInPrice($is_tax_included_in_price)
    {
        $this->container['is_tax_included_in_price'] = $is_tax_included_in_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


