<?php
/**
 * CommonOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CommonOptions Class Doc Comment
 *
 * @category Class
 * @description Website options from advantage.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommonOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommonOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_country_code' => 'string',
        'parent_currency_code' => 'string',
        'parent_iso_currency_code' => 'string',
        'client_abbreviation' => 'string',
        'prompt_item_name1' => 'string',
        'prompt_item_name2' => 'string',
        'prompt_item_name3' => 'string',
        'author_field' => 'int',
        'default_customer_type' => 'string',
        'default_address_code' => 'string',
        'primary_street_line' => 'int',
        'phone_number1_prompt' => 'string',
        'phone_number2_prompt' => 'string',
        'phone_number3_prompt' => 'string',
        'is_customer_or_company_name_required' => 'bool',
        'is_middle_initial_shown' => 'bool',
        'address_line1_prompt' => 'string',
        'address_line2_prompt' => 'string',
        'address_line3_prompt' => 'string',
        'advantage_area_code' => 'string',
        'card_vault_base_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_country_code' => null,
        'parent_currency_code' => null,
        'parent_iso_currency_code' => null,
        'client_abbreviation' => null,
        'prompt_item_name1' => null,
        'prompt_item_name2' => null,
        'prompt_item_name3' => null,
        'author_field' => 'int32',
        'default_customer_type' => null,
        'default_address_code' => null,
        'primary_street_line' => 'int32',
        'phone_number1_prompt' => null,
        'phone_number2_prompt' => null,
        'phone_number3_prompt' => null,
        'is_customer_or_company_name_required' => null,
        'is_middle_initial_shown' => null,
        'address_line1_prompt' => null,
        'address_line2_prompt' => null,
        'address_line3_prompt' => null,
        'advantage_area_code' => null,
        'card_vault_base_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_country_code' => 'DefaultCountryCode',
        'parent_currency_code' => 'ParentCurrencyCode',
        'parent_iso_currency_code' => 'ParentIsoCurrencyCode',
        'client_abbreviation' => 'ClientAbbreviation',
        'prompt_item_name1' => 'PromptItemName1',
        'prompt_item_name2' => 'PromptItemName2',
        'prompt_item_name3' => 'PromptItemName3',
        'author_field' => 'AuthorField',
        'default_customer_type' => 'DefaultCustomerType',
        'default_address_code' => 'DefaultAddressCode',
        'primary_street_line' => 'PrimaryStreetLine',
        'phone_number1_prompt' => 'PhoneNumber1Prompt',
        'phone_number2_prompt' => 'PhoneNumber2Prompt',
        'phone_number3_prompt' => 'PhoneNumber3Prompt',
        'is_customer_or_company_name_required' => 'IsCustomerOrCompanyNameRequired',
        'is_middle_initial_shown' => 'IsMiddleInitialShown',
        'address_line1_prompt' => 'AddressLine1Prompt',
        'address_line2_prompt' => 'AddressLine2Prompt',
        'address_line3_prompt' => 'AddressLine3Prompt',
        'advantage_area_code' => 'AdvantageAreaCode',
        'card_vault_base_url' => 'CardVaultBaseUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_country_code' => 'setDefaultCountryCode',
        'parent_currency_code' => 'setParentCurrencyCode',
        'parent_iso_currency_code' => 'setParentIsoCurrencyCode',
        'client_abbreviation' => 'setClientAbbreviation',
        'prompt_item_name1' => 'setPromptItemName1',
        'prompt_item_name2' => 'setPromptItemName2',
        'prompt_item_name3' => 'setPromptItemName3',
        'author_field' => 'setAuthorField',
        'default_customer_type' => 'setDefaultCustomerType',
        'default_address_code' => 'setDefaultAddressCode',
        'primary_street_line' => 'setPrimaryStreetLine',
        'phone_number1_prompt' => 'setPhoneNumber1Prompt',
        'phone_number2_prompt' => 'setPhoneNumber2Prompt',
        'phone_number3_prompt' => 'setPhoneNumber3Prompt',
        'is_customer_or_company_name_required' => 'setIsCustomerOrCompanyNameRequired',
        'is_middle_initial_shown' => 'setIsMiddleInitialShown',
        'address_line1_prompt' => 'setAddressLine1Prompt',
        'address_line2_prompt' => 'setAddressLine2Prompt',
        'address_line3_prompt' => 'setAddressLine3Prompt',
        'advantage_area_code' => 'setAdvantageAreaCode',
        'card_vault_base_url' => 'setCardVaultBaseUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_country_code' => 'getDefaultCountryCode',
        'parent_currency_code' => 'getParentCurrencyCode',
        'parent_iso_currency_code' => 'getParentIsoCurrencyCode',
        'client_abbreviation' => 'getClientAbbreviation',
        'prompt_item_name1' => 'getPromptItemName1',
        'prompt_item_name2' => 'getPromptItemName2',
        'prompt_item_name3' => 'getPromptItemName3',
        'author_field' => 'getAuthorField',
        'default_customer_type' => 'getDefaultCustomerType',
        'default_address_code' => 'getDefaultAddressCode',
        'primary_street_line' => 'getPrimaryStreetLine',
        'phone_number1_prompt' => 'getPhoneNumber1Prompt',
        'phone_number2_prompt' => 'getPhoneNumber2Prompt',
        'phone_number3_prompt' => 'getPhoneNumber3Prompt',
        'is_customer_or_company_name_required' => 'getIsCustomerOrCompanyNameRequired',
        'is_middle_initial_shown' => 'getIsMiddleInitialShown',
        'address_line1_prompt' => 'getAddressLine1Prompt',
        'address_line2_prompt' => 'getAddressLine2Prompt',
        'address_line3_prompt' => 'getAddressLine3Prompt',
        'advantage_area_code' => 'getAdvantageAreaCode',
        'card_vault_base_url' => 'getCardVaultBaseUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_country_code'] = isset($data['default_country_code']) ? $data['default_country_code'] : null;
        $this->container['parent_currency_code'] = isset($data['parent_currency_code']) ? $data['parent_currency_code'] : null;
        $this->container['parent_iso_currency_code'] = isset($data['parent_iso_currency_code']) ? $data['parent_iso_currency_code'] : null;
        $this->container['client_abbreviation'] = isset($data['client_abbreviation']) ? $data['client_abbreviation'] : null;
        $this->container['prompt_item_name1'] = isset($data['prompt_item_name1']) ? $data['prompt_item_name1'] : null;
        $this->container['prompt_item_name2'] = isset($data['prompt_item_name2']) ? $data['prompt_item_name2'] : null;
        $this->container['prompt_item_name3'] = isset($data['prompt_item_name3']) ? $data['prompt_item_name3'] : null;
        $this->container['author_field'] = isset($data['author_field']) ? $data['author_field'] : null;
        $this->container['default_customer_type'] = isset($data['default_customer_type']) ? $data['default_customer_type'] : null;
        $this->container['default_address_code'] = isset($data['default_address_code']) ? $data['default_address_code'] : null;
        $this->container['primary_street_line'] = isset($data['primary_street_line']) ? $data['primary_street_line'] : null;
        $this->container['phone_number1_prompt'] = isset($data['phone_number1_prompt']) ? $data['phone_number1_prompt'] : null;
        $this->container['phone_number2_prompt'] = isset($data['phone_number2_prompt']) ? $data['phone_number2_prompt'] : null;
        $this->container['phone_number3_prompt'] = isset($data['phone_number3_prompt']) ? $data['phone_number3_prompt'] : null;
        $this->container['is_customer_or_company_name_required'] = isset($data['is_customer_or_company_name_required']) ? $data['is_customer_or_company_name_required'] : null;
        $this->container['is_middle_initial_shown'] = isset($data['is_middle_initial_shown']) ? $data['is_middle_initial_shown'] : null;
        $this->container['address_line1_prompt'] = isset($data['address_line1_prompt']) ? $data['address_line1_prompt'] : null;
        $this->container['address_line2_prompt'] = isset($data['address_line2_prompt']) ? $data['address_line2_prompt'] : null;
        $this->container['address_line3_prompt'] = isset($data['address_line3_prompt']) ? $data['address_line3_prompt'] : null;
        $this->container['advantage_area_code'] = isset($data['advantage_area_code']) ? $data['advantage_area_code'] : null;
        $this->container['card_vault_base_url'] = isset($data['card_vault_base_url']) ? $data['card_vault_base_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_country_code
     *
     * @return string
     */
    public function getDefaultCountryCode()
    {
        return $this->container['default_country_code'];
    }

    /**
     * Sets default_country_code
     *
     * @param string $default_country_code Default country code.
     *
     * @return $this
     */
    public function setDefaultCountryCode($default_country_code)
    {
        $this->container['default_country_code'] = $default_country_code;

        return $this;
    }

    /**
     * Gets parent_currency_code
     *
     * @return string
     */
    public function getParentCurrencyCode()
    {
        return $this->container['parent_currency_code'];
    }

    /**
     * Sets parent_currency_code
     *
     * @param string $parent_currency_code Parent currency code.
     *
     * @return $this
     */
    public function setParentCurrencyCode($parent_currency_code)
    {
        $this->container['parent_currency_code'] = $parent_currency_code;

        return $this;
    }

    /**
     * Gets parent_iso_currency_code
     *
     * @return string
     */
    public function getParentIsoCurrencyCode()
    {
        return $this->container['parent_iso_currency_code'];
    }

    /**
     * Sets parent_iso_currency_code
     *
     * @param string $parent_iso_currency_code Parent Iso currency code.
     *
     * @return $this
     */
    public function setParentIsoCurrencyCode($parent_iso_currency_code)
    {
        $this->container['parent_iso_currency_code'] = $parent_iso_currency_code;

        return $this;
    }

    /**
     * Gets client_abbreviation
     *
     * @return string
     */
    public function getClientAbbreviation()
    {
        return $this->container['client_abbreviation'];
    }

    /**
     * Sets client_abbreviation
     *
     * @param string $client_abbreviation Client abbreviation.
     *
     * @return $this
     */
    public function setClientAbbreviation($client_abbreviation)
    {
        $this->container['client_abbreviation'] = $client_abbreviation;

        return $this;
    }

    /**
     * Gets prompt_item_name1
     *
     * @return string
     */
    public function getPromptItemName1()
    {
        return $this->container['prompt_item_name1'];
    }

    /**
     * Sets prompt_item_name1
     *
     * @param string $prompt_item_name1 Prompt for item name.
     *
     * @return $this
     */
    public function setPromptItemName1($prompt_item_name1)
    {
        $this->container['prompt_item_name1'] = $prompt_item_name1;

        return $this;
    }

    /**
     * Gets prompt_item_name2
     *
     * @return string
     */
    public function getPromptItemName2()
    {
        return $this->container['prompt_item_name2'];
    }

    /**
     * Sets prompt_item_name2
     *
     * @param string $prompt_item_name2 Prompt for item name 2.
     *
     * @return $this
     */
    public function setPromptItemName2($prompt_item_name2)
    {
        $this->container['prompt_item_name2'] = $prompt_item_name2;

        return $this;
    }

    /**
     * Gets prompt_item_name3
     *
     * @return string
     */
    public function getPromptItemName3()
    {
        return $this->container['prompt_item_name3'];
    }

    /**
     * Sets prompt_item_name3
     *
     * @param string $prompt_item_name3 Prompt for item name 3.
     *
     * @return $this
     */
    public function setPromptItemName3($prompt_item_name3)
    {
        $this->container['prompt_item_name3'] = $prompt_item_name3;

        return $this;
    }

    /**
     * Gets author_field
     *
     * @return int
     */
    public function getAuthorField()
    {
        return $this->container['author_field'];
    }

    /**
     * Sets author_field
     *
     * @param int $author_field Author.
     *
     * @return $this
     */
    public function setAuthorField($author_field)
    {
        $this->container['author_field'] = $author_field;

        return $this;
    }

    /**
     * Gets default_customer_type
     *
     * @return string
     */
    public function getDefaultCustomerType()
    {
        return $this->container['default_customer_type'];
    }

    /**
     * Sets default_customer_type
     *
     * @param string $default_customer_type Default customer type.
     *
     * @return $this
     */
    public function setDefaultCustomerType($default_customer_type)
    {
        $this->container['default_customer_type'] = $default_customer_type;

        return $this;
    }

    /**
     * Gets default_address_code
     *
     * @return string
     */
    public function getDefaultAddressCode()
    {
        return $this->container['default_address_code'];
    }

    /**
     * Sets default_address_code
     *
     * @param string $default_address_code Default address location.
     *
     * @return $this
     */
    public function setDefaultAddressCode($default_address_code)
    {
        $this->container['default_address_code'] = $default_address_code;

        return $this;
    }

    /**
     * Gets primary_street_line
     *
     * @return int
     */
    public function getPrimaryStreetLine()
    {
        return $this->container['primary_street_line'];
    }

    /**
     * Sets primary_street_line
     *
     * @param int $primary_street_line Primary street field.
     *
     * @return $this
     */
    public function setPrimaryStreetLine($primary_street_line)
    {
        $this->container['primary_street_line'] = $primary_street_line;

        return $this;
    }

    /**
     * Gets phone_number1_prompt
     *
     * @return string
     */
    public function getPhoneNumber1Prompt()
    {
        return $this->container['phone_number1_prompt'];
    }

    /**
     * Sets phone_number1_prompt
     *
     * @param string $phone_number1_prompt Prompt to display for primary phone number field.
     *
     * @return $this
     */
    public function setPhoneNumber1Prompt($phone_number1_prompt)
    {
        $this->container['phone_number1_prompt'] = $phone_number1_prompt;

        return $this;
    }

    /**
     * Gets phone_number2_prompt
     *
     * @return string
     */
    public function getPhoneNumber2Prompt()
    {
        return $this->container['phone_number2_prompt'];
    }

    /**
     * Sets phone_number2_prompt
     *
     * @param string $phone_number2_prompt Prompt to display for phone number 2 field.
     *
     * @return $this
     */
    public function setPhoneNumber2Prompt($phone_number2_prompt)
    {
        $this->container['phone_number2_prompt'] = $phone_number2_prompt;

        return $this;
    }

    /**
     * Gets phone_number3_prompt
     *
     * @return string
     */
    public function getPhoneNumber3Prompt()
    {
        return $this->container['phone_number3_prompt'];
    }

    /**
     * Sets phone_number3_prompt
     *
     * @param string $phone_number3_prompt Prompt to display for phone number 3 field.
     *
     * @return $this
     */
    public function setPhoneNumber3Prompt($phone_number3_prompt)
    {
        $this->container['phone_number3_prompt'] = $phone_number3_prompt;

        return $this;
    }

    /**
     * Gets is_customer_or_company_name_required
     *
     * @return bool
     */
    public function getIsCustomerOrCompanyNameRequired()
    {
        return $this->container['is_customer_or_company_name_required'];
    }

    /**
     * Sets is_customer_or_company_name_required
     *
     * @param bool $is_customer_or_company_name_required Is a customer required to have either a customer or company name?
     *
     * @return $this
     */
    public function setIsCustomerOrCompanyNameRequired($is_customer_or_company_name_required)
    {
        $this->container['is_customer_or_company_name_required'] = $is_customer_or_company_name_required;

        return $this;
    }

    /**
     * Gets is_middle_initial_shown
     *
     * @return bool
     */
    public function getIsMiddleInitialShown()
    {
        return $this->container['is_middle_initial_shown'];
    }

    /**
     * Sets is_middle_initial_shown
     *
     * @param bool $is_middle_initial_shown Should the middle initial field be displayed?
     *
     * @return $this
     */
    public function setIsMiddleInitialShown($is_middle_initial_shown)
    {
        $this->container['is_middle_initial_shown'] = $is_middle_initial_shown;

        return $this;
    }

    /**
     * Gets address_line1_prompt
     *
     * @return string
     */
    public function getAddressLine1Prompt()
    {
        return $this->container['address_line1_prompt'];
    }

    /**
     * Sets address_line1_prompt
     *
     * @param string $address_line1_prompt Prompt to display for the address line 1.
     *
     * @return $this
     */
    public function setAddressLine1Prompt($address_line1_prompt)
    {
        $this->container['address_line1_prompt'] = $address_line1_prompt;

        return $this;
    }

    /**
     * Gets address_line2_prompt
     *
     * @return string
     */
    public function getAddressLine2Prompt()
    {
        return $this->container['address_line2_prompt'];
    }

    /**
     * Sets address_line2_prompt
     *
     * @param string $address_line2_prompt Prompt to display for the address line 2.
     *
     * @return $this
     */
    public function setAddressLine2Prompt($address_line2_prompt)
    {
        $this->container['address_line2_prompt'] = $address_line2_prompt;

        return $this;
    }

    /**
     * Gets address_line3_prompt
     *
     * @return string
     */
    public function getAddressLine3Prompt()
    {
        return $this->container['address_line3_prompt'];
    }

    /**
     * Sets address_line3_prompt
     *
     * @param string $address_line3_prompt Prompt to display for the address line 3.
     *
     * @return $this
     */
    public function setAddressLine3Prompt($address_line3_prompt)
    {
        $this->container['address_line3_prompt'] = $address_line3_prompt;

        return $this;
    }

    /**
     * Gets advantage_area_code
     *
     * @return string
     */
    public function getAdvantageAreaCode()
    {
        return $this->container['advantage_area_code'];
    }

    /**
     * Sets advantage_area_code
     *
     * @param string $advantage_area_code Advantage area code
     *
     * @return $this
     */
    public function setAdvantageAreaCode($advantage_area_code)
    {
        $this->container['advantage_area_code'] = $advantage_area_code;

        return $this;
    }

    /**
     * Gets card_vault_base_url
     *
     * @return string
     */
    public function getCardVaultBaseUrl()
    {
        return $this->container['card_vault_base_url'];
    }

    /**
     * Sets card_vault_base_url
     *
     * @param string $card_vault_base_url Base URL for CardVault instance used by this Advantage area
     *
     * @return $this
     */
    public function setCardVaultBaseUrl($card_vault_base_url)
    {
        $this->container['card_vault_base_url'] = $card_vault_base_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


