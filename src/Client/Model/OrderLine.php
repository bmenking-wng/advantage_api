<?php
/**
 * OrderLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderLine Class Doc Comment
 *
 * @category Class
 * @description Information for a line in an order.   This contains information for order lines of various types (product, subscription, agreement, etc.)  Only properties for the appropriate order line type are populated.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_number' => 'string',
        'line_number' => 'int',
        'item_number' => 'string',
        'product_type' => 'string',
        'product_name' => 'string',
        'promotion_code' => 'string',
        'promotion_choice' => 'string',
        'ship_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'is_package_component' => 'bool',
        'is_association_component' => 'bool',
        'is_package_header' => 'bool',
        'is_premium' => 'bool',
        'quantity_ordered' => 'int',
        'currency_code' => 'string',
        'unit_price' => 'double',
        'sales_amount' => 'double',
        'discount' => 'double',
        'shipping_charges' => 'double',
        'tax' => 'double',
        'total_cost' => 'double',
        'shipping_charges_ordered' => 'double',
        'discount_ordered' => 'double',
        'tax_ordered' => 'double',
        'sales_amount_ordered' => 'double',
        'sales_amount_shipped' => 'double',
        'total_cost_ordered' => 'double',
        'status' => 'string',
        'package_header_line_number' => 'int',
        'association_agreement_id' => 'string',
        'recurring_donation_frequency' => 'int',
        'demographics' => '\Advantage\Client\Model\DemographicValue[]',
        'access' => '\Advantage\Client\Model\AccessOrderLine',
        'subscription' => '\Advantage\Client\Model\SubscriptionOrderLine',
        'product' => '\Advantage\Client\Model\ProductOrderLine',
        'conference' => '\Advantage\Client\Model\ConferenceOrderLine',
        'association' => '\Advantage\Client\Model\AssociationOrderLine',
        'gift_message' => '\Advantage\Client\Model\GiftMessage'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_number' => null,
        'line_number' => 'int32',
        'item_number' => null,
        'product_type' => null,
        'product_name' => null,
        'promotion_code' => null,
        'promotion_choice' => null,
        'ship_to' => null,
        'is_package_component' => null,
        'is_association_component' => null,
        'is_package_header' => null,
        'is_premium' => null,
        'quantity_ordered' => 'int32',
        'currency_code' => null,
        'unit_price' => 'double',
        'sales_amount' => 'double',
        'discount' => 'double',
        'shipping_charges' => 'double',
        'tax' => 'double',
        'total_cost' => 'double',
        'shipping_charges_ordered' => 'double',
        'discount_ordered' => 'double',
        'tax_ordered' => 'double',
        'sales_amount_ordered' => 'double',
        'sales_amount_shipped' => 'double',
        'total_cost_ordered' => 'double',
        'status' => null,
        'package_header_line_number' => 'int32',
        'association_agreement_id' => null,
        'recurring_donation_frequency' => 'int32',
        'demographics' => null,
        'access' => null,
        'subscription' => null,
        'product' => null,
        'conference' => null,
        'association' => null,
        'gift_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'OrderNumber',
        'line_number' => 'LineNumber',
        'item_number' => 'ItemNumber',
        'product_type' => 'ProductType',
        'product_name' => 'ProductName',
        'promotion_code' => 'PromotionCode',
        'promotion_choice' => 'PromotionChoice',
        'ship_to' => 'ShipTo',
        'is_package_component' => 'IsPackageComponent',
        'is_association_component' => 'IsAssociationComponent',
        'is_package_header' => 'IsPackageHeader',
        'is_premium' => 'IsPremium',
        'quantity_ordered' => 'QuantityOrdered',
        'currency_code' => 'CurrencyCode',
        'unit_price' => 'UnitPrice',
        'sales_amount' => 'SalesAmount',
        'discount' => 'Discount',
        'shipping_charges' => 'ShippingCharges',
        'tax' => 'Tax',
        'total_cost' => 'TotalCost',
        'shipping_charges_ordered' => 'ShippingChargesOrdered',
        'discount_ordered' => 'DiscountOrdered',
        'tax_ordered' => 'TaxOrdered',
        'sales_amount_ordered' => 'SalesAmountOrdered',
        'sales_amount_shipped' => 'SalesAmountShipped',
        'total_cost_ordered' => 'TotalCostOrdered',
        'status' => 'Status',
        'package_header_line_number' => 'PackageHeaderLineNumber',
        'association_agreement_id' => 'AssociationAgreementId',
        'recurring_donation_frequency' => 'RecurringDonationFrequency',
        'demographics' => 'Demographics',
        'access' => 'Access',
        'subscription' => 'Subscription',
        'product' => 'Product',
        'conference' => 'Conference',
        'association' => 'Association',
        'gift_message' => 'GiftMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'line_number' => 'setLineNumber',
        'item_number' => 'setItemNumber',
        'product_type' => 'setProductType',
        'product_name' => 'setProductName',
        'promotion_code' => 'setPromotionCode',
        'promotion_choice' => 'setPromotionChoice',
        'ship_to' => 'setShipTo',
        'is_package_component' => 'setIsPackageComponent',
        'is_association_component' => 'setIsAssociationComponent',
        'is_package_header' => 'setIsPackageHeader',
        'is_premium' => 'setIsPremium',
        'quantity_ordered' => 'setQuantityOrdered',
        'currency_code' => 'setCurrencyCode',
        'unit_price' => 'setUnitPrice',
        'sales_amount' => 'setSalesAmount',
        'discount' => 'setDiscount',
        'shipping_charges' => 'setShippingCharges',
        'tax' => 'setTax',
        'total_cost' => 'setTotalCost',
        'shipping_charges_ordered' => 'setShippingChargesOrdered',
        'discount_ordered' => 'setDiscountOrdered',
        'tax_ordered' => 'setTaxOrdered',
        'sales_amount_ordered' => 'setSalesAmountOrdered',
        'sales_amount_shipped' => 'setSalesAmountShipped',
        'total_cost_ordered' => 'setTotalCostOrdered',
        'status' => 'setStatus',
        'package_header_line_number' => 'setPackageHeaderLineNumber',
        'association_agreement_id' => 'setAssociationAgreementId',
        'recurring_donation_frequency' => 'setRecurringDonationFrequency',
        'demographics' => 'setDemographics',
        'access' => 'setAccess',
        'subscription' => 'setSubscription',
        'product' => 'setProduct',
        'conference' => 'setConference',
        'association' => 'setAssociation',
        'gift_message' => 'setGiftMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'line_number' => 'getLineNumber',
        'item_number' => 'getItemNumber',
        'product_type' => 'getProductType',
        'product_name' => 'getProductName',
        'promotion_code' => 'getPromotionCode',
        'promotion_choice' => 'getPromotionChoice',
        'ship_to' => 'getShipTo',
        'is_package_component' => 'getIsPackageComponent',
        'is_association_component' => 'getIsAssociationComponent',
        'is_package_header' => 'getIsPackageHeader',
        'is_premium' => 'getIsPremium',
        'quantity_ordered' => 'getQuantityOrdered',
        'currency_code' => 'getCurrencyCode',
        'unit_price' => 'getUnitPrice',
        'sales_amount' => 'getSalesAmount',
        'discount' => 'getDiscount',
        'shipping_charges' => 'getShippingCharges',
        'tax' => 'getTax',
        'total_cost' => 'getTotalCost',
        'shipping_charges_ordered' => 'getShippingChargesOrdered',
        'discount_ordered' => 'getDiscountOrdered',
        'tax_ordered' => 'getTaxOrdered',
        'sales_amount_ordered' => 'getSalesAmountOrdered',
        'sales_amount_shipped' => 'getSalesAmountShipped',
        'total_cost_ordered' => 'getTotalCostOrdered',
        'status' => 'getStatus',
        'package_header_line_number' => 'getPackageHeaderLineNumber',
        'association_agreement_id' => 'getAssociationAgreementId',
        'recurring_donation_frequency' => 'getRecurringDonationFrequency',
        'demographics' => 'getDemographics',
        'access' => 'getAccess',
        'subscription' => 'getSubscription',
        'product' => 'getProduct',
        'conference' => 'getConference',
        'association' => 'getAssociation',
        'gift_message' => 'getGiftMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_PRODUCT = 'Product';
    const PRODUCT_TYPE_SUBSCRIPTION = 'Subscription';
    const PRODUCT_TYPE_ACCESS = 'Access';
    const PRODUCT_TYPE_CONFERENCE = 'Conference';
    const PRODUCT_TYPE_BACK_ISSUE = 'BackIssue';
    const PRODUCT_TYPE_PACKAGE = 'Package';
    const PRODUCT_TYPE_UNKNOWN = 'Unknown';
    const PRODUCT_TYPE_MEMBERSHIP = 'Membership';
    const PRODUCT_TYPE_DONATION = 'Donation';
    const PRODUCT_TYPE_PRINT_JOB = 'PrintJob';
    const PRODUCT_TYPE_REPRINT = 'Reprint';
    const PRODUCT_TYPE_SERVICE = 'Service';
    const PRODUCT_TYPE_STOCK = 'Stock';
    const STATUS_UNKNOWN = 'Unknown';
    const STATUS_SUBSCRIPTION = 'Subscription';
    const STATUS_PENDING_EVALUATION = 'PendingEvaluation';
    const STATUS_SHIPPING = 'Shipping';
    const STATUS_DISCONTINUED = 'Discontinued';
    const STATUS_REORDER_LATER = 'ReorderLater';
    const STATUS_BACKORDERED = 'Backordered';
    const STATUS_NOT_YET_PUBLISHED = 'NotYetPublished';
    const STATUS_REGISTERED = 'Registered';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_PRODUCT,
            self::PRODUCT_TYPE_SUBSCRIPTION,
            self::PRODUCT_TYPE_ACCESS,
            self::PRODUCT_TYPE_CONFERENCE,
            self::PRODUCT_TYPE_BACK_ISSUE,
            self::PRODUCT_TYPE_PACKAGE,
            self::PRODUCT_TYPE_UNKNOWN,
            self::PRODUCT_TYPE_MEMBERSHIP,
            self::PRODUCT_TYPE_DONATION,
            self::PRODUCT_TYPE_PRINT_JOB,
            self::PRODUCT_TYPE_REPRINT,
            self::PRODUCT_TYPE_SERVICE,
            self::PRODUCT_TYPE_STOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_SUBSCRIPTION,
            self::STATUS_PENDING_EVALUATION,
            self::STATUS_SHIPPING,
            self::STATUS_DISCONTINUED,
            self::STATUS_REORDER_LATER,
            self::STATUS_BACKORDERED,
            self::STATUS_NOT_YET_PUBLISHED,
            self::STATUS_REGISTERED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['promotion_choice'] = isset($data['promotion_choice']) ? $data['promotion_choice'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['is_package_component'] = isset($data['is_package_component']) ? $data['is_package_component'] : null;
        $this->container['is_association_component'] = isset($data['is_association_component']) ? $data['is_association_component'] : null;
        $this->container['is_package_header'] = isset($data['is_package_header']) ? $data['is_package_header'] : null;
        $this->container['is_premium'] = isset($data['is_premium']) ? $data['is_premium'] : null;
        $this->container['quantity_ordered'] = isset($data['quantity_ordered']) ? $data['quantity_ordered'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['sales_amount'] = isset($data['sales_amount']) ? $data['sales_amount'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['shipping_charges_ordered'] = isset($data['shipping_charges_ordered']) ? $data['shipping_charges_ordered'] : null;
        $this->container['discount_ordered'] = isset($data['discount_ordered']) ? $data['discount_ordered'] : null;
        $this->container['tax_ordered'] = isset($data['tax_ordered']) ? $data['tax_ordered'] : null;
        $this->container['sales_amount_ordered'] = isset($data['sales_amount_ordered']) ? $data['sales_amount_ordered'] : null;
        $this->container['sales_amount_shipped'] = isset($data['sales_amount_shipped']) ? $data['sales_amount_shipped'] : null;
        $this->container['total_cost_ordered'] = isset($data['total_cost_ordered']) ? $data['total_cost_ordered'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['package_header_line_number'] = isset($data['package_header_line_number']) ? $data['package_header_line_number'] : null;
        $this->container['association_agreement_id'] = isset($data['association_agreement_id']) ? $data['association_agreement_id'] : null;
        $this->container['recurring_donation_frequency'] = isset($data['recurring_donation_frequency']) ? $data['recurring_donation_frequency'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['conference'] = isset($data['conference']) ? $data['conference'] : null;
        $this->container['association'] = isset($data['association']) ? $data['association'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number The Advantage order number.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number The line number of the order line within the order.
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number The item number, identifying which product is being ordered.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type The product type of the order line (subscription, product, etc.).
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The product title. If available, the full title is returned. Otherwise, the short title is returned.
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code (sometimes referred to as key code).
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets promotion_choice
     *
     * @return string
     */
    public function getPromotionChoice()
    {
        return $this->container['promotion_choice'];
    }

    /**
     * Sets promotion_choice
     *
     * @param string $promotion_choice The promotion choice, indicating a set of default settings for an order line.
     *
     * @return $this
     */
    public function setPromotionChoice($promotion_choice)
    {
        $this->container['promotion_choice'] = $promotion_choice;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $ship_to Information pertaining to the ship-to customer.
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets is_package_component
     *
     * @return bool
     */
    public function getIsPackageComponent()
    {
        return $this->container['is_package_component'];
    }

    /**
     * Sets is_package_component
     *
     * @param bool $is_package_component Is the order line a package component?  (Package component lines are added automatically when a   package header is added and the package is \"exploded\" into it's components.)
     *
     * @return $this
     */
    public function setIsPackageComponent($is_package_component)
    {
        $this->container['is_package_component'] = $is_package_component;

        return $this;
    }

    /**
     * Gets is_association_component
     *
     * @return bool
     */
    public function getIsAssociationComponent()
    {
        return $this->container['is_association_component'];
    }

    /**
     * Sets is_association_component
     *
     * @param bool $is_association_component Is the order line an association component?  (Association component lines are added automatically when an   association is added and the association is \"exploded\" into it's components.)
     *
     * @return $this
     */
    public function setIsAssociationComponent($is_association_component)
    {
        $this->container['is_association_component'] = $is_association_component;

        return $this;
    }

    /**
     * Gets is_package_header
     *
     * @return bool
     */
    public function getIsPackageHeader()
    {
        return $this->container['is_package_header'];
    }

    /**
     * Sets is_package_header
     *
     * @param bool $is_package_header Is the order line a package header?
     *
     * @return $this
     */
    public function setIsPackageHeader($is_package_header)
    {
        $this->container['is_package_header'] = $is_package_header;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool
     */
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool $is_premium Is the order line a premium?  Premiums are free items added to qualifying orders.
     *
     * @return $this
     */
    public function setIsPremium($is_premium)
    {
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets quantity_ordered
     *
     * @return int
     */
    public function getQuantityOrdered()
    {
        return $this->container['quantity_ordered'];
    }

    /**
     * Sets quantity_ordered
     *
     * @param int $quantity_ordered The quantity ordered for the current order line. For a subscribed product  the quantity ordered is the number of copies of each issue to receive.
     *
     * @return $this
     */
    public function setQuantityOrdered($quantity_ordered)
    {
        $this->container['quantity_ordered'] = $quantity_ordered;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code in which this item is to be billed.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price The price per quantity ordered.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets sales_amount
     *
     * @return double
     */
    public function getSalesAmount()
    {
        return $this->container['sales_amount'];
    }

    /**
     * Sets sales_amount
     *
     * @param double $sales_amount The sales amount (i.e. unit price times quantity ordered) for the order line.  This sales amount includes (PRO) items that are not shipping (e.g. back-ordered)   but does not include lost sales.
     *
     * @return $this
     */
    public function setSalesAmount($sales_amount)
    {
        $this->container['sales_amount'] = $sales_amount;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount The discount amount,   which excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return double
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param double $shipping_charges Gets the shipping/postage charges,   which excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {
        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax The amount of tax,  which excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost The total cost, including order-line discounts, taxes, shipping.  The total cost excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc).
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets shipping_charges_ordered
     *
     * @return double
     */
    public function getShippingChargesOrdered()
    {
        return $this->container['shipping_charges_ordered'];
    }

    /**
     * Sets shipping_charges_ordered
     *
     * @param double $shipping_charges_ordered The shipping/postage charges for the order line.
     *
     * @return $this
     */
    public function setShippingChargesOrdered($shipping_charges_ordered)
    {
        $this->container['shipping_charges_ordered'] = $shipping_charges_ordered;

        return $this;
    }

    /**
     * Gets discount_ordered
     *
     * @return double
     */
    public function getDiscountOrdered()
    {
        return $this->container['discount_ordered'];
    }

    /**
     * Sets discount_ordered
     *
     * @param double $discount_ordered The discount amount for the order line.
     *
     * @return $this
     */
    public function setDiscountOrdered($discount_ordered)
    {
        $this->container['discount_ordered'] = $discount_ordered;

        return $this;
    }

    /**
     * Gets tax_ordered
     *
     * @return double
     */
    public function getTaxOrdered()
    {
        return $this->container['tax_ordered'];
    }

    /**
     * Sets tax_ordered
     *
     * @param double $tax_ordered The amount of tax for the order line.
     *
     * @return $this
     */
    public function setTaxOrdered($tax_ordered)
    {
        $this->container['tax_ordered'] = $tax_ordered;

        return $this;
    }

    /**
     * Gets sales_amount_ordered
     *
     * @return double
     */
    public function getSalesAmountOrdered()
    {
        return $this->container['sales_amount_ordered'];
    }

    /**
     * Sets sales_amount_ordered
     *
     * @param double $sales_amount_ordered The sales amount (i.e. unit price times quantity ordered) for the order line.   Includes product tax, if tax is included in price.
     *
     * @return $this
     */
    public function setSalesAmountOrdered($sales_amount_ordered)
    {
        $this->container['sales_amount_ordered'] = $sales_amount_ordered;

        return $this;
    }

    /**
     * Gets sales_amount_shipped
     *
     * @return double
     */
    public function getSalesAmountShipped()
    {
        return $this->container['sales_amount_shipped'];
    }

    /**
     * Sets sales_amount_shipped
     *
     * @param double $sales_amount_shipped The sales amount of shipped items (i.e. unit price times quantity shipped) for the order line.   Includes product tax, if tax is included in price.
     *
     * @return $this
     */
    public function setSalesAmountShipped($sales_amount_shipped)
    {
        $this->container['sales_amount_shipped'] = $sales_amount_shipped;

        return $this;
    }

    /**
     * Gets total_cost_ordered
     *
     * @return double
     */
    public function getTotalCostOrdered()
    {
        return $this->container['total_cost_ordered'];
    }

    /**
     * Sets total_cost_ordered
     *
     * @param double $total_cost_ordered The total cost, including order-line discounts, taxes, shipping.
     *
     * @return $this
     */
    public function setTotalCostOrdered($total_cost_ordered)
    {
        $this->container['total_cost_ordered'] = $total_cost_ordered;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The order line status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets package_header_line_number
     *
     * @return int
     */
    public function getPackageHeaderLineNumber()
    {
        return $this->container['package_header_line_number'];
    }

    /**
     * Sets package_header_line_number
     *
     * @param int $package_header_line_number The line number of the package header, if the order line is a package component.
     *
     * @return $this
     */
    public function setPackageHeaderLineNumber($package_header_line_number)
    {
        $this->container['package_header_line_number'] = $package_header_line_number;

        return $this;
    }

    /**
     * Gets association_agreement_id
     *
     * @return string
     */
    public function getAssociationAgreementId()
    {
        return $this->container['association_agreement_id'];
    }

    /**
     * Sets association_agreement_id
     *
     * @param string $association_agreement_id The agreement Id of the association if par tof an association
     *
     * @return $this
     */
    public function setAssociationAgreementId($association_agreement_id)
    {
        $this->container['association_agreement_id'] = $association_agreement_id;

        return $this;
    }

    /**
     * Gets recurring_donation_frequency
     *
     * @return int
     */
    public function getRecurringDonationFrequency()
    {
        return $this->container['recurring_donation_frequency'];
    }

    /**
     * Sets recurring_donation_frequency
     *
     * @param int $recurring_donation_frequency The number of months between recurring donation contributions.
     *
     * @return $this
     */
    public function setRecurringDonationFrequency($recurring_donation_frequency)
    {
        $this->container['recurring_donation_frequency'] = $recurring_donation_frequency;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Advantage\Client\Model\DemographicValue[]
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Advantage\Client\Model\DemographicValue[] $demographics Demographic field values for the order line
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \Advantage\Client\Model\AccessOrderLine
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \Advantage\Client\Model\AccessOrderLine $access Information about an AMB (agreement) order line.
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Advantage\Client\Model\SubscriptionOrderLine
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Advantage\Client\Model\SubscriptionOrderLine $subscription Information for creating a CIR (subscription) order line.
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Advantage\Client\Model\ProductOrderLine
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Advantage\Client\Model\ProductOrderLine $product Information for creating a PRO (product) order line.
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets conference
     *
     * @return \Advantage\Client\Model\ConferenceOrderLine
     */
    public function getConference()
    {
        return $this->container['conference'];
    }

    /**
     * Sets conference
     *
     * @param \Advantage\Client\Model\ConferenceOrderLine $conference Information for creating a CEM (conference) order line.
     *
     * @return $this
     */
    public function setConference($conference)
    {
        $this->container['conference'] = $conference;

        return $this;
    }

    /**
     * Gets association
     *
     * @return \Advantage\Client\Model\AssociationOrderLine
     */
    public function getAssociation()
    {
        return $this->container['association'];
    }

    /**
     * Sets association
     *
     * @param \Advantage\Client\Model\AssociationOrderLine $association Information about an AMM (association membership) order line.
     *
     * @return $this
     */
    public function setAssociation($association)
    {
        $this->container['association'] = $association;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return \Advantage\Client\Model\GiftMessage
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param \Advantage\Client\Model\GiftMessage $gift_message Gift message for the order line
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


