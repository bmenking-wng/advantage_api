<?php
/**
 * Conference
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Conference Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a Conference
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Conference implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Conference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conference_id' => 'string',
        'name' => 'string',
        'full_name' => 'string',
        'description' => 'string',
        'conference_focus_code' => 'string',
        'confirmation_message' => 'string',
        'welcome_message' => 'string',
        'default_rate_code' => 'string',
        'session_selection_opens' => '\DateTime',
        'sessions' => '\Advantage\Client\Model\ConferenceSession[]',
        'locations' => '\Advantage\Client\Model\ConferenceLocation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conference_id' => null,
        'name' => null,
        'full_name' => null,
        'description' => null,
        'conference_focus_code' => null,
        'confirmation_message' => null,
        'welcome_message' => null,
        'default_rate_code' => null,
        'session_selection_opens' => 'date-time',
        'sessions' => null,
        'locations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conference_id' => 'ConferenceId',
        'name' => 'Name',
        'full_name' => 'FullName',
        'description' => 'Description',
        'conference_focus_code' => 'ConferenceFocusCode',
        'confirmation_message' => 'ConfirmationMessage',
        'welcome_message' => 'WelcomeMessage',
        'default_rate_code' => 'DefaultRateCode',
        'session_selection_opens' => 'SessionSelectionOpens',
        'sessions' => 'Sessions',
        'locations' => 'Locations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conference_id' => 'setConferenceId',
        'name' => 'setName',
        'full_name' => 'setFullName',
        'description' => 'setDescription',
        'conference_focus_code' => 'setConferenceFocusCode',
        'confirmation_message' => 'setConfirmationMessage',
        'welcome_message' => 'setWelcomeMessage',
        'default_rate_code' => 'setDefaultRateCode',
        'session_selection_opens' => 'setSessionSelectionOpens',
        'sessions' => 'setSessions',
        'locations' => 'setLocations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conference_id' => 'getConferenceId',
        'name' => 'getName',
        'full_name' => 'getFullName',
        'description' => 'getDescription',
        'conference_focus_code' => 'getConferenceFocusCode',
        'confirmation_message' => 'getConfirmationMessage',
        'welcome_message' => 'getWelcomeMessage',
        'default_rate_code' => 'getDefaultRateCode',
        'session_selection_opens' => 'getSessionSelectionOpens',
        'sessions' => 'getSessions',
        'locations' => 'getLocations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conference_id'] = isset($data['conference_id']) ? $data['conference_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['conference_focus_code'] = isset($data['conference_focus_code']) ? $data['conference_focus_code'] : null;
        $this->container['confirmation_message'] = isset($data['confirmation_message']) ? $data['confirmation_message'] : null;
        $this->container['welcome_message'] = isset($data['welcome_message']) ? $data['welcome_message'] : null;
        $this->container['default_rate_code'] = isset($data['default_rate_code']) ? $data['default_rate_code'] : null;
        $this->container['session_selection_opens'] = isset($data['session_selection_opens']) ? $data['session_selection_opens'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conference_id
     *
     * @return string
     */
    public function getConferenceId()
    {
        return $this->container['conference_id'];
    }

    /**
     * Sets conference_id
     *
     * @param string $conference_id Conference ID
     *
     * @return $this
     */
    public function setConferenceId($conference_id)
    {
        $this->container['conference_id'] = $conference_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Conference Description
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name Conference Long Description
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Conference Text
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets conference_focus_code
     *
     * @return string
     */
    public function getConferenceFocusCode()
    {
        return $this->container['conference_focus_code'];
    }

    /**
     * Sets conference_focus_code
     *
     * @param string $conference_focus_code Conference Focus
     *
     * @return $this
     */
    public function setConferenceFocusCode($conference_focus_code)
    {
        $this->container['conference_focus_code'] = $conference_focus_code;

        return $this;
    }

    /**
     * Gets confirmation_message
     *
     * @return string
     */
    public function getConfirmationMessage()
    {
        return $this->container['confirmation_message'];
    }

    /**
     * Sets confirmation_message
     *
     * @param string $confirmation_message Confirmation Message
     *
     * @return $this
     */
    public function setConfirmationMessage($confirmation_message)
    {
        $this->container['confirmation_message'] = $confirmation_message;

        return $this;
    }

    /**
     * Gets welcome_message
     *
     * @return string
     */
    public function getWelcomeMessage()
    {
        return $this->container['welcome_message'];
    }

    /**
     * Sets welcome_message
     *
     * @param string $welcome_message Welcome Message
     *
     * @return $this
     */
    public function setWelcomeMessage($welcome_message)
    {
        $this->container['welcome_message'] = $welcome_message;

        return $this;
    }

    /**
     * Gets default_rate_code
     *
     * @return string
     */
    public function getDefaultRateCode()
    {
        return $this->container['default_rate_code'];
    }

    /**
     * Sets default_rate_code
     *
     * @param string $default_rate_code Default Rate Code
     *
     * @return $this
     */
    public function setDefaultRateCode($default_rate_code)
    {
        $this->container['default_rate_code'] = $default_rate_code;

        return $this;
    }

    /**
     * Gets session_selection_opens
     *
     * @return \DateTime
     */
    public function getSessionSelectionOpens()
    {
        return $this->container['session_selection_opens'];
    }

    /**
     * Sets session_selection_opens
     *
     * @param \DateTime $session_selection_opens Date session selection (registration) opens
     *
     * @return $this
     */
    public function setSessionSelectionOpens($session_selection_opens)
    {
        $this->container['session_selection_opens'] = $session_selection_opens;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \Advantage\Client\Model\ConferenceSession[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \Advantage\Client\Model\ConferenceSession[] $sessions The list of sessions associated with the conference
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Advantage\Client\Model\ConferenceLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Advantage\Client\Model\ConferenceLocation[] $locations The list of locations associated with the conference
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


