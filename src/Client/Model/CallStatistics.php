<?php
/**
 * CallStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CallStatistics Class Doc Comment
 *
 * @category Class
 * @description Data transfer object for CallStatistics data
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sales_rep' => 'string',
        'user_code' => 'string',
        'user_name' => 'string',
        'user_email' => 'string',
        'department_rank' => 'int',
        'display_currency' => 'string',
        'inbound' => '\Advantage\Client\Model\InboundCallStatistics',
        'outbound' => '\Advantage\Client\Model\OutboundCallStatistics'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sales_rep' => null,
        'user_code' => null,
        'user_name' => null,
        'user_email' => null,
        'department_rank' => 'int32',
        'display_currency' => null,
        'inbound' => null,
        'outbound' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_rep' => 'SalesRep',
        'user_code' => 'UserCode',
        'user_name' => 'UserName',
        'user_email' => 'UserEmail',
        'department_rank' => 'DepartmentRank',
        'display_currency' => 'DisplayCurrency',
        'inbound' => 'Inbound',
        'outbound' => 'Outbound'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_rep' => 'setSalesRep',
        'user_code' => 'setUserCode',
        'user_name' => 'setUserName',
        'user_email' => 'setUserEmail',
        'department_rank' => 'setDepartmentRank',
        'display_currency' => 'setDisplayCurrency',
        'inbound' => 'setInbound',
        'outbound' => 'setOutbound'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_rep' => 'getSalesRep',
        'user_code' => 'getUserCode',
        'user_name' => 'getUserName',
        'user_email' => 'getUserEmail',
        'department_rank' => 'getDepartmentRank',
        'display_currency' => 'getDisplayCurrency',
        'inbound' => 'getInbound',
        'outbound' => 'getOutbound'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sales_rep'] = isset($data['sales_rep']) ? $data['sales_rep'] : null;
        $this->container['user_code'] = isset($data['user_code']) ? $data['user_code'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['department_rank'] = isset($data['department_rank']) ? $data['department_rank'] : null;
        $this->container['display_currency'] = isset($data['display_currency']) ? $data['display_currency'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['outbound'] = isset($data['outbound']) ? $data['outbound'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_rep
     *
     * @return string
     */
    public function getSalesRep()
    {
        return $this->container['sales_rep'];
    }

    /**
     * Sets sales_rep
     *
     * @param string $sales_rep Sales rep for these statistics
     *
     * @return $this
     */
    public function setSalesRep($sales_rep)
    {
        $this->container['sales_rep'] = $sales_rep;

        return $this;
    }

    /**
     * Gets user_code
     *
     * @return string
     */
    public function getUserCode()
    {
        return $this->container['user_code'];
    }

    /**
     * Sets user_code
     *
     * @param string $user_code User Code for the sales rep, if any.
     *
     * @return $this
     */
    public function setUserCode($user_code)
    {
        $this->container['user_code'] = $user_code;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name The full name of the sales rep.
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string $user_email Email address for the sales rep
     *
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets department_rank
     *
     * @return int
     */
    public function getDepartmentRank()
    {
        return $this->container['department_rank'];
    }

    /**
     * Sets department_rank
     *
     * @param int $department_rank Agent's rank within their sales team
     *
     * @return $this
     */
    public function setDepartmentRank($department_rank)
    {
        $this->container['department_rank'] = $department_rank;

        return $this;
    }

    /**
     * Gets display_currency
     *
     * @return string
     */
    public function getDisplayCurrency()
    {
        return $this->container['display_currency'];
    }

    /**
     * Sets display_currency
     *
     * @param string $display_currency The currency in which sales totals are calculated
     *
     * @return $this
     */
    public function setDisplayCurrency($display_currency)
    {
        $this->container['display_currency'] = $display_currency;

        return $this;
    }

    /**
     * Gets inbound
     *
     * @return \Advantage\Client\Model\InboundCallStatistics
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     *
     * @param \Advantage\Client\Model\InboundCallStatistics $inbound Inbound call statistics for the sales rep
     *
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets outbound
     *
     * @return \Advantage\Client\Model\OutboundCallStatistics
     */
    public function getOutbound()
    {
        return $this->container['outbound'];
    }

    /**
     * Sets outbound
     *
     * @param \Advantage\Client\Model\OutboundCallStatistics $outbound Outbound call statistics for the sales rep
     *
     * @return $this
     */
    public function setOutbound($outbound)
    {
        $this->container['outbound'] = $outbound;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


