<?php
/**
 * CreditReversalInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CreditReversalInfo Class Doc Comment
 *
 * @category Class
 * @description This class is used as set of parameter fields to perform a credit reversal.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditReversalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditReversalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reversal_entry_date' => '\DateTime',
        'bad_check_or_credit' => 'bool',
        'credit_comment' => 'string',
        'suspension_account' => 'string',
        'cash_account' => 'string',
        'credit_reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reversal_entry_date' => 'date-time',
        'bad_check_or_credit' => null,
        'credit_comment' => null,
        'suspension_account' => null,
        'cash_account' => null,
        'credit_reason_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reversal_entry_date' => 'ReversalEntryDate',
        'bad_check_or_credit' => 'BadCheckOrCredit',
        'credit_comment' => 'CreditComment',
        'suspension_account' => 'SuspensionAccount',
        'cash_account' => 'CashAccount',
        'credit_reason_code' => 'CreditReasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reversal_entry_date' => 'setReversalEntryDate',
        'bad_check_or_credit' => 'setBadCheckOrCredit',
        'credit_comment' => 'setCreditComment',
        'suspension_account' => 'setSuspensionAccount',
        'cash_account' => 'setCashAccount',
        'credit_reason_code' => 'setCreditReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reversal_entry_date' => 'getReversalEntryDate',
        'bad_check_or_credit' => 'getBadCheckOrCredit',
        'credit_comment' => 'getCreditComment',
        'suspension_account' => 'getSuspensionAccount',
        'cash_account' => 'getCashAccount',
        'credit_reason_code' => 'getCreditReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reversal_entry_date'] = isset($data['reversal_entry_date']) ? $data['reversal_entry_date'] : null;
        $this->container['bad_check_or_credit'] = isset($data['bad_check_or_credit']) ? $data['bad_check_or_credit'] : null;
        $this->container['credit_comment'] = isset($data['credit_comment']) ? $data['credit_comment'] : null;
        $this->container['suspension_account'] = isset($data['suspension_account']) ? $data['suspension_account'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['credit_reason_code'] = isset($data['credit_reason_code']) ? $data['credit_reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reversal_entry_date
     *
     * @return \DateTime
     */
    public function getReversalEntryDate()
    {
        return $this->container['reversal_entry_date'];
    }

    /**
     * Sets reversal_entry_date
     *
     * @param \DateTime $reversal_entry_date The date of the reversal entry. If not supplied the control group date is used
     *
     * @return $this
     */
    public function setReversalEntryDate($reversal_entry_date)
    {
        $this->container['reversal_entry_date'] = $reversal_entry_date;

        return $this;
    }

    /**
     * Gets bad_check_or_credit
     *
     * @return bool
     */
    public function getBadCheckOrCredit()
    {
        return $this->container['bad_check_or_credit'];
    }

    /**
     * Sets bad_check_or_credit
     *
     * @param bool $bad_check_or_credit Bad Check or Credit? defaults to false.
     *
     * @return $this
     */
    public function setBadCheckOrCredit($bad_check_or_credit)
    {
        $this->container['bad_check_or_credit'] = $bad_check_or_credit;

        return $this;
    }

    /**
     * Gets credit_comment
     *
     * @return string
     */
    public function getCreditComment()
    {
        return $this->container['credit_comment'];
    }

    /**
     * Sets credit_comment
     *
     * @param string $credit_comment The Credit Comment, \"Reassign to Cust#{0}\" is used if assigned
     *
     * @return $this
     */
    public function setCreditComment($credit_comment)
    {
        $this->container['credit_comment'] = $credit_comment;

        return $this;
    }

    /**
     * Gets suspension_account
     *
     * @return string
     */
    public function getSuspensionAccount()
    {
        return $this->container['suspension_account'];
    }

    /**
     * Sets suspension_account
     *
     * @param string $suspension_account Suspension G/L account, default values used if not assigned
     *
     * @return $this
     */
    public function setSuspensionAccount($suspension_account)
    {
        $this->container['suspension_account'] = $suspension_account;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return string
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param string $cash_account Cash G/L account, default values used if not assigned
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets credit_reason_code
     *
     * @return string
     */
    public function getCreditReasonCode()
    {
        return $this->container['credit_reason_code'];
    }

    /**
     * Sets credit_reason_code
     *
     * @param string $credit_reason_code The Credit Reason, defaults to blank
     *
     * @return $this
     */
    public function setCreditReasonCode($credit_reason_code)
    {
        $this->container['credit_reason_code'] = $credit_reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


