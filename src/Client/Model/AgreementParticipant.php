<?php
/**
 * AgreementParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AgreementParticipant Class Doc Comment
 *
 * @category Class
 * @description Information about an Agreement participant.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgreementParticipant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgreementParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'full_name' => 'string',
        'address_code' => 'string',
        'access_type' => 'string',
        'is_administrator' => 'bool',
        'is_self_administrator' => 'bool',
        'is_maintenance_only' => 'bool',
        'email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'full_name' => null,
        'address_code' => null,
        'access_type' => null,
        'is_administrator' => null,
        'is_self_administrator' => null,
        'is_maintenance_only' => null,
        'email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'full_name' => 'FullName',
        'address_code' => 'AddressCode',
        'access_type' => 'AccessType',
        'is_administrator' => 'IsAdministrator',
        'is_self_administrator' => 'IsSelfAdministrator',
        'is_maintenance_only' => 'IsMaintenanceOnly',
        'email' => 'Email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'full_name' => 'setFullName',
        'address_code' => 'setAddressCode',
        'access_type' => 'setAccessType',
        'is_administrator' => 'setIsAdministrator',
        'is_self_administrator' => 'setIsSelfAdministrator',
        'is_maintenance_only' => 'setIsMaintenanceOnly',
        'email' => 'setEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'full_name' => 'getFullName',
        'address_code' => 'getAddressCode',
        'access_type' => 'getAccessType',
        'is_administrator' => 'getIsAdministrator',
        'is_self_administrator' => 'getIsSelfAdministrator',
        'is_maintenance_only' => 'getIsMaintenanceOnly',
        'email' => 'getEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCESS_TYPE_ADMINISTRATOR = 'Administrator';
    const ACCESS_TYPE_ADMINISTRATOR_WITH_ACCESS = 'AdministratorWithAccess';
    const ACCESS_TYPE_SELF_ADMINISTRATOR_WITH_ACCESS = 'SelfAdministratorWithAccess';
    const ACCESS_TYPE_ACCESS_ONLY = 'AccessOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessTypeAllowableValues()
    {
        return [
            self::ACCESS_TYPE_ADMINISTRATOR,
            self::ACCESS_TYPE_ADMINISTRATOR_WITH_ACCESS,
            self::ACCESS_TYPE_SELF_ADMINISTRATOR_WITH_ACCESS,
            self::ACCESS_TYPE_ACCESS_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['address_code'] = isset($data['address_code']) ? $data['address_code'] : null;
        $this->container['access_type'] = isset($data['access_type']) ? $data['access_type'] : null;
        $this->container['is_administrator'] = isset($data['is_administrator']) ? $data['is_administrator'] : null;
        $this->container['is_self_administrator'] = isset($data['is_self_administrator']) ? $data['is_self_administrator'] : null;
        $this->container['is_maintenance_only'] = isset($data['is_maintenance_only']) ? $data['is_maintenance_only'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccessTypeAllowableValues();
        if (!is_null($this->container['access_type']) && !in_array($this->container['access_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Customer number of the current participant.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name The customer's full name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets address_code
     *
     * @return string
     */
    public function getAddressCode()
    {
        return $this->container['address_code'];
    }

    /**
     * Sets address_code
     *
     * @param string $address_code Address code of the current participant.
     *
     * @return $this
     */
    public function setAddressCode($address_code)
    {
        $this->container['address_code'] = $address_code;

        return $this;
    }

    /**
     * Gets access_type
     *
     * @return string
     */
    public function getAccessType()
    {
        return $this->container['access_type'];
    }

    /**
     * Sets access_type
     *
     * @param string $access_type What type of participant is this?
     *
     * @return $this
     */
    public function setAccessType($access_type)
    {
        $allowedValues = $this->getAccessTypeAllowableValues();
        if (!is_null($access_type) && !in_array($access_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_type'] = $access_type;

        return $this;
    }

    /**
     * Gets is_administrator
     *
     * @return bool
     */
    public function getIsAdministrator()
    {
        return $this->container['is_administrator'];
    }

    /**
     * Sets is_administrator
     *
     * @param bool $is_administrator Is this participant an agreement administrator?
     *
     * @return $this
     */
    public function setIsAdministrator($is_administrator)
    {
        $this->container['is_administrator'] = $is_administrator;

        return $this;
    }

    /**
     * Gets is_self_administrator
     *
     * @return bool
     */
    public function getIsSelfAdministrator()
    {
        return $this->container['is_self_administrator'];
    }

    /**
     * Sets is_self_administrator
     *
     * @param bool $is_self_administrator Is this participant allowed to administer their own records?
     *
     * @return $this
     */
    public function setIsSelfAdministrator($is_self_administrator)
    {
        $this->container['is_self_administrator'] = $is_self_administrator;

        return $this;
    }

    /**
     * Gets is_maintenance_only
     *
     * @return bool
     */
    public function getIsMaintenanceOnly()
    {
        return $this->container['is_maintenance_only'];
    }

    /**
     * Sets is_maintenance_only
     *
     * @param bool $is_maintenance_only Is this participant blocked from accessing content?
     *
     * @return $this
     */
    public function setIsMaintenanceOnly($is_maintenance_only)
    {
        $this->container['is_maintenance_only'] = $is_maintenance_only;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address current participant.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


