<?php
/**
 * CustomerActivityAr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CustomerActivityAr Class Doc Comment
 *
 * @category Class
 * @description Information about A/R associated with a customer activity
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerActivityAr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerActivityAr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_date' => '\DateTime',
        'source' => 'string',
        'source_reference' => 'string',
        'billing_organization' => 'string',
        'total_amount' => 'double',
        'remaining_amount' => 'double',
        'due_date' => '\DateTime',
        'payment_type' => 'string',
        'payment_code' => 'string',
        'payment_number' => 'string',
        'credit_card_expire_month' => 'string',
        'credit_card_expire_year' => 'string',
        'is_posted' => 'bool',
        'promotion_code' => 'string',
        'control_group_id' => 'string',
        'chargeback_amount' => 'double',
        'check_number' => 'string',
        'check_status' => 'string',
        'is_printed' => 'bool',
        'transaction_status_description' => 'string',
        'billing_currency' => 'string',
        'installment_billing_code' => 'string',
        'debit_sequence_number' => 'string',
        'transaction_number' => 'string',
        'applied_to_number' => 'string',
        'credit_or_debit' => 'string',
        'debit_paid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_date' => 'date-time',
        'source' => null,
        'source_reference' => null,
        'billing_organization' => null,
        'total_amount' => 'double',
        'remaining_amount' => 'double',
        'due_date' => 'date-time',
        'payment_type' => null,
        'payment_code' => null,
        'payment_number' => null,
        'credit_card_expire_month' => null,
        'credit_card_expire_year' => null,
        'is_posted' => null,
        'promotion_code' => null,
        'control_group_id' => null,
        'chargeback_amount' => 'double',
        'check_number' => null,
        'check_status' => null,
        'is_printed' => null,
        'transaction_status_description' => null,
        'billing_currency' => null,
        'installment_billing_code' => null,
        'debit_sequence_number' => null,
        'transaction_number' => null,
        'applied_to_number' => null,
        'credit_or_debit' => null,
        'debit_paid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_date' => 'TransactionDate',
        'source' => 'Source',
        'source_reference' => 'SourceReference',
        'billing_organization' => 'BillingOrganization',
        'total_amount' => 'TotalAmount',
        'remaining_amount' => 'RemainingAmount',
        'due_date' => 'DueDate',
        'payment_type' => 'PaymentType',
        'payment_code' => 'PaymentCode',
        'payment_number' => 'PaymentNumber',
        'credit_card_expire_month' => 'CreditCardExpireMonth',
        'credit_card_expire_year' => 'CreditCardExpireYear',
        'is_posted' => 'IsPosted',
        'promotion_code' => 'PromotionCode',
        'control_group_id' => 'ControlGroupId',
        'chargeback_amount' => 'ChargebackAmount',
        'check_number' => 'CheckNumber',
        'check_status' => 'CheckStatus',
        'is_printed' => 'IsPrinted',
        'transaction_status_description' => 'TransactionStatusDescription',
        'billing_currency' => 'BillingCurrency',
        'installment_billing_code' => 'InstallmentBillingCode',
        'debit_sequence_number' => 'DebitSequenceNumber',
        'transaction_number' => 'TransactionNumber',
        'applied_to_number' => 'AppliedToNumber',
        'credit_or_debit' => 'CreditOrDebit',
        'debit_paid' => 'DebitPaid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_date' => 'setTransactionDate',
        'source' => 'setSource',
        'source_reference' => 'setSourceReference',
        'billing_organization' => 'setBillingOrganization',
        'total_amount' => 'setTotalAmount',
        'remaining_amount' => 'setRemainingAmount',
        'due_date' => 'setDueDate',
        'payment_type' => 'setPaymentType',
        'payment_code' => 'setPaymentCode',
        'payment_number' => 'setPaymentNumber',
        'credit_card_expire_month' => 'setCreditCardExpireMonth',
        'credit_card_expire_year' => 'setCreditCardExpireYear',
        'is_posted' => 'setIsPosted',
        'promotion_code' => 'setPromotionCode',
        'control_group_id' => 'setControlGroupId',
        'chargeback_amount' => 'setChargebackAmount',
        'check_number' => 'setCheckNumber',
        'check_status' => 'setCheckStatus',
        'is_printed' => 'setIsPrinted',
        'transaction_status_description' => 'setTransactionStatusDescription',
        'billing_currency' => 'setBillingCurrency',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'debit_sequence_number' => 'setDebitSequenceNumber',
        'transaction_number' => 'setTransactionNumber',
        'applied_to_number' => 'setAppliedToNumber',
        'credit_or_debit' => 'setCreditOrDebit',
        'debit_paid' => 'setDebitPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_date' => 'getTransactionDate',
        'source' => 'getSource',
        'source_reference' => 'getSourceReference',
        'billing_organization' => 'getBillingOrganization',
        'total_amount' => 'getTotalAmount',
        'remaining_amount' => 'getRemainingAmount',
        'due_date' => 'getDueDate',
        'payment_type' => 'getPaymentType',
        'payment_code' => 'getPaymentCode',
        'payment_number' => 'getPaymentNumber',
        'credit_card_expire_month' => 'getCreditCardExpireMonth',
        'credit_card_expire_year' => 'getCreditCardExpireYear',
        'is_posted' => 'getIsPosted',
        'promotion_code' => 'getPromotionCode',
        'control_group_id' => 'getControlGroupId',
        'chargeback_amount' => 'getChargebackAmount',
        'check_number' => 'getCheckNumber',
        'check_status' => 'getCheckStatus',
        'is_printed' => 'getIsPrinted',
        'transaction_status_description' => 'getTransactionStatusDescription',
        'billing_currency' => 'getBillingCurrency',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'debit_sequence_number' => 'getDebitSequenceNumber',
        'transaction_number' => 'getTransactionNumber',
        'applied_to_number' => 'getAppliedToNumber',
        'credit_or_debit' => 'getCreditOrDebit',
        'debit_paid' => 'getDebitPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_reference'] = isset($data['source_reference']) ? $data['source_reference'] : null;
        $this->container['billing_organization'] = isset($data['billing_organization']) ? $data['billing_organization'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['remaining_amount'] = isset($data['remaining_amount']) ? $data['remaining_amount'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['payment_code'] = isset($data['payment_code']) ? $data['payment_code'] : null;
        $this->container['payment_number'] = isset($data['payment_number']) ? $data['payment_number'] : null;
        $this->container['credit_card_expire_month'] = isset($data['credit_card_expire_month']) ? $data['credit_card_expire_month'] : null;
        $this->container['credit_card_expire_year'] = isset($data['credit_card_expire_year']) ? $data['credit_card_expire_year'] : null;
        $this->container['is_posted'] = isset($data['is_posted']) ? $data['is_posted'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['control_group_id'] = isset($data['control_group_id']) ? $data['control_group_id'] : null;
        $this->container['chargeback_amount'] = isset($data['chargeback_amount']) ? $data['chargeback_amount'] : null;
        $this->container['check_number'] = isset($data['check_number']) ? $data['check_number'] : null;
        $this->container['check_status'] = isset($data['check_status']) ? $data['check_status'] : null;
        $this->container['is_printed'] = isset($data['is_printed']) ? $data['is_printed'] : null;
        $this->container['transaction_status_description'] = isset($data['transaction_status_description']) ? $data['transaction_status_description'] : null;
        $this->container['billing_currency'] = isset($data['billing_currency']) ? $data['billing_currency'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['debit_sequence_number'] = isset($data['debit_sequence_number']) ? $data['debit_sequence_number'] : null;
        $this->container['transaction_number'] = isset($data['transaction_number']) ? $data['transaction_number'] : null;
        $this->container['applied_to_number'] = isset($data['applied_to_number']) ? $data['applied_to_number'] : null;
        $this->container['credit_or_debit'] = isset($data['credit_or_debit']) ? $data['credit_or_debit'] : null;
        $this->container['debit_paid'] = isset($data['debit_paid']) ? $data['debit_paid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date Transaction Date
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_reference
     *
     * @return string
     */
    public function getSourceReference()
    {
        return $this->container['source_reference'];
    }

    /**
     * Sets source_reference
     *
     * @param string $source_reference Source Reference
     *
     * @return $this
     */
    public function setSourceReference($source_reference)
    {
        $this->container['source_reference'] = $source_reference;

        return $this;
    }

    /**
     * Gets billing_organization
     *
     * @return string
     */
    public function getBillingOrganization()
    {
        return $this->container['billing_organization'];
    }

    /**
     * Sets billing_organization
     *
     * @param string $billing_organization Billing Organization
     *
     * @return $this
     */
    public function setBillingOrganization($billing_organization)
    {
        $this->container['billing_organization'] = $billing_organization;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total Amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return double
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param double $remaining_amount Remaining Amount
     *
     * @return $this
     */
    public function setRemainingAmount($remaining_amount)
    {
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Due Date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type Payment Type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_code
     *
     * @return string
     */
    public function getPaymentCode()
    {
        return $this->container['payment_code'];
    }

    /**
     * Sets payment_code
     *
     * @param string $payment_code Payment Code
     *
     * @return $this
     */
    public function setPaymentCode($payment_code)
    {
        $this->container['payment_code'] = $payment_code;

        return $this;
    }

    /**
     * Gets payment_number
     *
     * @return string
     */
    public function getPaymentNumber()
    {
        return $this->container['payment_number'];
    }

    /**
     * Sets payment_number
     *
     * @param string $payment_number Payment Number
     *
     * @return $this
     */
    public function setPaymentNumber($payment_number)
    {
        $this->container['payment_number'] = $payment_number;

        return $this;
    }

    /**
     * Gets credit_card_expire_month
     *
     * @return string
     */
    public function getCreditCardExpireMonth()
    {
        return $this->container['credit_card_expire_month'];
    }

    /**
     * Sets credit_card_expire_month
     *
     * @param string $credit_card_expire_month Credit Card Expire Month
     *
     * @return $this
     */
    public function setCreditCardExpireMonth($credit_card_expire_month)
    {
        $this->container['credit_card_expire_month'] = $credit_card_expire_month;

        return $this;
    }

    /**
     * Gets credit_card_expire_year
     *
     * @return string
     */
    public function getCreditCardExpireYear()
    {
        return $this->container['credit_card_expire_year'];
    }

    /**
     * Sets credit_card_expire_year
     *
     * @param string $credit_card_expire_year Credit Card Expire Year
     *
     * @return $this
     */
    public function setCreditCardExpireYear($credit_card_expire_year)
    {
        $this->container['credit_card_expire_year'] = $credit_card_expire_year;

        return $this;
    }

    /**
     * Gets is_posted
     *
     * @return bool
     */
    public function getIsPosted()
    {
        return $this->container['is_posted'];
    }

    /**
     * Sets is_posted
     *
     * @param bool $is_posted Is Posted?
     *
     * @return $this
     */
    public function setIsPosted($is_posted)
    {
        $this->container['is_posted'] = $is_posted;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion Code
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets control_group_id
     *
     * @return string
     */
    public function getControlGroupId()
    {
        return $this->container['control_group_id'];
    }

    /**
     * Sets control_group_id
     *
     * @param string $control_group_id Control Group Id
     *
     * @return $this
     */
    public function setControlGroupId($control_group_id)
    {
        $this->container['control_group_id'] = $control_group_id;

        return $this;
    }

    /**
     * Gets chargeback_amount
     *
     * @return double
     */
    public function getChargebackAmount()
    {
        return $this->container['chargeback_amount'];
    }

    /**
     * Sets chargeback_amount
     *
     * @param double $chargeback_amount Chargeback Amount
     *
     * @return $this
     */
    public function setChargebackAmount($chargeback_amount)
    {
        $this->container['chargeback_amount'] = $chargeback_amount;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string $check_number Check Number
     *
     * @return $this
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets check_status
     *
     * @return string
     */
    public function getCheckStatus()
    {
        return $this->container['check_status'];
    }

    /**
     * Sets check_status
     *
     * @param string $check_status Check Status
     *
     * @return $this
     */
    public function setCheckStatus($check_status)
    {
        $this->container['check_status'] = $check_status;

        return $this;
    }

    /**
     * Gets is_printed
     *
     * @return bool
     */
    public function getIsPrinted()
    {
        return $this->container['is_printed'];
    }

    /**
     * Sets is_printed
     *
     * @param bool $is_printed Is Printed?
     *
     * @return $this
     */
    public function setIsPrinted($is_printed)
    {
        $this->container['is_printed'] = $is_printed;

        return $this;
    }

    /**
     * Gets transaction_status_description
     *
     * @return string
     */
    public function getTransactionStatusDescription()
    {
        return $this->container['transaction_status_description'];
    }

    /**
     * Sets transaction_status_description
     *
     * @param string $transaction_status_description Transaction Status Description
     *
     * @return $this
     */
    public function setTransactionStatusDescription($transaction_status_description)
    {
        $this->container['transaction_status_description'] = $transaction_status_description;

        return $this;
    }

    /**
     * Gets billing_currency
     *
     * @return string
     */
    public function getBillingCurrency()
    {
        return $this->container['billing_currency'];
    }

    /**
     * Sets billing_currency
     *
     * @param string $billing_currency Billing Currency
     *
     * @return $this
     */
    public function setBillingCurrency($billing_currency)
    {
        $this->container['billing_currency'] = $billing_currency;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code Installment Billing Code
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets debit_sequence_number
     *
     * @return string
     */
    public function getDebitSequenceNumber()
    {
        return $this->container['debit_sequence_number'];
    }

    /**
     * Sets debit_sequence_number
     *
     * @param string $debit_sequence_number Debit Sequence Number
     *
     * @return $this
     */
    public function setDebitSequenceNumber($debit_sequence_number)
    {
        $this->container['debit_sequence_number'] = $debit_sequence_number;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string $transaction_number Transaction Number
     *
     * @return $this
     */
    public function setTransactionNumber($transaction_number)
    {
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets applied_to_number
     *
     * @return string
     */
    public function getAppliedToNumber()
    {
        return $this->container['applied_to_number'];
    }

    /**
     * Sets applied_to_number
     *
     * @param string $applied_to_number Applied-To Number
     *
     * @return $this
     */
    public function setAppliedToNumber($applied_to_number)
    {
        $this->container['applied_to_number'] = $applied_to_number;

        return $this;
    }

    /**
     * Gets credit_or_debit
     *
     * @return string
     */
    public function getCreditOrDebit()
    {
        return $this->container['credit_or_debit'];
    }

    /**
     * Sets credit_or_debit
     *
     * @param string $credit_or_debit Credit or Debit
     *
     * @return $this
     */
    public function setCreditOrDebit($credit_or_debit)
    {
        $this->container['credit_or_debit'] = $credit_or_debit;

        return $this;
    }

    /**
     * Gets debit_paid
     *
     * @return bool
     */
    public function getDebitPaid()
    {
        return $this->container['debit_paid'];
    }

    /**
     * Sets debit_paid
     *
     * @param bool $debit_paid Is debit fully paid?
     *
     * @return $this
     */
    public function setDebitPaid($debit_paid)
    {
        $this->container['debit_paid'] = $debit_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


