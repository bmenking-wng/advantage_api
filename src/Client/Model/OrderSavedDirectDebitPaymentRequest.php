<?php
/**
 * OrderSavedDirectDebitPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderSavedDirectDebitPaymentRequest Class Doc Comment
 *
 * @category Class
 * @description Information about a payment to be made toward an order from a direct debit payment method.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderSavedDirectDebitPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderSavedDirectDebitPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'electronic_payment_id' => 'string',
        'amount' => 'double',
        'billing_organization' => 'string',
        'entry_organization' => 'string',
        'currency_code' => 'string',
        'direct_debit_details' => '\Advantage\Client\Model\DirectDebitDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'electronic_payment_id' => null,
        'amount' => 'double',
        'billing_organization' => null,
        'entry_organization' => null,
        'currency_code' => null,
        'direct_debit_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'electronic_payment_id' => 'ElectronicPaymentId',
        'amount' => 'Amount',
        'billing_organization' => 'BillingOrganization',
        'entry_organization' => 'EntryOrganization',
        'currency_code' => 'CurrencyCode',
        'direct_debit_details' => 'DirectDebitDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'electronic_payment_id' => 'setElectronicPaymentId',
        'amount' => 'setAmount',
        'billing_organization' => 'setBillingOrganization',
        'entry_organization' => 'setEntryOrganization',
        'currency_code' => 'setCurrencyCode',
        'direct_debit_details' => 'setDirectDebitDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'electronic_payment_id' => 'getElectronicPaymentId',
        'amount' => 'getAmount',
        'billing_organization' => 'getBillingOrganization',
        'entry_organization' => 'getEntryOrganization',
        'currency_code' => 'getCurrencyCode',
        'direct_debit_details' => 'getDirectDebitDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['electronic_payment_id'] = isset($data['electronic_payment_id']) ? $data['electronic_payment_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['billing_organization'] = isset($data['billing_organization']) ? $data['billing_organization'] : null;
        $this->container['entry_organization'] = isset($data['entry_organization']) ? $data['entry_organization'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['direct_debit_details'] = isset($data['direct_debit_details']) ? $data['direct_debit_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The Advantage customer number of the customer providing the payment.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets electronic_payment_id
     *
     * @return string
     */
    public function getElectronicPaymentId()
    {
        return $this->container['electronic_payment_id'];
    }

    /**
     * Sets electronic_payment_id
     *
     * @param string $electronic_payment_id The electronic payment ID identifying the direct debit payment method.
     *
     * @return $this
     */
    public function setElectronicPaymentId($electronic_payment_id)
    {
        $this->container['electronic_payment_id'] = $electronic_payment_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount to pay on the order.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets billing_organization
     *
     * @return string
     */
    public function getBillingOrganization()
    {
        return $this->container['billing_organization'];
    }

    /**
     * Sets billing_organization
     *
     * @param string $billing_organization Billing organization.
     *
     * @return $this
     */
    public function setBillingOrganization($billing_organization)
    {
        $this->container['billing_organization'] = $billing_organization;

        return $this;
    }

    /**
     * Gets entry_organization
     *
     * @return string
     */
    public function getEntryOrganization()
    {
        return $this->container['entry_organization'];
    }

    /**
     * Sets entry_organization
     *
     * @param string $entry_organization Entry organization.
     *
     * @return $this
     */
    public function setEntryOrganization($entry_organization)
    {
        $this->container['entry_organization'] = $entry_organization;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Billing currency code.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets direct_debit_details
     *
     * @return \Advantage\Client\Model\DirectDebitDetails
     */
    public function getDirectDebitDetails()
    {
        return $this->container['direct_debit_details'];
    }

    /**
     * Sets direct_debit_details
     *
     * @param \Advantage\Client\Model\DirectDebitDetails $direct_debit_details Direct Debit details
     *
     * @return $this
     */
    public function setDirectDebitDetails($direct_debit_details)
    {
        $this->container['direct_debit_details'] = $direct_debit_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


