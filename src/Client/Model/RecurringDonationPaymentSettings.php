<?php
/**
 * RecurringDonationPaymentSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * RecurringDonationPaymentSettings Class Doc Comment
 *
 * @category Class
 * @description Settings for payment associated with a recurring donation.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecurringDonationPaymentSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecurringDonationPaymentSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_type' => 'string',
        'direct_debit_recurring_payment_id' => 'string',
        'card_type' => 'string',
        'card_number' => 'string',
        'electronic_payment_id' => 'string',
        'card_expiration' => 'string',
        'bank_id_number' => 'string',
        'bank_account_number' => 'string',
        'bank_account_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_type' => null,
        'direct_debit_recurring_payment_id' => null,
        'card_type' => null,
        'card_number' => null,
        'electronic_payment_id' => null,
        'card_expiration' => null,
        'bank_id_number' => null,
        'bank_account_number' => null,
        'bank_account_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_type' => 'PaymentType',
        'direct_debit_recurring_payment_id' => 'DirectDebitRecurringPaymentId',
        'card_type' => 'CardType',
        'card_number' => 'CardNumber',
        'electronic_payment_id' => 'ElectronicPaymentId',
        'card_expiration' => 'CardExpiration',
        'bank_id_number' => 'BankIdNumber',
        'bank_account_number' => 'BankAccountNumber',
        'bank_account_type' => 'BankAccountType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_type' => 'setPaymentType',
        'direct_debit_recurring_payment_id' => 'setDirectDebitRecurringPaymentId',
        'card_type' => 'setCardType',
        'card_number' => 'setCardNumber',
        'electronic_payment_id' => 'setElectronicPaymentId',
        'card_expiration' => 'setCardExpiration',
        'bank_id_number' => 'setBankIdNumber',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_account_type' => 'setBankAccountType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_type' => 'getPaymentType',
        'direct_debit_recurring_payment_id' => 'getDirectDebitRecurringPaymentId',
        'card_type' => 'getCardType',
        'card_number' => 'getCardNumber',
        'electronic_payment_id' => 'getElectronicPaymentId',
        'card_expiration' => 'getCardExpiration',
        'bank_id_number' => 'getBankIdNumber',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_account_type' => 'getBankAccountType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_TYPE_INVALID = 'Invalid';
    const PAYMENT_TYPE_CREDIT_CARD = 'CreditCard';
    const PAYMENT_TYPE_DIRECT_DEBIT = 'DirectDebit';
    const BANK_ACCOUNT_TYPE_SAVING = 'Saving';
    const BANK_ACCOUNT_TYPE_CHECKING = 'Checking';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_INVALID,
            self::PAYMENT_TYPE_CREDIT_CARD,
            self::PAYMENT_TYPE_DIRECT_DEBIT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankAccountTypeAllowableValues()
    {
        return [
            self::BANK_ACCOUNT_TYPE_SAVING,
            self::BANK_ACCOUNT_TYPE_CHECKING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['direct_debit_recurring_payment_id'] = isset($data['direct_debit_recurring_payment_id']) ? $data['direct_debit_recurring_payment_id'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['electronic_payment_id'] = isset($data['electronic_payment_id']) ? $data['electronic_payment_id'] : null;
        $this->container['card_expiration'] = isset($data['card_expiration']) ? $data['card_expiration'] : null;
        $this->container['bank_id_number'] = isset($data['bank_id_number']) ? $data['bank_id_number'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['bank_account_type'] = isset($data['bank_account_type']) ? $data['bank_account_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($this->container['bank_account_type']) && !in_array($this->container['bank_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bank_account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type The payment type for the recurring donation's payment.
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($payment_type) && !in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets direct_debit_recurring_payment_id
     *
     * @return string
     */
    public function getDirectDebitRecurringPaymentId()
    {
        return $this->container['direct_debit_recurring_payment_id'];
    }

    /**
     * Sets direct_debit_recurring_payment_id
     *
     * @param string $direct_debit_recurring_payment_id The direct debit recurring payment Id.
     *
     * @return $this
     */
    public function setDirectDebitRecurringPaymentId($direct_debit_recurring_payment_id)
    {
        $this->container['direct_debit_recurring_payment_id'] = $direct_debit_recurring_payment_id;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type The card type for the recurring donation's payment.
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number The card number for the recurring donation's payment.
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets electronic_payment_id
     *
     * @return string
     */
    public function getElectronicPaymentId()
    {
        return $this->container['electronic_payment_id'];
    }

    /**
     * Sets electronic_payment_id
     *
     * @param string $electronic_payment_id The electronic payment id for the recurring donation's payment.
     *
     * @return $this
     */
    public function setElectronicPaymentId($electronic_payment_id)
    {
        $this->container['electronic_payment_id'] = $electronic_payment_id;

        return $this;
    }

    /**
     * Gets card_expiration
     *
     * @return string
     */
    public function getCardExpiration()
    {
        return $this->container['card_expiration'];
    }

    /**
     * Sets card_expiration
     *
     * @param string $card_expiration The card expiration for the recurring donation's payment (in CCYYMM format).
     *
     * @return $this
     */
    public function setCardExpiration($card_expiration)
    {
        $this->container['card_expiration'] = $card_expiration;

        return $this;
    }

    /**
     * Gets bank_id_number
     *
     * @return string
     */
    public function getBankIdNumber()
    {
        return $this->container['bank_id_number'];
    }

    /**
     * Sets bank_id_number
     *
     * @param string $bank_id_number The bank Id number for the recurring donation's payment.
     *
     * @return $this
     */
    public function setBankIdNumber($bank_id_number)
    {
        $this->container['bank_id_number'] = $bank_id_number;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number The bank account number for the recurring donation's payment.
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_account_type
     *
     * @return string
     */
    public function getBankAccountType()
    {
        return $this->container['bank_account_type'];
    }

    /**
     * Sets bank_account_type
     *
     * @param string $bank_account_type The bank account type.
     *
     * @return $this
     */
    public function setBankAccountType($bank_account_type)
    {
        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($bank_account_type) && !in_array($bank_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bank_account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bank_account_type'] = $bank_account_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


