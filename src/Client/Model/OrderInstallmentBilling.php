<?php
/**
 * OrderInstallmentBilling
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderInstallmentBilling Class Doc Comment
 *
 * @category Class
 * @description Information about installment billing.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderInstallmentBilling implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderInstallmentBilling';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'installment_plan' => '\Advantage\Client\Model\InstallmentBillingPlan',
        'down_payment' => 'double',
        'installment_fee' => 'double',
        'schedule' => '\Advantage\Client\Model\InstallmentBill[]',
        'next_payment_amount' => 'double',
        'next_payment_due' => '\DateTime',
        'is_estimate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'installment_plan' => null,
        'down_payment' => 'double',
        'installment_fee' => 'double',
        'schedule' => null,
        'next_payment_amount' => 'double',
        'next_payment_due' => 'date-time',
        'is_estimate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installment_plan' => 'InstallmentPlan',
        'down_payment' => 'DownPayment',
        'installment_fee' => 'InstallmentFee',
        'schedule' => 'Schedule',
        'next_payment_amount' => 'NextPaymentAmount',
        'next_payment_due' => 'NextPaymentDue',
        'is_estimate' => 'IsEstimate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installment_plan' => 'setInstallmentPlan',
        'down_payment' => 'setDownPayment',
        'installment_fee' => 'setInstallmentFee',
        'schedule' => 'setSchedule',
        'next_payment_amount' => 'setNextPaymentAmount',
        'next_payment_due' => 'setNextPaymentDue',
        'is_estimate' => 'setIsEstimate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installment_plan' => 'getInstallmentPlan',
        'down_payment' => 'getDownPayment',
        'installment_fee' => 'getInstallmentFee',
        'schedule' => 'getSchedule',
        'next_payment_amount' => 'getNextPaymentAmount',
        'next_payment_due' => 'getNextPaymentDue',
        'is_estimate' => 'getIsEstimate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['installment_plan'] = isset($data['installment_plan']) ? $data['installment_plan'] : null;
        $this->container['down_payment'] = isset($data['down_payment']) ? $data['down_payment'] : null;
        $this->container['installment_fee'] = isset($data['installment_fee']) ? $data['installment_fee'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['next_payment_amount'] = isset($data['next_payment_amount']) ? $data['next_payment_amount'] : null;
        $this->container['next_payment_due'] = isset($data['next_payment_due']) ? $data['next_payment_due'] : null;
        $this->container['is_estimate'] = isset($data['is_estimate']) ? $data['is_estimate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installment_plan
     *
     * @return \Advantage\Client\Model\InstallmentBillingPlan
     */
    public function getInstallmentPlan()
    {
        return $this->container['installment_plan'];
    }

    /**
     * Sets installment_plan
     *
     * @param \Advantage\Client\Model\InstallmentBillingPlan $installment_plan The installment billing code.
     *
     * @return $this
     */
    public function setInstallmentPlan($installment_plan)
    {
        $this->container['installment_plan'] = $installment_plan;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return double
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param double $down_payment The down payment. (The minimum down payment if this is an estimation.)
     *
     * @return $this
     */
    public function setDownPayment($down_payment)
    {
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets installment_fee
     *
     * @return double
     */
    public function getInstallmentFee()
    {
        return $this->container['installment_fee'];
    }

    /**
     * Sets installment_fee
     *
     * @param double $installment_fee The installment fee
     *
     * @return $this
     */
    public function setInstallmentFee($installment_fee)
    {
        $this->container['installment_fee'] = $installment_fee;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Advantage\Client\Model\InstallmentBill[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Advantage\Client\Model\InstallmentBill[] $schedule The Schedule for the installment billing. This is an estimate if the order is not yet completed.
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets next_payment_amount
     *
     * @return double
     */
    public function getNextPaymentAmount()
    {
        return $this->container['next_payment_amount'];
    }

    /**
     * Sets next_payment_amount
     *
     * @param double $next_payment_amount The amount of the next payment due.
     *
     * @return $this
     */
    public function setNextPaymentAmount($next_payment_amount)
    {
        $this->container['next_payment_amount'] = $next_payment_amount;

        return $this;
    }

    /**
     * Gets next_payment_due
     *
     * @return \DateTime
     */
    public function getNextPaymentDue()
    {
        return $this->container['next_payment_due'];
    }

    /**
     * Sets next_payment_due
     *
     * @param \DateTime $next_payment_due The date the next payment is due.
     *
     * @return $this
     */
    public function setNextPaymentDue($next_payment_due)
    {
        $this->container['next_payment_due'] = $next_payment_due;

        return $this;
    }

    /**
     * Gets is_estimate
     *
     * @return bool
     */
    public function getIsEstimate()
    {
        return $this->container['is_estimate'];
    }

    /**
     * Sets is_estimate
     *
     * @param bool $is_estimate Whether or not this is an estimated installment billing plan.  This is an estimate if the order is not yet completed.
     *
     * @return $this
     */
    public function setIsEstimate($is_estimate)
    {
        $this->container['is_estimate'] = $is_estimate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


