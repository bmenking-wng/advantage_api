<?php
/**
 * SubscriptionUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SubscriptionUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description Information for requesting a subscription update.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'renewal_policy_code' => 'string',
        'auto_charge_card' => '\Advantage\Client\Model\CreditCardPaymentRequest',
        'auto_charge_direct_debit_account' => '\Advantage\Client\Model\DirectDebitPaymentRequest',
        'auto_renew_chain' => '\Advantage\Client\Model\AutoRenewChain',
        'promotion_code' => 'string',
        'reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'renewal_policy_code' => null,
        'auto_charge_card' => null,
        'auto_charge_direct_debit_account' => null,
        'auto_renew_chain' => null,
        'promotion_code' => null,
        'reason_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'renewal_policy_code' => 'RenewalPolicyCode',
        'auto_charge_card' => 'AutoChargeCard',
        'auto_charge_direct_debit_account' => 'AutoChargeDirectDebitAccount',
        'auto_renew_chain' => 'AutoRenewChain',
        'promotion_code' => 'PromotionCode',
        'reason_code' => 'ReasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'renewal_policy_code' => 'setRenewalPolicyCode',
        'auto_charge_card' => 'setAutoChargeCard',
        'auto_charge_direct_debit_account' => 'setAutoChargeDirectDebitAccount',
        'auto_renew_chain' => 'setAutoRenewChain',
        'promotion_code' => 'setPromotionCode',
        'reason_code' => 'setReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'renewal_policy_code' => 'getRenewalPolicyCode',
        'auto_charge_card' => 'getAutoChargeCard',
        'auto_charge_direct_debit_account' => 'getAutoChargeDirectDebitAccount',
        'auto_renew_chain' => 'getAutoRenewChain',
        'promotion_code' => 'getPromotionCode',
        'reason_code' => 'getReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['renewal_policy_code'] = isset($data['renewal_policy_code']) ? $data['renewal_policy_code'] : null;
        $this->container['auto_charge_card'] = isset($data['auto_charge_card']) ? $data['auto_charge_card'] : null;
        $this->container['auto_charge_direct_debit_account'] = isset($data['auto_charge_direct_debit_account']) ? $data['auto_charge_direct_debit_account'] : null;
        $this->container['auto_renew_chain'] = isset($data['auto_renew_chain']) ? $data['auto_renew_chain'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets renewal_policy_code
     *
     * @return string
     */
    public function getRenewalPolicyCode()
    {
        return $this->container['renewal_policy_code'];
    }

    /**
     * Sets renewal_policy_code
     *
     * @param string $renewal_policy_code The new renewal flag.  You must supply a credit card or bank account to use   automatic charge renewals (C).
     *
     * @return $this
     */
    public function setRenewalPolicyCode($renewal_policy_code)
    {
        $this->container['renewal_policy_code'] = $renewal_policy_code;

        return $this;
    }

    /**
     * Gets auto_charge_card
     *
     * @return \Advantage\Client\Model\CreditCardPaymentRequest
     */
    public function getAutoChargeCard()
    {
        return $this->container['auto_charge_card'];
    }

    /**
     * Sets auto_charge_card
     *
     * @param \Advantage\Client\Model\CreditCardPaymentRequest $auto_charge_card The credit card to use for automatic renewals.
     *
     * @return $this
     */
    public function setAutoChargeCard($auto_charge_card)
    {
        $this->container['auto_charge_card'] = $auto_charge_card;

        return $this;
    }

    /**
     * Gets auto_charge_direct_debit_account
     *
     * @return \Advantage\Client\Model\DirectDebitPaymentRequest
     */
    public function getAutoChargeDirectDebitAccount()
    {
        return $this->container['auto_charge_direct_debit_account'];
    }

    /**
     * Sets auto_charge_direct_debit_account
     *
     * @param \Advantage\Client\Model\DirectDebitPaymentRequest $auto_charge_direct_debit_account The direct debit account to use for automatic renewals.
     *
     * @return $this
     */
    public function setAutoChargeDirectDebitAccount($auto_charge_direct_debit_account)
    {
        $this->container['auto_charge_direct_debit_account'] = $auto_charge_direct_debit_account;

        return $this;
    }

    /**
     * Gets auto_renew_chain
     *
     * @return \Advantage\Client\Model\AutoRenewChain
     */
    public function getAutoRenewChain()
    {
        return $this->container['auto_renew_chain'];
    }

    /**
     * Sets auto_renew_chain
     *
     * @param \Advantage\Client\Model\AutoRenewChain $auto_renew_chain The Auto-renew chain information to use for automatic renewals
     *
     * @return $this
     */
    public function setAutoRenewChain($auto_renew_chain)
    {
        $this->container['auto_renew_chain'] = $auto_renew_chain;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Renewal promotion pode
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code Reason code to use for automatic renewals
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


