<?php
/**
 * OneOffProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OneOffProduct Class Doc Comment
 *
 * @category Class
 * @description Information for a one-off product (PRO)
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OneOffProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OneOffProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'isbn10' => 'string',
        'isbn10_formatted' => 'string',
        'isbn13' => 'string',
        'isbn13_formatted' => 'string',
        'author' => 'string',
        'width' => 'double',
        'height' => 'double',
        'depth' => 'double',
        'weight' => 'double',
        'format_code' => 'string',
        'pages' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'isbn10' => null,
        'isbn10_formatted' => null,
        'isbn13' => null,
        'isbn13_formatted' => null,
        'author' => null,
        'width' => 'double',
        'height' => 'double',
        'depth' => 'double',
        'weight' => 'double',
        'format_code' => null,
        'pages' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isbn10' => 'Isbn10',
        'isbn10_formatted' => 'Isbn10Formatted',
        'isbn13' => 'Isbn13',
        'isbn13_formatted' => 'Isbn13Formatted',
        'author' => 'Author',
        'width' => 'Width',
        'height' => 'Height',
        'depth' => 'Depth',
        'weight' => 'Weight',
        'format_code' => 'FormatCode',
        'pages' => 'Pages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isbn10' => 'setIsbn10',
        'isbn10_formatted' => 'setIsbn10Formatted',
        'isbn13' => 'setIsbn13',
        'isbn13_formatted' => 'setIsbn13Formatted',
        'author' => 'setAuthor',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'depth' => 'setDepth',
        'weight' => 'setWeight',
        'format_code' => 'setFormatCode',
        'pages' => 'setPages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isbn10' => 'getIsbn10',
        'isbn10_formatted' => 'getIsbn10Formatted',
        'isbn13' => 'getIsbn13',
        'isbn13_formatted' => 'getIsbn13Formatted',
        'author' => 'getAuthor',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'depth' => 'getDepth',
        'weight' => 'getWeight',
        'format_code' => 'getFormatCode',
        'pages' => 'getPages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isbn10'] = isset($data['isbn10']) ? $data['isbn10'] : null;
        $this->container['isbn10_formatted'] = isset($data['isbn10_formatted']) ? $data['isbn10_formatted'] : null;
        $this->container['isbn13'] = isset($data['isbn13']) ? $data['isbn13'] : null;
        $this->container['isbn13_formatted'] = isset($data['isbn13_formatted']) ? $data['isbn13_formatted'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['format_code'] = isset($data['format_code']) ? $data['format_code'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isbn10
     *
     * @return string
     */
    public function getIsbn10()
    {
        return $this->container['isbn10'];
    }

    /**
     * Sets isbn10
     *
     * @param string $isbn10 The ISBN-10 number of the product.
     *
     * @return $this
     */
    public function setIsbn10($isbn10)
    {
        $this->container['isbn10'] = $isbn10;

        return $this;
    }

    /**
     * Gets isbn10_formatted
     *
     * @return string
     */
    public function getIsbn10Formatted()
    {
        return $this->container['isbn10_formatted'];
    }

    /**
     * Sets isbn10_formatted
     *
     * @param string $isbn10_formatted The formatted ISBN-10 number of the product.
     *
     * @return $this
     */
    public function setIsbn10Formatted($isbn10_formatted)
    {
        $this->container['isbn10_formatted'] = $isbn10_formatted;

        return $this;
    }

    /**
     * Gets isbn13
     *
     * @return string
     */
    public function getIsbn13()
    {
        return $this->container['isbn13'];
    }

    /**
     * Sets isbn13
     *
     * @param string $isbn13 The ISBN-13 number of the product.
     *
     * @return $this
     */
    public function setIsbn13($isbn13)
    {
        $this->container['isbn13'] = $isbn13;

        return $this;
    }

    /**
     * Gets isbn13_formatted
     *
     * @return string
     */
    public function getIsbn13Formatted()
    {
        return $this->container['isbn13_formatted'];
    }

    /**
     * Sets isbn13_formatted
     *
     * @param string $isbn13_formatted The formatted ISBN-13 number of the product.
     *
     * @return $this
     */
    public function setIsbn13Formatted($isbn13_formatted)
    {
        $this->container['isbn13_formatted'] = $isbn13_formatted;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author The author of the product.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width The width of the product
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height The height of the product
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return double
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param double $depth The depth of the product.
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight The weight of the product.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets format_code
     *
     * @return string
     */
    public function getFormatCode()
    {
        return $this->container['format_code'];
    }

    /**
     * Sets format_code
     *
     * @param string $format_code The format of the product.
     *
     * @return $this
     */
    public function setFormatCode($format_code)
    {
        $this->container['format_code'] = $format_code;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return int
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param int $pages The number of pages.
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


