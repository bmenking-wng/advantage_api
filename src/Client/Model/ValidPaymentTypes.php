<?php
/**
 * ValidPaymentTypes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ValidPaymentTypes Class Doc Comment
 *
 * @category Class
 * @description Specifies which payment types are valid for a promotion offer.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidPaymentTypes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidPaymentTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gift_certificate' => 'bool',
        'available_credits' => 'bool',
        'check' => 'bool',
        'digital_wallet' => 'bool',
        'miscellaneous_credit' => 'bool',
        'credit_card' => 'bool',
        'direct_debit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gift_certificate' => null,
        'available_credits' => null,
        'check' => null,
        'digital_wallet' => null,
        'miscellaneous_credit' => null,
        'credit_card' => null,
        'direct_debit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gift_certificate' => 'GiftCertificate',
        'available_credits' => 'AvailableCredits',
        'check' => 'Check',
        'digital_wallet' => 'DigitalWallet',
        'miscellaneous_credit' => 'MiscellaneousCredit',
        'credit_card' => 'CreditCard',
        'direct_debit' => 'DirectDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gift_certificate' => 'setGiftCertificate',
        'available_credits' => 'setAvailableCredits',
        'check' => 'setCheck',
        'digital_wallet' => 'setDigitalWallet',
        'miscellaneous_credit' => 'setMiscellaneousCredit',
        'credit_card' => 'setCreditCard',
        'direct_debit' => 'setDirectDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gift_certificate' => 'getGiftCertificate',
        'available_credits' => 'getAvailableCredits',
        'check' => 'getCheck',
        'digital_wallet' => 'getDigitalWallet',
        'miscellaneous_credit' => 'getMiscellaneousCredit',
        'credit_card' => 'getCreditCard',
        'direct_debit' => 'getDirectDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gift_certificate'] = isset($data['gift_certificate']) ? $data['gift_certificate'] : null;
        $this->container['available_credits'] = isset($data['available_credits']) ? $data['available_credits'] : null;
        $this->container['check'] = isset($data['check']) ? $data['check'] : null;
        $this->container['digital_wallet'] = isset($data['digital_wallet']) ? $data['digital_wallet'] : null;
        $this->container['miscellaneous_credit'] = isset($data['miscellaneous_credit']) ? $data['miscellaneous_credit'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['direct_debit'] = isset($data['direct_debit']) ? $data['direct_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gift_certificate
     *
     * @return bool
     */
    public function getGiftCertificate()
    {
        return $this->container['gift_certificate'];
    }

    /**
     * Sets gift_certificate
     *
     * @param bool $gift_certificate Gift Certificate type is valid
     *
     * @return $this
     */
    public function setGiftCertificate($gift_certificate)
    {
        $this->container['gift_certificate'] = $gift_certificate;

        return $this;
    }

    /**
     * Gets available_credits
     *
     * @return bool
     */
    public function getAvailableCredits()
    {
        return $this->container['available_credits'];
    }

    /**
     * Sets available_credits
     *
     * @param bool $available_credits Available Credit type is valid
     *
     * @return $this
     */
    public function setAvailableCredits($available_credits)
    {
        $this->container['available_credits'] = $available_credits;

        return $this;
    }

    /**
     * Gets check
     *
     * @return bool
     */
    public function getCheck()
    {
        return $this->container['check'];
    }

    /**
     * Sets check
     *
     * @param bool $check Check type is valid
     *
     * @return $this
     */
    public function setCheck($check)
    {
        $this->container['check'] = $check;

        return $this;
    }

    /**
     * Gets digital_wallet
     *
     * @return bool
     */
    public function getDigitalWallet()
    {
        return $this->container['digital_wallet'];
    }

    /**
     * Sets digital_wallet
     *
     * @param bool $digital_wallet Digital Wallet type is valid
     *
     * @return $this
     */
    public function setDigitalWallet($digital_wallet)
    {
        $this->container['digital_wallet'] = $digital_wallet;

        return $this;
    }

    /**
     * Gets miscellaneous_credit
     *
     * @return bool
     */
    public function getMiscellaneousCredit()
    {
        return $this->container['miscellaneous_credit'];
    }

    /**
     * Sets miscellaneous_credit
     *
     * @param bool $miscellaneous_credit Miscellaneous Credit type is valid
     *
     * @return $this
     */
    public function setMiscellaneousCredit($miscellaneous_credit)
    {
        $this->container['miscellaneous_credit'] = $miscellaneous_credit;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return bool
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param bool $credit_card Credit Card type is valid
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets direct_debit
     *
     * @return bool
     */
    public function getDirectDebit()
    {
        return $this->container['direct_debit'];
    }

    /**
     * Sets direct_debit
     *
     * @param bool $direct_debit Direct Debit type is valid
     *
     * @return $this
     */
    public function setDirectDebit($direct_debit)
    {
        $this->container['direct_debit'] = $direct_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


