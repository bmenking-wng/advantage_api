<?php
/**
 * ControlGroupSubscriptionDefaults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ControlGroupSubscriptionDefaults Class Doc Comment
 *
 * @category Class
 * @description Subscription Defaults for Control Group Model
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ControlGroupSubscriptionDefaults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ControlGroupSubscriptionDefaults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'rate' => 'double',
        'delivery_code' => 'string',
        'term_length' => 'int',
        'subscription_class_code' => 'string',
        'postage' => 'double',
        'billing_status_code' => 'string',
        'starts' => '\DateTime',
        'renewal_starts' => '\DateTime',
        'donor_type_code' => 'string',
        'subscription_type_code' => 'string',
        'sales_rep_code' => 'string',
        'invoice_date' => '\DateTime',
        'issue_group_code' => 'string',
        'free_issues' => 'int',
        'check_for_duplicate_subscriptions' => 'bool',
        'edition_code' => 'string',
        'override_edition' => 'bool',
        'questionnaire_code' => 'string',
        'referred_by_customer_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'rate' => 'double',
        'delivery_code' => null,
        'term_length' => 'int32',
        'subscription_class_code' => null,
        'postage' => 'double',
        'billing_status_code' => null,
        'starts' => 'date-time',
        'renewal_starts' => 'date-time',
        'donor_type_code' => null,
        'subscription_type_code' => null,
        'sales_rep_code' => null,
        'invoice_date' => 'date-time',
        'issue_group_code' => null,
        'free_issues' => 'int32',
        'check_for_duplicate_subscriptions' => null,
        'edition_code' => null,
        'override_edition' => null,
        'questionnaire_code' => null,
        'referred_by_customer_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'CurrencyCode',
        'rate' => 'Rate',
        'delivery_code' => 'DeliveryCode',
        'term_length' => 'TermLength',
        'subscription_class_code' => 'SubscriptionClassCode',
        'postage' => 'Postage',
        'billing_status_code' => 'BillingStatusCode',
        'starts' => 'Starts',
        'renewal_starts' => 'RenewalStarts',
        'donor_type_code' => 'DonorTypeCode',
        'subscription_type_code' => 'SubscriptionTypeCode',
        'sales_rep_code' => 'SalesRepCode',
        'invoice_date' => 'InvoiceDate',
        'issue_group_code' => 'IssueGroupCode',
        'free_issues' => 'FreeIssues',
        'check_for_duplicate_subscriptions' => 'CheckForDuplicateSubscriptions',
        'edition_code' => 'EditionCode',
        'override_edition' => 'OverrideEdition',
        'questionnaire_code' => 'QuestionnaireCode',
        'referred_by_customer_number' => 'ReferredByCustomerNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'rate' => 'setRate',
        'delivery_code' => 'setDeliveryCode',
        'term_length' => 'setTermLength',
        'subscription_class_code' => 'setSubscriptionClassCode',
        'postage' => 'setPostage',
        'billing_status_code' => 'setBillingStatusCode',
        'starts' => 'setStarts',
        'renewal_starts' => 'setRenewalStarts',
        'donor_type_code' => 'setDonorTypeCode',
        'subscription_type_code' => 'setSubscriptionTypeCode',
        'sales_rep_code' => 'setSalesRepCode',
        'invoice_date' => 'setInvoiceDate',
        'issue_group_code' => 'setIssueGroupCode',
        'free_issues' => 'setFreeIssues',
        'check_for_duplicate_subscriptions' => 'setCheckForDuplicateSubscriptions',
        'edition_code' => 'setEditionCode',
        'override_edition' => 'setOverrideEdition',
        'questionnaire_code' => 'setQuestionnaireCode',
        'referred_by_customer_number' => 'setReferredByCustomerNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'rate' => 'getRate',
        'delivery_code' => 'getDeliveryCode',
        'term_length' => 'getTermLength',
        'subscription_class_code' => 'getSubscriptionClassCode',
        'postage' => 'getPostage',
        'billing_status_code' => 'getBillingStatusCode',
        'starts' => 'getStarts',
        'renewal_starts' => 'getRenewalStarts',
        'donor_type_code' => 'getDonorTypeCode',
        'subscription_type_code' => 'getSubscriptionTypeCode',
        'sales_rep_code' => 'getSalesRepCode',
        'invoice_date' => 'getInvoiceDate',
        'issue_group_code' => 'getIssueGroupCode',
        'free_issues' => 'getFreeIssues',
        'check_for_duplicate_subscriptions' => 'getCheckForDuplicateSubscriptions',
        'edition_code' => 'getEditionCode',
        'override_edition' => 'getOverrideEdition',
        'questionnaire_code' => 'getQuestionnaireCode',
        'referred_by_customer_number' => 'getReferredByCustomerNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['term_length'] = isset($data['term_length']) ? $data['term_length'] : null;
        $this->container['subscription_class_code'] = isset($data['subscription_class_code']) ? $data['subscription_class_code'] : null;
        $this->container['postage'] = isset($data['postage']) ? $data['postage'] : null;
        $this->container['billing_status_code'] = isset($data['billing_status_code']) ? $data['billing_status_code'] : null;
        $this->container['starts'] = isset($data['starts']) ? $data['starts'] : null;
        $this->container['renewal_starts'] = isset($data['renewal_starts']) ? $data['renewal_starts'] : null;
        $this->container['donor_type_code'] = isset($data['donor_type_code']) ? $data['donor_type_code'] : null;
        $this->container['subscription_type_code'] = isset($data['subscription_type_code']) ? $data['subscription_type_code'] : null;
        $this->container['sales_rep_code'] = isset($data['sales_rep_code']) ? $data['sales_rep_code'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['issue_group_code'] = isset($data['issue_group_code']) ? $data['issue_group_code'] : null;
        $this->container['free_issues'] = isset($data['free_issues']) ? $data['free_issues'] : null;
        $this->container['check_for_duplicate_subscriptions'] = isset($data['check_for_duplicate_subscriptions']) ? $data['check_for_duplicate_subscriptions'] : null;
        $this->container['edition_code'] = isset($data['edition_code']) ? $data['edition_code'] : null;
        $this->container['override_edition'] = isset($data['override_edition']) ? $data['override_edition'] : null;
        $this->container['questionnaire_code'] = isset($data['questionnaire_code']) ? $data['questionnaire_code'] : null;
        $this->container['referred_by_customer_number'] = isset($data['referred_by_customer_number']) ? $data['referred_by_customer_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Default Currency
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate Default Rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code Default Delivery Code
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets term_length
     *
     * @return int
     */
    public function getTermLength()
    {
        return $this->container['term_length'];
    }

    /**
     * Sets term_length
     *
     * @param int $term_length Default Term
     *
     * @return $this
     */
    public function setTermLength($term_length)
    {
        $this->container['term_length'] = $term_length;

        return $this;
    }

    /**
     * Gets subscription_class_code
     *
     * @return string
     */
    public function getSubscriptionClassCode()
    {
        return $this->container['subscription_class_code'];
    }

    /**
     * Sets subscription_class_code
     *
     * @param string $subscription_class_code Default Subscription Class
     *
     * @return $this
     */
    public function setSubscriptionClassCode($subscription_class_code)
    {
        $this->container['subscription_class_code'] = $subscription_class_code;

        return $this;
    }

    /**
     * Gets postage
     *
     * @return double
     */
    public function getPostage()
    {
        return $this->container['postage'];
    }

    /**
     * Sets postage
     *
     * @param double $postage Default Postage
     *
     * @return $this
     */
    public function setPostage($postage)
    {
        $this->container['postage'] = $postage;

        return $this;
    }

    /**
     * Gets billing_status_code
     *
     * @return string
     */
    public function getBillingStatusCode()
    {
        return $this->container['billing_status_code'];
    }

    /**
     * Sets billing_status_code
     *
     * @param string $billing_status_code Default Bill Status
     *
     * @return $this
     */
    public function setBillingStatusCode($billing_status_code)
    {
        $this->container['billing_status_code'] = $billing_status_code;

        return $this;
    }

    /**
     * Gets starts
     *
     * @return \DateTime
     */
    public function getStarts()
    {
        return $this->container['starts'];
    }

    /**
     * Sets starts
     *
     * @param \DateTime $starts Default issue date
     *
     * @return $this
     */
    public function setStarts($starts)
    {
        $this->container['starts'] = $starts;

        return $this;
    }

    /**
     * Gets renewal_starts
     *
     * @return \DateTime
     */
    public function getRenewalStarts()
    {
        return $this->container['renewal_starts'];
    }

    /**
     * Sets renewal_starts
     *
     * @param \DateTime $renewal_starts Default renewal start date
     *
     * @return $this
     */
    public function setRenewalStarts($renewal_starts)
    {
        $this->container['renewal_starts'] = $renewal_starts;

        return $this;
    }

    /**
     * Gets donor_type_code
     *
     * @return string
     */
    public function getDonorTypeCode()
    {
        return $this->container['donor_type_code'];
    }

    /**
     * Sets donor_type_code
     *
     * @param string $donor_type_code Default Donor Type
     *
     * @return $this
     */
    public function setDonorTypeCode($donor_type_code)
    {
        $this->container['donor_type_code'] = $donor_type_code;

        return $this;
    }

    /**
     * Gets subscription_type_code
     *
     * @return string
     */
    public function getSubscriptionTypeCode()
    {
        return $this->container['subscription_type_code'];
    }

    /**
     * Sets subscription_type_code
     *
     * @param string $subscription_type_code Default subscription type
     *
     * @return $this
     */
    public function setSubscriptionTypeCode($subscription_type_code)
    {
        $this->container['subscription_type_code'] = $subscription_type_code;

        return $this;
    }

    /**
     * Gets sales_rep_code
     *
     * @return string
     */
    public function getSalesRepCode()
    {
        return $this->container['sales_rep_code'];
    }

    /**
     * Sets sales_rep_code
     *
     * @param string $sales_rep_code Default Sales Rep
     *
     * @return $this
     */
    public function setSalesRepCode($sales_rep_code)
    {
        $this->container['sales_rep_code'] = $sales_rep_code;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Default Invoice Date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets issue_group_code
     *
     * @return string
     */
    public function getIssueGroupCode()
    {
        return $this->container['issue_group_code'];
    }

    /**
     * Sets issue_group_code
     *
     * @param string $issue_group_code Default Issue Group
     *
     * @return $this
     */
    public function setIssueGroupCode($issue_group_code)
    {
        $this->container['issue_group_code'] = $issue_group_code;

        return $this;
    }

    /**
     * Gets free_issues
     *
     * @return int
     */
    public function getFreeIssues()
    {
        return $this->container['free_issues'];
    }

    /**
     * Sets free_issues
     *
     * @param int $free_issues Default Free Issues
     *
     * @return $this
     */
    public function setFreeIssues($free_issues)
    {
        $this->container['free_issues'] = $free_issues;

        return $this;
    }

    /**
     * Gets check_for_duplicate_subscriptions
     *
     * @return bool
     */
    public function getCheckForDuplicateSubscriptions()
    {
        return $this->container['check_for_duplicate_subscriptions'];
    }

    /**
     * Sets check_for_duplicate_subscriptions
     *
     * @param bool $check_for_duplicate_subscriptions Default for check duplicate subscriptions
     *
     * @return $this
     */
    public function setCheckForDuplicateSubscriptions($check_for_duplicate_subscriptions)
    {
        $this->container['check_for_duplicate_subscriptions'] = $check_for_duplicate_subscriptions;

        return $this;
    }

    /**
     * Gets edition_code
     *
     * @return string
     */
    public function getEditionCode()
    {
        return $this->container['edition_code'];
    }

    /**
     * Sets edition_code
     *
     * @param string $edition_code Default Edition Number
     *
     * @return $this
     */
    public function setEditionCode($edition_code)
    {
        $this->container['edition_code'] = $edition_code;

        return $this;
    }

    /**
     * Gets override_edition
     *
     * @return bool
     */
    public function getOverrideEdition()
    {
        return $this->container['override_edition'];
    }

    /**
     * Sets override_edition
     *
     * @param bool $override_edition Default Override Edition
     *
     * @return $this
     */
    public function setOverrideEdition($override_edition)
    {
        $this->container['override_edition'] = $override_edition;

        return $this;
    }

    /**
     * Gets questionnaire_code
     *
     * @return string
     */
    public function getQuestionnaireCode()
    {
        return $this->container['questionnaire_code'];
    }

    /**
     * Sets questionnaire_code
     *
     * @param string $questionnaire_code Default Questionnaire
     *
     * @return $this
     */
    public function setQuestionnaireCode($questionnaire_code)
    {
        $this->container['questionnaire_code'] = $questionnaire_code;

        return $this;
    }

    /**
     * Gets referred_by_customer_number
     *
     * @return string
     */
    public function getReferredByCustomerNumber()
    {
        return $this->container['referred_by_customer_number'];
    }

    /**
     * Sets referred_by_customer_number
     *
     * @param string $referred_by_customer_number Default Reference Customer
     *
     * @return $this
     */
    public function setReferredByCustomerNumber($referred_by_customer_number)
    {
        $this->container['referred_by_customer_number'] = $referred_by_customer_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


