<?php
/**
 * AgreementRenewalOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AgreementRenewalOptions Class Doc Comment
 *
 * @category Class
 * @description Options for renewing an agreement through the Advantage REST API.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgreementRenewalOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgreementRenewalOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'promotion_code' => 'string',
        'promotion_choice_code' => 'string',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressKey',
        'order_by' => '\Advantage\Client\Model\CustomerAddressKey',
        'access_period_code' => 'string',
        'agreement_type' => 'string',
        'purchase_order_number' => 'string',
        'copy_points_and_parts' => 'bool',
        'use_previous_term_discount' => 'bool',
        'use_customer_discount' => 'bool',
        'new_discount' => 'double',
        'update_with_promotion_defaults' => 'bool',
        'use_previous_term_renewal_discount' => 'bool',
        'copy_free_days' => 'bool',
        'copy_extension_days' => 'bool',
        'copy_adjustment_days' => 'bool',
        'copy_grace_days' => 'bool',
        'autorenew_chain_id' => 'string',
        'autorenew_chain_sequence' => 'int',
        'is_on_approval' => 'bool',
        'agency_reference' => 'string',
        'master_agreement_id' => 'string',
        'billing_currency' => 'string',
        'renewal_price_increase_percent' => 'double',
        'max_change_percentage' => 'double',
        'commit_order' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'promotion_code' => null,
        'promotion_choice_code' => null,
        'bill_to' => null,
        'order_by' => null,
        'access_period_code' => null,
        'agreement_type' => null,
        'purchase_order_number' => null,
        'copy_points_and_parts' => null,
        'use_previous_term_discount' => null,
        'use_customer_discount' => null,
        'new_discount' => 'double',
        'update_with_promotion_defaults' => null,
        'use_previous_term_renewal_discount' => null,
        'copy_free_days' => null,
        'copy_extension_days' => null,
        'copy_adjustment_days' => null,
        'copy_grace_days' => null,
        'autorenew_chain_id' => null,
        'autorenew_chain_sequence' => 'int32',
        'is_on_approval' => null,
        'agency_reference' => null,
        'master_agreement_id' => null,
        'billing_currency' => null,
        'renewal_price_increase_percent' => 'double',
        'max_change_percentage' => 'double',
        'commit_order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'promotion_code' => 'PromotionCode',
        'promotion_choice_code' => 'PromotionChoiceCode',
        'bill_to' => 'BillTo',
        'order_by' => 'OrderBy',
        'access_period_code' => 'AccessPeriodCode',
        'agreement_type' => 'AgreementType',
        'purchase_order_number' => 'PurchaseOrderNumber',
        'copy_points_and_parts' => 'CopyPointsAndParts',
        'use_previous_term_discount' => 'UsePreviousTermDiscount',
        'use_customer_discount' => 'UseCustomerDiscount',
        'new_discount' => 'NewDiscount',
        'update_with_promotion_defaults' => 'UpdateWithPromotionDefaults',
        'use_previous_term_renewal_discount' => 'UsePreviousTermRenewalDiscount',
        'copy_free_days' => 'CopyFreeDays',
        'copy_extension_days' => 'CopyExtensionDays',
        'copy_adjustment_days' => 'CopyAdjustmentDays',
        'copy_grace_days' => 'CopyGraceDays',
        'autorenew_chain_id' => 'AutorenewChainId',
        'autorenew_chain_sequence' => 'AutorenewChainSequence',
        'is_on_approval' => 'IsOnApproval',
        'agency_reference' => 'AgencyReference',
        'master_agreement_id' => 'MasterAgreementId',
        'billing_currency' => 'BillingCurrency',
        'renewal_price_increase_percent' => 'RenewalPriceIncreasePercent',
        'max_change_percentage' => 'MaxChangePercentage',
        'commit_order' => 'CommitOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'promotion_code' => 'setPromotionCode',
        'promotion_choice_code' => 'setPromotionChoiceCode',
        'bill_to' => 'setBillTo',
        'order_by' => 'setOrderBy',
        'access_period_code' => 'setAccessPeriodCode',
        'agreement_type' => 'setAgreementType',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'copy_points_and_parts' => 'setCopyPointsAndParts',
        'use_previous_term_discount' => 'setUsePreviousTermDiscount',
        'use_customer_discount' => 'setUseCustomerDiscount',
        'new_discount' => 'setNewDiscount',
        'update_with_promotion_defaults' => 'setUpdateWithPromotionDefaults',
        'use_previous_term_renewal_discount' => 'setUsePreviousTermRenewalDiscount',
        'copy_free_days' => 'setCopyFreeDays',
        'copy_extension_days' => 'setCopyExtensionDays',
        'copy_adjustment_days' => 'setCopyAdjustmentDays',
        'copy_grace_days' => 'setCopyGraceDays',
        'autorenew_chain_id' => 'setAutorenewChainId',
        'autorenew_chain_sequence' => 'setAutorenewChainSequence',
        'is_on_approval' => 'setIsOnApproval',
        'agency_reference' => 'setAgencyReference',
        'master_agreement_id' => 'setMasterAgreementId',
        'billing_currency' => 'setBillingCurrency',
        'renewal_price_increase_percent' => 'setRenewalPriceIncreasePercent',
        'max_change_percentage' => 'setMaxChangePercentage',
        'commit_order' => 'setCommitOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'promotion_code' => 'getPromotionCode',
        'promotion_choice_code' => 'getPromotionChoiceCode',
        'bill_to' => 'getBillTo',
        'order_by' => 'getOrderBy',
        'access_period_code' => 'getAccessPeriodCode',
        'agreement_type' => 'getAgreementType',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'copy_points_and_parts' => 'getCopyPointsAndParts',
        'use_previous_term_discount' => 'getUsePreviousTermDiscount',
        'use_customer_discount' => 'getUseCustomerDiscount',
        'new_discount' => 'getNewDiscount',
        'update_with_promotion_defaults' => 'getUpdateWithPromotionDefaults',
        'use_previous_term_renewal_discount' => 'getUsePreviousTermRenewalDiscount',
        'copy_free_days' => 'getCopyFreeDays',
        'copy_extension_days' => 'getCopyExtensionDays',
        'copy_adjustment_days' => 'getCopyAdjustmentDays',
        'copy_grace_days' => 'getCopyGraceDays',
        'autorenew_chain_id' => 'getAutorenewChainId',
        'autorenew_chain_sequence' => 'getAutorenewChainSequence',
        'is_on_approval' => 'getIsOnApproval',
        'agency_reference' => 'getAgencyReference',
        'master_agreement_id' => 'getMasterAgreementId',
        'billing_currency' => 'getBillingCurrency',
        'renewal_price_increase_percent' => 'getRenewalPriceIncreasePercent',
        'max_change_percentage' => 'getMaxChangePercentage',
        'commit_order' => 'getCommitOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGREEMENT_TYPE_COMPLIMENTARY = 'Complimentary';
    const AGREEMENT_TYPE_INVOICEABLE = 'Invoiceable';
    const AGREEMENT_TYPE_PROFORMA = 'Proforma';
    const AGREEMENT_TYPE_TRIAL = 'Trial';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgreementTypeAllowableValues()
    {
        return [
            self::AGREEMENT_TYPE_COMPLIMENTARY,
            self::AGREEMENT_TYPE_INVOICEABLE,
            self::AGREEMENT_TYPE_PROFORMA,
            self::AGREEMENT_TYPE_TRIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['promotion_choice_code'] = isset($data['promotion_choice_code']) ? $data['promotion_choice_code'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['access_period_code'] = isset($data['access_period_code']) ? $data['access_period_code'] : null;
        $this->container['agreement_type'] = isset($data['agreement_type']) ? $data['agreement_type'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['copy_points_and_parts'] = isset($data['copy_points_and_parts']) ? $data['copy_points_and_parts'] : null;
        $this->container['use_previous_term_discount'] = isset($data['use_previous_term_discount']) ? $data['use_previous_term_discount'] : null;
        $this->container['use_customer_discount'] = isset($data['use_customer_discount']) ? $data['use_customer_discount'] : null;
        $this->container['new_discount'] = isset($data['new_discount']) ? $data['new_discount'] : null;
        $this->container['update_with_promotion_defaults'] = isset($data['update_with_promotion_defaults']) ? $data['update_with_promotion_defaults'] : null;
        $this->container['use_previous_term_renewal_discount'] = isset($data['use_previous_term_renewal_discount']) ? $data['use_previous_term_renewal_discount'] : null;
        $this->container['copy_free_days'] = isset($data['copy_free_days']) ? $data['copy_free_days'] : null;
        $this->container['copy_extension_days'] = isset($data['copy_extension_days']) ? $data['copy_extension_days'] : null;
        $this->container['copy_adjustment_days'] = isset($data['copy_adjustment_days']) ? $data['copy_adjustment_days'] : null;
        $this->container['copy_grace_days'] = isset($data['copy_grace_days']) ? $data['copy_grace_days'] : null;
        $this->container['autorenew_chain_id'] = isset($data['autorenew_chain_id']) ? $data['autorenew_chain_id'] : null;
        $this->container['autorenew_chain_sequence'] = isset($data['autorenew_chain_sequence']) ? $data['autorenew_chain_sequence'] : null;
        $this->container['is_on_approval'] = isset($data['is_on_approval']) ? $data['is_on_approval'] : null;
        $this->container['agency_reference'] = isset($data['agency_reference']) ? $data['agency_reference'] : null;
        $this->container['master_agreement_id'] = isset($data['master_agreement_id']) ? $data['master_agreement_id'] : null;
        $this->container['billing_currency'] = isset($data['billing_currency']) ? $data['billing_currency'] : null;
        $this->container['renewal_price_increase_percent'] = isset($data['renewal_price_increase_percent']) ? $data['renewal_price_increase_percent'] : null;
        $this->container['max_change_percentage'] = isset($data['max_change_percentage']) ? $data['max_change_percentage'] : null;
        $this->container['commit_order'] = isset($data['commit_order']) ? $data['commit_order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAgreementTypeAllowableValues();
        if (!is_null($this->container['agreement_type']) && !in_array($this->container['agreement_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agreement_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion code
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets promotion_choice_code
     *
     * @return string
     */
    public function getPromotionChoiceCode()
    {
        return $this->container['promotion_choice_code'];
    }

    /**
     * Sets promotion_choice_code
     *
     * @param string $promotion_choice_code Promotion choice
     *
     * @return $this
     */
    public function setPromotionChoiceCode($promotion_choice_code)
    {
        $this->container['promotion_choice_code'] = $promotion_choice_code;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $bill_to Bill-to customer address, if changing for new term
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $order_by Order-by customer, if changing for new term
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets access_period_code
     *
     * @return string
     */
    public function getAccessPeriodCode()
    {
        return $this->container['access_period_code'];
    }

    /**
     * Sets access_period_code
     *
     * @param string $access_period_code Access service period code, if changing for new term
     *
     * @return $this
     */
    public function setAccessPeriodCode($access_period_code)
    {
        $this->container['access_period_code'] = $access_period_code;

        return $this;
    }

    /**
     * Gets agreement_type
     *
     * @return string
     */
    public function getAgreementType()
    {
        return $this->container['agreement_type'];
    }

    /**
     * Sets agreement_type
     *
     * @param string $agreement_type Agreement type
     *
     * @return $this
     */
    public function setAgreementType($agreement_type)
    {
        $allowedValues = $this->getAgreementTypeAllowableValues();
        if (!is_null($agreement_type) && !in_array($agreement_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agreement_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agreement_type'] = $agreement_type;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number Customer purchase order number
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets copy_points_and_parts
     *
     * @return bool
     */
    public function getCopyPointsAndParts()
    {
        return $this->container['copy_points_and_parts'];
    }

    /**
     * Sets copy_points_and_parts
     *
     * @param bool $copy_points_and_parts Copy forward the access points and participants from previous term?
     *
     * @return $this
     */
    public function setCopyPointsAndParts($copy_points_and_parts)
    {
        $this->container['copy_points_and_parts'] = $copy_points_and_parts;

        return $this;
    }

    /**
     * Gets use_previous_term_discount
     *
     * @return bool
     */
    public function getUsePreviousTermDiscount()
    {
        return $this->container['use_previous_term_discount'];
    }

    /**
     * Sets use_previous_term_discount
     *
     * @param bool $use_previous_term_discount Should the previous term's discount(s) should be preserved?
     *
     * @return $this
     */
    public function setUsePreviousTermDiscount($use_previous_term_discount)
    {
        $this->container['use_previous_term_discount'] = $use_previous_term_discount;

        return $this;
    }

    /**
     * Gets use_customer_discount
     *
     * @return bool
     */
    public function getUseCustomerDiscount()
    {
        return $this->container['use_customer_discount'];
    }

    /**
     * Sets use_customer_discount
     *
     * @param bool $use_customer_discount If not using previous term discount and a customer or customer type discount for the AMB service is defined,  should the customer or customer type discount be used?
     *
     * @return $this
     */
    public function setUseCustomerDiscount($use_customer_discount)
    {
        $this->container['use_customer_discount'] = $use_customer_discount;

        return $this;
    }

    /**
     * Gets new_discount
     *
     * @return double
     */
    public function getNewDiscount()
    {
        return $this->container['new_discount'];
    }

    /**
     * Sets new_discount
     *
     * @param double $new_discount If not using the previous term's or customer's discount(s)  this discount will be used for all access points.
     *
     * @return $this
     */
    public function setNewDiscount($new_discount)
    {
        $this->container['new_discount'] = $new_discount;

        return $this;
    }

    /**
     * Gets update_with_promotion_defaults
     *
     * @return bool
     */
    public function getUpdateWithPromotionDefaults()
    {
        return $this->container['update_with_promotion_defaults'];
    }

    /**
     * Sets update_with_promotion_defaults
     *
     * @param bool $update_with_promotion_defaults Update the access points with the promotion choice defaults?
     *
     * @return $this
     */
    public function setUpdateWithPromotionDefaults($update_with_promotion_defaults)
    {
        $this->container['update_with_promotion_defaults'] = $update_with_promotion_defaults;

        return $this;
    }

    /**
     * Gets use_previous_term_renewal_discount
     *
     * @return bool
     */
    public function getUsePreviousTermRenewalDiscount()
    {
        return $this->container['use_previous_term_renewal_discount'];
    }

    /**
     * Sets use_previous_term_renewal_discount
     *
     * @param bool $use_previous_term_renewal_discount Use the previous term's renewal discount
     *
     * @return $this
     */
    public function setUsePreviousTermRenewalDiscount($use_previous_term_renewal_discount)
    {
        $this->container['use_previous_term_renewal_discount'] = $use_previous_term_renewal_discount;

        return $this;
    }

    /**
     * Gets copy_free_days
     *
     * @return bool
     */
    public function getCopyFreeDays()
    {
        return $this->container['copy_free_days'];
    }

    /**
     * Sets copy_free_days
     *
     * @param bool $copy_free_days Copy forward free days
     *
     * @return $this
     */
    public function setCopyFreeDays($copy_free_days)
    {
        $this->container['copy_free_days'] = $copy_free_days;

        return $this;
    }

    /**
     * Gets copy_extension_days
     *
     * @return bool
     */
    public function getCopyExtensionDays()
    {
        return $this->container['copy_extension_days'];
    }

    /**
     * Sets copy_extension_days
     *
     * @param bool $copy_extension_days Copy forward extension days
     *
     * @return $this
     */
    public function setCopyExtensionDays($copy_extension_days)
    {
        $this->container['copy_extension_days'] = $copy_extension_days;

        return $this;
    }

    /**
     * Gets copy_adjustment_days
     *
     * @return bool
     */
    public function getCopyAdjustmentDays()
    {
        return $this->container['copy_adjustment_days'];
    }

    /**
     * Sets copy_adjustment_days
     *
     * @param bool $copy_adjustment_days Copy forward adjustment days
     *
     * @return $this
     */
    public function setCopyAdjustmentDays($copy_adjustment_days)
    {
        $this->container['copy_adjustment_days'] = $copy_adjustment_days;

        return $this;
    }

    /**
     * Gets copy_grace_days
     *
     * @return bool
     */
    public function getCopyGraceDays()
    {
        return $this->container['copy_grace_days'];
    }

    /**
     * Sets copy_grace_days
     *
     * @param bool $copy_grace_days Copy forward grace days
     *
     * @return $this
     */
    public function setCopyGraceDays($copy_grace_days)
    {
        $this->container['copy_grace_days'] = $copy_grace_days;

        return $this;
    }

    /**
     * Gets autorenew_chain_id
     *
     * @return string
     */
    public function getAutorenewChainId()
    {
        return $this->container['autorenew_chain_id'];
    }

    /**
     * Sets autorenew_chain_id
     *
     * @param string $autorenew_chain_id Auto-renewal chain ID, or blank if not in use
     *
     * @return $this
     */
    public function setAutorenewChainId($autorenew_chain_id)
    {
        $this->container['autorenew_chain_id'] = $autorenew_chain_id;

        return $this;
    }

    /**
     * Gets autorenew_chain_sequence
     *
     * @return int
     */
    public function getAutorenewChainSequence()
    {
        return $this->container['autorenew_chain_sequence'];
    }

    /**
     * Sets autorenew_chain_sequence
     *
     * @param int $autorenew_chain_sequence Auto-renewal chain sequence, or zero if not in use
     *
     * @return $this
     */
    public function setAutorenewChainSequence($autorenew_chain_sequence)
    {
        $this->container['autorenew_chain_sequence'] = $autorenew_chain_sequence;

        return $this;
    }

    /**
     * Gets is_on_approval
     *
     * @return bool
     */
    public function getIsOnApproval()
    {
        return $this->container['is_on_approval'];
    }

    /**
     * Sets is_on_approval
     *
     * @param bool $is_on_approval true if on-approval
     *
     * @return $this
     */
    public function setIsOnApproval($is_on_approval)
    {
        $this->container['is_on_approval'] = $is_on_approval;

        return $this;
    }

    /**
     * Gets agency_reference
     *
     * @return string
     */
    public function getAgencyReference()
    {
        return $this->container['agency_reference'];
    }

    /**
     * Sets agency_reference
     *
     * @param string $agency_reference The reference number the agency uses to identify the ordered item
     *
     * @return $this
     */
    public function setAgencyReference($agency_reference)
    {
        $this->container['agency_reference'] = $agency_reference;

        return $this;
    }

    /**
     * Gets master_agreement_id
     *
     * @return string
     */
    public function getMasterAgreementId()
    {
        return $this->container['master_agreement_id'];
    }

    /**
     * Sets master_agreement_id
     *
     * @param string $master_agreement_id Master Agreement Id
     *
     * @return $this
     */
    public function setMasterAgreementId($master_agreement_id)
    {
        $this->container['master_agreement_id'] = $master_agreement_id;

        return $this;
    }

    /**
     * Gets billing_currency
     *
     * @return string
     */
    public function getBillingCurrency()
    {
        return $this->container['billing_currency'];
    }

    /**
     * Sets billing_currency
     *
     * @param string $billing_currency The new billing currency to use on this renewal. Passing blank will  use the same billing currency off of the previous agreement.
     *
     * @return $this
     */
    public function setBillingCurrency($billing_currency)
    {
        $this->container['billing_currency'] = $billing_currency;

        return $this;
    }

    /**
     * Gets renewal_price_increase_percent
     *
     * @return double
     */
    public function getRenewalPriceIncreasePercent()
    {
        return $this->container['renewal_price_increase_percent'];
    }

    /**
     * Sets renewal_price_increase_percent
     *
     * @param double $renewal_price_increase_percent Renewal Price Increase Percentage
     *
     * @return $this
     */
    public function setRenewalPriceIncreasePercent($renewal_price_increase_percent)
    {
        $this->container['renewal_price_increase_percent'] = $renewal_price_increase_percent;

        return $this;
    }

    /**
     * Gets max_change_percentage
     *
     * @return double
     */
    public function getMaxChangePercentage()
    {
        return $this->container['max_change_percentage'];
    }

    /**
     * Sets max_change_percentage
     *
     * @param double $max_change_percentage Maximum Change Percentage on Renewal
     *
     * @return $this
     */
    public function setMaxChangePercentage($max_change_percentage)
    {
        $this->container['max_change_percentage'] = $max_change_percentage;

        return $this;
    }

    /**
     * Gets commit_order
     *
     * @return bool
     */
    public function getCommitOrder()
    {
        return $this->container['commit_order'];
    }

    /**
     * Sets commit_order
     *
     * @param bool $commit_order Should the order be completed?
     *
     * @return $this
     */
    public function setCommitOrder($commit_order)
    {
        $this->container['commit_order'] = $commit_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


