<?php
/**
 * ConferenceRegistration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConferenceRegistration Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a conference attendee&#39;s registration
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceRegistration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConferenceRegistration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'registration_id' => 'string',
        'conference_summary' => '\Advantage\Client\Model\ConferenceLocationSummary',
        'currency_code' => 'string',
        'attendees' => '\Advantage\Client\Model\ConferenceAttendee[]',
        'name' => 'string',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'registration_status' => 'string',
        'is_registration_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'registration_id' => null,
        'conference_summary' => null,
        'currency_code' => null,
        'attendees' => null,
        'name' => null,
        'bill_to' => null,
        'registration_status' => null,
        'is_registration_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registration_id' => 'RegistrationId',
        'conference_summary' => 'ConferenceSummary',
        'currency_code' => 'CurrencyCode',
        'attendees' => 'Attendees',
        'name' => 'Name',
        'bill_to' => 'BillTo',
        'registration_status' => 'RegistrationStatus',
        'is_registration_active' => 'IsRegistrationActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registration_id' => 'setRegistrationId',
        'conference_summary' => 'setConferenceSummary',
        'currency_code' => 'setCurrencyCode',
        'attendees' => 'setAttendees',
        'name' => 'setName',
        'bill_to' => 'setBillTo',
        'registration_status' => 'setRegistrationStatus',
        'is_registration_active' => 'setIsRegistrationActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registration_id' => 'getRegistrationId',
        'conference_summary' => 'getConferenceSummary',
        'currency_code' => 'getCurrencyCode',
        'attendees' => 'getAttendees',
        'name' => 'getName',
        'bill_to' => 'getBillTo',
        'registration_status' => 'getRegistrationStatus',
        'is_registration_active' => 'getIsRegistrationActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['registration_id'] = isset($data['registration_id']) ? $data['registration_id'] : null;
        $this->container['conference_summary'] = isset($data['conference_summary']) ? $data['conference_summary'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['attendees'] = isset($data['attendees']) ? $data['attendees'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['registration_status'] = isset($data['registration_status']) ? $data['registration_status'] : null;
        $this->container['is_registration_active'] = isset($data['is_registration_active']) ? $data['is_registration_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets registration_id
     *
     * @return string
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param string $registration_id Conference registration id
     *
     * @return $this
     */
    public function setRegistrationId($registration_id)
    {
        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets conference_summary
     *
     * @return \Advantage\Client\Model\ConferenceLocationSummary
     */
    public function getConferenceSummary()
    {
        return $this->container['conference_summary'];
    }

    /**
     * Sets conference_summary
     *
     * @param \Advantage\Client\Model\ConferenceLocationSummary $conference_summary The conference and location for this registration
     *
     * @return $this
     */
    public function setConferenceSummary($conference_summary)
    {
        $this->container['conference_summary'] = $conference_summary;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The billing currency for this conference registration
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return \Advantage\Client\Model\ConferenceAttendee[]
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param \Advantage\Client\Model\ConferenceAttendee[] $attendees The attendees for this conference registration
     *
     * @return $this
     */
    public function setAttendees($attendees)
    {
        $this->container['attendees'] = $attendees;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The registration name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $bill_to The bill-to customer address for this registration
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets registration_status
     *
     * @return string
     */
    public function getRegistrationStatus()
    {
        return $this->container['registration_status'];
    }

    /**
     * Sets registration_status
     *
     * @param string $registration_status Registration Status (A=Active, C=Cancelled, etc)
     *
     * @return $this
     */
    public function setRegistrationStatus($registration_status)
    {
        $this->container['registration_status'] = $registration_status;

        return $this;
    }

    /**
     * Gets is_registration_active
     *
     * @return bool
     */
    public function getIsRegistrationActive()
    {
        return $this->container['is_registration_active'];
    }

    /**
     * Sets is_registration_active
     *
     * @param bool $is_registration_active True if the registration is active
     *
     * @return $this
     */
    public function setIsRegistrationActive($is_registration_active)
    {
        $this->container['is_registration_active'] = $is_registration_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


