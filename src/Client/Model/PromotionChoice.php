<?php
/**
 * PromotionChoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PromotionChoice Class Doc Comment
 *
 * @category Class
 * @description Fields common to all promotion items.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionChoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionChoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_number' => 'string',
        'currency_code' => 'string',
        'promotion_code' => 'string',
        'choice_code' => 'string',
        'name' => 'string',
        'narrative' => 'string',
        'preference' => 'int',
        'questionnaire_code' => 'string',
        'value_list_flag' => 'string',
        'price' => 'double',
        'unit_price' => 'double',
        'price_tiers' => '\Advantage\Client\Model\PriceTier[]',
        'web_bill_me_allowed' => 'string',
        'premium_set_code' => 'string',
        'installment_billing_code' => 'string',
        'society_code' => 'string',
        'discount_percent' => 'double',
        'discount_combination_code' => 'string',
        'subscription_type_code' => 'string',
        'reusable_choice_code' => 'string',
        'included_amount' => 'double',
        'demographics' => '\Advantage\Client\Model\DemographicValue[]',
        'product_defaults' => '\Advantage\Client\Model\ProductPromotionItemDefaults',
        'subscription_defaults' => '\Advantage\Client\Model\SubscriptionPromotionItemDefaults',
        'access_defaults' => '\Advantage\Client\Model\AccessPromotionItemDefaults',
        'conference_defaults' => '\Advantage\Client\Model\ConferencePromotionItemDefaults',
        'association_defaults' => '\Advantage\Client\Model\AssociationPromotionItemDefaults',
        'accept_available_credits' => 'bool',
        'accept_checks' => 'bool',
        'accept_credit_cards' => 'bool',
        'accept_direct_debits' => 'bool',
        'accept_digital_wallets' => 'bool',
        'accept_gift_certificates' => 'bool',
        'accept_misc_credits' => 'bool',
        'geographic_prices' => '\Advantage\Client\Model\GeographicPrice[]',
        'components' => '\Advantage\Client\Model\PromotionChoice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_number' => null,
        'currency_code' => null,
        'promotion_code' => null,
        'choice_code' => null,
        'name' => null,
        'narrative' => null,
        'preference' => 'int32',
        'questionnaire_code' => null,
        'value_list_flag' => null,
        'price' => 'double',
        'unit_price' => 'double',
        'price_tiers' => null,
        'web_bill_me_allowed' => null,
        'premium_set_code' => null,
        'installment_billing_code' => null,
        'society_code' => null,
        'discount_percent' => 'double',
        'discount_combination_code' => null,
        'subscription_type_code' => null,
        'reusable_choice_code' => null,
        'included_amount' => 'double',
        'demographics' => null,
        'product_defaults' => null,
        'subscription_defaults' => null,
        'access_defaults' => null,
        'conference_defaults' => null,
        'association_defaults' => null,
        'accept_available_credits' => null,
        'accept_checks' => null,
        'accept_credit_cards' => null,
        'accept_direct_debits' => null,
        'accept_digital_wallets' => null,
        'accept_gift_certificates' => null,
        'accept_misc_credits' => null,
        'geographic_prices' => null,
        'components' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_number' => 'ItemNumber',
        'currency_code' => 'CurrencyCode',
        'promotion_code' => 'PromotionCode',
        'choice_code' => 'ChoiceCode',
        'name' => 'Name',
        'narrative' => 'Narrative',
        'preference' => 'Preference',
        'questionnaire_code' => 'QuestionnaireCode',
        'value_list_flag' => 'ValueListFlag',
        'price' => 'Price',
        'unit_price' => 'UnitPrice',
        'price_tiers' => 'PriceTiers',
        'web_bill_me_allowed' => 'WebBillMeAllowed',
        'premium_set_code' => 'PremiumSetCode',
        'installment_billing_code' => 'InstallmentBillingCode',
        'society_code' => 'SocietyCode',
        'discount_percent' => 'DiscountPercent',
        'discount_combination_code' => 'DiscountCombinationCode',
        'subscription_type_code' => 'SubscriptionTypeCode',
        'reusable_choice_code' => 'ReusableChoiceCode',
        'included_amount' => 'IncludedAmount',
        'demographics' => 'Demographics',
        'product_defaults' => 'ProductDefaults',
        'subscription_defaults' => 'SubscriptionDefaults',
        'access_defaults' => 'AccessDefaults',
        'conference_defaults' => 'ConferenceDefaults',
        'association_defaults' => 'AssociationDefaults',
        'accept_available_credits' => 'AcceptAvailableCredits',
        'accept_checks' => 'AcceptChecks',
        'accept_credit_cards' => 'AcceptCreditCards',
        'accept_direct_debits' => 'AcceptDirectDebits',
        'accept_digital_wallets' => 'AcceptDigitalWallets',
        'accept_gift_certificates' => 'AcceptGiftCertificates',
        'accept_misc_credits' => 'AcceptMiscCredits',
        'geographic_prices' => 'GeographicPrices',
        'components' => 'Components'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_number' => 'setItemNumber',
        'currency_code' => 'setCurrencyCode',
        'promotion_code' => 'setPromotionCode',
        'choice_code' => 'setChoiceCode',
        'name' => 'setName',
        'narrative' => 'setNarrative',
        'preference' => 'setPreference',
        'questionnaire_code' => 'setQuestionnaireCode',
        'value_list_flag' => 'setValueListFlag',
        'price' => 'setPrice',
        'unit_price' => 'setUnitPrice',
        'price_tiers' => 'setPriceTiers',
        'web_bill_me_allowed' => 'setWebBillMeAllowed',
        'premium_set_code' => 'setPremiumSetCode',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'society_code' => 'setSocietyCode',
        'discount_percent' => 'setDiscountPercent',
        'discount_combination_code' => 'setDiscountCombinationCode',
        'subscription_type_code' => 'setSubscriptionTypeCode',
        'reusable_choice_code' => 'setReusableChoiceCode',
        'included_amount' => 'setIncludedAmount',
        'demographics' => 'setDemographics',
        'product_defaults' => 'setProductDefaults',
        'subscription_defaults' => 'setSubscriptionDefaults',
        'access_defaults' => 'setAccessDefaults',
        'conference_defaults' => 'setConferenceDefaults',
        'association_defaults' => 'setAssociationDefaults',
        'accept_available_credits' => 'setAcceptAvailableCredits',
        'accept_checks' => 'setAcceptChecks',
        'accept_credit_cards' => 'setAcceptCreditCards',
        'accept_direct_debits' => 'setAcceptDirectDebits',
        'accept_digital_wallets' => 'setAcceptDigitalWallets',
        'accept_gift_certificates' => 'setAcceptGiftCertificates',
        'accept_misc_credits' => 'setAcceptMiscCredits',
        'geographic_prices' => 'setGeographicPrices',
        'components' => 'setComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_number' => 'getItemNumber',
        'currency_code' => 'getCurrencyCode',
        'promotion_code' => 'getPromotionCode',
        'choice_code' => 'getChoiceCode',
        'name' => 'getName',
        'narrative' => 'getNarrative',
        'preference' => 'getPreference',
        'questionnaire_code' => 'getQuestionnaireCode',
        'value_list_flag' => 'getValueListFlag',
        'price' => 'getPrice',
        'unit_price' => 'getUnitPrice',
        'price_tiers' => 'getPriceTiers',
        'web_bill_me_allowed' => 'getWebBillMeAllowed',
        'premium_set_code' => 'getPremiumSetCode',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'society_code' => 'getSocietyCode',
        'discount_percent' => 'getDiscountPercent',
        'discount_combination_code' => 'getDiscountCombinationCode',
        'subscription_type_code' => 'getSubscriptionTypeCode',
        'reusable_choice_code' => 'getReusableChoiceCode',
        'included_amount' => 'getIncludedAmount',
        'demographics' => 'getDemographics',
        'product_defaults' => 'getProductDefaults',
        'subscription_defaults' => 'getSubscriptionDefaults',
        'access_defaults' => 'getAccessDefaults',
        'conference_defaults' => 'getConferenceDefaults',
        'association_defaults' => 'getAssociationDefaults',
        'accept_available_credits' => 'getAcceptAvailableCredits',
        'accept_checks' => 'getAcceptChecks',
        'accept_credit_cards' => 'getAcceptCreditCards',
        'accept_direct_debits' => 'getAcceptDirectDebits',
        'accept_digital_wallets' => 'getAcceptDigitalWallets',
        'accept_gift_certificates' => 'getAcceptGiftCertificates',
        'accept_misc_credits' => 'getAcceptMiscCredits',
        'geographic_prices' => 'getGeographicPrices',
        'components' => 'getComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WEB_BILL_ME_ALLOWED_YES = 'Yes';
    const WEB_BILL_ME_ALLOWED_NO = 'No';
    const WEB_BILL_ME_ALLOWED_ASSUMED = 'Assumed';
    const DISCOUNT_COMBINATION_CODE_COMPOUND = 'Compound';
    const DISCOUNT_COMBINATION_CODE_ADD = 'Add';
    const DISCOUNT_COMBINATION_CODE_USE_SMALLER = 'UseSmaller';
    const DISCOUNT_COMBINATION_CODE_USE_GREATER = 'UseGreater';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST = 'UseFirst';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND = 'UseSecond';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT = 'UseFirstOrDefault';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT = 'UseSecondOrDefault';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebBillMeAllowedAllowableValues()
    {
        return [
            self::WEB_BILL_ME_ALLOWED_YES,
            self::WEB_BILL_ME_ALLOWED_NO,
            self::WEB_BILL_ME_ALLOWED_ASSUMED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountCombinationCodeAllowableValues()
    {
        return [
            self::DISCOUNT_COMBINATION_CODE_COMPOUND,
            self::DISCOUNT_COMBINATION_CODE_ADD,
            self::DISCOUNT_COMBINATION_CODE_USE_SMALLER,
            self::DISCOUNT_COMBINATION_CODE_USE_GREATER,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['choice_code'] = isset($data['choice_code']) ? $data['choice_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['narrative'] = isset($data['narrative']) ? $data['narrative'] : null;
        $this->container['preference'] = isset($data['preference']) ? $data['preference'] : null;
        $this->container['questionnaire_code'] = isset($data['questionnaire_code']) ? $data['questionnaire_code'] : null;
        $this->container['value_list_flag'] = isset($data['value_list_flag']) ? $data['value_list_flag'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['price_tiers'] = isset($data['price_tiers']) ? $data['price_tiers'] : null;
        $this->container['web_bill_me_allowed'] = isset($data['web_bill_me_allowed']) ? $data['web_bill_me_allowed'] : null;
        $this->container['premium_set_code'] = isset($data['premium_set_code']) ? $data['premium_set_code'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['society_code'] = isset($data['society_code']) ? $data['society_code'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_combination_code'] = isset($data['discount_combination_code']) ? $data['discount_combination_code'] : null;
        $this->container['subscription_type_code'] = isset($data['subscription_type_code']) ? $data['subscription_type_code'] : null;
        $this->container['reusable_choice_code'] = isset($data['reusable_choice_code']) ? $data['reusable_choice_code'] : null;
        $this->container['included_amount'] = isset($data['included_amount']) ? $data['included_amount'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['product_defaults'] = isset($data['product_defaults']) ? $data['product_defaults'] : null;
        $this->container['subscription_defaults'] = isset($data['subscription_defaults']) ? $data['subscription_defaults'] : null;
        $this->container['access_defaults'] = isset($data['access_defaults']) ? $data['access_defaults'] : null;
        $this->container['conference_defaults'] = isset($data['conference_defaults']) ? $data['conference_defaults'] : null;
        $this->container['association_defaults'] = isset($data['association_defaults']) ? $data['association_defaults'] : null;
        $this->container['accept_available_credits'] = isset($data['accept_available_credits']) ? $data['accept_available_credits'] : null;
        $this->container['accept_checks'] = isset($data['accept_checks']) ? $data['accept_checks'] : null;
        $this->container['accept_credit_cards'] = isset($data['accept_credit_cards']) ? $data['accept_credit_cards'] : null;
        $this->container['accept_direct_debits'] = isset($data['accept_direct_debits']) ? $data['accept_direct_debits'] : null;
        $this->container['accept_digital_wallets'] = isset($data['accept_digital_wallets']) ? $data['accept_digital_wallets'] : null;
        $this->container['accept_gift_certificates'] = isset($data['accept_gift_certificates']) ? $data['accept_gift_certificates'] : null;
        $this->container['accept_misc_credits'] = isset($data['accept_misc_credits']) ? $data['accept_misc_credits'] : null;
        $this->container['geographic_prices'] = isset($data['geographic_prices']) ? $data['geographic_prices'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWebBillMeAllowedAllowableValues();
        if (!is_null($this->container['web_bill_me_allowed']) && !in_array($this->container['web_bill_me_allowed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'web_bill_me_allowed', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($this->container['discount_combination_code']) && !in_array($this->container['discount_combination_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'discount_combination_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number A product item number.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Billing currency code.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code that this choice belongs to.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets choice_code
     *
     * @return string
     */
    public function getChoiceCode()
    {
        return $this->container['choice_code'];
    }

    /**
     * Sets choice_code
     *
     * @param string $choice_code The promotion choice code.
     *
     * @return $this
     */
    public function setChoiceCode($choice_code)
    {
        $this->container['choice_code'] = $choice_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the promotion choice.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets narrative
     *
     * @return string
     */
    public function getNarrative()
    {
        return $this->container['narrative'];
    }

    /**
     * Sets narrative
     *
     * @param string $narrative The narrative of the choice.
     *
     * @return $this
     */
    public function setNarrative($narrative)
    {
        $this->container['narrative'] = $narrative;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return int
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param int $preference The preference level (sort order) of the promotion choice.
     *
     * @return $this
     */
    public function setPreference($preference)
    {
        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets questionnaire_code
     *
     * @return string
     */
    public function getQuestionnaireCode()
    {
        return $this->container['questionnaire_code'];
    }

    /**
     * Sets questionnaire_code
     *
     * @param string $questionnaire_code The code for the extended demographics questionnaire.
     *
     * @return $this
     */
    public function setQuestionnaireCode($questionnaire_code)
    {
        $this->container['questionnaire_code'] = $questionnaire_code;

        return $this;
    }

    /**
     * Gets value_list_flag
     *
     * @return string
     */
    public function getValueListFlag()
    {
        return $this->container['value_list_flag'];
    }

    /**
     * Sets value_list_flag
     *
     * @param string $value_list_flag Determines if value will be displayed in value list for promotion items.
     *
     * @return $this
     */
    public function setValueListFlag($value_list_flag)
    {
        $this->container['value_list_flag'] = $value_list_flag;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price The price of the product using this promotion choice. This may include discounts
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price The price on this promotion choice
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets price_tiers
     *
     * @return \Advantage\Client\Model\PriceTier[]
     */
    public function getPriceTiers()
    {
        return $this->container['price_tiers'];
    }

    /**
     * Sets price_tiers
     *
     * @param \Advantage\Client\Model\PriceTier[] $price_tiers Price tiers
     *
     * @return $this
     */
    public function setPriceTiers($price_tiers)
    {
        $this->container['price_tiers'] = $price_tiers;

        return $this;
    }

    /**
     * Gets web_bill_me_allowed
     *
     * @return string
     */
    public function getWebBillMeAllowed()
    {
        return $this->container['web_bill_me_allowed'];
    }

    /**
     * Sets web_bill_me_allowed
     *
     * @param string $web_bill_me_allowed Is bill me allowed from the web?
     *
     * @return $this
     */
    public function setWebBillMeAllowed($web_bill_me_allowed)
    {
        $allowedValues = $this->getWebBillMeAllowedAllowableValues();
        if (!is_null($web_bill_me_allowed) && !in_array($web_bill_me_allowed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'web_bill_me_allowed', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_bill_me_allowed'] = $web_bill_me_allowed;

        return $this;
    }

    /**
     * Gets premium_set_code
     *
     * @return string
     */
    public function getPremiumSetCode()
    {
        return $this->container['premium_set_code'];
    }

    /**
     * Sets premium_set_code
     *
     * @param string $premium_set_code A product that a customer can receive for free and what must be done to earn it.
     *
     * @return $this
     */
    public function setPremiumSetCode($premium_set_code)
    {
        $this->container['premium_set_code'] = $premium_set_code;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code The installment billing terms used.
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets society_code
     *
     * @return string
     */
    public function getSocietyCode()
    {
        return $this->container['society_code'];
    }

    /**
     * Sets society_code
     *
     * @param string $society_code A professional association which may be the source of content and typically involves membership levels and fees.
     *
     * @return $this
     */
    public function setSocietyCode($society_code)
    {
        $this->container['society_code'] = $society_code;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent The percentage discount is applied to the item price.  A 40% discount is entered as 40.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_combination_code
     *
     * @return string
     */
    public function getDiscountCombinationCode()
    {
        return $this->container['discount_combination_code'];
    }

    /**
     * Sets discount_combination_code
     *
     * @param string $discount_combination_code Indicates how to combine this discount with other discounts.
     *
     * @return $this
     */
    public function setDiscountCombinationCode($discount_combination_code)
    {
        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($discount_combination_code) && !in_array($discount_combination_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'discount_combination_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_combination_code'] = $discount_combination_code;

        return $this;
    }

    /**
     * Gets subscription_type_code
     *
     * @return string
     */
    public function getSubscriptionTypeCode()
    {
        return $this->container['subscription_type_code'];
    }

    /**
     * Sets subscription_type_code
     *
     * @param string $subscription_type_code A code for describing a group of similar subscriptions.
     *
     * @return $this
     */
    public function setSubscriptionTypeCode($subscription_type_code)
    {
        $this->container['subscription_type_code'] = $subscription_type_code;

        return $this;
    }

    /**
     * Gets reusable_choice_code
     *
     * @return string
     */
    public function getReusableChoiceCode()
    {
        return $this->container['reusable_choice_code'];
    }

    /**
     * Sets reusable_choice_code
     *
     * @param string $reusable_choice_code The code identifying the module-specific reusable choice that this promotion choice pulls it's defaults from.
     *
     * @return $this
     */
    public function setReusableChoiceCode($reusable_choice_code)
    {
        $this->container['reusable_choice_code'] = $reusable_choice_code;

        return $this;
    }

    /**
     * Gets included_amount
     *
     * @return double
     */
    public function getIncludedAmount()
    {
        return $this->container['included_amount'];
    }

    /**
     * Sets included_amount
     *
     * @param double $included_amount The amount of a subscription charge that is for a premium's postage.
     *
     * @return $this
     */
    public function setIncludedAmount($included_amount)
    {
        $this->container['included_amount'] = $included_amount;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Advantage\Client\Model\DemographicValue[]
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Advantage\Client\Model\DemographicValue[] $demographics Demographic values (from the PMI-DMO1, PMI-DMO2, etc partitions) to store on the  promotion item record.
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets product_defaults
     *
     * @return \Advantage\Client\Model\ProductPromotionItemDefaults
     */
    public function getProductDefaults()
    {
        return $this->container['product_defaults'];
    }

    /**
     * Sets product_defaults
     *
     * @param \Advantage\Client\Model\ProductPromotionItemDefaults $product_defaults PRO specific promotion choice defaults.
     *
     * @return $this
     */
    public function setProductDefaults($product_defaults)
    {
        $this->container['product_defaults'] = $product_defaults;

        return $this;
    }

    /**
     * Gets subscription_defaults
     *
     * @return \Advantage\Client\Model\SubscriptionPromotionItemDefaults
     */
    public function getSubscriptionDefaults()
    {
        return $this->container['subscription_defaults'];
    }

    /**
     * Sets subscription_defaults
     *
     * @param \Advantage\Client\Model\SubscriptionPromotionItemDefaults $subscription_defaults Cir specific promotion choice defaults.
     *
     * @return $this
     */
    public function setSubscriptionDefaults($subscription_defaults)
    {
        $this->container['subscription_defaults'] = $subscription_defaults;

        return $this;
    }

    /**
     * Gets access_defaults
     *
     * @return \Advantage\Client\Model\AccessPromotionItemDefaults
     */
    public function getAccessDefaults()
    {
        return $this->container['access_defaults'];
    }

    /**
     * Sets access_defaults
     *
     * @param \Advantage\Client\Model\AccessPromotionItemDefaults $access_defaults AMB specific promotion choice defaults.
     *
     * @return $this
     */
    public function setAccessDefaults($access_defaults)
    {
        $this->container['access_defaults'] = $access_defaults;

        return $this;
    }

    /**
     * Gets conference_defaults
     *
     * @return \Advantage\Client\Model\ConferencePromotionItemDefaults
     */
    public function getConferenceDefaults()
    {
        return $this->container['conference_defaults'];
    }

    /**
     * Sets conference_defaults
     *
     * @param \Advantage\Client\Model\ConferencePromotionItemDefaults $conference_defaults CEM specific promotion choice defaults.
     *
     * @return $this
     */
    public function setConferenceDefaults($conference_defaults)
    {
        $this->container['conference_defaults'] = $conference_defaults;

        return $this;
    }

    /**
     * Gets association_defaults
     *
     * @return \Advantage\Client\Model\AssociationPromotionItemDefaults
     */
    public function getAssociationDefaults()
    {
        return $this->container['association_defaults'];
    }

    /**
     * Sets association_defaults
     *
     * @param \Advantage\Client\Model\AssociationPromotionItemDefaults $association_defaults AMM specific promotion choice defaults.
     *
     * @return $this
     */
    public function setAssociationDefaults($association_defaults)
    {
        $this->container['association_defaults'] = $association_defaults;

        return $this;
    }

    /**
     * Gets accept_available_credits
     *
     * @return bool
     */
    public function getAcceptAvailableCredits()
    {
        return $this->container['accept_available_credits'];
    }

    /**
     * Sets accept_available_credits
     *
     * @param bool $accept_available_credits Value of Available Credit Valid
     *
     * @return $this
     */
    public function setAcceptAvailableCredits($accept_available_credits)
    {
        $this->container['accept_available_credits'] = $accept_available_credits;

        return $this;
    }

    /**
     * Gets accept_checks
     *
     * @return bool
     */
    public function getAcceptChecks()
    {
        return $this->container['accept_checks'];
    }

    /**
     * Sets accept_checks
     *
     * @param bool $accept_checks Value of Checks Valid
     *
     * @return $this
     */
    public function setAcceptChecks($accept_checks)
    {
        $this->container['accept_checks'] = $accept_checks;

        return $this;
    }

    /**
     * Gets accept_credit_cards
     *
     * @return bool
     */
    public function getAcceptCreditCards()
    {
        return $this->container['accept_credit_cards'];
    }

    /**
     * Sets accept_credit_cards
     *
     * @param bool $accept_credit_cards Value of Credit Card Payments valid
     *
     * @return $this
     */
    public function setAcceptCreditCards($accept_credit_cards)
    {
        $this->container['accept_credit_cards'] = $accept_credit_cards;

        return $this;
    }

    /**
     * Gets accept_direct_debits
     *
     * @return bool
     */
    public function getAcceptDirectDebits()
    {
        return $this->container['accept_direct_debits'];
    }

    /**
     * Sets accept_direct_debits
     *
     * @param bool $accept_direct_debits Value of Direct Debit Payments valid
     *
     * @return $this
     */
    public function setAcceptDirectDebits($accept_direct_debits)
    {
        $this->container['accept_direct_debits'] = $accept_direct_debits;

        return $this;
    }

    /**
     * Gets accept_digital_wallets
     *
     * @return bool
     */
    public function getAcceptDigitalWallets()
    {
        return $this->container['accept_digital_wallets'];
    }

    /**
     * Sets accept_digital_wallets
     *
     * @param bool $accept_digital_wallets Value of Digital Wallet Payments valid
     *
     * @return $this
     */
    public function setAcceptDigitalWallets($accept_digital_wallets)
    {
        $this->container['accept_digital_wallets'] = $accept_digital_wallets;

        return $this;
    }

    /**
     * Gets accept_gift_certificates
     *
     * @return bool
     */
    public function getAcceptGiftCertificates()
    {
        return $this->container['accept_gift_certificates'];
    }

    /**
     * Sets accept_gift_certificates
     *
     * @param bool $accept_gift_certificates Value of Gift Certificates Valid
     *
     * @return $this
     */
    public function setAcceptGiftCertificates($accept_gift_certificates)
    {
        $this->container['accept_gift_certificates'] = $accept_gift_certificates;

        return $this;
    }

    /**
     * Gets accept_misc_credits
     *
     * @return bool
     */
    public function getAcceptMiscCredits()
    {
        return $this->container['accept_misc_credits'];
    }

    /**
     * Sets accept_misc_credits
     *
     * @param bool $accept_misc_credits Value of Misc Credits Valid
     *
     * @return $this
     */
    public function setAcceptMiscCredits($accept_misc_credits)
    {
        $this->container['accept_misc_credits'] = $accept_misc_credits;

        return $this;
    }

    /**
     * Gets geographic_prices
     *
     * @return \Advantage\Client\Model\GeographicPrice[]
     */
    public function getGeographicPrices()
    {
        return $this->container['geographic_prices'];
    }

    /**
     * Sets geographic_prices
     *
     * @param \Advantage\Client\Model\GeographicPrice[] $geographic_prices Geographic Prices
     *
     * @return $this
     */
    public function setGeographicPrices($geographic_prices)
    {
        $this->container['geographic_prices'] = $geographic_prices;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Advantage\Client\Model\PromotionChoice[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Advantage\Client\Model\PromotionChoice[] $components Package Components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


