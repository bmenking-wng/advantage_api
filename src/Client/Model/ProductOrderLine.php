<?php
/**
 * ProductOrderLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ProductOrderLine Class Doc Comment
 *
 * @category Class
 * @description Information about a (PRO) product order line.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductOrderLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductOrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bookclub_shipment_frequency' => 'int',
        'item_description1' => 'string',
        'item_description2' => 'string',
        'item_description3' => 'string',
        'inventory_status' => 'string',
        'quantity_backordered' => 'int',
        'quantity_lost' => 'int',
        'quantity_remaining' => 'int',
        'quantity_returned' => 'int',
        'quantity_shipped' => 'int',
        'requested_ship_via_code' => 'string',
        'actual_ship_via_code' => 'string',
        'shipping_sequence' => 'string',
        'starts_bookclub_participation' => 'bool',
        'stock_status_code' => 'string',
        'is_insert' => 'bool',
        'is_canceled' => 'bool',
        'manuscript_number' => 'string',
        'product_format_code' => 'string',
        'price_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bookclub_shipment_frequency' => 'int32',
        'item_description1' => null,
        'item_description2' => null,
        'item_description3' => null,
        'inventory_status' => null,
        'quantity_backordered' => 'int32',
        'quantity_lost' => 'int32',
        'quantity_remaining' => 'int32',
        'quantity_returned' => 'int32',
        'quantity_shipped' => 'int32',
        'requested_ship_via_code' => null,
        'actual_ship_via_code' => null,
        'shipping_sequence' => null,
        'starts_bookclub_participation' => null,
        'stock_status_code' => null,
        'is_insert' => null,
        'is_canceled' => null,
        'manuscript_number' => null,
        'product_format_code' => null,
        'price_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bookclub_shipment_frequency' => 'BookclubShipmentFrequency',
        'item_description1' => 'ItemDescription1',
        'item_description2' => 'ItemDescription2',
        'item_description3' => 'ItemDescription3',
        'inventory_status' => 'InventoryStatus',
        'quantity_backordered' => 'QuantityBackordered',
        'quantity_lost' => 'QuantityLost',
        'quantity_remaining' => 'QuantityRemaining',
        'quantity_returned' => 'QuantityReturned',
        'quantity_shipped' => 'QuantityShipped',
        'requested_ship_via_code' => 'RequestedShipViaCode',
        'actual_ship_via_code' => 'ActualShipViaCode',
        'shipping_sequence' => 'ShippingSequence',
        'starts_bookclub_participation' => 'StartsBookclubParticipation',
        'stock_status_code' => 'StockStatusCode',
        'is_insert' => 'IsInsert',
        'is_canceled' => 'IsCanceled',
        'manuscript_number' => 'ManuscriptNumber',
        'product_format_code' => 'ProductFormatCode',
        'price_code' => 'PriceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bookclub_shipment_frequency' => 'setBookclubShipmentFrequency',
        'item_description1' => 'setItemDescription1',
        'item_description2' => 'setItemDescription2',
        'item_description3' => 'setItemDescription3',
        'inventory_status' => 'setInventoryStatus',
        'quantity_backordered' => 'setQuantityBackordered',
        'quantity_lost' => 'setQuantityLost',
        'quantity_remaining' => 'setQuantityRemaining',
        'quantity_returned' => 'setQuantityReturned',
        'quantity_shipped' => 'setQuantityShipped',
        'requested_ship_via_code' => 'setRequestedShipViaCode',
        'actual_ship_via_code' => 'setActualShipViaCode',
        'shipping_sequence' => 'setShippingSequence',
        'starts_bookclub_participation' => 'setStartsBookclubParticipation',
        'stock_status_code' => 'setStockStatusCode',
        'is_insert' => 'setIsInsert',
        'is_canceled' => 'setIsCanceled',
        'manuscript_number' => 'setManuscriptNumber',
        'product_format_code' => 'setProductFormatCode',
        'price_code' => 'setPriceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bookclub_shipment_frequency' => 'getBookclubShipmentFrequency',
        'item_description1' => 'getItemDescription1',
        'item_description2' => 'getItemDescription2',
        'item_description3' => 'getItemDescription3',
        'inventory_status' => 'getInventoryStatus',
        'quantity_backordered' => 'getQuantityBackordered',
        'quantity_lost' => 'getQuantityLost',
        'quantity_remaining' => 'getQuantityRemaining',
        'quantity_returned' => 'getQuantityReturned',
        'quantity_shipped' => 'getQuantityShipped',
        'requested_ship_via_code' => 'getRequestedShipViaCode',
        'actual_ship_via_code' => 'getActualShipViaCode',
        'shipping_sequence' => 'getShippingSequence',
        'starts_bookclub_participation' => 'getStartsBookclubParticipation',
        'stock_status_code' => 'getStockStatusCode',
        'is_insert' => 'getIsInsert',
        'is_canceled' => 'getIsCanceled',
        'manuscript_number' => 'getManuscriptNumber',
        'product_format_code' => 'getProductFormatCode',
        'price_code' => 'getPriceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVENTORY_STATUS_IN_STOCK = 'InStock';
    const INVENTORY_STATUS_DISCONTINUED = 'Discontinued';
    const INVENTORY_STATUS_REORDER = 'Reorder';
    const INVENTORY_STATUS_BACKORDERED = 'Backordered';
    const INVENTORY_STATUS_PRE_PUBLICATION = 'PrePublication';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInventoryStatusAllowableValues()
    {
        return [
            self::INVENTORY_STATUS_IN_STOCK,
            self::INVENTORY_STATUS_DISCONTINUED,
            self::INVENTORY_STATUS_REORDER,
            self::INVENTORY_STATUS_BACKORDERED,
            self::INVENTORY_STATUS_PRE_PUBLICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bookclub_shipment_frequency'] = isset($data['bookclub_shipment_frequency']) ? $data['bookclub_shipment_frequency'] : null;
        $this->container['item_description1'] = isset($data['item_description1']) ? $data['item_description1'] : null;
        $this->container['item_description2'] = isset($data['item_description2']) ? $data['item_description2'] : null;
        $this->container['item_description3'] = isset($data['item_description3']) ? $data['item_description3'] : null;
        $this->container['inventory_status'] = isset($data['inventory_status']) ? $data['inventory_status'] : null;
        $this->container['quantity_backordered'] = isset($data['quantity_backordered']) ? $data['quantity_backordered'] : null;
        $this->container['quantity_lost'] = isset($data['quantity_lost']) ? $data['quantity_lost'] : null;
        $this->container['quantity_remaining'] = isset($data['quantity_remaining']) ? $data['quantity_remaining'] : null;
        $this->container['quantity_returned'] = isset($data['quantity_returned']) ? $data['quantity_returned'] : null;
        $this->container['quantity_shipped'] = isset($data['quantity_shipped']) ? $data['quantity_shipped'] : null;
        $this->container['requested_ship_via_code'] = isset($data['requested_ship_via_code']) ? $data['requested_ship_via_code'] : null;
        $this->container['actual_ship_via_code'] = isset($data['actual_ship_via_code']) ? $data['actual_ship_via_code'] : null;
        $this->container['shipping_sequence'] = isset($data['shipping_sequence']) ? $data['shipping_sequence'] : null;
        $this->container['starts_bookclub_participation'] = isset($data['starts_bookclub_participation']) ? $data['starts_bookclub_participation'] : null;
        $this->container['stock_status_code'] = isset($data['stock_status_code']) ? $data['stock_status_code'] : null;
        $this->container['is_insert'] = isset($data['is_insert']) ? $data['is_insert'] : null;
        $this->container['is_canceled'] = isset($data['is_canceled']) ? $data['is_canceled'] : null;
        $this->container['manuscript_number'] = isset($data['manuscript_number']) ? $data['manuscript_number'] : null;
        $this->container['product_format_code'] = isset($data['product_format_code']) ? $data['product_format_code'] : null;
        $this->container['price_code'] = isset($data['price_code']) ? $data['price_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInventoryStatusAllowableValues();
        if (!is_null($this->container['inventory_status']) && !in_array($this->container['inventory_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'inventory_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bookclub_shipment_frequency
     *
     * @return int
     */
    public function getBookclubShipmentFrequency()
    {
        return $this->container['bookclub_shipment_frequency'];
    }

    /**
     * Sets bookclub_shipment_frequency
     *
     * @param int $bookclub_shipment_frequency Shipment frequency, the number of days between shipments.
     *
     * @return $this
     */
    public function setBookclubShipmentFrequency($bookclub_shipment_frequency)
    {
        $this->container['bookclub_shipment_frequency'] = $bookclub_shipment_frequency;

        return $this;
    }

    /**
     * Gets item_description1
     *
     * @return string
     */
    public function getItemDescription1()
    {
        return $this->container['item_description1'];
    }

    /**
     * Sets item_description1
     *
     * @param string $item_description1 The first name, usually the item name 1 (e.g. title) of the product ordered.
     *
     * @return $this
     */
    public function setItemDescription1($item_description1)
    {
        $this->container['item_description1'] = $item_description1;

        return $this;
    }

    /**
     * Gets item_description2
     *
     * @return string
     */
    public function getItemDescription2()
    {
        return $this->container['item_description2'];
    }

    /**
     * Sets item_description2
     *
     * @param string $item_description2 The second name, usually the item name 2 (e.g. author) of the product ordered.
     *
     * @return $this
     */
    public function setItemDescription2($item_description2)
    {
        $this->container['item_description2'] = $item_description2;

        return $this;
    }

    /**
     * Gets item_description3
     *
     * @return string
     */
    public function getItemDescription3()
    {
        return $this->container['item_description3'];
    }

    /**
     * Sets item_description3
     *
     * @param string $item_description3 The third name , usually the item name 3 (e.g. ISBN) of the product ordered.
     *
     * @return $this
     */
    public function setItemDescription3($item_description3)
    {
        $this->container['item_description3'] = $item_description3;

        return $this;
    }

    /**
     * Gets inventory_status
     *
     * @return string
     */
    public function getInventoryStatus()
    {
        return $this->container['inventory_status'];
    }

    /**
     * Sets inventory_status
     *
     * @param string $inventory_status Product inventory status
     *
     * @return $this
     */
    public function setInventoryStatus($inventory_status)
    {
        $allowedValues = $this->getInventoryStatusAllowableValues();
        if (!is_null($inventory_status) && !in_array($inventory_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inventory_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inventory_status'] = $inventory_status;

        return $this;
    }

    /**
     * Gets quantity_backordered
     *
     * @return int
     */
    public function getQuantityBackordered()
    {
        return $this->container['quantity_backordered'];
    }

    /**
     * Sets quantity_backordered
     *
     * @param int $quantity_backordered The quantity placed on backorder. When the product is ready to ship,  a new \"backorder fill\" order is created track the fulfillment of the back-ordered items.
     *
     * @return $this
     */
    public function setQuantityBackordered($quantity_backordered)
    {
        $this->container['quantity_backordered'] = $quantity_backordered;

        return $this;
    }

    /**
     * Gets quantity_lost
     *
     * @return int
     */
    public function getQuantityLost()
    {
        return $this->container['quantity_lost'];
    }

    /**
     * Sets quantity_lost
     *
     * @param int $quantity_lost The quantity of lost sales.  If the product is out of stock and cannot be back-ordered  then it is considered a lost sale.
     *
     * @return $this
     */
    public function setQuantityLost($quantity_lost)
    {
        $this->container['quantity_lost'] = $quantity_lost;

        return $this;
    }

    /**
     * Gets quantity_remaining
     *
     * @return int
     */
    public function getQuantityRemaining()
    {
        return $this->container['quantity_remaining'];
    }

    /**
     * Sets quantity_remaining
     *
     * @param int $quantity_remaining The quantity remaining to be fulfilled
     *
     * @return $this
     */
    public function setQuantityRemaining($quantity_remaining)
    {
        $this->container['quantity_remaining'] = $quantity_remaining;

        return $this;
    }

    /**
     * Gets quantity_returned
     *
     * @return int
     */
    public function getQuantityReturned()
    {
        return $this->container['quantity_returned'];
    }

    /**
     * Sets quantity_returned
     *
     * @param int $quantity_returned The quantity returned
     *
     * @return $this
     */
    public function setQuantityReturned($quantity_returned)
    {
        $this->container['quantity_returned'] = $quantity_returned;

        return $this;
    }

    /**
     * Gets quantity_shipped
     *
     * @return int
     */
    public function getQuantityShipped()
    {
        return $this->container['quantity_shipped'];
    }

    /**
     * Sets quantity_shipped
     *
     * @param int $quantity_shipped The quantity shipped, which is incremented when the inventory is available.  It does not indicate that the product has actually shipped from the warehouse.  It indicates that the product has shipped or is in the process of shipping.
     *
     * @return $this
     */
    public function setQuantityShipped($quantity_shipped)
    {
        $this->container['quantity_shipped'] = $quantity_shipped;

        return $this;
    }

    /**
     * Gets requested_ship_via_code
     *
     * @return string
     */
    public function getRequestedShipViaCode()
    {
        return $this->container['requested_ship_via_code'];
    }

    /**
     * Sets requested_ship_via_code
     *
     * @param string $requested_ship_via_code The requested shipping method.
     *
     * @return $this
     */
    public function setRequestedShipViaCode($requested_ship_via_code)
    {
        $this->container['requested_ship_via_code'] = $requested_ship_via_code;

        return $this;
    }

    /**
     * Gets actual_ship_via_code
     *
     * @return string
     */
    public function getActualShipViaCode()
    {
        return $this->container['actual_ship_via_code'];
    }

    /**
     * Sets actual_ship_via_code
     *
     * @param string $actual_ship_via_code The actual shipping method.
     *
     * @return $this
     */
    public function setActualShipViaCode($actual_ship_via_code)
    {
        $this->container['actual_ship_via_code'] = $actual_ship_via_code;

        return $this;
    }

    /**
     * Gets shipping_sequence
     *
     * @return string
     */
    public function getShippingSequence()
    {
        return $this->container['shipping_sequence'];
    }

    /**
     * Sets shipping_sequence
     *
     * @param string $shipping_sequence Identifies which shipment contained this order line.
     *
     * @return $this
     */
    public function setShippingSequence($shipping_sequence)
    {
        $this->container['shipping_sequence'] = $shipping_sequence;

        return $this;
    }

    /**
     * Gets starts_bookclub_participation
     *
     * @return bool
     */
    public function getStartsBookclubParticipation()
    {
        return $this->container['starts_bookclub_participation'];
    }

    /**
     * Sets starts_bookclub_participation
     *
     * @param bool $starts_bookclub_participation Should the current inventory order line result in a new book club series?
     *
     * @return $this
     */
    public function setStartsBookclubParticipation($starts_bookclub_participation)
    {
        $this->container['starts_bookclub_participation'] = $starts_bookclub_participation;

        return $this;
    }

    /**
     * Gets stock_status_code
     *
     * @return string
     */
    public function getStockStatusCode()
    {
        return $this->container['stock_status_code'];
    }

    /**
     * Sets stock_status_code
     *
     * @param string $stock_status_code The current status of the item in the inventory (out of stock, unavailable, etc.)
     *
     * @return $this
     */
    public function setStockStatusCode($stock_status_code)
    {
        $this->container['stock_status_code'] = $stock_status_code;

        return $this;
    }

    /**
     * Gets is_insert
     *
     * @return bool
     */
    public function getIsInsert()
    {
        return $this->container['is_insert'];
    }

    /**
     * Sets is_insert
     *
     * @param bool $is_insert Is the current PRO order line an insert?  Inserts are free items added to qualifying orders.
     *
     * @return $this
     */
    public function setIsInsert($is_insert)
    {
        $this->container['is_insert'] = $is_insert;

        return $this;
    }

    /**
     * Gets is_canceled
     *
     * @return bool
     */
    public function getIsCanceled()
    {
        return $this->container['is_canceled'];
    }

    /**
     * Sets is_canceled
     *
     * @param bool $is_canceled Is the current PRO order line canceled?
     *
     * @return $this
     */
    public function setIsCanceled($is_canceled)
    {
        $this->container['is_canceled'] = $is_canceled;

        return $this;
    }

    /**
     * Gets manuscript_number
     *
     * @return string
     */
    public function getManuscriptNumber()
    {
        return $this->container['manuscript_number'];
    }

    /**
     * Sets manuscript_number
     *
     * @param string $manuscript_number The manuscript number, which is a means to identify an RPS article.
     *
     * @return $this
     */
    public function setManuscriptNumber($manuscript_number)
    {
        $this->container['manuscript_number'] = $manuscript_number;

        return $this;
    }

    /**
     * Gets product_format_code
     *
     * @return string
     */
    public function getProductFormatCode()
    {
        return $this->container['product_format_code'];
    }

    /**
     * Sets product_format_code
     *
     * @param string $product_format_code The media format code (hardcover, CD, etc.)
     *
     * @return $this
     */
    public function setProductFormatCode($product_format_code)
    {
        $this->container['product_format_code'] = $product_format_code;

        return $this;
    }

    /**
     * Gets price_code
     *
     * @return string
     */
    public function getPriceCode()
    {
        return $this->container['price_code'];
    }

    /**
     * Sets price_code
     *
     * @param string $price_code The price code used when determining the price to be charged for this line.
     *
     * @return $this
     */
    public function setPriceCode($price_code)
    {
        $this->container['price_code'] = $price_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


