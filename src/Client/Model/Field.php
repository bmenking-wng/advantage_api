<?php
/**
 * Field
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Field Class Doc Comment
 *
 * @category Class
 * @description Information about a field in the Advantage Data Dictionary
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Field implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Field';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'caption' => 'string',
        'field_width' => 'int',
        'display_width' => 'int',
        'decimal_places' => 'int',
        'field_type' => 'string',
        'filter' => 'string',
        'system_values' => '\Advantage\Client\Model\SystemValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'caption' => null,
        'field_width' => 'int32',
        'display_width' => 'int32',
        'decimal_places' => 'int32',
        'field_type' => null,
        'filter' => null,
        'system_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caption' => 'Caption',
        'field_width' => 'FieldWidth',
        'display_width' => 'DisplayWidth',
        'decimal_places' => 'DecimalPlaces',
        'field_type' => 'FieldType',
        'filter' => 'Filter',
        'system_values' => 'SystemValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caption' => 'setCaption',
        'field_width' => 'setFieldWidth',
        'display_width' => 'setDisplayWidth',
        'decimal_places' => 'setDecimalPlaces',
        'field_type' => 'setFieldType',
        'filter' => 'setFilter',
        'system_values' => 'setSystemValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caption' => 'getCaption',
        'field_width' => 'getFieldWidth',
        'display_width' => 'getDisplayWidth',
        'decimal_places' => 'getDecimalPlaces',
        'field_type' => 'getFieldType',
        'filter' => 'getFilter',
        'system_values' => 'getSystemValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FIELD_TYPE_NONE = 'None';
    const FIELD_TYPE_ALN = 'ALN';
    const FIELD_TYPE_CAM = 'CAM';
    const FIELD_TYPE_CID = 'CID';
    const FIELD_TYPE_CUR = 'CUR';
    const FIELD_TYPE_CTL = 'CTL';
    const FIELD_TYPE_DAT = 'DAT';
    const FIELD_TYPE_NUM = 'NUM';
    const FIELD_TYPE_OVP = 'OVP';
    const FIELD_TYPE_NST = 'NST';
    const FIELD_TYPE_RTE = 'RTE';
    const FIELD_TYPE_TXT = 'TXT';
    const FIELD_TYPE_UTC = 'UTC';
    const FILTER_NONE = 'None';
    const FILTER_UPCASE = 'Upcase';
    const FILTER_U9 = 'U9';
    const FILTER_TRANSLATABLE = 'Translatable';
    const FILTER_YES_OR_NO = 'YesOrNo';
    const FILTER_IDENTIFIER = 'Identifier';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_NONE,
            self::FIELD_TYPE_ALN,
            self::FIELD_TYPE_CAM,
            self::FIELD_TYPE_CID,
            self::FIELD_TYPE_CUR,
            self::FIELD_TYPE_CTL,
            self::FIELD_TYPE_DAT,
            self::FIELD_TYPE_NUM,
            self::FIELD_TYPE_OVP,
            self::FIELD_TYPE_NST,
            self::FIELD_TYPE_RTE,
            self::FIELD_TYPE_TXT,
            self::FIELD_TYPE_UTC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterAllowableValues()
    {
        return [
            self::FILTER_NONE,
            self::FILTER_UPCASE,
            self::FILTER_U9,
            self::FILTER_TRANSLATABLE,
            self::FILTER_YES_OR_NO,
            self::FILTER_IDENTIFIER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['field_width'] = isset($data['field_width']) ? $data['field_width'] : null;
        $this->container['display_width'] = isset($data['display_width']) ? $data['display_width'] : null;
        $this->container['decimal_places'] = isset($data['decimal_places']) ? $data['decimal_places'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['system_values'] = isset($data['system_values']) ? $data['system_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['field_type']) && !in_array($this->container['field_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'field_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilterAllowableValues();
        if (!is_null($this->container['filter']) && !in_array($this->container['filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filter', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption Prompt
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets field_width
     *
     * @return int
     */
    public function getFieldWidth()
    {
        return $this->container['field_width'];
    }

    /**
     * Sets field_width
     *
     * @param int $field_width Maximum width in characters
     *
     * @return $this
     */
    public function setFieldWidth($field_width)
    {
        $this->container['field_width'] = $field_width;

        return $this;
    }

    /**
     * Gets display_width
     *
     * @return int
     */
    public function getDisplayWidth()
    {
        return $this->container['display_width'];
    }

    /**
     * Sets display_width
     *
     * @param int $display_width Display width in characters
     *
     * @return $this
     */
    public function setDisplayWidth($display_width)
    {
        $this->container['display_width'] = $display_width;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return int
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param int $decimal_places Number of decimal places
     *
     * @return $this
     */
    public function setDecimalPlaces($decimal_places)
    {
        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type The Field Type (ALN, NUM...)
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($field_type) && !in_array($field_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'field_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string $filter The Filter Code (UP, YN...)
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $allowedValues = $this->getFilterAllowableValues();
        if (!is_null($filter) && !in_array($filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filter', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets system_values
     *
     * @return \Advantage\Client\Model\SystemValue[]
     */
    public function getSystemValues()
    {
        return $this->container['system_values'];
    }

    /**
     * Sets system_values
     *
     * @param \Advantage\Client\Model\SystemValue[] $system_values A set of valid system values for this field
     *
     * @return $this
     */
    public function setSystemValues($system_values)
    {
        $this->container['system_values'] = $system_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


