<?php
/**
 * OrderTrackingCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderTrackingCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Data transfer object for creating an OrderTracking
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderTrackingCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderTrackingCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actual_freight_amount' => 'double',
        'actual_ship_via' => 'string',
        'billing_currency' => 'string',
        'country_code' => 'string',
        'item_number' => 'string',
        'number_of_cartons' => 'int',
        'number_of_packages' => 'int',
        'number_of_pallets' => 'int',
        'packer_id' => 'string',
        'picker_id' => 'string',
        'pickup_number' => 'string',
        'postal_code' => 'string',
        'quantity_shipped' => 'int',
        'shipping_zone' => 'string',
        'shipping_date' => '\DateTime',
        'shipping_time' => 'string',
        'ship_to_customer_number' => 'string',
        'total_weight' => 'double',
        'tracking_number' => 'string',
        'warehouse_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actual_freight_amount' => 'double',
        'actual_ship_via' => null,
        'billing_currency' => null,
        'country_code' => null,
        'item_number' => null,
        'number_of_cartons' => 'int32',
        'number_of_packages' => 'int32',
        'number_of_pallets' => 'int32',
        'packer_id' => null,
        'picker_id' => null,
        'pickup_number' => null,
        'postal_code' => null,
        'quantity_shipped' => 'int32',
        'shipping_zone' => null,
        'shipping_date' => 'date-time',
        'shipping_time' => null,
        'ship_to_customer_number' => null,
        'total_weight' => 'double',
        'tracking_number' => null,
        'warehouse_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_freight_amount' => 'ActualFreightAmount',
        'actual_ship_via' => 'ActualShipVia',
        'billing_currency' => 'BillingCurrency',
        'country_code' => 'CountryCode',
        'item_number' => 'ItemNumber',
        'number_of_cartons' => 'NumberOfCartons',
        'number_of_packages' => 'NumberOfPackages',
        'number_of_pallets' => 'NumberOfPallets',
        'packer_id' => 'PackerId',
        'picker_id' => 'PickerId',
        'pickup_number' => 'PickupNumber',
        'postal_code' => 'PostalCode',
        'quantity_shipped' => 'QuantityShipped',
        'shipping_zone' => 'ShippingZone',
        'shipping_date' => 'ShippingDate',
        'shipping_time' => 'ShippingTime',
        'ship_to_customer_number' => 'ShipToCustomerNumber',
        'total_weight' => 'TotalWeight',
        'tracking_number' => 'TrackingNumber',
        'warehouse_number' => 'WarehouseNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_freight_amount' => 'setActualFreightAmount',
        'actual_ship_via' => 'setActualShipVia',
        'billing_currency' => 'setBillingCurrency',
        'country_code' => 'setCountryCode',
        'item_number' => 'setItemNumber',
        'number_of_cartons' => 'setNumberOfCartons',
        'number_of_packages' => 'setNumberOfPackages',
        'number_of_pallets' => 'setNumberOfPallets',
        'packer_id' => 'setPackerId',
        'picker_id' => 'setPickerId',
        'pickup_number' => 'setPickupNumber',
        'postal_code' => 'setPostalCode',
        'quantity_shipped' => 'setQuantityShipped',
        'shipping_zone' => 'setShippingZone',
        'shipping_date' => 'setShippingDate',
        'shipping_time' => 'setShippingTime',
        'ship_to_customer_number' => 'setShipToCustomerNumber',
        'total_weight' => 'setTotalWeight',
        'tracking_number' => 'setTrackingNumber',
        'warehouse_number' => 'setWarehouseNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_freight_amount' => 'getActualFreightAmount',
        'actual_ship_via' => 'getActualShipVia',
        'billing_currency' => 'getBillingCurrency',
        'country_code' => 'getCountryCode',
        'item_number' => 'getItemNumber',
        'number_of_cartons' => 'getNumberOfCartons',
        'number_of_packages' => 'getNumberOfPackages',
        'number_of_pallets' => 'getNumberOfPallets',
        'packer_id' => 'getPackerId',
        'picker_id' => 'getPickerId',
        'pickup_number' => 'getPickupNumber',
        'postal_code' => 'getPostalCode',
        'quantity_shipped' => 'getQuantityShipped',
        'shipping_zone' => 'getShippingZone',
        'shipping_date' => 'getShippingDate',
        'shipping_time' => 'getShippingTime',
        'ship_to_customer_number' => 'getShipToCustomerNumber',
        'total_weight' => 'getTotalWeight',
        'tracking_number' => 'getTrackingNumber',
        'warehouse_number' => 'getWarehouseNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_freight_amount'] = isset($data['actual_freight_amount']) ? $data['actual_freight_amount'] : null;
        $this->container['actual_ship_via'] = isset($data['actual_ship_via']) ? $data['actual_ship_via'] : null;
        $this->container['billing_currency'] = isset($data['billing_currency']) ? $data['billing_currency'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['number_of_cartons'] = isset($data['number_of_cartons']) ? $data['number_of_cartons'] : null;
        $this->container['number_of_packages'] = isset($data['number_of_packages']) ? $data['number_of_packages'] : null;
        $this->container['number_of_pallets'] = isset($data['number_of_pallets']) ? $data['number_of_pallets'] : null;
        $this->container['packer_id'] = isset($data['packer_id']) ? $data['packer_id'] : null;
        $this->container['picker_id'] = isset($data['picker_id']) ? $data['picker_id'] : null;
        $this->container['pickup_number'] = isset($data['pickup_number']) ? $data['pickup_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['quantity_shipped'] = isset($data['quantity_shipped']) ? $data['quantity_shipped'] : null;
        $this->container['shipping_zone'] = isset($data['shipping_zone']) ? $data['shipping_zone'] : null;
        $this->container['shipping_date'] = isset($data['shipping_date']) ? $data['shipping_date'] : null;
        $this->container['shipping_time'] = isset($data['shipping_time']) ? $data['shipping_time'] : null;
        $this->container['ship_to_customer_number'] = isset($data['ship_to_customer_number']) ? $data['ship_to_customer_number'] : null;
        $this->container['total_weight'] = isset($data['total_weight']) ? $data['total_weight'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['warehouse_number'] = isset($data['warehouse_number']) ? $data['warehouse_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_freight_amount
     *
     * @return double
     */
    public function getActualFreightAmount()
    {
        return $this->container['actual_freight_amount'];
    }

    /**
     * Sets actual_freight_amount
     *
     * @param double $actual_freight_amount Actual freight amount of shipment
     *
     * @return $this
     */
    public function setActualFreightAmount($actual_freight_amount)
    {
        $this->container['actual_freight_amount'] = $actual_freight_amount;

        return $this;
    }

    /**
     * Gets actual_ship_via
     *
     * @return string
     */
    public function getActualShipVia()
    {
        return $this->container['actual_ship_via'];
    }

    /**
     * Sets actual_ship_via
     *
     * @param string $actual_ship_via Actual ship via code
     *
     * @return $this
     */
    public function setActualShipVia($actual_ship_via)
    {
        $this->container['actual_ship_via'] = $actual_ship_via;

        return $this;
    }

    /**
     * Gets billing_currency
     *
     * @return string
     */
    public function getBillingCurrency()
    {
        return $this->container['billing_currency'];
    }

    /**
     * Sets billing_currency
     *
     * @param string $billing_currency Billing currency of freight amount
     *
     * @return $this
     */
    public function setBillingCurrency($billing_currency)
    {
        $this->container['billing_currency'] = $billing_currency;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code of where shipment is going
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number Item number if shipment contained only one item
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets number_of_cartons
     *
     * @return int
     */
    public function getNumberOfCartons()
    {
        return $this->container['number_of_cartons'];
    }

    /**
     * Sets number_of_cartons
     *
     * @param int $number_of_cartons Number of cartons
     *
     * @return $this
     */
    public function setNumberOfCartons($number_of_cartons)
    {
        $this->container['number_of_cartons'] = $number_of_cartons;

        return $this;
    }

    /**
     * Gets number_of_packages
     *
     * @return int
     */
    public function getNumberOfPackages()
    {
        return $this->container['number_of_packages'];
    }

    /**
     * Sets number_of_packages
     *
     * @param int $number_of_packages Number of packages
     *
     * @return $this
     */
    public function setNumberOfPackages($number_of_packages)
    {
        $this->container['number_of_packages'] = $number_of_packages;

        return $this;
    }

    /**
     * Gets number_of_pallets
     *
     * @return int
     */
    public function getNumberOfPallets()
    {
        return $this->container['number_of_pallets'];
    }

    /**
     * Sets number_of_pallets
     *
     * @param int $number_of_pallets Number of pallets
     *
     * @return $this
     */
    public function setNumberOfPallets($number_of_pallets)
    {
        $this->container['number_of_pallets'] = $number_of_pallets;

        return $this;
    }

    /**
     * Gets packer_id
     *
     * @return string
     */
    public function getPackerId()
    {
        return $this->container['packer_id'];
    }

    /**
     * Sets packer_id
     *
     * @param string $packer_id Id of warehouse person who packed the shipment
     *
     * @return $this
     */
    public function setPackerId($packer_id)
    {
        $this->container['packer_id'] = $packer_id;

        return $this;
    }

    /**
     * Gets picker_id
     *
     * @return string
     */
    public function getPickerId()
    {
        return $this->container['picker_id'];
    }

    /**
     * Sets picker_id
     *
     * @param string $picker_id Id of warehouse person who picked the shipment
     *
     * @return $this
     */
    public function setPickerId($picker_id)
    {
        $this->container['picker_id'] = $picker_id;

        return $this;
    }

    /**
     * Gets pickup_number
     *
     * @return string
     */
    public function getPickupNumber()
    {
        return $this->container['pickup_number'];
    }

    /**
     * Sets pickup_number
     *
     * @param string $pickup_number Pickup number
     *
     * @return $this
     */
    public function setPickupNumber($pickup_number)
    {
        $this->container['pickup_number'] = $pickup_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets quantity_shipped
     *
     * @return int
     */
    public function getQuantityShipped()
    {
        return $this->container['quantity_shipped'];
    }

    /**
     * Sets quantity_shipped
     *
     * @param int $quantity_shipped Quantity shipped
     *
     * @return $this
     */
    public function setQuantityShipped($quantity_shipped)
    {
        $this->container['quantity_shipped'] = $quantity_shipped;

        return $this;
    }

    /**
     * Gets shipping_zone
     *
     * @return string
     */
    public function getShippingZone()
    {
        return $this->container['shipping_zone'];
    }

    /**
     * Sets shipping_zone
     *
     * @param string $shipping_zone Shipping zone carriers like RPS or UPS
     *
     * @return $this
     */
    public function setShippingZone($shipping_zone)
    {
        $this->container['shipping_zone'] = $shipping_zone;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return \DateTime
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param \DateTime $shipping_date Shipping date
     *
     * @return $this
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets shipping_time
     *
     * @return string
     */
    public function getShippingTime()
    {
        return $this->container['shipping_time'];
    }

    /**
     * Sets shipping_time
     *
     * @param string $shipping_time Shipping time (in HHMM format)
     *
     * @return $this
     */
    public function setShippingTime($shipping_time)
    {
        $this->container['shipping_time'] = $shipping_time;

        return $this;
    }

    /**
     * Gets ship_to_customer_number
     *
     * @return string
     */
    public function getShipToCustomerNumber()
    {
        return $this->container['ship_to_customer_number'];
    }

    /**
     * Sets ship_to_customer_number
     *
     * @param string $ship_to_customer_number Customer number of who the shipment is for
     *
     * @return $this
     */
    public function setShipToCustomerNumber($ship_to_customer_number)
    {
        $this->container['ship_to_customer_number'] = $ship_to_customer_number;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return double
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param double $total_weight Total weight
     *
     * @return $this
     */
    public function setTotalWeight($total_weight)
    {
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Tracking number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets warehouse_number
     *
     * @return string
     */
    public function getWarehouseNumber()
    {
        return $this->container['warehouse_number'];
    }

    /**
     * Sets warehouse_number
     *
     * @param string $warehouse_number Warehouse number that the shipment shipped from
     *
     * @return $this
     */
    public function setWarehouseNumber($warehouse_number)
    {
        $this->container['warehouse_number'] = $warehouse_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


