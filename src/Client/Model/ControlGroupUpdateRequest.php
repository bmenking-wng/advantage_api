<?php
/**
 * ControlGroupUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ControlGroupUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description Model for update of a Control Group
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ControlGroupUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ControlGroupUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totals' => '\Advantage\Client\Model\ControlGroupTotals',
        'defaults' => '\Advantage\Client\Model\ControlGroupDefaultsIn',
        'subscription_defaults' => '\Advantage\Client\Model\ControlGroupSubscriptionDefaultsIn',
        'subscription_audit_defaults' => '\Advantage\Client\Model\ControlGroupSubscriptionAuditDefaultsIn',
        'product_defaults' => '\Advantage\Client\Model\ControlGroupProductDefaultsIn',
        'membership_defaults' => '\Advantage\Client\Model\ControlGroupMembershipDefaults',
        'conference_defaults' => '\Advantage\Client\Model\ControlGroupConferenceDefaults',
        'owning_user_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totals' => null,
        'defaults' => null,
        'subscription_defaults' => null,
        'subscription_audit_defaults' => null,
        'product_defaults' => null,
        'membership_defaults' => null,
        'conference_defaults' => null,
        'owning_user_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totals' => 'Totals',
        'defaults' => 'Defaults',
        'subscription_defaults' => 'SubscriptionDefaults',
        'subscription_audit_defaults' => 'SubscriptionAuditDefaults',
        'product_defaults' => 'ProductDefaults',
        'membership_defaults' => 'MembershipDefaults',
        'conference_defaults' => 'ConferenceDefaults',
        'owning_user_code' => 'OwningUserCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totals' => 'setTotals',
        'defaults' => 'setDefaults',
        'subscription_defaults' => 'setSubscriptionDefaults',
        'subscription_audit_defaults' => 'setSubscriptionAuditDefaults',
        'product_defaults' => 'setProductDefaults',
        'membership_defaults' => 'setMembershipDefaults',
        'conference_defaults' => 'setConferenceDefaults',
        'owning_user_code' => 'setOwningUserCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totals' => 'getTotals',
        'defaults' => 'getDefaults',
        'subscription_defaults' => 'getSubscriptionDefaults',
        'subscription_audit_defaults' => 'getSubscriptionAuditDefaults',
        'product_defaults' => 'getProductDefaults',
        'membership_defaults' => 'getMembershipDefaults',
        'conference_defaults' => 'getConferenceDefaults',
        'owning_user_code' => 'getOwningUserCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['defaults'] = isset($data['defaults']) ? $data['defaults'] : null;
        $this->container['subscription_defaults'] = isset($data['subscription_defaults']) ? $data['subscription_defaults'] : null;
        $this->container['subscription_audit_defaults'] = isset($data['subscription_audit_defaults']) ? $data['subscription_audit_defaults'] : null;
        $this->container['product_defaults'] = isset($data['product_defaults']) ? $data['product_defaults'] : null;
        $this->container['membership_defaults'] = isset($data['membership_defaults']) ? $data['membership_defaults'] : null;
        $this->container['conference_defaults'] = isset($data['conference_defaults']) ? $data['conference_defaults'] : null;
        $this->container['owning_user_code'] = isset($data['owning_user_code']) ? $data['owning_user_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totals
     *
     * @return \Advantage\Client\Model\ControlGroupTotals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \Advantage\Client\Model\ControlGroupTotals $totals Control Totals
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets defaults
     *
     * @return \Advantage\Client\Model\ControlGroupDefaultsIn
     */
    public function getDefaults()
    {
        return $this->container['defaults'];
    }

    /**
     * Sets defaults
     *
     * @param \Advantage\Client\Model\ControlGroupDefaultsIn $defaults Defaults
     *
     * @return $this
     */
    public function setDefaults($defaults)
    {
        $this->container['defaults'] = $defaults;

        return $this;
    }

    /**
     * Gets subscription_defaults
     *
     * @return \Advantage\Client\Model\ControlGroupSubscriptionDefaultsIn
     */
    public function getSubscriptionDefaults()
    {
        return $this->container['subscription_defaults'];
    }

    /**
     * Sets subscription_defaults
     *
     * @param \Advantage\Client\Model\ControlGroupSubscriptionDefaultsIn $subscription_defaults Subscription Defaults
     *
     * @return $this
     */
    public function setSubscriptionDefaults($subscription_defaults)
    {
        $this->container['subscription_defaults'] = $subscription_defaults;

        return $this;
    }

    /**
     * Gets subscription_audit_defaults
     *
     * @return \Advantage\Client\Model\ControlGroupSubscriptionAuditDefaultsIn
     */
    public function getSubscriptionAuditDefaults()
    {
        return $this->container['subscription_audit_defaults'];
    }

    /**
     * Sets subscription_audit_defaults
     *
     * @param \Advantage\Client\Model\ControlGroupSubscriptionAuditDefaultsIn $subscription_audit_defaults Circulation Audit Defaults
     *
     * @return $this
     */
    public function setSubscriptionAuditDefaults($subscription_audit_defaults)
    {
        $this->container['subscription_audit_defaults'] = $subscription_audit_defaults;

        return $this;
    }

    /**
     * Gets product_defaults
     *
     * @return \Advantage\Client\Model\ControlGroupProductDefaultsIn
     */
    public function getProductDefaults()
    {
        return $this->container['product_defaults'];
    }

    /**
     * Sets product_defaults
     *
     * @param \Advantage\Client\Model\ControlGroupProductDefaultsIn $product_defaults Product Defaults
     *
     * @return $this
     */
    public function setProductDefaults($product_defaults)
    {
        $this->container['product_defaults'] = $product_defaults;

        return $this;
    }

    /**
     * Gets membership_defaults
     *
     * @return \Advantage\Client\Model\ControlGroupMembershipDefaults
     */
    public function getMembershipDefaults()
    {
        return $this->container['membership_defaults'];
    }

    /**
     * Sets membership_defaults
     *
     * @param \Advantage\Client\Model\ControlGroupMembershipDefaults $membership_defaults Membership organization default
     *
     * @return $this
     */
    public function setMembershipDefaults($membership_defaults)
    {
        $this->container['membership_defaults'] = $membership_defaults;

        return $this;
    }

    /**
     * Gets conference_defaults
     *
     * @return \Advantage\Client\Model\ControlGroupConferenceDefaults
     */
    public function getConferenceDefaults()
    {
        return $this->container['conference_defaults'];
    }

    /**
     * Sets conference_defaults
     *
     * @param \Advantage\Client\Model\ControlGroupConferenceDefaults $conference_defaults Conference Defaults
     *
     * @return $this
     */
    public function setConferenceDefaults($conference_defaults)
    {
        $this->container['conference_defaults'] = $conference_defaults;

        return $this;
    }

    /**
     * Gets owning_user_code
     *
     * @return string
     */
    public function getOwningUserCode()
    {
        return $this->container['owning_user_code'];
    }

    /**
     * Sets owning_user_code
     *
     * @param string $owning_user_code Owner user ID
     *
     * @return $this
     */
    public function setOwningUserCode($owning_user_code)
    {
        $this->container['owning_user_code'] = $owning_user_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


