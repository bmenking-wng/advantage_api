<?php
/**
 * AssociationLevel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AssociationLevel Class Doc Comment
 *
 * @category Class
 * @description Information for an associaton level.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssociationLevel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssociationLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'questionnaire_code' => 'string',
        'third_party_benefits' => '\Advantage\Client\Model\AssociationThirdPartyBenefit[]',
        'discount_benefits' => '\Advantage\Client\Model\AssociationDiscountBenefit[]',
        'components' => '\Advantage\Client\Model\AssociationLevelComponent[]',
        'customer_lists' => '\Advantage\Client\Model\AssociationLevelEmailList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'description' => null,
        'questionnaire_code' => null,
        'third_party_benefits' => null,
        'discount_benefits' => null,
        'components' => null,
        'customer_lists' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'description' => 'Description',
        'questionnaire_code' => 'QuestionnaireCode',
        'third_party_benefits' => 'ThirdPartyBenefits',
        'discount_benefits' => 'DiscountBenefits',
        'components' => 'Components',
        'customer_lists' => 'CustomerLists'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'questionnaire_code' => 'setQuestionnaireCode',
        'third_party_benefits' => 'setThirdPartyBenefits',
        'discount_benefits' => 'setDiscountBenefits',
        'components' => 'setComponents',
        'customer_lists' => 'setCustomerLists'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'questionnaire_code' => 'getQuestionnaireCode',
        'third_party_benefits' => 'getThirdPartyBenefits',
        'discount_benefits' => 'getDiscountBenefits',
        'components' => 'getComponents',
        'customer_lists' => 'getCustomerLists'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['questionnaire_code'] = isset($data['questionnaire_code']) ? $data['questionnaire_code'] : null;
        $this->container['third_party_benefits'] = isset($data['third_party_benefits']) ? $data['third_party_benefits'] : null;
        $this->container['discount_benefits'] = isset($data['discount_benefits']) ? $data['discount_benefits'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['customer_lists'] = isset($data['customer_lists']) ? $data['customer_lists'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The level code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The level name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The level description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets questionnaire_code
     *
     * @return string
     */
    public function getQuestionnaireCode()
    {
        return $this->container['questionnaire_code'];
    }

    /**
     * Sets questionnaire_code
     *
     * @param string $questionnaire_code The questionnaire code
     *
     * @return $this
     */
    public function setQuestionnaireCode($questionnaire_code)
    {
        $this->container['questionnaire_code'] = $questionnaire_code;

        return $this;
    }

    /**
     * Gets third_party_benefits
     *
     * @return \Advantage\Client\Model\AssociationThirdPartyBenefit[]
     */
    public function getThirdPartyBenefits()
    {
        return $this->container['third_party_benefits'];
    }

    /**
     * Sets third_party_benefits
     *
     * @param \Advantage\Client\Model\AssociationThirdPartyBenefit[] $third_party_benefits List of third-party benefits on both the association and level.  Third-party benefits may exist on both the association, across all levels, or on just the level.  This yields all third-party benefits that apply to this level.
     *
     * @return $this
     */
    public function setThirdPartyBenefits($third_party_benefits)
    {
        $this->container['third_party_benefits'] = $third_party_benefits;

        return $this;
    }

    /**
     * Gets discount_benefits
     *
     * @return \Advantage\Client\Model\AssociationDiscountBenefit[]
     */
    public function getDiscountBenefits()
    {
        return $this->container['discount_benefits'];
    }

    /**
     * Sets discount_benefits
     *
     * @param \Advantage\Client\Model\AssociationDiscountBenefit[] $discount_benefits List of discount benefits on both the association and level  Discount benefits may exist on both the association, across all levels, or on just the level.  This yields all discount benefits that apply to this level.
     *
     * @return $this
     */
    public function setDiscountBenefits($discount_benefits)
    {
        $this->container['discount_benefits'] = $discount_benefits;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Advantage\Client\Model\AssociationLevelComponent[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Advantage\Client\Model\AssociationLevelComponent[] $components List of association level components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets customer_lists
     *
     * @return \Advantage\Client\Model\AssociationLevelEmailList[]
     */
    public function getCustomerLists()
    {
        return $this->container['customer_lists'];
    }

    /**
     * Sets customer_lists
     *
     * @param \Advantage\Client\Model\AssociationLevelEmailList[] $customer_lists List of list codes of email lists
     *
     * @return $this
     */
    public function setCustomerLists($customer_lists)
    {
        $this->container['customer_lists'] = $customer_lists;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


