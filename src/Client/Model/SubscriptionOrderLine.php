<?php
/**
 * SubscriptionOrderLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SubscriptionOrderLine Class Doc Comment
 *
 * @category Class
 * @description Information about a subscription (CIR) order line
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionOrderLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionOrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'publication' => '\Advantage\Client\Model\PublicationSummary',
        'renewal_policy_code' => 'string',
        'starts' => '\DateTime',
        'subscription_type_code' => 'string',
        'delivery_code' => 'string',
        'subscription_expires' => '\DateTime',
        'is_modification' => 'bool',
        'membership_organization_code' => 'string',
        'operation_code' => 'string',
        'operation_name' => 'string',
        'profile_id' => 'string',
        'price_code' => 'string',
        'subscription_class' => 'string',
        'subscription_id' => 'string',
        'term_length' => 'int',
        'term_number' => 'int',
        'business_industry_code' => 'string',
        'rate' => 'double',
        'business_title_code' => 'string',
        'charge_category_code' => 'string',
        'subscription_status_code' => 'string',
        'promote_by_email' => 'string',
        'promote_by_fax' => 'string',
        'promote_by_mail' => 'string',
        'promote_by_phone' => 'string',
        'referred_by_customer_number' => 'string',
        'edition_code' => 'string',
        'gift_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'publication' => null,
        'renewal_policy_code' => null,
        'starts' => 'date-time',
        'subscription_type_code' => null,
        'delivery_code' => null,
        'subscription_expires' => 'date-time',
        'is_modification' => null,
        'membership_organization_code' => null,
        'operation_code' => null,
        'operation_name' => null,
        'profile_id' => null,
        'price_code' => null,
        'subscription_class' => null,
        'subscription_id' => null,
        'term_length' => 'int32',
        'term_number' => 'int32',
        'business_industry_code' => null,
        'rate' => 'double',
        'business_title_code' => null,
        'charge_category_code' => null,
        'subscription_status_code' => null,
        'promote_by_email' => null,
        'promote_by_fax' => null,
        'promote_by_mail' => null,
        'promote_by_phone' => null,
        'referred_by_customer_number' => null,
        'edition_code' => null,
        'gift_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'publication' => 'Publication',
        'renewal_policy_code' => 'RenewalPolicyCode',
        'starts' => 'Starts',
        'subscription_type_code' => 'SubscriptionTypeCode',
        'delivery_code' => 'DeliveryCode',
        'subscription_expires' => 'SubscriptionExpires',
        'is_modification' => 'IsModification',
        'membership_organization_code' => 'MembershipOrganizationCode',
        'operation_code' => 'OperationCode',
        'operation_name' => 'OperationName',
        'profile_id' => 'ProfileId',
        'price_code' => 'PriceCode',
        'subscription_class' => 'SubscriptionClass',
        'subscription_id' => 'SubscriptionId',
        'term_length' => 'TermLength',
        'term_number' => 'TermNumber',
        'business_industry_code' => 'BusinessIndustryCode',
        'rate' => 'Rate',
        'business_title_code' => 'BusinessTitleCode',
        'charge_category_code' => 'ChargeCategoryCode',
        'subscription_status_code' => 'SubscriptionStatusCode',
        'promote_by_email' => 'PromoteByEmail',
        'promote_by_fax' => 'PromoteByFax',
        'promote_by_mail' => 'PromoteByMail',
        'promote_by_phone' => 'PromoteByPhone',
        'referred_by_customer_number' => 'ReferredByCustomerNumber',
        'edition_code' => 'EditionCode',
        'gift_message' => 'GiftMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'publication' => 'setPublication',
        'renewal_policy_code' => 'setRenewalPolicyCode',
        'starts' => 'setStarts',
        'subscription_type_code' => 'setSubscriptionTypeCode',
        'delivery_code' => 'setDeliveryCode',
        'subscription_expires' => 'setSubscriptionExpires',
        'is_modification' => 'setIsModification',
        'membership_organization_code' => 'setMembershipOrganizationCode',
        'operation_code' => 'setOperationCode',
        'operation_name' => 'setOperationName',
        'profile_id' => 'setProfileId',
        'price_code' => 'setPriceCode',
        'subscription_class' => 'setSubscriptionClass',
        'subscription_id' => 'setSubscriptionId',
        'term_length' => 'setTermLength',
        'term_number' => 'setTermNumber',
        'business_industry_code' => 'setBusinessIndustryCode',
        'rate' => 'setRate',
        'business_title_code' => 'setBusinessTitleCode',
        'charge_category_code' => 'setChargeCategoryCode',
        'subscription_status_code' => 'setSubscriptionStatusCode',
        'promote_by_email' => 'setPromoteByEmail',
        'promote_by_fax' => 'setPromoteByFax',
        'promote_by_mail' => 'setPromoteByMail',
        'promote_by_phone' => 'setPromoteByPhone',
        'referred_by_customer_number' => 'setReferredByCustomerNumber',
        'edition_code' => 'setEditionCode',
        'gift_message' => 'setGiftMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'publication' => 'getPublication',
        'renewal_policy_code' => 'getRenewalPolicyCode',
        'starts' => 'getStarts',
        'subscription_type_code' => 'getSubscriptionTypeCode',
        'delivery_code' => 'getDeliveryCode',
        'subscription_expires' => 'getSubscriptionExpires',
        'is_modification' => 'getIsModification',
        'membership_organization_code' => 'getMembershipOrganizationCode',
        'operation_code' => 'getOperationCode',
        'operation_name' => 'getOperationName',
        'profile_id' => 'getProfileId',
        'price_code' => 'getPriceCode',
        'subscription_class' => 'getSubscriptionClass',
        'subscription_id' => 'getSubscriptionId',
        'term_length' => 'getTermLength',
        'term_number' => 'getTermNumber',
        'business_industry_code' => 'getBusinessIndustryCode',
        'rate' => 'getRate',
        'business_title_code' => 'getBusinessTitleCode',
        'charge_category_code' => 'getChargeCategoryCode',
        'subscription_status_code' => 'getSubscriptionStatusCode',
        'promote_by_email' => 'getPromoteByEmail',
        'promote_by_fax' => 'getPromoteByFax',
        'promote_by_mail' => 'getPromoteByMail',
        'promote_by_phone' => 'getPromoteByPhone',
        'referred_by_customer_number' => 'getReferredByCustomerNumber',
        'edition_code' => 'getEditionCode',
        'gift_message' => 'getGiftMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_CLASS_REGULAR = 'Regular';
    const SUBSCRIPTION_CLASS_DELAYED_START = 'DelayedStart';
    const SUBSCRIPTION_CLASS_MONTHLY_INVOICED = 'MonthlyInvoiced';
    const SUBSCRIPTION_CLASS_PERPETUAL = 'Perpetual';
    const SUBSCRIPTION_CLASS_QUALIFIED_NONPAID = 'QualifiedNonpaid';
    const SUBSCRIPTION_CLASS_AGREEMENT = 'Agreement';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionClassAllowableValues()
    {
        return [
            self::SUBSCRIPTION_CLASS_REGULAR,
            self::SUBSCRIPTION_CLASS_DELAYED_START,
            self::SUBSCRIPTION_CLASS_MONTHLY_INVOICED,
            self::SUBSCRIPTION_CLASS_PERPETUAL,
            self::SUBSCRIPTION_CLASS_QUALIFIED_NONPAID,
            self::SUBSCRIPTION_CLASS_AGREEMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['publication'] = isset($data['publication']) ? $data['publication'] : null;
        $this->container['renewal_policy_code'] = isset($data['renewal_policy_code']) ? $data['renewal_policy_code'] : null;
        $this->container['starts'] = isset($data['starts']) ? $data['starts'] : null;
        $this->container['subscription_type_code'] = isset($data['subscription_type_code']) ? $data['subscription_type_code'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['subscription_expires'] = isset($data['subscription_expires']) ? $data['subscription_expires'] : null;
        $this->container['is_modification'] = isset($data['is_modification']) ? $data['is_modification'] : null;
        $this->container['membership_organization_code'] = isset($data['membership_organization_code']) ? $data['membership_organization_code'] : null;
        $this->container['operation_code'] = isset($data['operation_code']) ? $data['operation_code'] : null;
        $this->container['operation_name'] = isset($data['operation_name']) ? $data['operation_name'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['price_code'] = isset($data['price_code']) ? $data['price_code'] : null;
        $this->container['subscription_class'] = isset($data['subscription_class']) ? $data['subscription_class'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['term_length'] = isset($data['term_length']) ? $data['term_length'] : null;
        $this->container['term_number'] = isset($data['term_number']) ? $data['term_number'] : null;
        $this->container['business_industry_code'] = isset($data['business_industry_code']) ? $data['business_industry_code'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['business_title_code'] = isset($data['business_title_code']) ? $data['business_title_code'] : null;
        $this->container['charge_category_code'] = isset($data['charge_category_code']) ? $data['charge_category_code'] : null;
        $this->container['subscription_status_code'] = isset($data['subscription_status_code']) ? $data['subscription_status_code'] : null;
        $this->container['promote_by_email'] = isset($data['promote_by_email']) ? $data['promote_by_email'] : null;
        $this->container['promote_by_fax'] = isset($data['promote_by_fax']) ? $data['promote_by_fax'] : null;
        $this->container['promote_by_mail'] = isset($data['promote_by_mail']) ? $data['promote_by_mail'] : null;
        $this->container['promote_by_phone'] = isset($data['promote_by_phone']) ? $data['promote_by_phone'] : null;
        $this->container['referred_by_customer_number'] = isset($data['referred_by_customer_number']) ? $data['referred_by_customer_number'] : null;
        $this->container['edition_code'] = isset($data['edition_code']) ? $data['edition_code'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubscriptionClassAllowableValues();
        if (!is_null($this->container['subscription_class']) && !in_array($this->container['subscription_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscription_class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets publication
     *
     * @return \Advantage\Client\Model\PublicationSummary
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \Advantage\Client\Model\PublicationSummary $publication The expected number of issues per year for the publication.
     *
     * @return $this
     */
    public function setPublication($publication)
    {
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets renewal_policy_code
     *
     * @return string
     */
    public function getRenewalPolicyCode()
    {
        return $this->container['renewal_policy_code'];
    }

    /**
     * Sets renewal_policy_code
     *
     * @param string $renewal_policy_code Indicates whether a renewal notice should be sent to the subscriber.
     *
     * @return $this
     */
    public function setRenewalPolicyCode($renewal_policy_code)
    {
        $this->container['renewal_policy_code'] = $renewal_policy_code;

        return $this;
    }

    /**
     * Gets starts
     *
     * @return \DateTime
     */
    public function getStarts()
    {
        return $this->container['starts'];
    }

    /**
     * Sets starts
     *
     * @param \DateTime $starts When the subscription/agreement starts; the start date maybe be assigned when the order line is created,   or it may be assigned (or updated) later when the order is posted.
     *
     * @return $this
     */
    public function setStarts($starts)
    {
        $this->container['starts'] = $starts;

        return $this;
    }

    /**
     * Gets subscription_type_code
     *
     * @return string
     */
    public function getSubscriptionTypeCode()
    {
        return $this->container['subscription_type_code'];
    }

    /**
     * Sets subscription_type_code
     *
     * @param string $subscription_type_code The subscription type code.
     *
     * @return $this
     */
    public function setSubscriptionTypeCode($subscription_type_code)
    {
        $this->container['subscription_type_code'] = $subscription_type_code;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code The subscription delivery code.
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets subscription_expires
     *
     * @return \DateTime
     */
    public function getSubscriptionExpires()
    {
        return $this->container['subscription_expires'];
    }

    /**
     * Sets subscription_expires
     *
     * @param \DateTime $subscription_expires The final expire date. For subscriptions, a final expire date will not be assigned at order entry time  unless the start date is assigned.
     *
     * @return $this
     */
    public function setSubscriptionExpires($subscription_expires)
    {
        $this->container['subscription_expires'] = $subscription_expires;

        return $this;
    }

    /**
     * Gets is_modification
     *
     * @return bool
     */
    public function getIsModification()
    {
        return $this->container['is_modification'];
    }

    /**
     * Sets is_modification
     *
     * @param bool $is_modification Is the current subscription order line a modification transaction?  A subscription  modification transaction changes an existing subscription without adding a new term.  (New subscriptions and renewals are not modification transactions.)
     *
     * @return $this
     */
    public function setIsModification($is_modification)
    {
        $this->container['is_modification'] = $is_modification;

        return $this;
    }

    /**
     * Gets membership_organization_code
     *
     * @return string
     */
    public function getMembershipOrganizationCode()
    {
        return $this->container['membership_organization_code'];
    }

    /**
     * Sets membership_organization_code
     *
     * @param string $membership_organization_code A membership organization associates the subscription with a membership.
     *
     * @return $this
     */
    public function setMembershipOrganizationCode($membership_organization_code)
    {
        $this->container['membership_organization_code'] = $membership_organization_code;

        return $this;
    }

    /**
     * Gets operation_code
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operation_code'];
    }

    /**
     * Sets operation_code
     *
     * @param string $operation_code The operation code indicates if the order line is a new individual subscription,  an individual renewal, an upgrade, a demographics-only change, etc.
     *
     * @return $this
     */
    public function setOperationCode($operation_code)
    {
        $this->container['operation_code'] = $operation_code;

        return $this;
    }

    /**
     * Gets operation_name
     *
     * @return string
     */
    public function getOperationName()
    {
        return $this->container['operation_name'];
    }

    /**
     * Sets operation_name
     *
     * @param string $operation_name The name of the operation code.
     *
     * @return $this
     */
    public function setOperationName($operation_name)
    {
        $this->container['operation_name'] = $operation_name;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The profile ID for the subscription order line.  Demographics  can be collected in a profile, which is a set of answers to questionnaire  questions.  Use the WebProfile class to create a profile and add responses.  Use WebQuestionnaire to get information about a questionnaire.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets price_code
     *
     * @return string
     */
    public function getPriceCode()
    {
        return $this->container['price_code'];
    }

    /**
     * Sets price_code
     *
     * @param string $price_code Price code, determining the unit price.
     *
     * @return $this
     */
    public function setPriceCode($price_code)
    {
        $this->container['price_code'] = $price_code;

        return $this;
    }

    /**
     * Gets subscription_class
     *
     * @return string
     */
    public function getSubscriptionClass()
    {
        return $this->container['subscription_class'];
    }

    /**
     * Sets subscription_class
     *
     * @param string $subscription_class The subscription class indicates whether the subscription is: R - a regular subscription,  Q - a qualified controlled subscription, L - a delayed start controlled subscription,  P - a perpetual subscription
     *
     * @return $this
     */
    public function setSubscriptionClass($subscription_class)
    {
        $allowedValues = $this->getSubscriptionClassAllowableValues();
        if (!is_null($subscription_class) && !in_array($subscription_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscription_class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscription_class'] = $subscription_class;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string $subscription_id The unique identifier for the subscription being added or updated by  the current subscription order line.
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets term_length
     *
     * @return int
     */
    public function getTermLength()
    {
        return $this->container['term_length'];
    }

    /**
     * Sets term_length
     *
     * @param int $term_length The subscription term (the number of issues).
     *
     * @return $this
     */
    public function setTermLength($term_length)
    {
        $this->container['term_length'] = $term_length;

        return $this;
    }

    /**
     * Gets term_number
     *
     * @return int
     */
    public function getTermNumber()
    {
        return $this->container['term_number'];
    }

    /**
     * Sets term_number
     *
     * @param int $term_number The term number gives an indicate of how many times the subscription has been renewed.
     *
     * @return $this
     */
    public function setTermNumber($term_number)
    {
        $this->container['term_number'] = $term_number;

        return $this;
    }

    /**
     * Gets business_industry_code
     *
     * @return string
     */
    public function getBusinessIndustryCode()
    {
        return $this->container['business_industry_code'];
    }

    /**
     * Sets business_industry_code
     *
     * @param string $business_industry_code The business industry demographic code.
     *
     * @return $this
     */
    public function setBusinessIndustryCode($business_industry_code)
    {
        $this->container['business_industry_code'] = $business_industry_code;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate The price of the magazine.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets business_title_code
     *
     * @return string
     */
    public function getBusinessTitleCode()
    {
        return $this->container['business_title_code'];
    }

    /**
     * Sets business_title_code
     *
     * @param string $business_title_code The business title demographic code.
     *
     * @return $this
     */
    public function setBusinessTitleCode($business_title_code)
    {
        $this->container['business_title_code'] = $business_title_code;

        return $this;
    }

    /**
     * Gets charge_category_code
     *
     * @return string
     */
    public function getChargeCategoryCode()
    {
        return $this->container['charge_category_code'];
    }

    /**
     * Sets charge_category_code
     *
     * @param string $charge_category_code The membership charge category.
     *
     * @return $this
     */
    public function setChargeCategoryCode($charge_category_code)
    {
        $this->container['charge_category_code'] = $charge_category_code;

        return $this;
    }

    /**
     * Gets subscription_status_code
     *
     * @return string
     */
    public function getSubscriptionStatusCode()
    {
        return $this->container['subscription_status_code'];
    }

    /**
     * Sets subscription_status_code
     *
     * @param string $subscription_status_code The current circulation status of the subscription being renewed (or blank).
     *
     * @return $this
     */
    public function setSubscriptionStatusCode($subscription_status_code)
    {
        $this->container['subscription_status_code'] = $subscription_status_code;

        return $this;
    }

    /**
     * Gets promote_by_email
     *
     * @return string
     */
    public function getPromoteByEmail()
    {
        return $this->container['promote_by_email'];
    }

    /**
     * Sets promote_by_email
     *
     * @param string $promote_by_email Should the subscriber be promoted by email?
     *
     * @return $this
     */
    public function setPromoteByEmail($promote_by_email)
    {
        $this->container['promote_by_email'] = $promote_by_email;

        return $this;
    }

    /**
     * Gets promote_by_fax
     *
     * @return string
     */
    public function getPromoteByFax()
    {
        return $this->container['promote_by_fax'];
    }

    /**
     * Sets promote_by_fax
     *
     * @param string $promote_by_fax Should the subscriber be promoted by fax?
     *
     * @return $this
     */
    public function setPromoteByFax($promote_by_fax)
    {
        $this->container['promote_by_fax'] = $promote_by_fax;

        return $this;
    }

    /**
     * Gets promote_by_mail
     *
     * @return string
     */
    public function getPromoteByMail()
    {
        return $this->container['promote_by_mail'];
    }

    /**
     * Sets promote_by_mail
     *
     * @param string $promote_by_mail Should the subscriber be promoted by mail?
     *
     * @return $this
     */
    public function setPromoteByMail($promote_by_mail)
    {
        $this->container['promote_by_mail'] = $promote_by_mail;

        return $this;
    }

    /**
     * Gets promote_by_phone
     *
     * @return string
     */
    public function getPromoteByPhone()
    {
        return $this->container['promote_by_phone'];
    }

    /**
     * Sets promote_by_phone
     *
     * @param string $promote_by_phone Should the subscriber be promoted by phone?
     *
     * @return $this
     */
    public function setPromoteByPhone($promote_by_phone)
    {
        $this->container['promote_by_phone'] = $promote_by_phone;

        return $this;
    }

    /**
     * Gets referred_by_customer_number
     *
     * @return string
     */
    public function getReferredByCustomerNumber()
    {
        return $this->container['referred_by_customer_number'];
    }

    /**
     * Sets referred_by_customer_number
     *
     * @param string $referred_by_customer_number The customer number of the reference customer.
     *
     * @return $this
     */
    public function setReferredByCustomerNumber($referred_by_customer_number)
    {
        $this->container['referred_by_customer_number'] = $referred_by_customer_number;

        return $this;
    }

    /**
     * Gets edition_code
     *
     * @return string
     */
    public function getEditionCode()
    {
        return $this->container['edition_code'];
    }

    /**
     * Sets edition_code
     *
     * @param string $edition_code The edition code.
     *
     * @return $this
     */
    public function setEditionCode($edition_code)
    {
        $this->container['edition_code'] = $edition_code;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message The gift message.
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


