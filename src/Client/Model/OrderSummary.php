<?php
/**
 * OrderSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderSummary Class Doc Comment
 *
 * @category Class
 * @description The summary information for an order.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_number' => 'string',
        'order_date' => '\DateTime',
        'shipping_date' => '\DateTime',
        'cost' => 'double',
        'bill_to_name' => 'string',
        'amount_due' => 'double',
        'currency_code' => 'string',
        'order_lines' => '\Advantage\Client\Model\OrderLineSummary[]',
        'order_type' => 'string',
        'payments_received' => 'double',
        'payments_recieved' => 'double',
        'installment_billing_code' => 'string',
        'next_payment_amount' => 'double',
        'is_posted' => 'bool',
        'promotion_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_number' => null,
        'order_date' => 'date-time',
        'shipping_date' => 'date-time',
        'cost' => 'double',
        'bill_to_name' => null,
        'amount_due' => 'double',
        'currency_code' => null,
        'order_lines' => null,
        'order_type' => null,
        'payments_received' => 'double',
        'payments_recieved' => 'double',
        'installment_billing_code' => null,
        'next_payment_amount' => 'double',
        'is_posted' => null,
        'promotion_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'OrderNumber',
        'order_date' => 'OrderDate',
        'shipping_date' => 'ShippingDate',
        'cost' => 'Cost',
        'bill_to_name' => 'BillToName',
        'amount_due' => 'AmountDue',
        'currency_code' => 'CurrencyCode',
        'order_lines' => 'OrderLines',
        'order_type' => 'OrderType',
        'payments_received' => 'PaymentsReceived',
        'payments_recieved' => 'PaymentsRecieved',
        'installment_billing_code' => 'InstallmentBillingCode',
        'next_payment_amount' => 'NextPaymentAmount',
        'is_posted' => 'IsPosted',
        'promotion_code' => 'PromotionCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'order_date' => 'setOrderDate',
        'shipping_date' => 'setShippingDate',
        'cost' => 'setCost',
        'bill_to_name' => 'setBillToName',
        'amount_due' => 'setAmountDue',
        'currency_code' => 'setCurrencyCode',
        'order_lines' => 'setOrderLines',
        'order_type' => 'setOrderType',
        'payments_received' => 'setPaymentsReceived',
        'payments_recieved' => 'setPaymentsRecieved',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'next_payment_amount' => 'setNextPaymentAmount',
        'is_posted' => 'setIsPosted',
        'promotion_code' => 'setPromotionCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'order_date' => 'getOrderDate',
        'shipping_date' => 'getShippingDate',
        'cost' => 'getCost',
        'bill_to_name' => 'getBillToName',
        'amount_due' => 'getAmountDue',
        'currency_code' => 'getCurrencyCode',
        'order_lines' => 'getOrderLines',
        'order_type' => 'getOrderType',
        'payments_received' => 'getPaymentsReceived',
        'payments_recieved' => 'getPaymentsRecieved',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'next_payment_amount' => 'getNextPaymentAmount',
        'is_posted' => 'getIsPosted',
        'promotion_code' => 'getPromotionCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_TYPE_CREDIT_MEMO_RETURN_ORDER = 'CreditMemoReturnOrder';
    const ORDER_TYPE_GRATIS_ORDER = 'GratisOrder';
    const ORDER_TYPE_INVOICEABLE_ORDER = 'InvoiceableOrder';
    const ORDER_TYPE_MODIFY_ORDER = 'ModifyOrder';
    const ORDER_TYPE_PRO_FORMA_ORDER = 'ProFormaOrder';
    const ORDER_TYPE_POST_SHIPPED_ORDER = 'PostShippedOrder';
    const ORDER_TYPE_REPEATING_ORDER = 'RepeatingOrder';
    const ORDER_TYPE_PREVIEW_ORDER = 'PreviewOrder';
    const ORDER_TYPE_WAREHOUSE_TRANSFER = 'WarehouseTransfer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_CREDIT_MEMO_RETURN_ORDER,
            self::ORDER_TYPE_GRATIS_ORDER,
            self::ORDER_TYPE_INVOICEABLE_ORDER,
            self::ORDER_TYPE_MODIFY_ORDER,
            self::ORDER_TYPE_PRO_FORMA_ORDER,
            self::ORDER_TYPE_POST_SHIPPED_ORDER,
            self::ORDER_TYPE_REPEATING_ORDER,
            self::ORDER_TYPE_PREVIEW_ORDER,
            self::ORDER_TYPE_WAREHOUSE_TRANSFER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['shipping_date'] = isset($data['shipping_date']) ? $data['shipping_date'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['bill_to_name'] = isset($data['bill_to_name']) ? $data['bill_to_name'] : null;
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['payments_received'] = isset($data['payments_received']) ? $data['payments_received'] : null;
        $this->container['payments_recieved'] = isset($data['payments_recieved']) ? $data['payments_recieved'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['next_payment_amount'] = isset($data['next_payment_amount']) ? $data['next_payment_amount'] : null;
        $this->container['is_posted'] = isset($data['is_posted']) ? $data['is_posted'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number The order number.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date The date the order was placed.
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return \DateTime
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param \DateTime $shipping_date The date the order was/will shipped/ship
     *
     * @return $this
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost The total cost of the order.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets bill_to_name
     *
     * @return string
     */
    public function getBillToName()
    {
        return $this->container['bill_to_name'];
    }

    /**
     * Sets bill_to_name
     *
     * @param string $bill_to_name The name of the customer billed for the order.
     *
     * @return $this
     */
    public function setBillToName($bill_to_name)
    {
        $this->container['bill_to_name'] = $bill_to_name;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return double
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param double $amount_due The amount due on the order.
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The billing currency code for this order.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Advantage\Client\Model\OrderLineSummary[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Advantage\Client\Model\OrderLineSummary[] $order_lines The summary information for the order lines.
     *
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type The summary information for the order lines.
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets payments_received
     *
     * @return double
     */
    public function getPaymentsReceived()
    {
        return $this->container['payments_received'];
    }

    /**
     * Sets payments_received
     *
     * @param double $payments_received The total of payments received for this order, including pending payments
     *
     * @return $this
     */
    public function setPaymentsReceived($payments_received)
    {
        $this->container['payments_received'] = $payments_received;

        return $this;
    }

    /**
     * Gets payments_recieved
     *
     * @return double
     */
    public function getPaymentsRecieved()
    {
        return $this->container['payments_recieved'];
    }

    /**
     * Sets payments_recieved
     *
     * @param double $payments_recieved The total of payments received for this order, including pending payments.    This property is deprecated; use PaymentsReceived
     *
     * @return $this
     */
    public function setPaymentsRecieved($payments_recieved)
    {
        $this->container['payments_recieved'] = $payments_recieved;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code 
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets next_payment_amount
     *
     * @return double
     */
    public function getNextPaymentAmount()
    {
        return $this->container['next_payment_amount'];
    }

    /**
     * Sets next_payment_amount
     *
     * @param double $next_payment_amount 
     *
     * @return $this
     */
    public function setNextPaymentAmount($next_payment_amount)
    {
        $this->container['next_payment_amount'] = $next_payment_amount;

        return $this;
    }

    /**
     * Gets is_posted
     *
     * @return bool
     */
    public function getIsPosted()
    {
        return $this->container['is_posted'];
    }

    /**
     * Sets is_posted
     *
     * @param bool $is_posted True if order is posted
     *
     * @return $this
     */
    public function setIsPosted($is_posted)
    {
        $this->container['is_posted'] = $is_posted;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Sales promotion effort to be credited a particular sale.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


