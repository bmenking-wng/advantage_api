<?php
/**
 * ConvertCartToOrderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConvertCartToOrderRequest Class Doc Comment
 *
 * @category Class
 * @description Information for converting a shopping card into an order.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConvertCartToOrderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConvertCartToOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_to_customer_number' => 'string',
        'ship_to_customer_number' => 'string',
        'currency_code' => 'string',
        'bill_to_address_code' => 'string',
        'ship_to_address_code' => 'string',
        'promotion_code' => 'string',
        'free_shipping' => 'bool',
        'discount_percent' => 'double',
        'delete_cart' => 'bool',
        'sales_rep_code' => 'string',
        'installment_billing_code' => 'string',
        'purge_pending_orders' => 'bool',
        'referred_by_customer_number' => 'string',
        'order_source_code' => 'string',
        'billing_organization_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bill_to_customer_number' => null,
        'ship_to_customer_number' => null,
        'currency_code' => null,
        'bill_to_address_code' => null,
        'ship_to_address_code' => null,
        'promotion_code' => null,
        'free_shipping' => null,
        'discount_percent' => 'double',
        'delete_cart' => null,
        'sales_rep_code' => null,
        'installment_billing_code' => null,
        'purge_pending_orders' => null,
        'referred_by_customer_number' => null,
        'order_source_code' => null,
        'billing_organization_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_to_customer_number' => 'BillToCustomerNumber',
        'ship_to_customer_number' => 'ShipToCustomerNumber',
        'currency_code' => 'CurrencyCode',
        'bill_to_address_code' => 'BillToAddressCode',
        'ship_to_address_code' => 'ShipToAddressCode',
        'promotion_code' => 'PromotionCode',
        'free_shipping' => 'FreeShipping',
        'discount_percent' => 'DiscountPercent',
        'delete_cart' => 'DeleteCart',
        'sales_rep_code' => 'SalesRepCode',
        'installment_billing_code' => 'InstallmentBillingCode',
        'purge_pending_orders' => 'PurgePendingOrders',
        'referred_by_customer_number' => 'ReferredByCustomerNumber',
        'order_source_code' => 'OrderSourceCode',
        'billing_organization_code' => 'BillingOrganizationCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bill_to_customer_number' => 'setBillToCustomerNumber',
        'ship_to_customer_number' => 'setShipToCustomerNumber',
        'currency_code' => 'setCurrencyCode',
        'bill_to_address_code' => 'setBillToAddressCode',
        'ship_to_address_code' => 'setShipToAddressCode',
        'promotion_code' => 'setPromotionCode',
        'free_shipping' => 'setFreeShipping',
        'discount_percent' => 'setDiscountPercent',
        'delete_cart' => 'setDeleteCart',
        'sales_rep_code' => 'setSalesRepCode',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'purge_pending_orders' => 'setPurgePendingOrders',
        'referred_by_customer_number' => 'setReferredByCustomerNumber',
        'order_source_code' => 'setOrderSourceCode',
        'billing_organization_code' => 'setBillingOrganizationCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bill_to_customer_number' => 'getBillToCustomerNumber',
        'ship_to_customer_number' => 'getShipToCustomerNumber',
        'currency_code' => 'getCurrencyCode',
        'bill_to_address_code' => 'getBillToAddressCode',
        'ship_to_address_code' => 'getShipToAddressCode',
        'promotion_code' => 'getPromotionCode',
        'free_shipping' => 'getFreeShipping',
        'discount_percent' => 'getDiscountPercent',
        'delete_cart' => 'getDeleteCart',
        'sales_rep_code' => 'getSalesRepCode',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'purge_pending_orders' => 'getPurgePendingOrders',
        'referred_by_customer_number' => 'getReferredByCustomerNumber',
        'order_source_code' => 'getOrderSourceCode',
        'billing_organization_code' => 'getBillingOrganizationCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_to_customer_number'] = isset($data['bill_to_customer_number']) ? $data['bill_to_customer_number'] : null;
        $this->container['ship_to_customer_number'] = isset($data['ship_to_customer_number']) ? $data['ship_to_customer_number'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['bill_to_address_code'] = isset($data['bill_to_address_code']) ? $data['bill_to_address_code'] : null;
        $this->container['ship_to_address_code'] = isset($data['ship_to_address_code']) ? $data['ship_to_address_code'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['free_shipping'] = isset($data['free_shipping']) ? $data['free_shipping'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['delete_cart'] = isset($data['delete_cart']) ? $data['delete_cart'] : null;
        $this->container['sales_rep_code'] = isset($data['sales_rep_code']) ? $data['sales_rep_code'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['purge_pending_orders'] = isset($data['purge_pending_orders']) ? $data['purge_pending_orders'] : null;
        $this->container['referred_by_customer_number'] = isset($data['referred_by_customer_number']) ? $data['referred_by_customer_number'] : null;
        $this->container['order_source_code'] = isset($data['order_source_code']) ? $data['order_source_code'] : null;
        $this->container['billing_organization_code'] = isset($data['billing_organization_code']) ? $data['billing_organization_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill_to_customer_number
     *
     * @return string
     */
    public function getBillToCustomerNumber()
    {
        return $this->container['bill_to_customer_number'];
    }

    /**
     * Sets bill_to_customer_number
     *
     * @param string $bill_to_customer_number The customer number of the bill-to on the order. Leave blank (\"\") to use the value already set   on the Advantage shopping cart.
     *
     * @return $this
     */
    public function setBillToCustomerNumber($bill_to_customer_number)
    {
        $this->container['bill_to_customer_number'] = $bill_to_customer_number;

        return $this;
    }

    /**
     * Gets ship_to_customer_number
     *
     * @return string
     */
    public function getShipToCustomerNumber()
    {
        return $this->container['ship_to_customer_number'];
    }

    /**
     * Sets ship_to_customer_number
     *
     * @param string $ship_to_customer_number The customer number of the ship-to on the order. Leave blank (\"\") to use the value already set     on the Advantage shopping cart.
     *
     * @return $this
     */
    public function setShipToCustomerNumber($ship_to_customer_number)
    {
        $this->container['ship_to_customer_number'] = $ship_to_customer_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The billing currency code to use for the Advantage order. Leave blank (\"\") to use the value already  set on the Advantage shopping cart.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets bill_to_address_code
     *
     * @return string
     */
    public function getBillToAddressCode()
    {
        return $this->container['bill_to_address_code'];
    }

    /**
     * Sets bill_to_address_code
     *
     * @param string $bill_to_address_code The Address code for the bill-to address. Leave blank (\"\") to use the value already set on the Advantage   shopping cart.
     *
     * @return $this
     */
    public function setBillToAddressCode($bill_to_address_code)
    {
        $this->container['bill_to_address_code'] = $bill_to_address_code;

        return $this;
    }

    /**
     * Gets ship_to_address_code
     *
     * @return string
     */
    public function getShipToAddressCode()
    {
        return $this->container['ship_to_address_code'];
    }

    /**
     * Sets ship_to_address_code
     *
     * @param string $ship_to_address_code The Address code for the ship-to address. Leave blank (\"\") to use the value already set on the Advantage   shopping cart.
     *
     * @return $this
     */
    public function setShipToAddressCode($ship_to_address_code)
    {
        $this->container['ship_to_address_code'] = $ship_to_address_code;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code for the order. Leave blank (\"\") to use the value already set on the Advantage shopping   cart.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool $free_shipping Whether or not the order will charge shipping. Omit to assume default (false).
     *
     * @return $this
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Populate to apply an order-wide discount. Omit to assume default (0%).
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets delete_cart
     *
     * @return bool
     */
    public function getDeleteCart()
    {
        return $this->container['delete_cart'];
    }

    /**
     * Sets delete_cart
     *
     * @param bool $delete_cart Whether or not to delete the cart, once the order is successfully created. Omit to assume default (true).
     *
     * @return $this
     */
    public function setDeleteCart($delete_cart)
    {
        $this->container['delete_cart'] = $delete_cart;

        return $this;
    }

    /**
     * Gets sales_rep_code
     *
     * @return string
     */
    public function getSalesRepCode()
    {
        return $this->container['sales_rep_code'];
    }

    /**
     * Sets sales_rep_code
     *
     * @param string $sales_rep_code The Sales Rep who will get credit for the order. Leave blank (\"\") to use the value already set on the   Advantage shopping cart.
     *
     * @return $this
     */
    public function setSalesRepCode($sales_rep_code)
    {
        $this->container['sales_rep_code'] = $sales_rep_code;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code If order is to be paid via installments, this is the Advantage installment billing code. Leave blank (\"\")   or omit to use the value already set on the Advantage shopping cart.
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets purge_pending_orders
     *
     * @return bool
     */
    public function getPurgePendingOrders()
    {
        return $this->container['purge_pending_orders'];
    }

    /**
     * Sets purge_pending_orders
     *
     * @param bool $purge_pending_orders Whether or not to purge other pending orders with the same bill-to as this order-to-be. Omit to use   default (true).
     *
     * @return $this
     */
    public function setPurgePendingOrders($purge_pending_orders)
    {
        $this->container['purge_pending_orders'] = $purge_pending_orders;

        return $this;
    }

    /**
     * Gets referred_by_customer_number
     *
     * @return string
     */
    public function getReferredByCustomerNumber()
    {
        return $this->container['referred_by_customer_number'];
    }

    /**
     * Sets referred_by_customer_number
     *
     * @param string $referred_by_customer_number The customer number of the referring customer. Leave blank (\"\") or omit to use the value already set on   the Advantage shopping cart.
     *
     * @return $this
     */
    public function setReferredByCustomerNumber($referred_by_customer_number)
    {
        $this->container['referred_by_customer_number'] = $referred_by_customer_number;

        return $this;
    }

    /**
     * Gets order_source_code
     *
     * @return string
     */
    public function getOrderSourceCode()
    {
        return $this->container['order_source_code'];
    }

    /**
     * Sets order_source_code
     *
     * @param string $order_source_code The Advantage order source code of the order.  Omit to use the default.
     *
     * @return $this
     */
    public function setOrderSourceCode($order_source_code)
    {
        $this->container['order_source_code'] = $order_source_code;

        return $this;
    }

    /**
     * Gets billing_organization_code
     *
     * @return string
     */
    public function getBillingOrganizationCode()
    {
        return $this->container['billing_organization_code'];
    }

    /**
     * Sets billing_organization_code
     *
     * @param string $billing_organization_code The billing organization of the order.  Leave blank or omit to use the default.
     *
     * @return $this
     */
    public function setBillingOrganizationCode($billing_organization_code)
    {
        $this->container['billing_organization_code'] = $billing_organization_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


