<?php
/**
 * OrderInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderInvoice Class Doc Comment
 *
 * @category Class
 * @description An invoice for a customer transaction
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debit_number' => 'string',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressKey',
        'due_date' => '\DateTime',
        'currency_code' => 'string',
        'invoice_amount' => 'double',
        'amount_due' => 'double',
        'amount_paid' => 'double',
        'discount_amount' => 'double',
        'early_payment_discount_available' => 'double',
        'early_payment_discount_date' => '\DateTime',
        'installments' => '\Advantage\Client\Model\OrderInvoiceInstallment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debit_number' => null,
        'bill_to' => null,
        'due_date' => 'date-time',
        'currency_code' => null,
        'invoice_amount' => 'double',
        'amount_due' => 'double',
        'amount_paid' => 'double',
        'discount_amount' => 'double',
        'early_payment_discount_available' => 'double',
        'early_payment_discount_date' => 'date-time',
        'installments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debit_number' => 'DebitNumber',
        'bill_to' => 'BillTo',
        'due_date' => 'DueDate',
        'currency_code' => 'CurrencyCode',
        'invoice_amount' => 'InvoiceAmount',
        'amount_due' => 'AmountDue',
        'amount_paid' => 'AmountPaid',
        'discount_amount' => 'DiscountAmount',
        'early_payment_discount_available' => 'EarlyPaymentDiscountAvailable',
        'early_payment_discount_date' => 'EarlyPaymentDiscountDate',
        'installments' => 'Installments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debit_number' => 'setDebitNumber',
        'bill_to' => 'setBillTo',
        'due_date' => 'setDueDate',
        'currency_code' => 'setCurrencyCode',
        'invoice_amount' => 'setInvoiceAmount',
        'amount_due' => 'setAmountDue',
        'amount_paid' => 'setAmountPaid',
        'discount_amount' => 'setDiscountAmount',
        'early_payment_discount_available' => 'setEarlyPaymentDiscountAvailable',
        'early_payment_discount_date' => 'setEarlyPaymentDiscountDate',
        'installments' => 'setInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debit_number' => 'getDebitNumber',
        'bill_to' => 'getBillTo',
        'due_date' => 'getDueDate',
        'currency_code' => 'getCurrencyCode',
        'invoice_amount' => 'getInvoiceAmount',
        'amount_due' => 'getAmountDue',
        'amount_paid' => 'getAmountPaid',
        'discount_amount' => 'getDiscountAmount',
        'early_payment_discount_available' => 'getEarlyPaymentDiscountAvailable',
        'early_payment_discount_date' => 'getEarlyPaymentDiscountDate',
        'installments' => 'getInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debit_number'] = isset($data['debit_number']) ? $data['debit_number'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['invoice_amount'] = isset($data['invoice_amount']) ? $data['invoice_amount'] : null;
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['early_payment_discount_available'] = isset($data['early_payment_discount_available']) ? $data['early_payment_discount_available'] : null;
        $this->container['early_payment_discount_date'] = isset($data['early_payment_discount_date']) ? $data['early_payment_discount_date'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debit_number
     *
     * @return string
     */
    public function getDebitNumber()
    {
        return $this->container['debit_number'];
    }

    /**
     * Sets debit_number
     *
     * @param string $debit_number Debit number
     *
     * @return $this
     */
    public function setDebitNumber($debit_number)
    {
        $this->container['debit_number'] = $debit_number;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $bill_to Customer number
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Due Date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Currency
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets invoice_amount
     *
     * @return double
     */
    public function getInvoiceAmount()
    {
        return $this->container['invoice_amount'];
    }

    /**
     * Sets invoice_amount
     *
     * @param double $invoice_amount Invoice amount
     *
     * @return $this
     */
    public function setInvoiceAmount($invoice_amount)
    {
        $this->container['invoice_amount'] = $invoice_amount;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return double
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param double $amount_due Total amount remaining to be paid
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return double
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param double $amount_paid Amount paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Total of discounts applied
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets early_payment_discount_available
     *
     * @return double
     */
    public function getEarlyPaymentDiscountAvailable()
    {
        return $this->container['early_payment_discount_available'];
    }

    /**
     * Sets early_payment_discount_available
     *
     * @param double $early_payment_discount_available Available early payment discount on invoice
     *
     * @return $this
     */
    public function setEarlyPaymentDiscountAvailable($early_payment_discount_available)
    {
        $this->container['early_payment_discount_available'] = $early_payment_discount_available;

        return $this;
    }

    /**
     * Gets early_payment_discount_date
     *
     * @return \DateTime
     */
    public function getEarlyPaymentDiscountDate()
    {
        return $this->container['early_payment_discount_date'];
    }

    /**
     * Sets early_payment_discount_date
     *
     * @param \DateTime $early_payment_discount_date Date after which early payment discount expires
     *
     * @return $this
     */
    public function setEarlyPaymentDiscountDate($early_payment_discount_date)
    {
        $this->container['early_payment_discount_date'] = $early_payment_discount_date;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Advantage\Client\Model\OrderInvoiceInstallment[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Advantage\Client\Model\OrderInvoiceInstallment[] $installments Invoice installment details, for installment billed invoices.
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


