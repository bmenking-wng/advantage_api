<?php
/**
 * Call
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Call Class Doc Comment
 *
 * @category Class
 * @description Data transfer object for Call data
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Call implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Call';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_code' => 'string',
        'callback_date' => '\DateTime',
        'call_outcome' => 'string',
        'call_priority' => 'int',
        'contact_comment_line1' => 'string',
        'contact_comment_line2' => 'string',
        'customer_number' => 'string',
        'date_called' => '\DateTime',
        'item_status' => 'string',
        'list_date' => '\DateTime',
        'list_id' => 'string',
        'promotion_code' => 'string',
        'reason_refused' => 'string',
        'resolution' => 'string',
        'sales_rep' => 'string',
        'sales_rep_credited_with_sale' => 'string',
        'call_source' => 'string',
        'source_note' => 'string',
        'customer_name' => 'string',
        'list_description' => 'string',
        'is_inbound' => 'bool',
        'times_called' => 'int',
        'last_callback_outcome' => 'string',
        'email_address' => 'string',
        'state_code' => 'string',
        'country_code' => 'string',
        'time_zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_code' => null,
        'callback_date' => 'date-time',
        'call_outcome' => null,
        'call_priority' => 'int32',
        'contact_comment_line1' => null,
        'contact_comment_line2' => null,
        'customer_number' => null,
        'date_called' => 'date-time',
        'item_status' => null,
        'list_date' => 'date-time',
        'list_id' => null,
        'promotion_code' => null,
        'reason_refused' => null,
        'resolution' => null,
        'sales_rep' => null,
        'sales_rep_credited_with_sale' => null,
        'call_source' => null,
        'source_note' => null,
        'customer_name' => null,
        'list_description' => null,
        'is_inbound' => null,
        'times_called' => 'int32',
        'last_callback_outcome' => null,
        'email_address' => null,
        'state_code' => null,
        'country_code' => null,
        'time_zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_code' => 'AddressCode',
        'callback_date' => 'CallbackDate',
        'call_outcome' => 'CallOutcome',
        'call_priority' => 'CallPriority',
        'contact_comment_line1' => 'ContactCommentLine1',
        'contact_comment_line2' => 'ContactCommentLine2',
        'customer_number' => 'CustomerNumber',
        'date_called' => 'DateCalled',
        'item_status' => 'ItemStatus',
        'list_date' => 'ListDate',
        'list_id' => 'ListId',
        'promotion_code' => 'PromotionCode',
        'reason_refused' => 'ReasonRefused',
        'resolution' => 'Resolution',
        'sales_rep' => 'SalesRep',
        'sales_rep_credited_with_sale' => 'SalesRepCreditedWithSale',
        'call_source' => 'CallSource',
        'source_note' => 'SourceNote',
        'customer_name' => 'CustomerName',
        'list_description' => 'ListDescription',
        'is_inbound' => 'IsInbound',
        'times_called' => 'TimesCalled',
        'last_callback_outcome' => 'LastCallbackOutcome',
        'email_address' => 'EmailAddress',
        'state_code' => 'StateCode',
        'country_code' => 'CountryCode',
        'time_zone' => 'TimeZone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_code' => 'setAddressCode',
        'callback_date' => 'setCallbackDate',
        'call_outcome' => 'setCallOutcome',
        'call_priority' => 'setCallPriority',
        'contact_comment_line1' => 'setContactCommentLine1',
        'contact_comment_line2' => 'setContactCommentLine2',
        'customer_number' => 'setCustomerNumber',
        'date_called' => 'setDateCalled',
        'item_status' => 'setItemStatus',
        'list_date' => 'setListDate',
        'list_id' => 'setListId',
        'promotion_code' => 'setPromotionCode',
        'reason_refused' => 'setReasonRefused',
        'resolution' => 'setResolution',
        'sales_rep' => 'setSalesRep',
        'sales_rep_credited_with_sale' => 'setSalesRepCreditedWithSale',
        'call_source' => 'setCallSource',
        'source_note' => 'setSourceNote',
        'customer_name' => 'setCustomerName',
        'list_description' => 'setListDescription',
        'is_inbound' => 'setIsInbound',
        'times_called' => 'setTimesCalled',
        'last_callback_outcome' => 'setLastCallbackOutcome',
        'email_address' => 'setEmailAddress',
        'state_code' => 'setStateCode',
        'country_code' => 'setCountryCode',
        'time_zone' => 'setTimeZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_code' => 'getAddressCode',
        'callback_date' => 'getCallbackDate',
        'call_outcome' => 'getCallOutcome',
        'call_priority' => 'getCallPriority',
        'contact_comment_line1' => 'getContactCommentLine1',
        'contact_comment_line2' => 'getContactCommentLine2',
        'customer_number' => 'getCustomerNumber',
        'date_called' => 'getDateCalled',
        'item_status' => 'getItemStatus',
        'list_date' => 'getListDate',
        'list_id' => 'getListId',
        'promotion_code' => 'getPromotionCode',
        'reason_refused' => 'getReasonRefused',
        'resolution' => 'getResolution',
        'sales_rep' => 'getSalesRep',
        'sales_rep_credited_with_sale' => 'getSalesRepCreditedWithSale',
        'call_source' => 'getCallSource',
        'source_note' => 'getSourceNote',
        'customer_name' => 'getCustomerName',
        'list_description' => 'getListDescription',
        'is_inbound' => 'getIsInbound',
        'times_called' => 'getTimesCalled',
        'last_callback_outcome' => 'getLastCallbackOutcome',
        'email_address' => 'getEmailAddress',
        'state_code' => 'getStateCode',
        'country_code' => 'getCountryCode',
        'time_zone' => 'getTimeZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_code'] = isset($data['address_code']) ? $data['address_code'] : null;
        $this->container['callback_date'] = isset($data['callback_date']) ? $data['callback_date'] : null;
        $this->container['call_outcome'] = isset($data['call_outcome']) ? $data['call_outcome'] : null;
        $this->container['call_priority'] = isset($data['call_priority']) ? $data['call_priority'] : null;
        $this->container['contact_comment_line1'] = isset($data['contact_comment_line1']) ? $data['contact_comment_line1'] : null;
        $this->container['contact_comment_line2'] = isset($data['contact_comment_line2']) ? $data['contact_comment_line2'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['date_called'] = isset($data['date_called']) ? $data['date_called'] : null;
        $this->container['item_status'] = isset($data['item_status']) ? $data['item_status'] : null;
        $this->container['list_date'] = isset($data['list_date']) ? $data['list_date'] : null;
        $this->container['list_id'] = isset($data['list_id']) ? $data['list_id'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['reason_refused'] = isset($data['reason_refused']) ? $data['reason_refused'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['sales_rep'] = isset($data['sales_rep']) ? $data['sales_rep'] : null;
        $this->container['sales_rep_credited_with_sale'] = isset($data['sales_rep_credited_with_sale']) ? $data['sales_rep_credited_with_sale'] : null;
        $this->container['call_source'] = isset($data['call_source']) ? $data['call_source'] : null;
        $this->container['source_note'] = isset($data['source_note']) ? $data['source_note'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['list_description'] = isset($data['list_description']) ? $data['list_description'] : null;
        $this->container['is_inbound'] = isset($data['is_inbound']) ? $data['is_inbound'] : null;
        $this->container['times_called'] = isset($data['times_called']) ? $data['times_called'] : null;
        $this->container['last_callback_outcome'] = isset($data['last_callback_outcome']) ? $data['last_callback_outcome'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_code
     *
     * @return string
     */
    public function getAddressCode()
    {
        return $this->container['address_code'];
    }

    /**
     * Sets address_code
     *
     * @param string $address_code Address Code
     *
     * @return $this
     */
    public function setAddressCode($address_code)
    {
        $this->container['address_code'] = $address_code;

        return $this;
    }

    /**
     * Gets callback_date
     *
     * @return \DateTime
     */
    public function getCallbackDate()
    {
        return $this->container['callback_date'];
    }

    /**
     * Sets callback_date
     *
     * @param \DateTime $callback_date Callback Date
     *
     * @return $this
     */
    public function setCallbackDate($callback_date)
    {
        $this->container['callback_date'] = $callback_date;

        return $this;
    }

    /**
     * Gets call_outcome
     *
     * @return string
     */
    public function getCallOutcome()
    {
        return $this->container['call_outcome'];
    }

    /**
     * Sets call_outcome
     *
     * @param string $call_outcome Call Outcome
     *
     * @return $this
     */
    public function setCallOutcome($call_outcome)
    {
        $this->container['call_outcome'] = $call_outcome;

        return $this;
    }

    /**
     * Gets call_priority
     *
     * @return int
     */
    public function getCallPriority()
    {
        return $this->container['call_priority'];
    }

    /**
     * Sets call_priority
     *
     * @param int $call_priority Call Priority
     *
     * @return $this
     */
    public function setCallPriority($call_priority)
    {
        $this->container['call_priority'] = $call_priority;

        return $this;
    }

    /**
     * Gets contact_comment_line1
     *
     * @return string
     */
    public function getContactCommentLine1()
    {
        return $this->container['contact_comment_line1'];
    }

    /**
     * Sets contact_comment_line1
     *
     * @param string $contact_comment_line1 Contact Comment
     *
     * @return $this
     */
    public function setContactCommentLine1($contact_comment_line1)
    {
        $this->container['contact_comment_line1'] = $contact_comment_line1;

        return $this;
    }

    /**
     * Gets contact_comment_line2
     *
     * @return string
     */
    public function getContactCommentLine2()
    {
        return $this->container['contact_comment_line2'];
    }

    /**
     * Sets contact_comment_line2
     *
     * @param string $contact_comment_line2 Contact Comment
     *
     * @return $this
     */
    public function setContactCommentLine2($contact_comment_line2)
    {
        $this->container['contact_comment_line2'] = $contact_comment_line2;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Customer Number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets date_called
     *
     * @return \DateTime
     */
    public function getDateCalled()
    {
        return $this->container['date_called'];
    }

    /**
     * Sets date_called
     *
     * @param \DateTime $date_called Date Called
     *
     * @return $this
     */
    public function setDateCalled($date_called)
    {
        $this->container['date_called'] = $date_called;

        return $this;
    }

    /**
     * Gets item_status
     *
     * @return string
     */
    public function getItemStatus()
    {
        return $this->container['item_status'];
    }

    /**
     * Sets item_status
     *
     * @param string $item_status Item Status
     *
     * @return $this
     */
    public function setItemStatus($item_status)
    {
        $this->container['item_status'] = $item_status;

        return $this;
    }

    /**
     * Gets list_date
     *
     * @return \DateTime
     */
    public function getListDate()
    {
        return $this->container['list_date'];
    }

    /**
     * Sets list_date
     *
     * @param \DateTime $list_date List Date
     *
     * @return $this
     */
    public function setListDate($list_date)
    {
        $this->container['list_date'] = $list_date;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return string
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param string $list_id List ID
     *
     * @return $this
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion Code
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets reason_refused
     *
     * @return string
     */
    public function getReasonRefused()
    {
        return $this->container['reason_refused'];
    }

    /**
     * Sets reason_refused
     *
     * @param string $reason_refused Reason Refused
     *
     * @return $this
     */
    public function setReasonRefused($reason_refused)
    {
        $this->container['reason_refused'] = $reason_refused;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string $resolution Resolution
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets sales_rep
     *
     * @return string
     */
    public function getSalesRep()
    {
        return $this->container['sales_rep'];
    }

    /**
     * Sets sales_rep
     *
     * @param string $sales_rep Sales Rep
     *
     * @return $this
     */
    public function setSalesRep($sales_rep)
    {
        $this->container['sales_rep'] = $sales_rep;

        return $this;
    }

    /**
     * Gets sales_rep_credited_with_sale
     *
     * @return string
     */
    public function getSalesRepCreditedWithSale()
    {
        return $this->container['sales_rep_credited_with_sale'];
    }

    /**
     * Sets sales_rep_credited_with_sale
     *
     * @param string $sales_rep_credited_with_sale Sales rep credited with the sale
     *
     * @return $this
     */
    public function setSalesRepCreditedWithSale($sales_rep_credited_with_sale)
    {
        $this->container['sales_rep_credited_with_sale'] = $sales_rep_credited_with_sale;

        return $this;
    }

    /**
     * Gets call_source
     *
     * @return string
     */
    public function getCallSource()
    {
        return $this->container['call_source'];
    }

    /**
     * Sets call_source
     *
     * @param string $call_source Call Source
     *
     * @return $this
     */
    public function setCallSource($call_source)
    {
        $this->container['call_source'] = $call_source;

        return $this;
    }

    /**
     * Gets source_note
     *
     * @return string
     */
    public function getSourceNote()
    {
        return $this->container['source_note'];
    }

    /**
     * Sets source_note
     *
     * @param string $source_note Source Note
     *
     * @return $this
     */
    public function setSourceNote($source_note)
    {
        $this->container['source_note'] = $source_note;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Customer Name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets list_description
     *
     * @return string
     */
    public function getListDescription()
    {
        return $this->container['list_description'];
    }

    /**
     * Sets list_description
     *
     * @param string $list_description List Description
     *
     * @return $this
     */
    public function setListDescription($list_description)
    {
        $this->container['list_description'] = $list_description;

        return $this;
    }

    /**
     * Gets is_inbound
     *
     * @return bool
     */
    public function getIsInbound()
    {
        return $this->container['is_inbound'];
    }

    /**
     * Sets is_inbound
     *
     * @param bool $is_inbound True if call is inbound, false otherwise
     *
     * @return $this
     */
    public function setIsInbound($is_inbound)
    {
        $this->container['is_inbound'] = $is_inbound;

        return $this;
    }

    /**
     * Gets times_called
     *
     * @return int
     */
    public function getTimesCalled()
    {
        return $this->container['times_called'];
    }

    /**
     * Sets times_called
     *
     * @param int $times_called Number of calls made to the customer associated with this call for this call list
     *
     * @return $this
     */
    public function setTimesCalled($times_called)
    {
        $this->container['times_called'] = $times_called;

        return $this;
    }

    /**
     * Gets last_callback_outcome
     *
     * @return string
     */
    public function getLastCallbackOutcome()
    {
        return $this->container['last_callback_outcome'];
    }

    /**
     * Sets last_callback_outcome
     *
     * @param string $last_callback_outcome Call outcome for the last callback made to the customer associated with this call for this call list
     *
     * @return $this
     */
    public function setLastCallbackOutcome($last_callback_outcome)
    {
        $this->container['last_callback_outcome'] = $last_callback_outcome;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email Address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string $state_code State Code
     *
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country Code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone Time Zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


