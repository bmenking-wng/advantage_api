<?php
/**
 * PromotionItemSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PromotionItemSettings Class Doc Comment
 *
 * @category Class
 * @description Item setup values for a promotion offer.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionItemSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionItemSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_assortable' => 'bool',
        'pricing_by' => 'string',
        'pricing_type' => 'string',
        'discount_combination_code' => 'string',
        'is_line_select' => 'bool',
        'is_auto_order' => 'bool',
        'all_items_allowed' => 'bool',
        'is_volume_pricing_allowed' => 'bool',
        'is_volume_discount_allowed' => 'bool',
        'discount_percent' => 'double',
        'discount_access' => 'bool',
        'discount_associations' => 'bool',
        'discount_subscriptions' => 'bool',
        'discount_products' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_assortable' => null,
        'pricing_by' => null,
        'pricing_type' => null,
        'discount_combination_code' => null,
        'is_line_select' => null,
        'is_auto_order' => null,
        'all_items_allowed' => null,
        'is_volume_pricing_allowed' => null,
        'is_volume_discount_allowed' => null,
        'discount_percent' => 'double',
        'discount_access' => null,
        'discount_associations' => null,
        'discount_subscriptions' => null,
        'discount_products' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_assortable' => 'IsAssortable',
        'pricing_by' => 'PricingBy',
        'pricing_type' => 'PricingType',
        'discount_combination_code' => 'DiscountCombinationCode',
        'is_line_select' => 'IsLineSelect',
        'is_auto_order' => 'IsAutoOrder',
        'all_items_allowed' => 'AllItemsAllowed',
        'is_volume_pricing_allowed' => 'IsVolumePricingAllowed',
        'is_volume_discount_allowed' => 'IsVolumeDiscountAllowed',
        'discount_percent' => 'DiscountPercent',
        'discount_access' => 'DiscountAccess',
        'discount_associations' => 'DiscountAssociations',
        'discount_subscriptions' => 'DiscountSubscriptions',
        'discount_products' => 'DiscountProducts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_assortable' => 'setIsAssortable',
        'pricing_by' => 'setPricingBy',
        'pricing_type' => 'setPricingType',
        'discount_combination_code' => 'setDiscountCombinationCode',
        'is_line_select' => 'setIsLineSelect',
        'is_auto_order' => 'setIsAutoOrder',
        'all_items_allowed' => 'setAllItemsAllowed',
        'is_volume_pricing_allowed' => 'setIsVolumePricingAllowed',
        'is_volume_discount_allowed' => 'setIsVolumeDiscountAllowed',
        'discount_percent' => 'setDiscountPercent',
        'discount_access' => 'setDiscountAccess',
        'discount_associations' => 'setDiscountAssociations',
        'discount_subscriptions' => 'setDiscountSubscriptions',
        'discount_products' => 'setDiscountProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_assortable' => 'getIsAssortable',
        'pricing_by' => 'getPricingBy',
        'pricing_type' => 'getPricingType',
        'discount_combination_code' => 'getDiscountCombinationCode',
        'is_line_select' => 'getIsLineSelect',
        'is_auto_order' => 'getIsAutoOrder',
        'all_items_allowed' => 'getAllItemsAllowed',
        'is_volume_pricing_allowed' => 'getIsVolumePricingAllowed',
        'is_volume_discount_allowed' => 'getIsVolumeDiscountAllowed',
        'discount_percent' => 'getDiscountPercent',
        'discount_access' => 'getDiscountAccess',
        'discount_associations' => 'getDiscountAssociations',
        'discount_subscriptions' => 'getDiscountSubscriptions',
        'discount_products' => 'getDiscountProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRICING_BY_QUANTITY_BASED = 'QuantityBased';
    const PRICING_BY_SALES_AMOUNT_BASED = 'SalesAmountBased';
    const PRICING_TYPE_PRICE = 'Price';
    const PRICING_TYPE_DISCOUNT = 'Discount';
    const DISCOUNT_COMBINATION_CODE_COMPOUND = 'Compound';
    const DISCOUNT_COMBINATION_CODE_ADD = 'Add';
    const DISCOUNT_COMBINATION_CODE_USE_SMALLER = 'UseSmaller';
    const DISCOUNT_COMBINATION_CODE_USE_GREATER = 'UseGreater';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST = 'UseFirst';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND = 'UseSecond';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT = 'UseFirstOrDefault';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT = 'UseSecondOrDefault';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPricingByAllowableValues()
    {
        return [
            self::PRICING_BY_QUANTITY_BASED,
            self::PRICING_BY_SALES_AMOUNT_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPricingTypeAllowableValues()
    {
        return [
            self::PRICING_TYPE_PRICE,
            self::PRICING_TYPE_DISCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountCombinationCodeAllowableValues()
    {
        return [
            self::DISCOUNT_COMBINATION_CODE_COMPOUND,
            self::DISCOUNT_COMBINATION_CODE_ADD,
            self::DISCOUNT_COMBINATION_CODE_USE_SMALLER,
            self::DISCOUNT_COMBINATION_CODE_USE_GREATER,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_assortable'] = isset($data['is_assortable']) ? $data['is_assortable'] : null;
        $this->container['pricing_by'] = isset($data['pricing_by']) ? $data['pricing_by'] : null;
        $this->container['pricing_type'] = isset($data['pricing_type']) ? $data['pricing_type'] : null;
        $this->container['discount_combination_code'] = isset($data['discount_combination_code']) ? $data['discount_combination_code'] : null;
        $this->container['is_line_select'] = isset($data['is_line_select']) ? $data['is_line_select'] : null;
        $this->container['is_auto_order'] = isset($data['is_auto_order']) ? $data['is_auto_order'] : null;
        $this->container['all_items_allowed'] = isset($data['all_items_allowed']) ? $data['all_items_allowed'] : null;
        $this->container['is_volume_pricing_allowed'] = isset($data['is_volume_pricing_allowed']) ? $data['is_volume_pricing_allowed'] : null;
        $this->container['is_volume_discount_allowed'] = isset($data['is_volume_discount_allowed']) ? $data['is_volume_discount_allowed'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_access'] = isset($data['discount_access']) ? $data['discount_access'] : null;
        $this->container['discount_associations'] = isset($data['discount_associations']) ? $data['discount_associations'] : null;
        $this->container['discount_subscriptions'] = isset($data['discount_subscriptions']) ? $data['discount_subscriptions'] : null;
        $this->container['discount_products'] = isset($data['discount_products']) ? $data['discount_products'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPricingByAllowableValues();
        if (!is_null($this->container['pricing_by']) && !in_array($this->container['pricing_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pricing_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPricingTypeAllowableValues();
        if (!is_null($this->container['pricing_type']) && !in_array($this->container['pricing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pricing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($this->container['discount_combination_code']) && !in_array($this->container['discount_combination_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'discount_combination_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_assortable
     *
     * @return bool
     */
    public function getIsAssortable()
    {
        return $this->container['is_assortable'];
    }

    /**
     * Sets is_assortable
     *
     * @param bool $is_assortable Can this item be combined with other items in the same category for volume price/discounts?
     *
     * @return $this
     */
    public function setIsAssortable($is_assortable)
    {
        $this->container['is_assortable'] = $is_assortable;

        return $this;
    }

    /**
     * Gets pricing_by
     *
     * @return string
     */
    public function getPricingBy()
    {
        return $this->container['pricing_by'];
    }

    /**
     * Sets pricing_by
     *
     * @param string $pricing_by Promotion is based on quantities or sales amount. This is the Quantity/Sales flag.
     *
     * @return $this
     */
    public function setPricingBy($pricing_by)
    {
        $allowedValues = $this->getPricingByAllowableValues();
        if (!is_null($pricing_by) && !in_array($pricing_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pricing_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pricing_by'] = $pricing_by;

        return $this;
    }

    /**
     * Gets pricing_type
     *
     * @return string
     */
    public function getPricingType()
    {
        return $this->container['pricing_type'];
    }

    /**
     * Sets pricing_type
     *
     * @param string $pricing_type Promotion produces discounts or prices. This is the Price/Discount flag.
     *
     * @return $this
     */
    public function setPricingType($pricing_type)
    {
        $allowedValues = $this->getPricingTypeAllowableValues();
        if (!is_null($pricing_type) && !in_array($pricing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pricing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pricing_type'] = $pricing_type;

        return $this;
    }

    /**
     * Gets discount_combination_code
     *
     * @return string
     */
    public function getDiscountCombinationCode()
    {
        return $this->container['discount_combination_code'];
    }

    /**
     * Sets discount_combination_code
     *
     * @param string $discount_combination_code How to combine promotion level discounts with previous discounts
     *
     * @return $this
     */
    public function setDiscountCombinationCode($discount_combination_code)
    {
        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($discount_combination_code) && !in_array($discount_combination_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'discount_combination_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_combination_code'] = $discount_combination_code;

        return $this;
    }

    /**
     * Gets is_line_select
     *
     * @return bool
     */
    public function getIsLineSelect()
    {
        return $this->container['is_line_select'];
    }

    /**
     * Sets is_line_select
     *
     * @param bool $is_line_select Format order entry screen to display all promotion items?
     *
     * @return $this
     */
    public function setIsLineSelect($is_line_select)
    {
        $this->container['is_line_select'] = $is_line_select;

        return $this;
    }

    /**
     * Gets is_auto_order
     *
     * @return bool
     */
    public function getIsAutoOrder()
    {
        return $this->container['is_auto_order'];
    }

    /**
     * Sets is_auto_order
     *
     * @param bool $is_auto_order Allow auto generation of an order for one of each item in the promotion?
     *
     * @return $this
     */
    public function setIsAutoOrder($is_auto_order)
    {
        $this->container['is_auto_order'] = $is_auto_order;

        return $this;
    }

    /**
     * Gets all_items_allowed
     *
     * @return bool
     */
    public function getAllItemsAllowed()
    {
        return $this->container['all_items_allowed'];
    }

    /**
     * Sets all_items_allowed
     *
     * @param bool $all_items_allowed Can any item from inventory be ordered for this promo?
     *
     * @return $this
     */
    public function setAllItemsAllowed($all_items_allowed)
    {
        $this->container['all_items_allowed'] = $all_items_allowed;

        return $this;
    }

    /**
     * Gets is_volume_pricing_allowed
     *
     * @return bool
     */
    public function getIsVolumePricingAllowed()
    {
        return $this->container['is_volume_pricing_allowed'];
    }

    /**
     * Sets is_volume_pricing_allowed
     *
     * @param bool $is_volume_pricing_allowed Allow volume price with promo?
     *
     * @return $this
     */
    public function setIsVolumePricingAllowed($is_volume_pricing_allowed)
    {
        $this->container['is_volume_pricing_allowed'] = $is_volume_pricing_allowed;

        return $this;
    }

    /**
     * Gets is_volume_discount_allowed
     *
     * @return bool
     */
    public function getIsVolumeDiscountAllowed()
    {
        return $this->container['is_volume_discount_allowed'];
    }

    /**
     * Sets is_volume_discount_allowed
     *
     * @param bool $is_volume_discount_allowed Allow volume discounting with promo?
     *
     * @return $this
     */
    public function setIsVolumeDiscountAllowed($is_volume_discount_allowed)
    {
        $this->container['is_volume_discount_allowed'] = $is_volume_discount_allowed;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Discount percentage for promotion.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_access
     *
     * @return bool
     */
    public function getDiscountAccess()
    {
        return $this->container['discount_access'];
    }

    /**
     * Sets discount_access
     *
     * @param bool $discount_access Use promotion discount for AMB?
     *
     * @return $this
     */
    public function setDiscountAccess($discount_access)
    {
        $this->container['discount_access'] = $discount_access;

        return $this;
    }

    /**
     * Gets discount_associations
     *
     * @return bool
     */
    public function getDiscountAssociations()
    {
        return $this->container['discount_associations'];
    }

    /**
     * Sets discount_associations
     *
     * @param bool $discount_associations Use promotion discount for AMM?
     *
     * @return $this
     */
    public function setDiscountAssociations($discount_associations)
    {
        $this->container['discount_associations'] = $discount_associations;

        return $this;
    }

    /**
     * Gets discount_subscriptions
     *
     * @return bool
     */
    public function getDiscountSubscriptions()
    {
        return $this->container['discount_subscriptions'];
    }

    /**
     * Sets discount_subscriptions
     *
     * @param bool $discount_subscriptions Use promotion discount for CIR?
     *
     * @return $this
     */
    public function setDiscountSubscriptions($discount_subscriptions)
    {
        $this->container['discount_subscriptions'] = $discount_subscriptions;

        return $this;
    }

    /**
     * Gets discount_products
     *
     * @return bool
     */
    public function getDiscountProducts()
    {
        return $this->container['discount_products'];
    }

    /**
     * Sets discount_products
     *
     * @param bool $discount_products Use promotion discount for PRO?
     *
     * @return $this
     */
    public function setDiscountProducts($discount_products)
    {
        $this->container['discount_products'] = $discount_products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


