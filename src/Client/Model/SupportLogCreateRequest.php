<?php
/**
 * SupportLogCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SupportLogCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Information needed to request the creation of a client support log.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupportLogCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupportLogCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'activity_category_code' => 'string',
        'analyst_code' => 'string',
        'area_code' => 'string',
        'client_contact_number' => 'string',
        'client_project_id' => 'string',
        'client_task_number' => 'string',
        'name' => 'string',
        'discount_hours' => 'double',
        'discount_percent' => 'double',
        'engineer_code' => 'string',
        'estimated_hours' => 'double',
        'job_code' => 'string',
        'lead_engineer_code' => 'string',
        'priority' => 'string',
        'problem_code' => 'string',
        'program' => 'string',
        'research_and_development_type' => 'string',
        'status_code' => 'string',
        'swat_reason_code' => 'string',
        'target_date' => '\DateTime',
        'client_tracking_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'activity_category_code' => null,
        'analyst_code' => null,
        'area_code' => null,
        'client_contact_number' => null,
        'client_project_id' => null,
        'client_task_number' => null,
        'name' => null,
        'discount_hours' => 'double',
        'discount_percent' => 'double',
        'engineer_code' => null,
        'estimated_hours' => 'double',
        'job_code' => null,
        'lead_engineer_code' => null,
        'priority' => null,
        'problem_code' => null,
        'program' => null,
        'research_and_development_type' => null,
        'status_code' => null,
        'swat_reason_code' => null,
        'target_date' => 'date-time',
        'client_tracking_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'activity_category_code' => 'ActivityCategoryCode',
        'analyst_code' => 'AnalystCode',
        'area_code' => 'AreaCode',
        'client_contact_number' => 'ClientContactNumber',
        'client_project_id' => 'ClientProjectId',
        'client_task_number' => 'ClientTaskNumber',
        'name' => 'Name',
        'discount_hours' => 'DiscountHours',
        'discount_percent' => 'DiscountPercent',
        'engineer_code' => 'EngineerCode',
        'estimated_hours' => 'EstimatedHours',
        'job_code' => 'JobCode',
        'lead_engineer_code' => 'LeadEngineerCode',
        'priority' => 'Priority',
        'problem_code' => 'ProblemCode',
        'program' => 'Program',
        'research_and_development_type' => 'ResearchAndDevelopmentType',
        'status_code' => 'StatusCode',
        'swat_reason_code' => 'SwatReasonCode',
        'target_date' => 'TargetDate',
        'client_tracking_code' => 'ClientTrackingCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'activity_category_code' => 'setActivityCategoryCode',
        'analyst_code' => 'setAnalystCode',
        'area_code' => 'setAreaCode',
        'client_contact_number' => 'setClientContactNumber',
        'client_project_id' => 'setClientProjectId',
        'client_task_number' => 'setClientTaskNumber',
        'name' => 'setName',
        'discount_hours' => 'setDiscountHours',
        'discount_percent' => 'setDiscountPercent',
        'engineer_code' => 'setEngineerCode',
        'estimated_hours' => 'setEstimatedHours',
        'job_code' => 'setJobCode',
        'lead_engineer_code' => 'setLeadEngineerCode',
        'priority' => 'setPriority',
        'problem_code' => 'setProblemCode',
        'program' => 'setProgram',
        'research_and_development_type' => 'setResearchAndDevelopmentType',
        'status_code' => 'setStatusCode',
        'swat_reason_code' => 'setSwatReasonCode',
        'target_date' => 'setTargetDate',
        'client_tracking_code' => 'setClientTrackingCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'activity_category_code' => 'getActivityCategoryCode',
        'analyst_code' => 'getAnalystCode',
        'area_code' => 'getAreaCode',
        'client_contact_number' => 'getClientContactNumber',
        'client_project_id' => 'getClientProjectId',
        'client_task_number' => 'getClientTaskNumber',
        'name' => 'getName',
        'discount_hours' => 'getDiscountHours',
        'discount_percent' => 'getDiscountPercent',
        'engineer_code' => 'getEngineerCode',
        'estimated_hours' => 'getEstimatedHours',
        'job_code' => 'getJobCode',
        'lead_engineer_code' => 'getLeadEngineerCode',
        'priority' => 'getPriority',
        'problem_code' => 'getProblemCode',
        'program' => 'getProgram',
        'research_and_development_type' => 'getResearchAndDevelopmentType',
        'status_code' => 'getStatusCode',
        'swat_reason_code' => 'getSwatReasonCode',
        'target_date' => 'getTargetDate',
        'client_tracking_code' => 'getClientTrackingCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_DEAD_IN_THE_WATER = 'DeadInTheWater';
    const PRIORITY_MUST_HAVE_BY_TARGET = 'MustHaveByTarget';
    const PRIORITY_DESIRED_BY_TARGET = 'DesiredByTarget';
    const PRIORITY_OK_PAST_TARGET = 'OkPastTarget';
    const RESEARCH_AND_DEVELOPMENT_TYPE_CAPITALIZED = 'Capitalized';
    const RESEARCH_AND_DEVELOPMENT_TYPE_NON_RESEARCH_AND_DEVELOPMENT = 'NonResearchAndDevelopment';
    const RESEARCH_AND_DEVELOPMENT_TYPE_NON_DEVELOPMENT = 'NonDevelopment';
    const RESEARCH_AND_DEVELOPMENT_TYPE_RESEARCH_AND_DEVELOPMENT = 'ResearchAndDevelopment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_DEAD_IN_THE_WATER,
            self::PRIORITY_MUST_HAVE_BY_TARGET,
            self::PRIORITY_DESIRED_BY_TARGET,
            self::PRIORITY_OK_PAST_TARGET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResearchAndDevelopmentTypeAllowableValues()
    {
        return [
            self::RESEARCH_AND_DEVELOPMENT_TYPE_CAPITALIZED,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_NON_RESEARCH_AND_DEVELOPMENT,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_NON_DEVELOPMENT,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_RESEARCH_AND_DEVELOPMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['activity_category_code'] = isset($data['activity_category_code']) ? $data['activity_category_code'] : null;
        $this->container['analyst_code'] = isset($data['analyst_code']) ? $data['analyst_code'] : null;
        $this->container['area_code'] = isset($data['area_code']) ? $data['area_code'] : null;
        $this->container['client_contact_number'] = isset($data['client_contact_number']) ? $data['client_contact_number'] : null;
        $this->container['client_project_id'] = isset($data['client_project_id']) ? $data['client_project_id'] : null;
        $this->container['client_task_number'] = isset($data['client_task_number']) ? $data['client_task_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['discount_hours'] = isset($data['discount_hours']) ? $data['discount_hours'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['engineer_code'] = isset($data['engineer_code']) ? $data['engineer_code'] : null;
        $this->container['estimated_hours'] = isset($data['estimated_hours']) ? $data['estimated_hours'] : null;
        $this->container['job_code'] = isset($data['job_code']) ? $data['job_code'] : null;
        $this->container['lead_engineer_code'] = isset($data['lead_engineer_code']) ? $data['lead_engineer_code'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['problem_code'] = isset($data['problem_code']) ? $data['problem_code'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['research_and_development_type'] = isset($data['research_and_development_type']) ? $data['research_and_development_type'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['swat_reason_code'] = isset($data['swat_reason_code']) ? $data['swat_reason_code'] : null;
        $this->container['target_date'] = isset($data['target_date']) ? $data['target_date'] : null;
        $this->container['client_tracking_code'] = isset($data['client_tracking_code']) ? $data['client_tracking_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResearchAndDevelopmentTypeAllowableValues();
        if (!is_null($this->container['research_and_development_type']) && !in_array($this->container['research_and_development_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'research_and_development_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The customer number of the client who requested support
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets activity_category_code
     *
     * @return string
     */
    public function getActivityCategoryCode()
    {
        return $this->container['activity_category_code'];
    }

    /**
     * Sets activity_category_code
     *
     * @param string $activity_category_code The activity category for the support log
     *
     * @return $this
     */
    public function setActivityCategoryCode($activity_category_code)
    {
        $this->container['activity_category_code'] = $activity_category_code;

        return $this;
    }

    /**
     * Gets analyst_code
     *
     * @return string
     */
    public function getAnalystCode()
    {
        return $this->container['analyst_code'];
    }

    /**
     * Sets analyst_code
     *
     * @param string $analyst_code The user code of the analyst who is assigned to work on the support log
     *
     * @return $this
     */
    public function setAnalystCode($analyst_code)
    {
        $this->container['analyst_code'] = $analyst_code;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return string
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param string $area_code The client area where the problem is occurring
     *
     * @return $this
     */
    public function setAreaCode($area_code)
    {
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets client_contact_number
     *
     * @return string
     */
    public function getClientContactNumber()
    {
        return $this->container['client_contact_number'];
    }

    /**
     * Sets client_contact_number
     *
     * @param string $client_contact_number The customer number of the client contact for the support log
     *
     * @return $this
     */
    public function setClientContactNumber($client_contact_number)
    {
        $this->container['client_contact_number'] = $client_contact_number;

        return $this;
    }

    /**
     * Gets client_project_id
     *
     * @return string
     */
    public function getClientProjectId()
    {
        return $this->container['client_project_id'];
    }

    /**
     * Sets client_project_id
     *
     * @param string $client_project_id The client project id for the support log
     *
     * @return $this
     */
    public function setClientProjectId($client_project_id)
    {
        $this->container['client_project_id'] = $client_project_id;

        return $this;
    }

    /**
     * Gets client_task_number
     *
     * @return string
     */
    public function getClientTaskNumber()
    {
        return $this->container['client_task_number'];
    }

    /**
     * Sets client_task_number
     *
     * @param string $client_task_number The client task number for the support log
     *
     * @return $this
     */
    public function setClientTaskNumber($client_task_number)
    {
        $this->container['client_task_number'] = $client_task_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The description of the support log
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets discount_hours
     *
     * @return double
     */
    public function getDiscountHours()
    {
        return $this->container['discount_hours'];
    }

    /**
     * Sets discount_hours
     *
     * @param double $discount_hours The number of hours that were discounted for the support log
     *
     * @return $this
     */
    public function setDiscountHours($discount_hours)
    {
        $this->container['discount_hours'] = $discount_hours;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent The discount percent for the support log
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets engineer_code
     *
     * @return string
     */
    public function getEngineerCode()
    {
        return $this->container['engineer_code'];
    }

    /**
     * Sets engineer_code
     *
     * @param string $engineer_code The user code for the engineer assigned to work on the support log
     *
     * @return $this
     */
    public function setEngineerCode($engineer_code)
    {
        $this->container['engineer_code'] = $engineer_code;

        return $this;
    }

    /**
     * Gets estimated_hours
     *
     * @return double
     */
    public function getEstimatedHours()
    {
        return $this->container['estimated_hours'];
    }

    /**
     * Sets estimated_hours
     *
     * @param double $estimated_hours The estimated number of hours to be spent on the support log
     *
     * @return $this
     */
    public function setEstimatedHours($estimated_hours)
    {
        $this->container['estimated_hours'] = $estimated_hours;

        return $this;
    }

    /**
     * Gets job_code
     *
     * @return string
     */
    public function getJobCode()
    {
        return $this->container['job_code'];
    }

    /**
     * Sets job_code
     *
     * @param string $job_code The job code for the support log
     *
     * @return $this
     */
    public function setJobCode($job_code)
    {
        $this->container['job_code'] = $job_code;

        return $this;
    }

    /**
     * Gets lead_engineer_code
     *
     * @return string
     */
    public function getLeadEngineerCode()
    {
        return $this->container['lead_engineer_code'];
    }

    /**
     * Sets lead_engineer_code
     *
     * @param string $lead_engineer_code The lead engineer is used to identify which engineering team a support log is assigned to
     *
     * @return $this
     */
    public function setLeadEngineerCode($lead_engineer_code)
    {
        $this->container['lead_engineer_code'] = $lead_engineer_code;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The urgency level of the support log
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets problem_code
     *
     * @return string
     */
    public function getProblemCode()
    {
        return $this->container['problem_code'];
    }

    /**
     * Sets problem_code
     *
     * @param string $problem_code The problem code of the support log
     *
     * @return $this
     */
    public function setProblemCode($problem_code)
    {
        $this->container['problem_code'] = $problem_code;

        return $this;
    }

    /**
     * Gets program
     *
     * @return string
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param string $program The program where the problem is occurring
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets research_and_development_type
     *
     * @return string
     */
    public function getResearchAndDevelopmentType()
    {
        return $this->container['research_and_development_type'];
    }

    /**
     * Sets research_and_development_type
     *
     * @param string $research_and_development_type The research and development type for the support log
     *
     * @return $this
     */
    public function setResearchAndDevelopmentType($research_and_development_type)
    {
        $allowedValues = $this->getResearchAndDevelopmentTypeAllowableValues();
        if (!is_null($research_and_development_type) && !in_array($research_and_development_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'research_and_development_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['research_and_development_type'] = $research_and_development_type;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code The status of the support log
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets swat_reason_code
     *
     * @return string
     */
    public function getSwatReasonCode()
    {
        return $this->container['swat_reason_code'];
    }

    /**
     * Sets swat_reason_code
     *
     * @param string $swat_reason_code The SWAT reason for the support log.  This is used to describe why the work done on a task is non-billable.
     *
     * @return $this
     */
    public function setSwatReasonCode($swat_reason_code)
    {
        $this->container['swat_reason_code'] = $swat_reason_code;

        return $this;
    }

    /**
     * Gets target_date
     *
     * @return \DateTime
     */
    public function getTargetDate()
    {
        return $this->container['target_date'];
    }

    /**
     * Sets target_date
     *
     * @param \DateTime $target_date The date targeted for completion of the support log
     *
     * @return $this
     */
    public function setTargetDate($target_date)
    {
        $this->container['target_date'] = $target_date;

        return $this;
    }

    /**
     * Gets client_tracking_code
     *
     * @return string
     */
    public function getClientTrackingCode()
    {
        return $this->container['client_tracking_code'];
    }

    /**
     * Sets client_tracking_code
     *
     * @param string $client_tracking_code The tracking code for the support log
     *
     * @return $this
     */
    public function setClientTrackingCode($client_tracking_code)
    {
        $this->container['client_tracking_code'] = $client_tracking_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


