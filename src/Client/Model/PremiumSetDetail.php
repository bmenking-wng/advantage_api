<?php
/**
 * PremiumSetDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PremiumSetDetail Class Doc Comment
 *
 * @category Class
 * @description Information about premium set details.  A premium set is a way of awarding premiums to a customer. The items associated with a premium set  dictate what premiums the customer will receive.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PremiumSetDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PremiumSetDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'premium_set_code' => 'string',
        'earned_at' => 'string',
        'response_sequence' => 'string',
        'paidup_percent' => 'int',
        'days_to_respond' => 'int',
        'first_n_responses' => 'int',
        'fulfill_at' => 'string',
        'assembly_package' => 'string',
        'awarded_based_on' => 'string',
        'prm_set_lower_limit' => 'int',
        'prm_set_upper_limit' => 'int',
        'select_only_once' => 'bool',
        'payment_with_order' => 'bool',
        'last_updated_on' => '\DateTime',
        'last_updated_by' => 'string',
        'publication_code' => 'string',
        'issues_to_extend' => 'int',
        'reduction_rate' => 'double',
        'reduction_currency' => 'string',
        'adjustment_reason' => 'string',
        'response_type' => 'string',
        'donor_recipient_flag' => 'bool',
        'max_item_count' => 'int',
        'earned_at_description' => 'string',
        'one_per_participant_flag' => 'bool',
        'premiums' => '\Advantage\Client\Model\PremiumSetDetailItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'premium_set_code' => null,
        'earned_at' => null,
        'response_sequence' => null,
        'paidup_percent' => 'int32',
        'days_to_respond' => 'int32',
        'first_n_responses' => 'int32',
        'fulfill_at' => null,
        'assembly_package' => null,
        'awarded_based_on' => null,
        'prm_set_lower_limit' => 'int32',
        'prm_set_upper_limit' => 'int32',
        'select_only_once' => null,
        'payment_with_order' => null,
        'last_updated_on' => 'date-time',
        'last_updated_by' => null,
        'publication_code' => null,
        'issues_to_extend' => 'int32',
        'reduction_rate' => 'double',
        'reduction_currency' => null,
        'adjustment_reason' => null,
        'response_type' => null,
        'donor_recipient_flag' => null,
        'max_item_count' => 'int32',
        'earned_at_description' => null,
        'one_per_participant_flag' => null,
        'premiums' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'premium_set_code' => 'PremiumSetCode',
        'earned_at' => 'EarnedAt',
        'response_sequence' => 'ResponseSequence',
        'paidup_percent' => 'PaidupPercent',
        'days_to_respond' => 'DaysToRespond',
        'first_n_responses' => 'FirstNResponses',
        'fulfill_at' => 'FulfillAt',
        'assembly_package' => 'AssemblyPackage',
        'awarded_based_on' => 'AwardedBasedOn',
        'prm_set_lower_limit' => 'PrmSetLowerLimit',
        'prm_set_upper_limit' => 'PrmSetUpperLimit',
        'select_only_once' => 'SelectOnlyOnce',
        'payment_with_order' => 'PaymentWithOrder',
        'last_updated_on' => 'LastUpdatedOn',
        'last_updated_by' => 'LastUpdatedBy',
        'publication_code' => 'PublicationCode',
        'issues_to_extend' => 'IssuesToExtend',
        'reduction_rate' => 'ReductionRate',
        'reduction_currency' => 'ReductionCurrency',
        'adjustment_reason' => 'AdjustmentReason',
        'response_type' => 'ResponseType',
        'donor_recipient_flag' => 'DonorRecipientFlag',
        'max_item_count' => 'MaxItemCount',
        'earned_at_description' => 'EarnedAtDescription',
        'one_per_participant_flag' => 'OnePerParticipantFlag',
        'premiums' => 'Premiums'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'premium_set_code' => 'setPremiumSetCode',
        'earned_at' => 'setEarnedAt',
        'response_sequence' => 'setResponseSequence',
        'paidup_percent' => 'setPaidupPercent',
        'days_to_respond' => 'setDaysToRespond',
        'first_n_responses' => 'setFirstNResponses',
        'fulfill_at' => 'setFulfillAt',
        'assembly_package' => 'setAssemblyPackage',
        'awarded_based_on' => 'setAwardedBasedOn',
        'prm_set_lower_limit' => 'setPrmSetLowerLimit',
        'prm_set_upper_limit' => 'setPrmSetUpperLimit',
        'select_only_once' => 'setSelectOnlyOnce',
        'payment_with_order' => 'setPaymentWithOrder',
        'last_updated_on' => 'setLastUpdatedOn',
        'last_updated_by' => 'setLastUpdatedBy',
        'publication_code' => 'setPublicationCode',
        'issues_to_extend' => 'setIssuesToExtend',
        'reduction_rate' => 'setReductionRate',
        'reduction_currency' => 'setReductionCurrency',
        'adjustment_reason' => 'setAdjustmentReason',
        'response_type' => 'setResponseType',
        'donor_recipient_flag' => 'setDonorRecipientFlag',
        'max_item_count' => 'setMaxItemCount',
        'earned_at_description' => 'setEarnedAtDescription',
        'one_per_participant_flag' => 'setOnePerParticipantFlag',
        'premiums' => 'setPremiums'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'premium_set_code' => 'getPremiumSetCode',
        'earned_at' => 'getEarnedAt',
        'response_sequence' => 'getResponseSequence',
        'paidup_percent' => 'getPaidupPercent',
        'days_to_respond' => 'getDaysToRespond',
        'first_n_responses' => 'getFirstNResponses',
        'fulfill_at' => 'getFulfillAt',
        'assembly_package' => 'getAssemblyPackage',
        'awarded_based_on' => 'getAwardedBasedOn',
        'prm_set_lower_limit' => 'getPrmSetLowerLimit',
        'prm_set_upper_limit' => 'getPrmSetUpperLimit',
        'select_only_once' => 'getSelectOnlyOnce',
        'payment_with_order' => 'getPaymentWithOrder',
        'last_updated_on' => 'getLastUpdatedOn',
        'last_updated_by' => 'getLastUpdatedBy',
        'publication_code' => 'getPublicationCode',
        'issues_to_extend' => 'getIssuesToExtend',
        'reduction_rate' => 'getReductionRate',
        'reduction_currency' => 'getReductionCurrency',
        'adjustment_reason' => 'getAdjustmentReason',
        'response_type' => 'getResponseType',
        'donor_recipient_flag' => 'getDonorRecipientFlag',
        'max_item_count' => 'getMaxItemCount',
        'earned_at_description' => 'getEarnedAtDescription',
        'one_per_participant_flag' => 'getOnePerParticipantFlag',
        'premiums' => 'getPremiums'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EARNED_AT_FIRST_DAYS = 'FirstDays';
    const EARNED_AT_FIRST_RESPONSES = 'FirstResponses';
    const EARNED_AT_PAYMENT = 'Payment';
    const EARNED_AT_PREMIUM_HOLD = 'PremiumHold';
    const EARNED_AT_RESPONSE = 'Response';
    const EARNED_AT_RETURNED = 'Returned';
    const FULFILL_AT_FULFILL_WHEN_EARNED = 'FulfillWhenEarned';
    const FULFILL_AT_FULFILL_WITH_ISSUE = 'FulfillWithIssue';
    const FULFILL_AT_FULFILL_AFTER_NEXT_BOOK_CLUB_ORDER = 'FulfillAfterNextBookClubOrder';
    const FULFILL_AT_FULFILL_THROUGH_SEPARATE_ORDER = 'FulfillThroughSeparateOrder';
    const AWARDED_BASED_ON_SHIPPING_ORDER_TOTAL = 'ShippingOrderTotal';
    const AWARDED_BASED_ON_ORDER_LINES = 'OrderLines';
    const AWARDED_BASED_ON_TERM_LENGTH = 'TermLength';
    const AWARDED_BASED_ON_ORDER_TOTAL = 'OrderTotal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEarnedAtAllowableValues()
    {
        return [
            self::EARNED_AT_FIRST_DAYS,
            self::EARNED_AT_FIRST_RESPONSES,
            self::EARNED_AT_PAYMENT,
            self::EARNED_AT_PREMIUM_HOLD,
            self::EARNED_AT_RESPONSE,
            self::EARNED_AT_RETURNED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillAtAllowableValues()
    {
        return [
            self::FULFILL_AT_FULFILL_WHEN_EARNED,
            self::FULFILL_AT_FULFILL_WITH_ISSUE,
            self::FULFILL_AT_FULFILL_AFTER_NEXT_BOOK_CLUB_ORDER,
            self::FULFILL_AT_FULFILL_THROUGH_SEPARATE_ORDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAwardedBasedOnAllowableValues()
    {
        return [
            self::AWARDED_BASED_ON_SHIPPING_ORDER_TOTAL,
            self::AWARDED_BASED_ON_ORDER_LINES,
            self::AWARDED_BASED_ON_TERM_LENGTH,
            self::AWARDED_BASED_ON_ORDER_TOTAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['premium_set_code'] = isset($data['premium_set_code']) ? $data['premium_set_code'] : null;
        $this->container['earned_at'] = isset($data['earned_at']) ? $data['earned_at'] : null;
        $this->container['response_sequence'] = isset($data['response_sequence']) ? $data['response_sequence'] : null;
        $this->container['paidup_percent'] = isset($data['paidup_percent']) ? $data['paidup_percent'] : null;
        $this->container['days_to_respond'] = isset($data['days_to_respond']) ? $data['days_to_respond'] : null;
        $this->container['first_n_responses'] = isset($data['first_n_responses']) ? $data['first_n_responses'] : null;
        $this->container['fulfill_at'] = isset($data['fulfill_at']) ? $data['fulfill_at'] : null;
        $this->container['assembly_package'] = isset($data['assembly_package']) ? $data['assembly_package'] : null;
        $this->container['awarded_based_on'] = isset($data['awarded_based_on']) ? $data['awarded_based_on'] : null;
        $this->container['prm_set_lower_limit'] = isset($data['prm_set_lower_limit']) ? $data['prm_set_lower_limit'] : null;
        $this->container['prm_set_upper_limit'] = isset($data['prm_set_upper_limit']) ? $data['prm_set_upper_limit'] : null;
        $this->container['select_only_once'] = isset($data['select_only_once']) ? $data['select_only_once'] : null;
        $this->container['payment_with_order'] = isset($data['payment_with_order']) ? $data['payment_with_order'] : null;
        $this->container['last_updated_on'] = isset($data['last_updated_on']) ? $data['last_updated_on'] : null;
        $this->container['last_updated_by'] = isset($data['last_updated_by']) ? $data['last_updated_by'] : null;
        $this->container['publication_code'] = isset($data['publication_code']) ? $data['publication_code'] : null;
        $this->container['issues_to_extend'] = isset($data['issues_to_extend']) ? $data['issues_to_extend'] : null;
        $this->container['reduction_rate'] = isset($data['reduction_rate']) ? $data['reduction_rate'] : null;
        $this->container['reduction_currency'] = isset($data['reduction_currency']) ? $data['reduction_currency'] : null;
        $this->container['adjustment_reason'] = isset($data['adjustment_reason']) ? $data['adjustment_reason'] : null;
        $this->container['response_type'] = isset($data['response_type']) ? $data['response_type'] : null;
        $this->container['donor_recipient_flag'] = isset($data['donor_recipient_flag']) ? $data['donor_recipient_flag'] : null;
        $this->container['max_item_count'] = isset($data['max_item_count']) ? $data['max_item_count'] : null;
        $this->container['earned_at_description'] = isset($data['earned_at_description']) ? $data['earned_at_description'] : null;
        $this->container['one_per_participant_flag'] = isset($data['one_per_participant_flag']) ? $data['one_per_participant_flag'] : null;
        $this->container['premiums'] = isset($data['premiums']) ? $data['premiums'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEarnedAtAllowableValues();
        if (!is_null($this->container['earned_at']) && !in_array($this->container['earned_at'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'earned_at', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFulfillAtAllowableValues();
        if (!is_null($this->container['fulfill_at']) && !in_array($this->container['fulfill_at'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fulfill_at', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAwardedBasedOnAllowableValues();
        if (!is_null($this->container['awarded_based_on']) && !in_array($this->container['awarded_based_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'awarded_based_on', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets premium_set_code
     *
     * @return string
     */
    public function getPremiumSetCode()
    {
        return $this->container['premium_set_code'];
    }

    /**
     * Sets premium_set_code
     *
     * @param string $premium_set_code The Premium set code that identifies a product that a customer can receive for free and what must be done to earn it.
     *
     * @return $this
     */
    public function setPremiumSetCode($premium_set_code)
    {
        $this->container['premium_set_code'] = $premium_set_code;

        return $this;
    }

    /**
     * Gets earned_at
     *
     * @return string
     */
    public function getEarnedAt()
    {
        return $this->container['earned_at'];
    }

    /**
     * Sets earned_at
     *
     * @param string $earned_at The event that triggers a premium.
     *
     * @return $this
     */
    public function setEarnedAt($earned_at)
    {
        $allowedValues = $this->getEarnedAtAllowableValues();
        if (!is_null($earned_at) && !in_array($earned_at, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'earned_at', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['earned_at'] = $earned_at;

        return $this;
    }

    /**
     * Gets response_sequence
     *
     * @return string
     */
    public function getResponseSequence()
    {
        return $this->container['response_sequence'];
    }

    /**
     * Sets response_sequence
     *
     * @param string $response_sequence The response sequence number identifies the position of a single response.
     *
     * @return $this
     */
    public function setResponseSequence($response_sequence)
    {
        $this->container['response_sequence'] = $response_sequence;

        return $this;
    }

    /**
     * Gets paidup_percent
     *
     * @return int
     */
    public function getPaidupPercent()
    {
        return $this->container['paidup_percent'];
    }

    /**
     * Sets paidup_percent
     *
     * @param int $paidup_percent Specifies the % of the total order amount that must be paid up before the premium can be fulfilled.
     *
     * @return $this
     */
    public function setPaidupPercent($paidup_percent)
    {
        $this->container['paidup_percent'] = $paidup_percent;

        return $this;
    }

    /**
     * Gets days_to_respond
     *
     * @return int
     */
    public function getDaysToRespond()
    {
        return $this->container['days_to_respond'];
    }

    /**
     * Sets days_to_respond
     *
     * @param int $days_to_respond A customer earns the premium if the response came in within this number of days.
     *
     * @return $this
     */
    public function setDaysToRespond($days_to_respond)
    {
        $this->container['days_to_respond'] = $days_to_respond;

        return $this;
    }

    /**
     * Gets first_n_responses
     *
     * @return int
     */
    public function getFirstNResponses()
    {
        return $this->container['first_n_responses'];
    }

    /**
     * Sets first_n_responses
     *
     * @param int $first_n_responses A customer earns the premium if the customer's response if within the first N responses, where N is this number.
     *
     * @return $this
     */
    public function setFirstNResponses($first_n_responses)
    {
        $this->container['first_n_responses'] = $first_n_responses;

        return $this;
    }

    /**
     * Gets fulfill_at
     *
     * @return string
     */
    public function getFulfillAt()
    {
        return $this->container['fulfill_at'];
    }

    /**
     * Sets fulfill_at
     *
     * @param string $fulfill_at Specifies when the premium earned should be shipped.
     *
     * @return $this
     */
    public function setFulfillAt($fulfill_at)
    {
        $allowedValues = $this->getFulfillAtAllowableValues();
        if (!is_null($fulfill_at) && !in_array($fulfill_at, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fulfill_at', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfill_at'] = $fulfill_at;

        return $this;
    }

    /**
     * Gets assembly_package
     *
     * @return string
     */
    public function getAssemblyPackage()
    {
        return $this->container['assembly_package'];
    }

    /**
     * Sets assembly_package
     *
     * @param string $assembly_package The assembly package code identifies a particular combination of forms, materials and promotions for a shipment.
     *
     * @return $this
     */
    public function setAssemblyPackage($assembly_package)
    {
        $this->container['assembly_package'] = $assembly_package;

        return $this;
    }

    /**
     * Gets awarded_based_on
     *
     * @return string
     */
    public function getAwardedBasedOn()
    {
        return $this->container['awarded_based_on'];
    }

    /**
     * Sets awarded_based_on
     *
     * @param string $awarded_based_on The Term/Amount/#Lines flag indicates whether a premium set is awarded based on sub term, order amount or number of order lines.
     *
     * @return $this
     */
    public function setAwardedBasedOn($awarded_based_on)
    {
        $allowedValues = $this->getAwardedBasedOnAllowableValues();
        if (!is_null($awarded_based_on) && !in_array($awarded_based_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'awarded_based_on', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['awarded_based_on'] = $awarded_based_on;

        return $this;
    }

    /**
     * Gets prm_set_lower_limit
     *
     * @return int
     */
    public function getPrmSetLowerLimit()
    {
        return $this->container['prm_set_lower_limit'];
    }

    /**
     * Sets prm_set_lower_limit
     *
     * @param int $prm_set_lower_limit Specifies the lower limit (measurement determined by TermDollarFlag) for which a premium set is awarded.
     *
     * @return $this
     */
    public function setPrmSetLowerLimit($prm_set_lower_limit)
    {
        $this->container['prm_set_lower_limit'] = $prm_set_lower_limit;

        return $this;
    }

    /**
     * Gets prm_set_upper_limit
     *
     * @return int
     */
    public function getPrmSetUpperLimit()
    {
        return $this->container['prm_set_upper_limit'];
    }

    /**
     * Sets prm_set_upper_limit
     *
     * @param int $prm_set_upper_limit Specifies the upper limit (measurement determined by TermDollarFlag) for which a premium set is awarded.
     *
     * @return $this
     */
    public function setPrmSetUpperLimit($prm_set_upper_limit)
    {
        $this->container['prm_set_upper_limit'] = $prm_set_upper_limit;

        return $this;
    }

    /**
     * Gets select_only_once
     *
     * @return bool
     */
    public function getSelectOnlyOnce()
    {
        return $this->container['select_only_once'];
    }

    /**
     * Sets select_only_once
     *
     * @param bool $select_only_once The Select Only Once flag controls whether all or only the first matching premium set sequences are fulfilled.
     *
     * @return $this
     */
    public function setSelectOnlyOnce($select_only_once)
    {
        $this->container['select_only_once'] = $select_only_once;

        return $this;
    }

    /**
     * Gets payment_with_order
     *
     * @return bool
     */
    public function getPaymentWithOrder()
    {
        return $this->container['payment_with_order'];
    }

    /**
     * Sets payment_with_order
     *
     * @param bool $payment_with_order The Payment With Order flag indicates whether a premium set is applicable only to orders received with full payment.
     *
     * @return $this
     */
    public function setPaymentWithOrder($payment_with_order)
    {
        $this->container['payment_with_order'] = $payment_with_order;

        return $this;
    }

    /**
     * Gets last_updated_on
     *
     * @return \DateTime
     */
    public function getLastUpdatedOn()
    {
        return $this->container['last_updated_on'];
    }

    /**
     * Sets last_updated_on
     *
     * @param \DateTime $last_updated_on Gets the Last Updated Date for the current Premium Set Detail.
     *
     * @return $this
     */
    public function setLastUpdatedOn($last_updated_on)
    {
        $this->container['last_updated_on'] = $last_updated_on;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string $last_updated_by Gets the user that last updated the current Premium Set Detail.
     *
     * @return $this
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets publication_code
     *
     * @return string
     */
    public function getPublicationCode()
    {
        return $this->container['publication_code'];
    }

    /**
     * Sets publication_code
     *
     * @param string $publication_code The Publication Code that identifies a magazine.
     *
     * @return $this
     */
    public function setPublicationCode($publication_code)
    {
        $this->container['publication_code'] = $publication_code;

        return $this;
    }

    /**
     * Gets issues_to_extend
     *
     * @return int
     */
    public function getIssuesToExtend()
    {
        return $this->container['issues_to_extend'];
    }

    /**
     * Sets issues_to_extend
     *
     * @param int $issues_to_extend Number of issues to extend subscription.
     *
     * @return $this
     */
    public function setIssuesToExtend($issues_to_extend)
    {
        $this->container['issues_to_extend'] = $issues_to_extend;

        return $this;
    }

    /**
     * Gets reduction_rate
     *
     * @return double
     */
    public function getReductionRate()
    {
        return $this->container['reduction_rate'];
    }

    /**
     * Sets reduction_rate
     *
     * @param double $reduction_rate Reduction Rate amount
     *
     * @return $this
     */
    public function setReductionRate($reduction_rate)
    {
        $this->container['reduction_rate'] = $reduction_rate;

        return $this;
    }

    /**
     * Gets reduction_currency
     *
     * @return string
     */
    public function getReductionCurrency()
    {
        return $this->container['reduction_currency'];
    }

    /**
     * Sets reduction_currency
     *
     * @param string $reduction_currency Currency code of the reduction rate
     *
     * @return $this
     */
    public function setReductionCurrency($reduction_currency)
    {
        $this->container['reduction_currency'] = $reduction_currency;

        return $this;
    }

    /**
     * Gets adjustment_reason
     *
     * @return string
     */
    public function getAdjustmentReason()
    {
        return $this->container['adjustment_reason'];
    }

    /**
     * Sets adjustment_reason
     *
     * @param string $adjustment_reason The Adjustment Reason code used to describe the reason for a transaction.
     *
     * @return $this
     */
    public function setAdjustmentReason($adjustment_reason)
    {
        $this->container['adjustment_reason'] = $adjustment_reason;

        return $this;
    }

    /**
     * Gets response_type
     *
     * @return string
     */
    public function getResponseType()
    {
        return $this->container['response_type'];
    }

    /**
     * Sets response_type
     *
     * @param string $response_type The Response Type indicates what channel the response came through.
     *
     * @return $this
     */
    public function setResponseType($response_type)
    {
        $this->container['response_type'] = $response_type;

        return $this;
    }

    /**
     * Gets donor_recipient_flag
     *
     * @return bool
     */
    public function getDonorRecipientFlag()
    {
        return $this->container['donor_recipient_flag'];
    }

    /**
     * Sets donor_recipient_flag
     *
     * @param bool $donor_recipient_flag Is the premium only available when the ship-to customer equals the bill-to customer?
     *
     * @return $this
     */
    public function setDonorRecipientFlag($donor_recipient_flag)
    {
        $this->container['donor_recipient_flag'] = $donor_recipient_flag;

        return $this;
    }

    /**
     * Gets max_item_count
     *
     * @return int
     */
    public function getMaxItemCount()
    {
        return $this->container['max_item_count'];
    }

    /**
     * Sets max_item_count
     *
     * @param int $max_item_count Gets the maximum number of items that can be associated with this premium set record.
     *
     * @return $this
     */
    public function setMaxItemCount($max_item_count)
    {
        $this->container['max_item_count'] = $max_item_count;

        return $this;
    }

    /**
     * Gets earned_at_description
     *
     * @return string
     */
    public function getEarnedAtDescription()
    {
        return $this->container['earned_at_description'];
    }

    /**
     * Sets earned_at_description
     *
     * @param string $earned_at_description Gets the description of the earning criteria for the current Premium Set Detail.
     *
     * @return $this
     */
    public function setEarnedAtDescription($earned_at_description)
    {
        $this->container['earned_at_description'] = $earned_at_description;

        return $this;
    }

    /**
     * Gets one_per_participant_flag
     *
     * @return bool
     */
    public function getOnePerParticipantFlag()
    {
        return $this->container['one_per_participant_flag'];
    }

    /**
     * Sets one_per_participant_flag
     *
     * @param bool $one_per_participant_flag Specifies if only one premium is fulfilled per recipient.
     *
     * @return $this
     */
    public function setOnePerParticipantFlag($one_per_participant_flag)
    {
        $this->container['one_per_participant_flag'] = $one_per_participant_flag;

        return $this;
    }

    /**
     * Gets premiums
     *
     * @return \Advantage\Client\Model\PremiumSetDetailItem[]
     */
    public function getPremiums()
    {
        return $this->container['premiums'];
    }

    /**
     * Sets premiums
     *
     * @param \Advantage\Client\Model\PremiumSetDetailItem[] $premiums Gets the list of Premium Items for the current Premium Set Detail.
     *
     * @return $this
     */
    public function setPremiums($premiums)
    {
        $this->container['premiums'] = $premiums;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


