<?php
/**
 * PromotionUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PromotionUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description Information for updating an existing promotion.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'name2' => 'string',
        'date_sent' => '\DateTime',
        'effective_to' => '\DateTime',
        'effective_from' => '\DateTime',
        'initiator' => 'string',
        'creative_key' => '\Advantage\Client\Model\PromotionCreativeKey',
        'value_list' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'name2' => null,
        'date_sent' => 'date-time',
        'effective_to' => 'date-time',
        'effective_from' => 'date-time',
        'initiator' => null,
        'creative_key' => null,
        'value_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'name2' => 'Name2',
        'date_sent' => 'DateSent',
        'effective_to' => 'EffectiveTo',
        'effective_from' => 'EffectiveFrom',
        'initiator' => 'Initiator',
        'creative_key' => 'CreativeKey',
        'value_list' => 'ValueList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'name2' => 'setName2',
        'date_sent' => 'setDateSent',
        'effective_to' => 'setEffectiveTo',
        'effective_from' => 'setEffectiveFrom',
        'initiator' => 'setInitiator',
        'creative_key' => 'setCreativeKey',
        'value_list' => 'setValueList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'name2' => 'getName2',
        'date_sent' => 'getDateSent',
        'effective_to' => 'getEffectiveTo',
        'effective_from' => 'getEffectiveFrom',
        'initiator' => 'getInitiator',
        'creative_key' => 'getCreativeKey',
        'value_list' => 'getValueList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['effective_to'] = isset($data['effective_to']) ? $data['effective_to'] : null;
        $this->container['effective_from'] = isset($data['effective_from']) ? $data['effective_from'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
        $this->container['creative_key'] = isset($data['creative_key']) ? $data['creative_key'] : null;
        $this->container['value_list'] = isset($data['value_list']) ? $data['value_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The first line of the name of the promotion.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 The second line of the name of the promotion.
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return \DateTime
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param \DateTime $date_sent The date the promotion was sent to consumers.
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets effective_to
     *
     * @return \DateTime
     */
    public function getEffectiveTo()
    {
        return $this->container['effective_to'];
    }

    /**
     * Sets effective_to
     *
     * @param \DateTime $effective_to Date, up to which, the promotion is valid
     *
     * @return $this
     */
    public function setEffectiveTo($effective_to)
    {
        $this->container['effective_to'] = $effective_to;

        return $this;
    }

    /**
     * Gets effective_from
     *
     * @return \DateTime
     */
    public function getEffectiveFrom()
    {
        return $this->container['effective_from'];
    }

    /**
     * Sets effective_from
     *
     * @param \DateTime $effective_from Date, from which, the promotion is valid
     *
     * @return $this
     */
    public function setEffectiveFrom($effective_from)
    {
        $this->container['effective_from'] = $effective_from;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return string
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param string $initiator The initiator of the promotion.
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets creative_key
     *
     * @return \Advantage\Client\Model\PromotionCreativeKey
     */
    public function getCreativeKey()
    {
        return $this->container['creative_key'];
    }

    /**
     * Sets creative_key
     *
     * @param \Advantage\Client\Model\PromotionCreativeKey $creative_key Information to uniquely identify the promotion creative associated with this promotion
     *
     * @return $this
     */
    public function setCreativeKey($creative_key)
    {
        $this->container['creative_key'] = $creative_key;

        return $this;
    }

    /**
     * Gets value_list
     *
     * @return bool
     */
    public function getValueList()
    {
        return $this->container['value_list'];
    }

    /**
     * Sets value_list
     *
     * @param bool $value_list Determines if value will be displayed in value list for  promotion items
     *
     * @return $this
     */
    public function setValueList($value_list)
    {
        $this->container['value_list'] = $value_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


