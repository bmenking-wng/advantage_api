<?php
/**
 * BroadcastMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * BroadcastMessage Class Doc Comment
 *
 * @category Class
 * @description Broadcast Message Model
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BroadcastMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BroadcastMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'broadcast_message_id' => 'string',
        'message_title' => 'string',
        'message_text' => 'string',
        'is_message_pinned' => 'bool',
        'creation_date' => '\DateTime',
        'creation_user' => 'string',
        'update_date' => '\DateTime',
        'update_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'broadcast_message_id' => null,
        'message_title' => null,
        'message_text' => null,
        'is_message_pinned' => null,
        'creation_date' => 'date-time',
        'creation_user' => null,
        'update_date' => 'date-time',
        'update_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'broadcast_message_id' => 'BroadcastMessageId',
        'message_title' => 'MessageTitle',
        'message_text' => 'MessageText',
        'is_message_pinned' => 'IsMessagePinned',
        'creation_date' => 'CreationDate',
        'creation_user' => 'CreationUser',
        'update_date' => 'UpdateDate',
        'update_user' => 'UpdateUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'broadcast_message_id' => 'setBroadcastMessageId',
        'message_title' => 'setMessageTitle',
        'message_text' => 'setMessageText',
        'is_message_pinned' => 'setIsMessagePinned',
        'creation_date' => 'setCreationDate',
        'creation_user' => 'setCreationUser',
        'update_date' => 'setUpdateDate',
        'update_user' => 'setUpdateUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'broadcast_message_id' => 'getBroadcastMessageId',
        'message_title' => 'getMessageTitle',
        'message_text' => 'getMessageText',
        'is_message_pinned' => 'getIsMessagePinned',
        'creation_date' => 'getCreationDate',
        'creation_user' => 'getCreationUser',
        'update_date' => 'getUpdateDate',
        'update_user' => 'getUpdateUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['broadcast_message_id'] = isset($data['broadcast_message_id']) ? $data['broadcast_message_id'] : null;
        $this->container['message_title'] = isset($data['message_title']) ? $data['message_title'] : null;
        $this->container['message_text'] = isset($data['message_text']) ? $data['message_text'] : null;
        $this->container['is_message_pinned'] = isset($data['is_message_pinned']) ? $data['is_message_pinned'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['creation_user'] = isset($data['creation_user']) ? $data['creation_user'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['update_user'] = isset($data['update_user']) ? $data['update_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets broadcast_message_id
     *
     * @return string
     */
    public function getBroadcastMessageId()
    {
        return $this->container['broadcast_message_id'];
    }

    /**
     * Sets broadcast_message_id
     *
     * @param string $broadcast_message_id Broadcast Message Id
     *
     * @return $this
     */
    public function setBroadcastMessageId($broadcast_message_id)
    {
        $this->container['broadcast_message_id'] = $broadcast_message_id;

        return $this;
    }

    /**
     * Gets message_title
     *
     * @return string
     */
    public function getMessageTitle()
    {
        return $this->container['message_title'];
    }

    /**
     * Sets message_title
     *
     * @param string $message_title Message Title
     *
     * @return $this
     */
    public function setMessageTitle($message_title)
    {
        $this->container['message_title'] = $message_title;

        return $this;
    }

    /**
     * Gets message_text
     *
     * @return string
     */
    public function getMessageText()
    {
        return $this->container['message_text'];
    }

    /**
     * Sets message_text
     *
     * @param string $message_text Message Text
     *
     * @return $this
     */
    public function setMessageText($message_text)
    {
        $this->container['message_text'] = $message_text;

        return $this;
    }

    /**
     * Gets is_message_pinned
     *
     * @return bool
     */
    public function getIsMessagePinned()
    {
        return $this->container['is_message_pinned'];
    }

    /**
     * Sets is_message_pinned
     *
     * @param bool $is_message_pinned Is Message Pinned?
     *
     * @return $this
     */
    public function setIsMessagePinned($is_message_pinned)
    {
        $this->container['is_message_pinned'] = $is_message_pinned;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Creation Date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_user
     *
     * @return string
     */
    public function getCreationUser()
    {
        return $this->container['creation_user'];
    }

    /**
     * Sets creation_user
     *
     * @param string $creation_user Creation User
     *
     * @return $this
     */
    public function setCreationUser($creation_user)
    {
        $this->container['creation_user'] = $creation_user;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date Update Date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets update_user
     *
     * @return string
     */
    public function getUpdateUser()
    {
        return $this->container['update_user'];
    }

    /**
     * Sets update_user
     *
     * @param string $update_user Update User
     *
     * @return $this
     */
    public function setUpdateUser($update_user)
    {
        $this->container['update_user'] = $update_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


