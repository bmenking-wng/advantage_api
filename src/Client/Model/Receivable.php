<?php
/**
 * Receivable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Receivable Class Doc Comment
 *
 * @category Class
 * @description Information about a credit voucher or debit
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Receivable implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Receivable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applied_amount' => 'double',
        'remaining_amount' => 'double',
        'total_amount' => 'double',
        'transaction_date' => '\DateTime',
        'transaction_type' => 'string',
        'debit_number' => 'string',
        'sequence_number' => 'string',
        'source_system' => 'string',
        'billing_currency' => 'string',
        'local_currency' => 'string',
        'unposted_amount' => 'double',
        'is_posted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applied_amount' => 'double',
        'remaining_amount' => 'double',
        'total_amount' => 'double',
        'transaction_date' => 'date-time',
        'transaction_type' => null,
        'debit_number' => null,
        'sequence_number' => null,
        'source_system' => null,
        'billing_currency' => null,
        'local_currency' => null,
        'unposted_amount' => 'double',
        'is_posted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_amount' => 'AppliedAmount',
        'remaining_amount' => 'RemainingAmount',
        'total_amount' => 'TotalAmount',
        'transaction_date' => 'TransactionDate',
        'transaction_type' => 'TransactionType',
        'debit_number' => 'DebitNumber',
        'sequence_number' => 'SequenceNumber',
        'source_system' => 'SourceSystem',
        'billing_currency' => 'BillingCurrency',
        'local_currency' => 'LocalCurrency',
        'unposted_amount' => 'UnpostedAmount',
        'is_posted' => 'IsPosted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_amount' => 'setAppliedAmount',
        'remaining_amount' => 'setRemainingAmount',
        'total_amount' => 'setTotalAmount',
        'transaction_date' => 'setTransactionDate',
        'transaction_type' => 'setTransactionType',
        'debit_number' => 'setDebitNumber',
        'sequence_number' => 'setSequenceNumber',
        'source_system' => 'setSourceSystem',
        'billing_currency' => 'setBillingCurrency',
        'local_currency' => 'setLocalCurrency',
        'unposted_amount' => 'setUnpostedAmount',
        'is_posted' => 'setIsPosted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_amount' => 'getAppliedAmount',
        'remaining_amount' => 'getRemainingAmount',
        'total_amount' => 'getTotalAmount',
        'transaction_date' => 'getTransactionDate',
        'transaction_type' => 'getTransactionType',
        'debit_number' => 'getDebitNumber',
        'sequence_number' => 'getSequenceNumber',
        'source_system' => 'getSourceSystem',
        'billing_currency' => 'getBillingCurrency',
        'local_currency' => 'getLocalCurrency',
        'unposted_amount' => 'getUnpostedAmount',
        'is_posted' => 'getIsPosted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_TYPE_CREDIT = 'Credit';
    const TRANSACTION_TYPE_DEBIT = 'Debit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_CREDIT,
            self::TRANSACTION_TYPE_DEBIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applied_amount'] = isset($data['applied_amount']) ? $data['applied_amount'] : null;
        $this->container['remaining_amount'] = isset($data['remaining_amount']) ? $data['remaining_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['debit_number'] = isset($data['debit_number']) ? $data['debit_number'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['source_system'] = isset($data['source_system']) ? $data['source_system'] : null;
        $this->container['billing_currency'] = isset($data['billing_currency']) ? $data['billing_currency'] : null;
        $this->container['local_currency'] = isset($data['local_currency']) ? $data['local_currency'] : null;
        $this->container['unposted_amount'] = isset($data['unposted_amount']) ? $data['unposted_amount'] : null;
        $this->container['is_posted'] = isset($data['is_posted']) ? $data['is_posted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applied_amount
     *
     * @return double
     */
    public function getAppliedAmount()
    {
        return $this->container['applied_amount'];
    }

    /**
     * Sets applied_amount
     *
     * @param double $applied_amount Applied Amount
     *
     * @return $this
     */
    public function setAppliedAmount($applied_amount)
    {
        $this->container['applied_amount'] = $applied_amount;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return double
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param double $remaining_amount Remaining balance
     *
     * @return $this
     */
    public function setRemainingAmount($remaining_amount)
    {
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total amount of transaction
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date Transaction occurred on this date
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type Credit or Debit
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($transaction_type) && !in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets debit_number
     *
     * @return string
     */
    public function getDebitNumber()
    {
        return $this->container['debit_number'];
    }

    /**
     * Sets debit_number
     *
     * @param string $debit_number Debit Number
     *
     * @return $this
     */
    public function setDebitNumber($debit_number)
    {
        $this->container['debit_number'] = $debit_number;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return string
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string $sequence_number A/R Sequence Number
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets source_system
     *
     * @return string
     */
    public function getSourceSystem()
    {
        return $this->container['source_system'];
    }

    /**
     * Sets source_system
     *
     * @param string $source_system Source System
     *
     * @return $this
     */
    public function setSourceSystem($source_system)
    {
        $this->container['source_system'] = $source_system;

        return $this;
    }

    /**
     * Gets billing_currency
     *
     * @return string
     */
    public function getBillingCurrency()
    {
        return $this->container['billing_currency'];
    }

    /**
     * Sets billing_currency
     *
     * @param string $billing_currency Billing Currency
     *
     * @return $this
     */
    public function setBillingCurrency($billing_currency)
    {
        $this->container['billing_currency'] = $billing_currency;

        return $this;
    }

    /**
     * Gets local_currency
     *
     * @return string
     */
    public function getLocalCurrency()
    {
        return $this->container['local_currency'];
    }

    /**
     * Sets local_currency
     *
     * @param string $local_currency Local Currency
     *
     * @return $this
     */
    public function setLocalCurrency($local_currency)
    {
        $this->container['local_currency'] = $local_currency;

        return $this;
    }

    /**
     * Gets unposted_amount
     *
     * @return double
     */
    public function getUnpostedAmount()
    {
        return $this->container['unposted_amount'];
    }

    /**
     * Sets unposted_amount
     *
     * @param double $unposted_amount Unposted Amount
     *
     * @return $this
     */
    public function setUnpostedAmount($unposted_amount)
    {
        $this->container['unposted_amount'] = $unposted_amount;

        return $this;
    }

    /**
     * Gets is_posted
     *
     * @return bool
     */
    public function getIsPosted()
    {
        return $this->container['is_posted'];
    }

    /**
     * Sets is_posted
     *
     * @param bool $is_posted True if receivable is posted, false otherwise
     *
     * @return $this
     */
    public function setIsPosted($is_posted)
    {
        $this->container['is_posted'] = $is_posted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


