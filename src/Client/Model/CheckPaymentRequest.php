<?php
/**
 * CheckPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CheckPaymentRequest Class Doc Comment
 *
 * @category Class
 * @description Information about a payment made toward an order from a check.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'check_number' => 'string',
        'amount' => 'double',
        'ok_to_refund' => 'bool',
        'unapplied_credit_reason' => 'string',
        'promotion_code' => 'string',
        'control_group_date' => '\DateTime',
        'control_group_id' => 'string',
        'check_code' => 'string',
        'payment_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'check_number' => null,
        'amount' => 'double',
        'ok_to_refund' => null,
        'unapplied_credit_reason' => null,
        'promotion_code' => null,
        'control_group_date' => 'date-time',
        'control_group_id' => null,
        'check_code' => null,
        'payment_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'check_number' => 'CheckNumber',
        'amount' => 'Amount',
        'ok_to_refund' => 'OkToRefund',
        'unapplied_credit_reason' => 'UnappliedCreditReason',
        'promotion_code' => 'PromotionCode',
        'control_group_date' => 'ControlGroupDate',
        'control_group_id' => 'ControlGroupId',
        'check_code' => 'CheckCode',
        'payment_description' => 'PaymentDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'check_number' => 'setCheckNumber',
        'amount' => 'setAmount',
        'ok_to_refund' => 'setOkToRefund',
        'unapplied_credit_reason' => 'setUnappliedCreditReason',
        'promotion_code' => 'setPromotionCode',
        'control_group_date' => 'setControlGroupDate',
        'control_group_id' => 'setControlGroupId',
        'check_code' => 'setCheckCode',
        'payment_description' => 'setPaymentDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'check_number' => 'getCheckNumber',
        'amount' => 'getAmount',
        'ok_to_refund' => 'getOkToRefund',
        'unapplied_credit_reason' => 'getUnappliedCreditReason',
        'promotion_code' => 'getPromotionCode',
        'control_group_date' => 'getControlGroupDate',
        'control_group_id' => 'getControlGroupId',
        'check_code' => 'getCheckCode',
        'payment_description' => 'getPaymentDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['check_number'] = isset($data['check_number']) ? $data['check_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['ok_to_refund'] = isset($data['ok_to_refund']) ? $data['ok_to_refund'] : null;
        $this->container['unapplied_credit_reason'] = isset($data['unapplied_credit_reason']) ? $data['unapplied_credit_reason'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['control_group_date'] = isset($data['control_group_date']) ? $data['control_group_date'] : null;
        $this->container['control_group_id'] = isset($data['control_group_id']) ? $data['control_group_id'] : null;
        $this->container['check_code'] = isset($data['check_code']) ? $data['check_code'] : null;
        $this->container['payment_description'] = isset($data['payment_description']) ? $data['payment_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The Advantage customer number of the customer providing the payment.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string $check_number The check number
     *
     * @return $this
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount to pay on the order
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets ok_to_refund
     *
     * @return bool
     */
    public function getOkToRefund()
    {
        return $this->container['ok_to_refund'];
    }

    /**
     * Sets ok_to_refund
     *
     * @param bool $ok_to_refund Ok to refund
     *
     * @return $this
     */
    public function setOkToRefund($ok_to_refund)
    {
        $this->container['ok_to_refund'] = $ok_to_refund;

        return $this;
    }

    /**
     * Gets unapplied_credit_reason
     *
     * @return string
     */
    public function getUnappliedCreditReason()
    {
        return $this->container['unapplied_credit_reason'];
    }

    /**
     * Sets unapplied_credit_reason
     *
     * @param string $unapplied_credit_reason The unapplied credit reason. when applying a check bigger then amount owed
     *
     * @return $this
     */
    public function setUnappliedCreditReason($unapplied_credit_reason)
    {
        $this->container['unapplied_credit_reason'] = $unapplied_credit_reason;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets control_group_date
     *
     * @return \DateTime
     */
    public function getControlGroupDate()
    {
        return $this->container['control_group_date'];
    }

    /**
     * Sets control_group_date
     *
     * @param \DateTime $control_group_date The control group date
     *
     * @return $this
     */
    public function setControlGroupDate($control_group_date)
    {
        $this->container['control_group_date'] = $control_group_date;

        return $this;
    }

    /**
     * Gets control_group_id
     *
     * @return string
     */
    public function getControlGroupId()
    {
        return $this->container['control_group_id'];
    }

    /**
     * Sets control_group_id
     *
     * @param string $control_group_id The control group id
     *
     * @return $this
     */
    public function setControlGroupId($control_group_id)
    {
        $this->container['control_group_id'] = $control_group_id;

        return $this;
    }

    /**
     * Gets check_code
     *
     * @return string
     */
    public function getCheckCode()
    {
        return $this->container['check_code'];
    }

    /**
     * Sets check_code
     *
     * @param string $check_code The check code, defaults to \"CHECK\"
     *
     * @return $this
     */
    public function setCheckCode($check_code)
    {
        $this->container['check_code'] = $check_code;

        return $this;
    }

    /**
     * Gets payment_description
     *
     * @return string
     */
    public function getPaymentDescription()
    {
        return $this->container['payment_description'];
    }

    /**
     * Sets payment_description
     *
     * @param string $payment_description The payment description
     *
     * @return $this
     */
    public function setPaymentDescription($payment_description)
    {
        $this->container['payment_description'] = $payment_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


