<?php
/**
 * CustomerCreditSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CustomerCreditSummary Class Doc Comment
 *
 * @category Class
 * @description The credit summary reflects all posted credits and debits on the customer&#39;s A/R.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerCreditSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerCreditSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'credit_status_code' => 'string',
        'bad_payment_count' => 'int',
        'bad_payment_amount' => 'double',
        'written_off_amount' => 'double',
        'account_balance' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'credit_status_code' => null,
        'bad_payment_count' => 'int32',
        'bad_payment_amount' => 'double',
        'written_off_amount' => 'double',
        'account_balance' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'CurrencyCode',
        'credit_status_code' => 'CreditStatusCode',
        'bad_payment_count' => 'BadPaymentCount',
        'bad_payment_amount' => 'BadPaymentAmount',
        'written_off_amount' => 'WrittenOffAmount',
        'account_balance' => 'AccountBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'credit_status_code' => 'setCreditStatusCode',
        'bad_payment_count' => 'setBadPaymentCount',
        'bad_payment_amount' => 'setBadPaymentAmount',
        'written_off_amount' => 'setWrittenOffAmount',
        'account_balance' => 'setAccountBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'credit_status_code' => 'getCreditStatusCode',
        'bad_payment_count' => 'getBadPaymentCount',
        'bad_payment_amount' => 'getBadPaymentAmount',
        'written_off_amount' => 'getWrittenOffAmount',
        'account_balance' => 'getAccountBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['credit_status_code'] = isset($data['credit_status_code']) ? $data['credit_status_code'] : null;
        $this->container['bad_payment_count'] = isset($data['bad_payment_count']) ? $data['bad_payment_count'] : null;
        $this->container['bad_payment_amount'] = isset($data['bad_payment_amount']) ? $data['bad_payment_amount'] : null;
        $this->container['written_off_amount'] = isset($data['written_off_amount']) ? $data['written_off_amount'] : null;
        $this->container['account_balance'] = isset($data['account_balance']) ? $data['account_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Gets the customer's default currency code.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets credit_status_code
     *
     * @return string
     */
    public function getCreditStatusCode()
    {
        return $this->container['credit_status_code'];
    }

    /**
     * Sets credit_status_code
     *
     * @param string $credit_status_code Gets the credit status code assigned by the accounting department to the customer.
     *
     * @return $this
     */
    public function setCreditStatusCode($credit_status_code)
    {
        $this->container['credit_status_code'] = $credit_status_code;

        return $this;
    }

    /**
     * Gets bad_payment_count
     *
     * @return int
     */
    public function getBadPaymentCount()
    {
        return $this->container['bad_payment_count'];
    }

    /**
     * Sets bad_payment_count
     *
     * @param int $bad_payment_count Gets the number of bad payments for the customer.  This includes bad checks  and rejected credit card and direct debit payments.
     *
     * @return $this
     */
    public function setBadPaymentCount($bad_payment_count)
    {
        $this->container['bad_payment_count'] = $bad_payment_count;

        return $this;
    }

    /**
     * Gets bad_payment_amount
     *
     * @return double
     */
    public function getBadPaymentAmount()
    {
        return $this->container['bad_payment_amount'];
    }

    /**
     * Sets bad_payment_amount
     *
     * @param double $bad_payment_amount Gets the total value of bad payments for the current customer.
     *
     * @return $this
     */
    public function setBadPaymentAmount($bad_payment_amount)
    {
        $this->container['bad_payment_amount'] = $bad_payment_amount;

        return $this;
    }

    /**
     * Gets written_off_amount
     *
     * @return double
     */
    public function getWrittenOffAmount()
    {
        return $this->container['written_off_amount'];
    }

    /**
     * Sets written_off_amount
     *
     * @param double $written_off_amount Gets the amount written off for the current customer.
     *
     * @return $this
     */
    public function setWrittenOffAmount($written_off_amount)
    {
        $this->container['written_off_amount'] = $written_off_amount;

        return $this;
    }

    /**
     * Gets account_balance
     *
     * @return double
     */
    public function getAccountBalance()
    {
        return $this->container['account_balance'];
    }

    /**
     * Sets account_balance
     *
     * @param double $account_balance Gets the account balance for the current customer in the customer's default currency.
     *
     * @return $this
     */
    public function setAccountBalance($account_balance)
    {
        $this->container['account_balance'] = $account_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


