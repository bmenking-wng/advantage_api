<?php
/**
 * ConferenceAttendee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConferenceAttendee Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a conference attendee&#39;s registration
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceAttendee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConferenceAttendee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sequence_number' => 'string',
        'badge_name' => 'string',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'attendee' => '\Advantage\Client\Model\CustomerAddressSummary',
        'attendee_name' => 'string',
        'attendee_type' => 'string',
        'registration_date' => '\DateTime',
        'total_charges' => 'double',
        'sessions' => '\Advantage\Client\Model\ConferenceAttendeeSession[]',
        'attendee_status' => 'string',
        'is_attendee_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sequence_number' => null,
        'badge_name' => null,
        'bill_to' => null,
        'attendee' => null,
        'attendee_name' => null,
        'attendee_type' => null,
        'registration_date' => 'date-time',
        'total_charges' => 'double',
        'sessions' => null,
        'attendee_status' => null,
        'is_attendee_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sequence_number' => 'SequenceNumber',
        'badge_name' => 'BadgeName',
        'bill_to' => 'BillTo',
        'attendee' => 'Attendee',
        'attendee_name' => 'AttendeeName',
        'attendee_type' => 'AttendeeType',
        'registration_date' => 'RegistrationDate',
        'total_charges' => 'TotalCharges',
        'sessions' => 'Sessions',
        'attendee_status' => 'AttendeeStatus',
        'is_attendee_active' => 'IsAttendeeActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sequence_number' => 'setSequenceNumber',
        'badge_name' => 'setBadgeName',
        'bill_to' => 'setBillTo',
        'attendee' => 'setAttendee',
        'attendee_name' => 'setAttendeeName',
        'attendee_type' => 'setAttendeeType',
        'registration_date' => 'setRegistrationDate',
        'total_charges' => 'setTotalCharges',
        'sessions' => 'setSessions',
        'attendee_status' => 'setAttendeeStatus',
        'is_attendee_active' => 'setIsAttendeeActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sequence_number' => 'getSequenceNumber',
        'badge_name' => 'getBadgeName',
        'bill_to' => 'getBillTo',
        'attendee' => 'getAttendee',
        'attendee_name' => 'getAttendeeName',
        'attendee_type' => 'getAttendeeType',
        'registration_date' => 'getRegistrationDate',
        'total_charges' => 'getTotalCharges',
        'sessions' => 'getSessions',
        'attendee_status' => 'getAttendeeStatus',
        'is_attendee_active' => 'getIsAttendeeActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ATTENDEE_TYPE_ATTENDEE = 'Attendee';
    const ATTENDEE_TYPE_EXHIBITOR = 'Exhibitor';
    const ATTENDEE_TYPE_PRESENTER = 'Presenter';
    const ATTENDEE_TYPE_STAFF = 'Staff';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttendeeTypeAllowableValues()
    {
        return [
            self::ATTENDEE_TYPE_ATTENDEE,
            self::ATTENDEE_TYPE_EXHIBITOR,
            self::ATTENDEE_TYPE_PRESENTER,
            self::ATTENDEE_TYPE_STAFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['badge_name'] = isset($data['badge_name']) ? $data['badge_name'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['attendee'] = isset($data['attendee']) ? $data['attendee'] : null;
        $this->container['attendee_name'] = isset($data['attendee_name']) ? $data['attendee_name'] : null;
        $this->container['attendee_type'] = isset($data['attendee_type']) ? $data['attendee_type'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['total_charges'] = isset($data['total_charges']) ? $data['total_charges'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['attendee_status'] = isset($data['attendee_status']) ? $data['attendee_status'] : null;
        $this->container['is_attendee_active'] = isset($data['is_attendee_active']) ? $data['is_attendee_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAttendeeTypeAllowableValues();
        if (!is_null($this->container['attendee_type']) && !in_array($this->container['attendee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'attendee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sequence_number
     *
     * @return string
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string $sequence_number The registration sequence number
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets badge_name
     *
     * @return string
     */
    public function getBadgeName()
    {
        return $this->container['badge_name'];
    }

    /**
     * Sets badge_name
     *
     * @param string $badge_name The conference attendee registration (badge) name
     *
     * @return $this
     */
    public function setBadgeName($badge_name)
    {
        $this->container['badge_name'] = $badge_name;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $bill_to The bill-to customer address for this attendee. If the bill-by is \"Bill By Registration,\" the bill-to  will be stored on the registration record. If the bill-by is \"Bill By Attendee,\" the bill-to  will be stored on the attendee record.
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets attendee
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getAttendee()
    {
        return $this->container['attendee'];
    }

    /**
     * Sets attendee
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $attendee The attendee
     *
     * @return $this
     */
    public function setAttendee($attendee)
    {
        $this->container['attendee'] = $attendee;

        return $this;
    }

    /**
     * Gets attendee_name
     *
     * @return string
     */
    public function getAttendeeName()
    {
        return $this->container['attendee_name'];
    }

    /**
     * Sets attendee_name
     *
     * @param string $attendee_name The attendee customer's full name
     *
     * @return $this
     */
    public function setAttendeeName($attendee_name)
    {
        $this->container['attendee_name'] = $attendee_name;

        return $this;
    }

    /**
     * Gets attendee_type
     *
     * @return string
     */
    public function getAttendeeType()
    {
        return $this->container['attendee_type'];
    }

    /**
     * Sets attendee_type
     *
     * @param string $attendee_type Conference attendee registration type
     *
     * @return $this
     */
    public function setAttendeeType($attendee_type)
    {
        $allowedValues = $this->getAttendeeTypeAllowableValues();
        if (!is_null($attendee_type) && !in_array($attendee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'attendee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attendee_type'] = $attendee_type;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime $registration_date Conference registration date for attendee
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets total_charges
     *
     * @return double
     */
    public function getTotalCharges()
    {
        return $this->container['total_charges'];
    }

    /**
     * Sets total_charges
     *
     * @param double $total_charges Total charges for the attendee
     *
     * @return $this
     */
    public function setTotalCharges($total_charges)
    {
        $this->container['total_charges'] = $total_charges;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \Advantage\Client\Model\ConferenceAttendeeSession[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \Advantage\Client\Model\ConferenceAttendeeSession[] $sessions List of sessions for attendee
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets attendee_status
     *
     * @return string
     */
    public function getAttendeeStatus()
    {
        return $this->container['attendee_status'];
    }

    /**
     * Sets attendee_status
     *
     * @param string $attendee_status Registration Status (A=Active, C=Cancelled, etc)
     *
     * @return $this
     */
    public function setAttendeeStatus($attendee_status)
    {
        $this->container['attendee_status'] = $attendee_status;

        return $this;
    }

    /**
     * Gets is_attendee_active
     *
     * @return bool
     */
    public function getIsAttendeeActive()
    {
        return $this->container['is_attendee_active'];
    }

    /**
     * Sets is_attendee_active
     *
     * @param bool $is_attendee_active True if the attendee is active
     *
     * @return $this
     */
    public function setIsAttendeeActive($is_attendee_active)
    {
        $this->container['is_attendee_active'] = $is_attendee_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


