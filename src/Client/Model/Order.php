<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Information pertaining to an order.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_number' => 'string',
        'status' => '\Advantage\Client\Model\CombinedOrderStatus',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'ship_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'amounts' => '\Advantage\Client\Model\OrderAmounts',
        'shipping_info' => '\Advantage\Client\Model\OrderShippingInfo',
        'billing_organization_code' => 'string',
        'order_date' => '\DateTime',
        'order_type' => 'string',
        'purchase_order_number' => 'string',
        'promotion_code' => 'string',
        'sales_rep_code' => 'string',
        'web_bill_me_allowed' => 'string',
        'currency_code' => 'string',
        'docket_number' => 'string',
        'order_source_code' => 'string',
        'gratis_reason_code' => 'string',
        'warehouse_code' => 'string',
        'backorder_flag' => 'string',
        'refund_flag' => 'string',
        'control_group_date' => '\DateTime',
        'control_group_id' => 'string',
        'credit_reason_code' => 'string',
        'is_backorder_fill' => 'bool',
        'is_on_approval' => 'bool',
        'is_phone_order' => 'bool',
        'is_premium_fill' => 'bool',
        'purchase_order_expire_date' => '\DateTime',
        'profile_id' => 'string',
        'proforma_order_number' => 'string',
        'questionnaire_code' => 'string',
        'entry_organization_code' => 'string',
        'apply_to_order_number' => 'string',
        'referred_by_customer_number' => 'string',
        'premium_set_code' => 'string',
        'invoice_date' => '\DateTime',
        'lines' => '\Advantage\Client\Model\OrderLine[]',
        'payments' => '\Advantage\Client\Model\OrderPayment[]',
        'installment_billing' => '\Advantage\Client\Model\OrderInstallmentBilling',
        'default_payment_id' => 'string',
        'demographics' => '\Advantage\Client\Model\DemographicValue[]',
        'associated_orders' => '\Advantage\Client\Model\AssociatedOrder[]',
        'applied_gift_certificates' => '\Advantage\Client\Model\AppliedGiftCertificate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_number' => null,
        'status' => null,
        'bill_to' => null,
        'ship_to' => null,
        'amounts' => null,
        'shipping_info' => null,
        'billing_organization_code' => null,
        'order_date' => 'date-time',
        'order_type' => null,
        'purchase_order_number' => null,
        'promotion_code' => null,
        'sales_rep_code' => null,
        'web_bill_me_allowed' => null,
        'currency_code' => null,
        'docket_number' => null,
        'order_source_code' => null,
        'gratis_reason_code' => null,
        'warehouse_code' => null,
        'backorder_flag' => null,
        'refund_flag' => null,
        'control_group_date' => 'date-time',
        'control_group_id' => null,
        'credit_reason_code' => null,
        'is_backorder_fill' => null,
        'is_on_approval' => null,
        'is_phone_order' => null,
        'is_premium_fill' => null,
        'purchase_order_expire_date' => 'date-time',
        'profile_id' => null,
        'proforma_order_number' => null,
        'questionnaire_code' => null,
        'entry_organization_code' => null,
        'apply_to_order_number' => null,
        'referred_by_customer_number' => null,
        'premium_set_code' => null,
        'invoice_date' => 'date-time',
        'lines' => null,
        'payments' => null,
        'installment_billing' => null,
        'default_payment_id' => null,
        'demographics' => null,
        'associated_orders' => null,
        'applied_gift_certificates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'OrderNumber',
        'status' => 'Status',
        'bill_to' => 'BillTo',
        'ship_to' => 'ShipTo',
        'amounts' => 'Amounts',
        'shipping_info' => 'ShippingInfo',
        'billing_organization_code' => 'BillingOrganizationCode',
        'order_date' => 'OrderDate',
        'order_type' => 'OrderType',
        'purchase_order_number' => 'PurchaseOrderNumber',
        'promotion_code' => 'PromotionCode',
        'sales_rep_code' => 'SalesRepCode',
        'web_bill_me_allowed' => 'WebBillMeAllowed',
        'currency_code' => 'CurrencyCode',
        'docket_number' => 'DocketNumber',
        'order_source_code' => 'OrderSourceCode',
        'gratis_reason_code' => 'GratisReasonCode',
        'warehouse_code' => 'WarehouseCode',
        'backorder_flag' => 'BackorderFlag',
        'refund_flag' => 'RefundFlag',
        'control_group_date' => 'ControlGroupDate',
        'control_group_id' => 'ControlGroupId',
        'credit_reason_code' => 'CreditReasonCode',
        'is_backorder_fill' => 'IsBackorderFill',
        'is_on_approval' => 'IsOnApproval',
        'is_phone_order' => 'IsPhoneOrder',
        'is_premium_fill' => 'IsPremiumFill',
        'purchase_order_expire_date' => 'PurchaseOrderExpireDate',
        'profile_id' => 'ProfileId',
        'proforma_order_number' => 'ProformaOrderNumber',
        'questionnaire_code' => 'QuestionnaireCode',
        'entry_organization_code' => 'EntryOrganizationCode',
        'apply_to_order_number' => 'ApplyToOrderNumber',
        'referred_by_customer_number' => 'ReferredByCustomerNumber',
        'premium_set_code' => 'PremiumSetCode',
        'invoice_date' => 'InvoiceDate',
        'lines' => 'Lines',
        'payments' => 'Payments',
        'installment_billing' => 'InstallmentBilling',
        'default_payment_id' => 'DefaultPaymentId',
        'demographics' => 'Demographics',
        'associated_orders' => 'AssociatedOrders',
        'applied_gift_certificates' => 'AppliedGiftCertificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'status' => 'setStatus',
        'bill_to' => 'setBillTo',
        'ship_to' => 'setShipTo',
        'amounts' => 'setAmounts',
        'shipping_info' => 'setShippingInfo',
        'billing_organization_code' => 'setBillingOrganizationCode',
        'order_date' => 'setOrderDate',
        'order_type' => 'setOrderType',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'promotion_code' => 'setPromotionCode',
        'sales_rep_code' => 'setSalesRepCode',
        'web_bill_me_allowed' => 'setWebBillMeAllowed',
        'currency_code' => 'setCurrencyCode',
        'docket_number' => 'setDocketNumber',
        'order_source_code' => 'setOrderSourceCode',
        'gratis_reason_code' => 'setGratisReasonCode',
        'warehouse_code' => 'setWarehouseCode',
        'backorder_flag' => 'setBackorderFlag',
        'refund_flag' => 'setRefundFlag',
        'control_group_date' => 'setControlGroupDate',
        'control_group_id' => 'setControlGroupId',
        'credit_reason_code' => 'setCreditReasonCode',
        'is_backorder_fill' => 'setIsBackorderFill',
        'is_on_approval' => 'setIsOnApproval',
        'is_phone_order' => 'setIsPhoneOrder',
        'is_premium_fill' => 'setIsPremiumFill',
        'purchase_order_expire_date' => 'setPurchaseOrderExpireDate',
        'profile_id' => 'setProfileId',
        'proforma_order_number' => 'setProformaOrderNumber',
        'questionnaire_code' => 'setQuestionnaireCode',
        'entry_organization_code' => 'setEntryOrganizationCode',
        'apply_to_order_number' => 'setApplyToOrderNumber',
        'referred_by_customer_number' => 'setReferredByCustomerNumber',
        'premium_set_code' => 'setPremiumSetCode',
        'invoice_date' => 'setInvoiceDate',
        'lines' => 'setLines',
        'payments' => 'setPayments',
        'installment_billing' => 'setInstallmentBilling',
        'default_payment_id' => 'setDefaultPaymentId',
        'demographics' => 'setDemographics',
        'associated_orders' => 'setAssociatedOrders',
        'applied_gift_certificates' => 'setAppliedGiftCertificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'status' => 'getStatus',
        'bill_to' => 'getBillTo',
        'ship_to' => 'getShipTo',
        'amounts' => 'getAmounts',
        'shipping_info' => 'getShippingInfo',
        'billing_organization_code' => 'getBillingOrganizationCode',
        'order_date' => 'getOrderDate',
        'order_type' => 'getOrderType',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'promotion_code' => 'getPromotionCode',
        'sales_rep_code' => 'getSalesRepCode',
        'web_bill_me_allowed' => 'getWebBillMeAllowed',
        'currency_code' => 'getCurrencyCode',
        'docket_number' => 'getDocketNumber',
        'order_source_code' => 'getOrderSourceCode',
        'gratis_reason_code' => 'getGratisReasonCode',
        'warehouse_code' => 'getWarehouseCode',
        'backorder_flag' => 'getBackorderFlag',
        'refund_flag' => 'getRefundFlag',
        'control_group_date' => 'getControlGroupDate',
        'control_group_id' => 'getControlGroupId',
        'credit_reason_code' => 'getCreditReasonCode',
        'is_backorder_fill' => 'getIsBackorderFill',
        'is_on_approval' => 'getIsOnApproval',
        'is_phone_order' => 'getIsPhoneOrder',
        'is_premium_fill' => 'getIsPremiumFill',
        'purchase_order_expire_date' => 'getPurchaseOrderExpireDate',
        'profile_id' => 'getProfileId',
        'proforma_order_number' => 'getProformaOrderNumber',
        'questionnaire_code' => 'getQuestionnaireCode',
        'entry_organization_code' => 'getEntryOrganizationCode',
        'apply_to_order_number' => 'getApplyToOrderNumber',
        'referred_by_customer_number' => 'getReferredByCustomerNumber',
        'premium_set_code' => 'getPremiumSetCode',
        'invoice_date' => 'getInvoiceDate',
        'lines' => 'getLines',
        'payments' => 'getPayments',
        'installment_billing' => 'getInstallmentBilling',
        'default_payment_id' => 'getDefaultPaymentId',
        'demographics' => 'getDemographics',
        'associated_orders' => 'getAssociatedOrders',
        'applied_gift_certificates' => 'getAppliedGiftCertificates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_TYPE_CREDIT_MEMO_RETURN_ORDER = 'CreditMemoReturnOrder';
    const ORDER_TYPE_GRATIS_ORDER = 'GratisOrder';
    const ORDER_TYPE_INVOICEABLE_ORDER = 'InvoiceableOrder';
    const ORDER_TYPE_MODIFY_ORDER = 'ModifyOrder';
    const ORDER_TYPE_PRO_FORMA_ORDER = 'ProFormaOrder';
    const ORDER_TYPE_POST_SHIPPED_ORDER = 'PostShippedOrder';
    const ORDER_TYPE_REPEATING_ORDER = 'RepeatingOrder';
    const ORDER_TYPE_PREVIEW_ORDER = 'PreviewOrder';
    const ORDER_TYPE_WAREHOUSE_TRANSFER = 'WarehouseTransfer';
    const WEB_BILL_ME_ALLOWED_YES = 'Yes';
    const WEB_BILL_ME_ALLOWED_NO = 'No';
    const WEB_BILL_ME_ALLOWED_ASSUMED = 'Assumed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_CREDIT_MEMO_RETURN_ORDER,
            self::ORDER_TYPE_GRATIS_ORDER,
            self::ORDER_TYPE_INVOICEABLE_ORDER,
            self::ORDER_TYPE_MODIFY_ORDER,
            self::ORDER_TYPE_PRO_FORMA_ORDER,
            self::ORDER_TYPE_POST_SHIPPED_ORDER,
            self::ORDER_TYPE_REPEATING_ORDER,
            self::ORDER_TYPE_PREVIEW_ORDER,
            self::ORDER_TYPE_WAREHOUSE_TRANSFER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebBillMeAllowedAllowableValues()
    {
        return [
            self::WEB_BILL_ME_ALLOWED_YES,
            self::WEB_BILL_ME_ALLOWED_NO,
            self::WEB_BILL_ME_ALLOWED_ASSUMED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['amounts'] = isset($data['amounts']) ? $data['amounts'] : null;
        $this->container['shipping_info'] = isset($data['shipping_info']) ? $data['shipping_info'] : null;
        $this->container['billing_organization_code'] = isset($data['billing_organization_code']) ? $data['billing_organization_code'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['sales_rep_code'] = isset($data['sales_rep_code']) ? $data['sales_rep_code'] : null;
        $this->container['web_bill_me_allowed'] = isset($data['web_bill_me_allowed']) ? $data['web_bill_me_allowed'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['docket_number'] = isset($data['docket_number']) ? $data['docket_number'] : null;
        $this->container['order_source_code'] = isset($data['order_source_code']) ? $data['order_source_code'] : null;
        $this->container['gratis_reason_code'] = isset($data['gratis_reason_code']) ? $data['gratis_reason_code'] : null;
        $this->container['warehouse_code'] = isset($data['warehouse_code']) ? $data['warehouse_code'] : null;
        $this->container['backorder_flag'] = isset($data['backorder_flag']) ? $data['backorder_flag'] : null;
        $this->container['refund_flag'] = isset($data['refund_flag']) ? $data['refund_flag'] : null;
        $this->container['control_group_date'] = isset($data['control_group_date']) ? $data['control_group_date'] : null;
        $this->container['control_group_id'] = isset($data['control_group_id']) ? $data['control_group_id'] : null;
        $this->container['credit_reason_code'] = isset($data['credit_reason_code']) ? $data['credit_reason_code'] : null;
        $this->container['is_backorder_fill'] = isset($data['is_backorder_fill']) ? $data['is_backorder_fill'] : null;
        $this->container['is_on_approval'] = isset($data['is_on_approval']) ? $data['is_on_approval'] : null;
        $this->container['is_phone_order'] = isset($data['is_phone_order']) ? $data['is_phone_order'] : null;
        $this->container['is_premium_fill'] = isset($data['is_premium_fill']) ? $data['is_premium_fill'] : null;
        $this->container['purchase_order_expire_date'] = isset($data['purchase_order_expire_date']) ? $data['purchase_order_expire_date'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['proforma_order_number'] = isset($data['proforma_order_number']) ? $data['proforma_order_number'] : null;
        $this->container['questionnaire_code'] = isset($data['questionnaire_code']) ? $data['questionnaire_code'] : null;
        $this->container['entry_organization_code'] = isset($data['entry_organization_code']) ? $data['entry_organization_code'] : null;
        $this->container['apply_to_order_number'] = isset($data['apply_to_order_number']) ? $data['apply_to_order_number'] : null;
        $this->container['referred_by_customer_number'] = isset($data['referred_by_customer_number']) ? $data['referred_by_customer_number'] : null;
        $this->container['premium_set_code'] = isset($data['premium_set_code']) ? $data['premium_set_code'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['installment_billing'] = isset($data['installment_billing']) ? $data['installment_billing'] : null;
        $this->container['default_payment_id'] = isset($data['default_payment_id']) ? $data['default_payment_id'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['associated_orders'] = isset($data['associated_orders']) ? $data['associated_orders'] : null;
        $this->container['applied_gift_certificates'] = isset($data['applied_gift_certificates']) ? $data['applied_gift_certificates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebBillMeAllowedAllowableValues();
        if (!is_null($this->container['web_bill_me_allowed']) && !in_array($this->container['web_bill_me_allowed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'web_bill_me_allowed', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number The Advantage order number.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Advantage\Client\Model\CombinedOrderStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Advantage\Client\Model\CombinedOrderStatus $status The overall order status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $bill_to The customer being billed for the order.
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $ship_to The customer to which the order is being shipped.
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets amounts
     *
     * @return \Advantage\Client\Model\OrderAmounts
     */
    public function getAmounts()
    {
        return $this->container['amounts'];
    }

    /**
     * Sets amounts
     *
     * @param \Advantage\Client\Model\OrderAmounts $amounts Pricing information
     *
     * @return $this
     */
    public function setAmounts($amounts)
    {
        $this->container['amounts'] = $amounts;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Advantage\Client\Model\OrderShippingInfo
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Advantage\Client\Model\OrderShippingInfo $shipping_info Shipping information
     *
     * @return $this
     */
    public function setShippingInfo($shipping_info)
    {
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets billing_organization_code
     *
     * @return string
     */
    public function getBillingOrganizationCode()
    {
        return $this->container['billing_organization_code'];
    }

    /**
     * Sets billing_organization_code
     *
     * @param string $billing_organization_code The organization being billed.
     *
     * @return $this
     */
    public function setBillingOrganizationCode($billing_organization_code)
    {
        $this->container['billing_organization_code'] = $billing_organization_code;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date The date the order is being placed.
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type The order type.
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number The purchase order number given by the customer.   Customers and sales types can be setup to require this item.
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code for the promotion the order was placed under.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets sales_rep_code
     *
     * @return string
     */
    public function getSalesRepCode()
    {
        return $this->container['sales_rep_code'];
    }

    /**
     * Sets sales_rep_code
     *
     * @param string $sales_rep_code The code identifying the sales representative receiving credit for the order.
     *
     * @return $this
     */
    public function setSalesRepCode($sales_rep_code)
    {
        $this->container['sales_rep_code'] = $sales_rep_code;

        return $this;
    }

    /**
     * Gets web_bill_me_allowed
     *
     * @return string
     */
    public function getWebBillMeAllowed()
    {
        return $this->container['web_bill_me_allowed'];
    }

    /**
     * Sets web_bill_me_allowed
     *
     * @param string $web_bill_me_allowed Are bill-me orders allowed?
     *
     * @return $this
     */
    public function setWebBillMeAllowed($web_bill_me_allowed)
    {
        $allowedValues = $this->getWebBillMeAllowedAllowableValues();
        if (!is_null($web_bill_me_allowed) && !in_array($web_bill_me_allowed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'web_bill_me_allowed', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_bill_me_allowed'] = $web_bill_me_allowed;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code for the order.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets docket_number
     *
     * @return string
     */
    public function getDocketNumber()
    {
        return $this->container['docket_number'];
    }

    /**
     * Sets docket_number
     *
     * @param string $docket_number The audit tracking number assigned to incoming documents.
     *
     * @return $this
     */
    public function setDocketNumber($docket_number)
    {
        $this->container['docket_number'] = $docket_number;

        return $this;
    }

    /**
     * Gets order_source_code
     *
     * @return string
     */
    public function getOrderSourceCode()
    {
        return $this->container['order_source_code'];
    }

    /**
     * Sets order_source_code
     *
     * @param string $order_source_code Order source, indicating how the order came in.
     *
     * @return $this
     */
    public function setOrderSourceCode($order_source_code)
    {
        $this->container['order_source_code'] = $order_source_code;

        return $this;
    }

    /**
     * Gets gratis_reason_code
     *
     * @return string
     */
    public function getGratisReasonCode()
    {
        return $this->container['gratis_reason_code'];
    }

    /**
     * Sets gratis_reason_code
     *
     * @param string $gratis_reason_code The gratis reason code, indicating why you are entering a gratis order for this customer.
     *
     * @return $this
     */
    public function setGratisReasonCode($gratis_reason_code)
    {
        $this->container['gratis_reason_code'] = $gratis_reason_code;

        return $this;
    }

    /**
     * Gets warehouse_code
     *
     * @return string
     */
    public function getWarehouseCode()
    {
        return $this->container['warehouse_code'];
    }

    /**
     * Sets warehouse_code
     *
     * @param string $warehouse_code The warehouse items will be shipped from for the current order.
     *
     * @return $this
     */
    public function setWarehouseCode($warehouse_code)
    {
        $this->container['warehouse_code'] = $warehouse_code;

        return $this;
    }

    /**
     * Gets backorder_flag
     *
     * @return string
     */
    public function getBackorderFlag()
    {
        return $this->container['backorder_flag'];
    }

    /**
     * Sets backorder_flag
     *
     * @param string $backorder_flag Are items are allowed to be back-ordered for the current order?
     *
     * @return $this
     */
    public function setBackorderFlag($backorder_flag)
    {
        $this->container['backorder_flag'] = $backorder_flag;

        return $this;
    }

    /**
     * Gets refund_flag
     *
     * @return string
     */
    public function getRefundFlag()
    {
        return $this->container['refund_flag'];
    }

    /**
     * Sets refund_flag
     *
     * @param string $refund_flag Indicates whether overpayments should be refunded to the customer.
     *
     * @return $this
     */
    public function setRefundFlag($refund_flag)
    {
        $this->container['refund_flag'] = $refund_flag;

        return $this;
    }

    /**
     * Gets control_group_date
     *
     * @return \DateTime
     */
    public function getControlGroupDate()
    {
        return $this->container['control_group_date'];
    }

    /**
     * Sets control_group_date
     *
     * @param \DateTime $control_group_date The control group date
     *
     * @return $this
     */
    public function setControlGroupDate($control_group_date)
    {
        $this->container['control_group_date'] = $control_group_date;

        return $this;
    }

    /**
     * Gets control_group_id
     *
     * @return string
     */
    public function getControlGroupId()
    {
        return $this->container['control_group_id'];
    }

    /**
     * Sets control_group_id
     *
     * @param string $control_group_id The control group ID.
     *
     * @return $this
     */
    public function setControlGroupId($control_group_id)
    {
        $this->container['control_group_id'] = $control_group_id;

        return $this;
    }

    /**
     * Gets credit_reason_code
     *
     * @return string
     */
    public function getCreditReasonCode()
    {
        return $this->container['credit_reason_code'];
    }

    /**
     * Sets credit_reason_code
     *
     * @param string $credit_reason_code The credit creason code, indicates why you are entering a credtit memo for this order
     *
     * @return $this
     */
    public function setCreditReasonCode($credit_reason_code)
    {
        $this->container['credit_reason_code'] = $credit_reason_code;

        return $this;
    }

    /**
     * Gets is_backorder_fill
     *
     * @return bool
     */
    public function getIsBackorderFill()
    {
        return $this->container['is_backorder_fill'];
    }

    /**
     * Sets is_backorder_fill
     *
     * @param bool $is_backorder_fill Is this a backorder-fill order? A backorder-fill order  is an order that was generated by Advantage to send back-ordered items that a  customer ordered as part of a previous order.
     *
     * @return $this
     */
    public function setIsBackorderFill($is_backorder_fill)
    {
        $this->container['is_backorder_fill'] = $is_backorder_fill;

        return $this;
    }

    /**
     * Gets is_on_approval
     *
     * @return bool
     */
    public function getIsOnApproval()
    {
        return $this->container['is_on_approval'];
    }

    /**
     * Sets is_on_approval
     *
     * @param bool $is_on_approval Is the order on approval?
     *
     * @return $this
     */
    public function setIsOnApproval($is_on_approval)
    {
        $this->container['is_on_approval'] = $is_on_approval;

        return $this;
    }

    /**
     * Gets is_phone_order
     *
     * @return bool
     */
    public function getIsPhoneOrder()
    {
        return $this->container['is_phone_order'];
    }

    /**
     * Sets is_phone_order
     *
     * @param bool $is_phone_order Is this a phone order?
     *
     * @return $this
     */
    public function setIsPhoneOrder($is_phone_order)
    {
        $this->container['is_phone_order'] = $is_phone_order;

        return $this;
    }

    /**
     * Gets is_premium_fill
     *
     * @return bool
     */
    public function getIsPremiumFill()
    {
        return $this->container['is_premium_fill'];
    }

    /**
     * Sets is_premium_fill
     *
     * @param bool $is_premium_fill Is this a premium-fill order?  A premium-fill order  is an order that was generated by Advantage to send premiums that a  customer earned based on another order, a payment, etc.
     *
     * @return $this
     */
    public function setIsPremiumFill($is_premium_fill)
    {
        $this->container['is_premium_fill'] = $is_premium_fill;

        return $this;
    }

    /**
     * Gets purchase_order_expire_date
     *
     * @return \DateTime
     */
    public function getPurchaseOrderExpireDate()
    {
        return $this->container['purchase_order_expire_date'];
    }

    /**
     * Sets purchase_order_expire_date
     *
     * @param \DateTime $purchase_order_expire_date The expiration date of the purchase order.
     *
     * @return $this
     */
    public function setPurchaseOrderExpireDate($purchase_order_expire_date)
    {
        $this->container['purchase_order_expire_date'] = $purchase_order_expire_date;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id A Profile Identifier Is A System-Generated Number To Uniquely Identify A Set Of Answers To Questionnaire(s).
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets proforma_order_number
     *
     * @return string
     */
    public function getProformaOrderNumber()
    {
        return $this->container['proforma_order_number'];
    }

    /**
     * Sets proforma_order_number
     *
     * @param string $proforma_order_number The originating proforma order number for current order.
     *
     * @return $this
     */
    public function setProformaOrderNumber($proforma_order_number)
    {
        $this->container['proforma_order_number'] = $proforma_order_number;

        return $this;
    }

    /**
     * Gets questionnaire_code
     *
     * @return string
     */
    public function getQuestionnaireCode()
    {
        return $this->container['questionnaire_code'];
    }

    /**
     * Sets questionnaire_code
     *
     * @param string $questionnaire_code The questionnaire name, identifying a particular extended demographics questionnaire.
     *
     * @return $this
     */
    public function setQuestionnaireCode($questionnaire_code)
    {
        $this->container['questionnaire_code'] = $questionnaire_code;

        return $this;
    }

    /**
     * Gets entry_organization_code
     *
     * @return string
     */
    public function getEntryOrganizationCode()
    {
        return $this->container['entry_organization_code'];
    }

    /**
     * Sets entry_organization_code
     *
     * @param string $entry_organization_code The organization responsible for recording the transaction.
     *
     * @return $this
     */
    public function setEntryOrganizationCode($entry_organization_code)
    {
        $this->container['entry_organization_code'] = $entry_organization_code;

        return $this;
    }

    /**
     * Gets apply_to_order_number
     *
     * @return string
     */
    public function getApplyToOrderNumber()
    {
        return $this->container['apply_to_order_number'];
    }

    /**
     * Sets apply_to_order_number
     *
     * @param string $apply_to_order_number The original order number for a credit transaction.
     *
     * @return $this
     */
    public function setApplyToOrderNumber($apply_to_order_number)
    {
        $this->container['apply_to_order_number'] = $apply_to_order_number;

        return $this;
    }

    /**
     * Gets referred_by_customer_number
     *
     * @return string
     */
    public function getReferredByCustomerNumber()
    {
        return $this->container['referred_by_customer_number'];
    }

    /**
     * Sets referred_by_customer_number
     *
     * @param string $referred_by_customer_number The customer number of the reference customer.
     *
     * @return $this
     */
    public function setReferredByCustomerNumber($referred_by_customer_number)
    {
        $this->container['referred_by_customer_number'] = $referred_by_customer_number;

        return $this;
    }

    /**
     * Gets premium_set_code
     *
     * @return string
     */
    public function getPremiumSetCode()
    {
        return $this->container['premium_set_code'];
    }

    /**
     * Sets premium_set_code
     *
     * @param string $premium_set_code The first premium set for the order.
     *
     * @return $this
     */
    public function setPremiumSetCode($premium_set_code)
    {
        $this->container['premium_set_code'] = $premium_set_code;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date The date on the invoice for the order.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Advantage\Client\Model\OrderLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Advantage\Client\Model\OrderLine[] $lines The order lines of the order.
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Advantage\Client\Model\OrderPayment[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Advantage\Client\Model\OrderPayment[] $payments The payments applied to the order.
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets installment_billing
     *
     * @return \Advantage\Client\Model\OrderInstallmentBilling
     */
    public function getInstallmentBilling()
    {
        return $this->container['installment_billing'];
    }

    /**
     * Sets installment_billing
     *
     * @param \Advantage\Client\Model\OrderInstallmentBilling $installment_billing Information pertaining to billing in installments.
     *
     * @return $this
     */
    public function setInstallmentBilling($installment_billing)
    {
        $this->container['installment_billing'] = $installment_billing;

        return $this;
    }

    /**
     * Gets default_payment_id
     *
     * @return string
     */
    public function getDefaultPaymentId()
    {
        return $this->container['default_payment_id'];
    }

    /**
     * Sets default_payment_id
     *
     * @param string $default_payment_id The default payment method. (An Advantage electronic payment identifier).
     *
     * @return $this
     */
    public function setDefaultPaymentId($default_payment_id)
    {
        $this->container['default_payment_id'] = $default_payment_id;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Advantage\Client\Model\DemographicValue[]
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Advantage\Client\Model\DemographicValue[] $demographics Demographic field values for the order
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets associated_orders
     *
     * @return \Advantage\Client\Model\AssociatedOrder[]
     */
    public function getAssociatedOrders()
    {
        return $this->container['associated_orders'];
    }

    /**
     * Sets associated_orders
     *
     * @param \Advantage\Client\Model\AssociatedOrder[] $associated_orders Associated order numbers
     *
     * @return $this
     */
    public function setAssociatedOrders($associated_orders)
    {
        $this->container['associated_orders'] = $associated_orders;

        return $this;
    }

    /**
     * Gets applied_gift_certificates
     *
     * @return \Advantage\Client\Model\AppliedGiftCertificate[]
     */
    public function getAppliedGiftCertificates()
    {
        return $this->container['applied_gift_certificates'];
    }

    /**
     * Sets applied_gift_certificates
     *
     * @param \Advantage\Client\Model\AppliedGiftCertificate[] $applied_gift_certificates The gift certificates that have been applied to this order
     *
     * @return $this
     */
    public function setAppliedGiftCertificates($applied_gift_certificates)
    {
        $this->container['applied_gift_certificates'] = $applied_gift_certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


