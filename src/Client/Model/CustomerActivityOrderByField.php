<?php
/**
 * CustomerActivityOrderByField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CustomerActivityOrderByField Class Doc Comment
 *
 * @category Class
 * @description Customer activity field to order by
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerActivityOrderByField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerActivityOrderByField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field_name' => 'string',
        'ascending' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field_name' => null,
        'ascending' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_name' => 'FieldName',
        'ascending' => 'Ascending'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_name' => 'setFieldName',
        'ascending' => 'setAscending'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_name' => 'getFieldName',
        'ascending' => 'getAscending'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FIELD_NAME_SYSTEM_NAME = 'SystemName';
    const FIELD_NAME_PRODUCT_TYPE = 'ProductType';
    const FIELD_NAME_ITEM_NUMBER = 'ItemNumber';
    const FIELD_NAME_STATUS_DESCRIPTION = 'StatusDescription';
    const FIELD_NAME_ACTIVITY_ID = 'ActivityId';
    const FIELD_NAME_TERM_NUMBER = 'TermNumber';
    const FIELD_NAME_SEQUENCE_NUMBER = 'SequenceNumber';
    const FIELD_NAME_STATUS = 'Status';
    const FIELD_NAME_CUSTOMER_NUMBER = 'CustomerNumber';
    const FIELD_NAME_ADDRESS_CODE = 'AddressCode';
    const FIELD_NAME_SUB_REFERENCE = 'SubReference';
    const FIELD_NAME_AGREEMENT_ID = 'AgreementId';
    const FIELD_NAME_CUSTOMER_PO_NUMBER = 'CustomerPoNumber';
    const FIELD_NAME_ORIGINAL_ORDER_NUMBER = 'OriginalOrderNumber';
    const FIELD_NAME_OWNING_ORGANIZATION = 'OwningOrganization';
    const FIELD_NAME_ITEM_DESCRIPTION = 'ItemDescription';
    const FIELD_NAME_FINAL_EXPIRE_DATE = 'FinalExpireDate';
    const FIELD_NAME_MEMBERSHIP_ORGANIZATION = 'MembershipOrganization';
    const FIELD_NAME_MEMBERSHIP_CATEGORY = 'MembershipCategory';
    const FIELD_NAME_CONTROL_GROUP_DATE = 'ControlGroupDate';
    const FIELD_NAME_CONTROL_GROUP_ID = 'ControlGroupId';
    const FIELD_NAME_PROMOTION_CODE = 'PromotionCode';
    const FIELD_NAME_PROMOTION_CHOICE = 'PromotionChoice';
    const FIELD_NAME_RATE = 'Rate';
    const FIELD_NAME_REMAINING_LIABILITY = 'RemainingLiability';
    const FIELD_NAME_BILLING_STATUS = 'BillingStatus';
    const FIELD_NAME_BILLING_STATUS_DESCRIPTION = 'BillingStatusDescription';
    const FIELD_NAME_CIRCULATION_STATUS = 'CirculationStatus';
    const FIELD_NAME_CIRCULATION_STATUS_DESCRIPTION = 'CirculationStatusDescription';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldNameAllowableValues()
    {
        return [
            self::FIELD_NAME_SYSTEM_NAME,
            self::FIELD_NAME_PRODUCT_TYPE,
            self::FIELD_NAME_ITEM_NUMBER,
            self::FIELD_NAME_STATUS_DESCRIPTION,
            self::FIELD_NAME_ACTIVITY_ID,
            self::FIELD_NAME_TERM_NUMBER,
            self::FIELD_NAME_SEQUENCE_NUMBER,
            self::FIELD_NAME_STATUS,
            self::FIELD_NAME_CUSTOMER_NUMBER,
            self::FIELD_NAME_ADDRESS_CODE,
            self::FIELD_NAME_SUB_REFERENCE,
            self::FIELD_NAME_AGREEMENT_ID,
            self::FIELD_NAME_CUSTOMER_PO_NUMBER,
            self::FIELD_NAME_ORIGINAL_ORDER_NUMBER,
            self::FIELD_NAME_OWNING_ORGANIZATION,
            self::FIELD_NAME_ITEM_DESCRIPTION,
            self::FIELD_NAME_FINAL_EXPIRE_DATE,
            self::FIELD_NAME_MEMBERSHIP_ORGANIZATION,
            self::FIELD_NAME_MEMBERSHIP_CATEGORY,
            self::FIELD_NAME_CONTROL_GROUP_DATE,
            self::FIELD_NAME_CONTROL_GROUP_ID,
            self::FIELD_NAME_PROMOTION_CODE,
            self::FIELD_NAME_PROMOTION_CHOICE,
            self::FIELD_NAME_RATE,
            self::FIELD_NAME_REMAINING_LIABILITY,
            self::FIELD_NAME_BILLING_STATUS,
            self::FIELD_NAME_BILLING_STATUS_DESCRIPTION,
            self::FIELD_NAME_CIRCULATION_STATUS,
            self::FIELD_NAME_CIRCULATION_STATUS_DESCRIPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_name'] = isset($data['field_name']) ? $data['field_name'] : null;
        $this->container['ascending'] = isset($data['ascending']) ? $data['ascending'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFieldNameAllowableValues();
        if (!is_null($this->container['field_name']) && !in_array($this->container['field_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'field_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_name
     *
     * @return string
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string $field_name Name of field to order by
     *
     * @return $this
     */
    public function setFieldName($field_name)
    {
        $allowedValues = $this->getFieldNameAllowableValues();
        if (!is_null($field_name) && !in_array($field_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'field_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets ascending
     *
     * @return bool
     */
    public function getAscending()
    {
        return $this->container['ascending'];
    }

    /**
     * Sets ascending
     *
     * @param bool $ascending True if order is ascending; false if order is descending
     *
     * @return $this
     */
    public function setAscending($ascending)
    {
        $this->container['ascending'] = $ascending;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


