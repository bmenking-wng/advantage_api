<?php
/**
 * ProductSearchFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ProductSearchFilter Class Doc Comment
 *
 * @category Class
 * @description Information for filtering a product search.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductSearchFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductSearchFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'match_type' => 'string',
        'order_by' => 'string',
        'subject_tree_level_id' => 'string',
        'sales_analysis_category_code' => 'string',
        'owning_organization_code' => 'string',
        'product_types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'match_type' => null,
        'order_by' => null,
        'subject_tree_level_id' => null,
        'sales_analysis_category_code' => null,
        'owning_organization_code' => null,
        'product_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'match_type' => 'MatchType',
        'order_by' => 'OrderBy',
        'subject_tree_level_id' => 'SubjectTreeLevelId',
        'sales_analysis_category_code' => 'SalesAnalysisCategoryCode',
        'owning_organization_code' => 'OwningOrganizationCode',
        'product_types' => 'ProductTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'match_type' => 'setMatchType',
        'order_by' => 'setOrderBy',
        'subject_tree_level_id' => 'setSubjectTreeLevelId',
        'sales_analysis_category_code' => 'setSalesAnalysisCategoryCode',
        'owning_organization_code' => 'setOwningOrganizationCode',
        'product_types' => 'setProductTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'match_type' => 'getMatchType',
        'order_by' => 'getOrderBy',
        'subject_tree_level_id' => 'getSubjectTreeLevelId',
        'sales_analysis_category_code' => 'getSalesAnalysisCategoryCode',
        'owning_organization_code' => 'getOwningOrganizationCode',
        'product_types' => 'getProductTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MATCH_TYPE_ALL_WORDS = 'AllWords';
    const MATCH_TYPE_ANY_WORDS = 'AnyWords';
    const MATCH_TYPE_ENTIRE_PHRASE = 'EntirePhrase';
    const MATCH_TYPE_PREFIX = 'Prefix';
    const ORDER_BY_TITLE = 'Title';
    const ORDER_BY_TITLE_DESCENDING = 'TitleDescending';
    const ORDER_BY_LIST_PRICE = 'ListPrice';
    const ORDER_BY_LIST_PRICE_DESCENDING = 'ListPriceDescending';
    const ORDER_BY_POPULARITY = 'Popularity';
    const ORDER_BY_POPULARITY_DESCENDING = 'PopularityDescending';
    const ORDER_BY_ITEM_NUMBER = 'ItemNumber';
    const ORDER_BY_ITEM_NUMBER_DESCENDING = 'ItemNumberDescending';
    const ORDER_BY_DATE_PUBLISHED = 'DatePublished';
    const ORDER_BY_DATE_PUBLISHED_DESCENDING = 'DatePublishedDescending';
    const PRODUCT_TYPES_PRODUCT = 'Product';
    const PRODUCT_TYPES_SUBSCRIPTION = 'Subscription';
    const PRODUCT_TYPES_ACCESS = 'Access';
    const PRODUCT_TYPES_CONFERENCE = 'Conference';
    const PRODUCT_TYPES_BACK_ISSUE = 'BackIssue';
    const PRODUCT_TYPES_PACKAGE = 'Package';
    const PRODUCT_TYPES_UNKNOWN = 'Unknown';
    const PRODUCT_TYPES_MEMBERSHIP = 'Membership';
    const PRODUCT_TYPES_DONATION = 'Donation';
    const PRODUCT_TYPES_PRINT_JOB = 'PrintJob';
    const PRODUCT_TYPES_REPRINT = 'Reprint';
    const PRODUCT_TYPES_SERVICE = 'Service';
    const PRODUCT_TYPES_STOCK = 'Stock';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchTypeAllowableValues()
    {
        return [
            self::MATCH_TYPE_ALL_WORDS,
            self::MATCH_TYPE_ANY_WORDS,
            self::MATCH_TYPE_ENTIRE_PHRASE,
            self::MATCH_TYPE_PREFIX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues()
    {
        return [
            self::ORDER_BY_TITLE,
            self::ORDER_BY_TITLE_DESCENDING,
            self::ORDER_BY_LIST_PRICE,
            self::ORDER_BY_LIST_PRICE_DESCENDING,
            self::ORDER_BY_POPULARITY,
            self::ORDER_BY_POPULARITY_DESCENDING,
            self::ORDER_BY_ITEM_NUMBER,
            self::ORDER_BY_ITEM_NUMBER_DESCENDING,
            self::ORDER_BY_DATE_PUBLISHED,
            self::ORDER_BY_DATE_PUBLISHED_DESCENDING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypesAllowableValues()
    {
        return [
            self::PRODUCT_TYPES_PRODUCT,
            self::PRODUCT_TYPES_SUBSCRIPTION,
            self::PRODUCT_TYPES_ACCESS,
            self::PRODUCT_TYPES_CONFERENCE,
            self::PRODUCT_TYPES_BACK_ISSUE,
            self::PRODUCT_TYPES_PACKAGE,
            self::PRODUCT_TYPES_UNKNOWN,
            self::PRODUCT_TYPES_MEMBERSHIP,
            self::PRODUCT_TYPES_DONATION,
            self::PRODUCT_TYPES_PRINT_JOB,
            self::PRODUCT_TYPES_REPRINT,
            self::PRODUCT_TYPES_SERVICE,
            self::PRODUCT_TYPES_STOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['match_type'] = isset($data['match_type']) ? $data['match_type'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['subject_tree_level_id'] = isset($data['subject_tree_level_id']) ? $data['subject_tree_level_id'] : null;
        $this->container['sales_analysis_category_code'] = isset($data['sales_analysis_category_code']) ? $data['sales_analysis_category_code'] : null;
        $this->container['owning_organization_code'] = isset($data['owning_organization_code']) ? $data['owning_organization_code'] : null;
        $this->container['product_types'] = isset($data['product_types']) ? $data['product_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMatchTypeAllowableValues();
        if (!is_null($this->container['match_type']) && !in_array($this->container['match_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'match_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['order_by']) && !in_array($this->container['order_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets match_type
     *
     * @return string
     */
    public function getMatchType()
    {
        return $this->container['match_type'];
    }

    /**
     * Sets match_type
     *
     * @param string $match_type The type of matching to use for the search.
     *
     * @return $this
     */
    public function setMatchType($match_type)
    {
        $allowedValues = $this->getMatchTypeAllowableValues();
        if (!is_null($match_type) && !in_array($match_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'match_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['match_type'] = $match_type;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by The type of ordering on the search.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($order_by) && !in_array($order_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets subject_tree_level_id
     *
     * @return string
     */
    public function getSubjectTreeLevelId()
    {
        return $this->container['subject_tree_level_id'];
    }

    /**
     * Sets subject_tree_level_id
     *
     * @param string $subject_tree_level_id The ID of the subject tree level to search.
     *
     * @return $this
     */
    public function setSubjectTreeLevelId($subject_tree_level_id)
    {
        $this->container['subject_tree_level_id'] = $subject_tree_level_id;

        return $this;
    }

    /**
     * Gets sales_analysis_category_code
     *
     * @return string
     */
    public function getSalesAnalysisCategoryCode()
    {
        return $this->container['sales_analysis_category_code'];
    }

    /**
     * Sets sales_analysis_category_code
     *
     * @param string $sales_analysis_category_code Restrict search to products within the given sales analysis code (or blank).
     *
     * @return $this
     */
    public function setSalesAnalysisCategoryCode($sales_analysis_category_code)
    {
        $this->container['sales_analysis_category_code'] = $sales_analysis_category_code;

        return $this;
    }

    /**
     * Gets owning_organization_code
     *
     * @return string
     */
    public function getOwningOrganizationCode()
    {
        return $this->container['owning_organization_code'];
    }

    /**
     * Sets owning_organization_code
     *
     * @param string $owning_organization_code Owning organizations to filter by.
     *
     * @return $this
     */
    public function setOwningOrganizationCode($owning_organization_code)
    {
        $this->container['owning_organization_code'] = $owning_organization_code;

        return $this;
    }

    /**
     * Gets product_types
     *
     * @return string[]
     */
    public function getProductTypes()
    {
        return $this->container['product_types'];
    }

    /**
     * Sets product_types
     *
     * @param string[] $product_types List of product types to include in search. If null, all product types are included.
     *
     * @return $this
     */
    public function setProductTypes($product_types)
    {
        $allowedValues = $this->getProductTypesAllowableValues();
        if (!is_null($product_types) && array_diff($product_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_types'] = $product_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


