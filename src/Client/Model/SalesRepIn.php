<?php
/**
 * SalesRepIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SalesRepIn Class Doc Comment
 *
 * @category Class
 * @description Sales Rep In Model
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesRepIn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesRepIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'group' => '\Advantage\Client\Model\CustomValue',
        'name' => 'string',
        'code' => 'string',
        'territory_name' => 'string',
        'option_number' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'phone' => 'string',
        'organization_code' => 'string',
        'supervisor_code' => 'string',
        'initials' => 'string',
        'commission_cycle_code' => 'string',
        'commission_method_code' => 'string',
        'payee_vendor_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'group' => null,
        'name' => null,
        'code' => null,
        'territory_name' => null,
        'option_number' => null,
        'email' => null,
        'fax' => null,
        'phone' => null,
        'organization_code' => null,
        'supervisor_code' => null,
        'initials' => null,
        'commission_cycle_code' => null,
        'commission_method_code' => null,
        'payee_vendor_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'group' => 'Group',
        'name' => 'Name',
        'code' => 'Code',
        'territory_name' => 'TerritoryName',
        'option_number' => 'OptionNumber',
        'email' => 'Email',
        'fax' => 'Fax',
        'phone' => 'Phone',
        'organization_code' => 'OrganizationCode',
        'supervisor_code' => 'SupervisorCode',
        'initials' => 'Initials',
        'commission_cycle_code' => 'CommissionCycleCode',
        'commission_method_code' => 'CommissionMethodCode',
        'payee_vendor_number' => 'PayeeVendorNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'group' => 'setGroup',
        'name' => 'setName',
        'code' => 'setCode',
        'territory_name' => 'setTerritoryName',
        'option_number' => 'setOptionNumber',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'phone' => 'setPhone',
        'organization_code' => 'setOrganizationCode',
        'supervisor_code' => 'setSupervisorCode',
        'initials' => 'setInitials',
        'commission_cycle_code' => 'setCommissionCycleCode',
        'commission_method_code' => 'setCommissionMethodCode',
        'payee_vendor_number' => 'setPayeeVendorNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'group' => 'getGroup',
        'name' => 'getName',
        'code' => 'getCode',
        'territory_name' => 'getTerritoryName',
        'option_number' => 'getOptionNumber',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'phone' => 'getPhone',
        'organization_code' => 'getOrganizationCode',
        'supervisor_code' => 'getSupervisorCode',
        'initials' => 'getInitials',
        'commission_cycle_code' => 'getCommissionCycleCode',
        'commission_method_code' => 'getCommissionMethodCode',
        'payee_vendor_number' => 'getPayeeVendorNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['territory_name'] = isset($data['territory_name']) ? $data['territory_name'] : null;
        $this->container['option_number'] = isset($data['option_number']) ? $data['option_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['organization_code'] = isset($data['organization_code']) ? $data['organization_code'] : null;
        $this->container['supervisor_code'] = isset($data['supervisor_code']) ? $data['supervisor_code'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['commission_cycle_code'] = isset($data['commission_cycle_code']) ? $data['commission_cycle_code'] : null;
        $this->container['commission_method_code'] = isset($data['commission_method_code']) ? $data['commission_method_code'] : null;
        $this->container['payee_vendor_number'] = isset($data['payee_vendor_number']) ? $data['payee_vendor_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Customer Number of owning customer
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Advantage\Client\Model\CustomValue
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Advantage\Client\Model\CustomValue $group Sales Rep Group Name and Code
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of Sales Rep
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Returns the sales rep number
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets territory_name
     *
     * @return string
     */
    public function getTerritoryName()
    {
        return $this->container['territory_name'];
    }

    /**
     * Sets territory_name
     *
     * @param string $territory_name Sales Rep's Territory
     *
     * @return $this
     */
    public function setTerritoryName($territory_name)
    {
        $this->container['territory_name'] = $territory_name;

        return $this;
    }

    /**
     * Gets option_number
     *
     * @return string
     */
    public function getOptionNumber()
    {
        return $this->container['option_number'];
    }

    /**
     * Sets option_number
     *
     * @param string $option_number Option number for the current sales rep.  The option number is a client specific attribute of a sales representative.
     *
     * @return $this
     */
    public function setOptionNumber($option_number)
    {
        $this->container['option_number'] = $option_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address for the current sales rep
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax Fax number for the current sales rep.  The fax number is the telephone number of the sales rep's fax machine.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone number for the current sales rep.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets organization_code
     *
     * @return string
     */
    public function getOrganizationCode()
    {
        return $this->container['organization_code'];
    }

    /**
     * Sets organization_code
     *
     * @param string $organization_code Organization Code for the current sales rep.
     *
     * @return $this
     */
    public function setOrganizationCode($organization_code)
    {
        $this->container['organization_code'] = $organization_code;

        return $this;
    }

    /**
     * Gets supervisor_code
     *
     * @return string
     */
    public function getSupervisorCode()
    {
        return $this->container['supervisor_code'];
    }

    /**
     * Sets supervisor_code
     *
     * @param string $supervisor_code Sales rep supervisor for the current sales rep.  This is a sales rep number of another sales rep.
     *
     * @return $this
     */
    public function setSupervisorCode($supervisor_code)
    {
        $this->container['supervisor_code'] = $supervisor_code;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials Sales rep initials for the current sales rep
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets commission_cycle_code
     *
     * @return string
     */
    public function getCommissionCycleCode()
    {
        return $this->container['commission_cycle_code'];
    }

    /**
     * Sets commission_cycle_code
     *
     * @param string $commission_cycle_code Commission cycle for the current sales rep.  The commission cycle indicates when commissions are paid (Monthly, Bimonthly, Weekly,...).  These values are setup at CDSVLU. Keyword name: COM-CYC.
     *
     * @return $this
     */
    public function setCommissionCycleCode($commission_cycle_code)
    {
        $this->container['commission_cycle_code'] = $commission_cycle_code;

        return $this;
    }

    /**
     * Gets commission_method_code
     *
     * @return string
     */
    public function getCommissionMethodCode()
    {
        return $this->container['commission_method_code'];
    }

    /**
     * Sets commission_method_code
     *
     * @param string $commission_method_code Commission method for the current sales rep.  The commission method indicates whether commissions are paid through A/P ('A') or   payroll ('P'). Blank means \"not used\".
     *
     * @return $this
     */
    public function setCommissionMethodCode($commission_method_code)
    {
        $this->container['commission_method_code'] = $commission_method_code;

        return $this;
    }

    /**
     * Gets payee_vendor_number
     *
     * @return string
     */
    public function getPayeeVendorNumber()
    {
        return $this->container['payee_vendor_number'];
    }

    /**
     * Sets payee_vendor_number
     *
     * @param string $payee_vendor_number Sales rep payee number for the current sales rep.   The sales rep payee number identifies a vendor or an employee.  These values are setup at CDSVLU. Keyword name: SLM-EMP.
     *
     * @return $this
     */
    public function setPayeeVendorNumber($payee_vendor_number)
    {
        $this->container['payee_vendor_number'] = $payee_vendor_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


