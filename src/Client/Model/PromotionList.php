<?php
/**
 * PromotionList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PromotionList Class Doc Comment
 *
 * @category Class
 * @description Information related to a promotion mailing list.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'list_type_code' => 'string',
        'industry' => 'string',
        'origin' => 'string',
        'format' => 'string',
        'cost' => 'double',
        'local_currency_code' => 'string',
        'owner' => 'string',
        'broker' => 'string',
        'contact_name_number' => 'string',
        'is_repeat_use_allowed' => 'bool',
        'list_code' => 'string',
        'list_size' => 'int',
        'usage_limit' => 'int',
        'is_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'list_type_code' => null,
        'industry' => null,
        'origin' => null,
        'format' => null,
        'cost' => 'double',
        'local_currency_code' => null,
        'owner' => null,
        'broker' => null,
        'contact_name_number' => null,
        'is_repeat_use_allowed' => null,
        'list_code' => null,
        'list_size' => 'int32',
        'usage_limit' => 'int32',
        'is_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'list_type_code' => 'ListTypeCode',
        'industry' => 'Industry',
        'origin' => 'Origin',
        'format' => 'Format',
        'cost' => 'Cost',
        'local_currency_code' => 'LocalCurrencyCode',
        'owner' => 'Owner',
        'broker' => 'Broker',
        'contact_name_number' => 'ContactNameNumber',
        'is_repeat_use_allowed' => 'IsRepeatUseAllowed',
        'list_code' => 'ListCode',
        'list_size' => 'ListSize',
        'usage_limit' => 'UsageLimit',
        'is_active' => 'IsActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'list_type_code' => 'setListTypeCode',
        'industry' => 'setIndustry',
        'origin' => 'setOrigin',
        'format' => 'setFormat',
        'cost' => 'setCost',
        'local_currency_code' => 'setLocalCurrencyCode',
        'owner' => 'setOwner',
        'broker' => 'setBroker',
        'contact_name_number' => 'setContactNameNumber',
        'is_repeat_use_allowed' => 'setIsRepeatUseAllowed',
        'list_code' => 'setListCode',
        'list_size' => 'setListSize',
        'usage_limit' => 'setUsageLimit',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'list_type_code' => 'getListTypeCode',
        'industry' => 'getIndustry',
        'origin' => 'getOrigin',
        'format' => 'getFormat',
        'cost' => 'getCost',
        'local_currency_code' => 'getLocalCurrencyCode',
        'owner' => 'getOwner',
        'broker' => 'getBroker',
        'contact_name_number' => 'getContactNameNumber',
        'is_repeat_use_allowed' => 'getIsRepeatUseAllowed',
        'list_code' => 'getListCode',
        'list_size' => 'getListSize',
        'usage_limit' => 'getUsageLimit',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['list_type_code'] = isset($data['list_type_code']) ? $data['list_type_code'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['local_currency_code'] = isset($data['local_currency_code']) ? $data['local_currency_code'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['broker'] = isset($data['broker']) ? $data['broker'] : null;
        $this->container['contact_name_number'] = isset($data['contact_name_number']) ? $data['contact_name_number'] : null;
        $this->container['is_repeat_use_allowed'] = isset($data['is_repeat_use_allowed']) ? $data['is_repeat_use_allowed'] : null;
        $this->container['list_code'] = isset($data['list_code']) ? $data['list_code'] : null;
        $this->container['list_size'] = isset($data['list_size']) ? $data['list_size'] : null;
        $this->container['usage_limit'] = isset($data['usage_limit']) ? $data['usage_limit'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Promotion Mailing List Code/ID
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Promotion Mailing List Name/Description
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets list_type_code
     *
     * @return string
     */
    public function getListTypeCode()
    {
        return $this->container['list_type_code'];
    }

    /**
     * Sets list_type_code
     *
     * @param string $list_type_code List Type Code
     *
     * @return $this
     */
    public function setListTypeCode($list_type_code)
    {
        $this->container['list_type_code'] = $list_type_code;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry Industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost Cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets local_currency_code
     *
     * @return string
     */
    public function getLocalCurrencyCode()
    {
        return $this->container['local_currency_code'];
    }

    /**
     * Sets local_currency_code
     *
     * @param string $local_currency_code Local Currency Code
     *
     * @return $this
     */
    public function setLocalCurrencyCode($local_currency_code)
    {
        $this->container['local_currency_code'] = $local_currency_code;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string $broker Broker
     *
     * @return $this
     */
    public function setBroker($broker)
    {
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets contact_name_number
     *
     * @return string
     */
    public function getContactNameNumber()
    {
        return $this->container['contact_name_number'];
    }

    /**
     * Sets contact_name_number
     *
     * @param string $contact_name_number Contact Name/Number
     *
     * @return $this
     */
    public function setContactNameNumber($contact_name_number)
    {
        $this->container['contact_name_number'] = $contact_name_number;

        return $this;
    }

    /**
     * Gets is_repeat_use_allowed
     *
     * @return bool
     */
    public function getIsRepeatUseAllowed()
    {
        return $this->container['is_repeat_use_allowed'];
    }

    /**
     * Sets is_repeat_use_allowed
     *
     * @param bool $is_repeat_use_allowed Allow Repeat Use of List?
     *
     * @return $this
     */
    public function setIsRepeatUseAllowed($is_repeat_use_allowed)
    {
        $this->container['is_repeat_use_allowed'] = $is_repeat_use_allowed;

        return $this;
    }

    /**
     * Gets list_code
     *
     * @return string
     */
    public function getListCode()
    {
        return $this->container['list_code'];
    }

    /**
     * Sets list_code
     *
     * @param string $list_code LST List Code
     *
     * @return $this
     */
    public function setListCode($list_code)
    {
        $this->container['list_code'] = $list_code;

        return $this;
    }

    /**
     * Gets list_size
     *
     * @return int
     */
    public function getListSize()
    {
        return $this->container['list_size'];
    }

    /**
     * Sets list_size
     *
     * @param int $list_size Size (number of names) of list
     *
     * @return $this
     */
    public function setListSize($list_size)
    {
        $this->container['list_size'] = $list_size;

        return $this;
    }

    /**
     * Gets usage_limit
     *
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     *
     * @param int $usage_limit Maximum times a name can be used
     *
     * @return $this
     */
    public function setUsageLimit($usage_limit)
    {
        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Is this promotion list active?
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


