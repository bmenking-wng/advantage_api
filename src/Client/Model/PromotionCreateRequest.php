<?php
/**
 * PromotionCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PromotionCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Information for creating a new promotion.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'promotion_code' => 'string',
        'campaign_code' => 'string',
        'offer_code' => 'string',
        'is_active' => 'bool',
        'name_line1' => 'string',
        'name_line2' => 'string',
        'initiator' => 'string',
        'url' => 'string',
        'narratives' => '\Advantage\Client\Model\Narrative[]',
        'date_sent' => '\DateTime',
        'effective_to' => '\DateTime',
        'effective_from' => '\DateTime',
        'creative_key' => '\Advantage\Client\Model\PromotionCreativeKey',
        'value_list' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'promotion_code' => null,
        'campaign_code' => null,
        'offer_code' => null,
        'is_active' => null,
        'name_line1' => null,
        'name_line2' => null,
        'initiator' => null,
        'url' => null,
        'narratives' => null,
        'date_sent' => 'date-time',
        'effective_to' => 'date-time',
        'effective_from' => 'date-time',
        'creative_key' => null,
        'value_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'promotion_code' => 'PromotionCode',
        'campaign_code' => 'CampaignCode',
        'offer_code' => 'OfferCode',
        'is_active' => 'IsActive',
        'name_line1' => 'NameLine1',
        'name_line2' => 'NameLine2',
        'initiator' => 'Initiator',
        'url' => 'Url',
        'narratives' => 'Narratives',
        'date_sent' => 'DateSent',
        'effective_to' => 'EffectiveTo',
        'effective_from' => 'EffectiveFrom',
        'creative_key' => 'CreativeKey',
        'value_list' => 'ValueList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'promotion_code' => 'setPromotionCode',
        'campaign_code' => 'setCampaignCode',
        'offer_code' => 'setOfferCode',
        'is_active' => 'setIsActive',
        'name_line1' => 'setNameLine1',
        'name_line2' => 'setNameLine2',
        'initiator' => 'setInitiator',
        'url' => 'setUrl',
        'narratives' => 'setNarratives',
        'date_sent' => 'setDateSent',
        'effective_to' => 'setEffectiveTo',
        'effective_from' => 'setEffectiveFrom',
        'creative_key' => 'setCreativeKey',
        'value_list' => 'setValueList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'promotion_code' => 'getPromotionCode',
        'campaign_code' => 'getCampaignCode',
        'offer_code' => 'getOfferCode',
        'is_active' => 'getIsActive',
        'name_line1' => 'getNameLine1',
        'name_line2' => 'getNameLine2',
        'initiator' => 'getInitiator',
        'url' => 'getUrl',
        'narratives' => 'getNarratives',
        'date_sent' => 'getDateSent',
        'effective_to' => 'getEffectiveTo',
        'effective_from' => 'getEffectiveFrom',
        'creative_key' => 'getCreativeKey',
        'value_list' => 'getValueList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['campaign_code'] = isset($data['campaign_code']) ? $data['campaign_code'] : null;
        $this->container['offer_code'] = isset($data['offer_code']) ? $data['offer_code'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['name_line1'] = isset($data['name_line1']) ? $data['name_line1'] : null;
        $this->container['name_line2'] = isset($data['name_line2']) ? $data['name_line2'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['narratives'] = isset($data['narratives']) ? $data['narratives'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['effective_to'] = isset($data['effective_to']) ? $data['effective_to'] : null;
        $this->container['effective_from'] = isset($data['effective_from']) ? $data['effective_from'] : null;
        $this->container['creative_key'] = isset($data['creative_key']) ? $data['creative_key'] : null;
        $this->container['value_list'] = isset($data['value_list']) ? $data['value_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code to identify the new promotion.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets campaign_code
     *
     * @return string
     */
    public function getCampaignCode()
    {
        return $this->container['campaign_code'];
    }

    /**
     * Sets campaign_code
     *
     * @param string $campaign_code The campaign code to identify the highest level of marketing and promotion tracking.
     *
     * @return $this
     */
    public function setCampaignCode($campaign_code)
    {
        $this->container['campaign_code'] = $campaign_code;

        return $this;
    }

    /**
     * Gets offer_code
     *
     * @return string
     */
    public function getOfferCode()
    {
        return $this->container['offer_code'];
    }

    /**
     * Sets offer_code
     *
     * @param string $offer_code The offer code to identify the promotion offer.
     *
     * @return $this
     */
    public function setOfferCode($offer_code)
    {
        $this->container['offer_code'] = $offer_code;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Is the promotion available for use?
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets name_line1
     *
     * @return string
     */
    public function getNameLine1()
    {
        return $this->container['name_line1'];
    }

    /**
     * Sets name_line1
     *
     * @param string $name_line1 The first line of the name of the promotion.
     *
     * @return $this
     */
    public function setNameLine1($name_line1)
    {
        $this->container['name_line1'] = $name_line1;

        return $this;
    }

    /**
     * Gets name_line2
     *
     * @return string
     */
    public function getNameLine2()
    {
        return $this->container['name_line2'];
    }

    /**
     * Sets name_line2
     *
     * @param string $name_line2 The second line of the name of the promotion.
     *
     * @return $this
     */
    public function setNameLine2($name_line2)
    {
        $this->container['name_line2'] = $name_line2;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return string
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param string $initiator The initiator of the promotion.
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL to direct to the promotion landing page.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets narratives
     *
     * @return \Advantage\Client\Model\Narrative[]
     */
    public function getNarratives()
    {
        return $this->container['narratives'];
    }

    /**
     * Sets narratives
     *
     * @param \Advantage\Client\Model\Narrative[] $narratives Optional text describing a promotion, defined for each type of narrative (e.g. mobile, desktop).
     *
     * @return $this
     */
    public function setNarratives($narratives)
    {
        $this->container['narratives'] = $narratives;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return \DateTime
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param \DateTime $date_sent The date the promotion was sent to consumers.
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets effective_to
     *
     * @return \DateTime
     */
    public function getEffectiveTo()
    {
        return $this->container['effective_to'];
    }

    /**
     * Sets effective_to
     *
     * @param \DateTime $effective_to Date, up to which, the promotion is valid
     *
     * @return $this
     */
    public function setEffectiveTo($effective_to)
    {
        $this->container['effective_to'] = $effective_to;

        return $this;
    }

    /**
     * Gets effective_from
     *
     * @return \DateTime
     */
    public function getEffectiveFrom()
    {
        return $this->container['effective_from'];
    }

    /**
     * Sets effective_from
     *
     * @param \DateTime $effective_from Date, from which, the promotion is valid
     *
     * @return $this
     */
    public function setEffectiveFrom($effective_from)
    {
        $this->container['effective_from'] = $effective_from;

        return $this;
    }

    /**
     * Gets creative_key
     *
     * @return \Advantage\Client\Model\PromotionCreativeKey
     */
    public function getCreativeKey()
    {
        return $this->container['creative_key'];
    }

    /**
     * Sets creative_key
     *
     * @param \Advantage\Client\Model\PromotionCreativeKey $creative_key Information to uniquely identify the promotion creative associated with this promotion
     *
     * @return $this
     */
    public function setCreativeKey($creative_key)
    {
        $this->container['creative_key'] = $creative_key;

        return $this;
    }

    /**
     * Gets value_list
     *
     * @return bool
     */
    public function getValueList()
    {
        return $this->container['value_list'];
    }

    /**
     * Sets value_list
     *
     * @param bool $value_list Determines if value will be displayed in value list for  promotion items
     *
     * @return $this
     */
    public function setValueList($value_list)
    {
        $this->container['value_list'] = $value_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


