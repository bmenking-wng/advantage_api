<?php
/**
 * SiteSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SiteSettings Class Doc Comment
 *
 * @category Class
 * @description Foundation website-specific settings.  (Note: this is a deprecated feature.)
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SiteSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'cache_duration_options' => 'int',
        'cache_duration_valid_values' => 'int',
        'cache_duration_catalog' => 'int',
        'cache_duration_search_results' => 'int',
        'cache_duration_other_setup' => 'int',
        'cache_duration_session' => 'int',
        'note_user' => 'string',
        'question_choice_sort_order' => 'string',
        'question_name_as_prompt' => 'bool',
        'response_name_as_prompt' => 'bool',
        'quick_order_display_logout' => 'bool',
        'quick_order_show_promo_link' => 'string',
        'quick_order_brief_sub_status' => 'bool',
        'launch_pad_promo_entry' => 'bool',
        'require_company_name' => 'bool',
        'full_description_narrative_type' => 'string',
        'brief_description_narrative_type' => 'string',
        'currency_code' => 'string',
        'default_catalog_promotion_code' => 'string',
        'display_sales_pitch' => 'bool',
        'display_cart_add_gift_link' => 'bool',
        'display_phone_number2' => 'bool',
        'display_phone_number3' => 'bool',
        'default_entry_organization' => 'string',
        'authentication_group' => 'string',
        'renewal_notice_days' => 'int',
        'allow_bill_me' => 'bool',
        'cart_expire_days' => 'int',
        'ship_to_relationship_code' => 'string',
        'also_purchased_history_days' => 'int',
        'also_purchased_max_rows' => 'int',
        'also_purchased_threshold' => 'int',
        'root_tree_level' => 'string',
        'quick_order_default_promotion' => 'string',
        'quick_order_hide_product_list' => 'bool',
        'quick_order_show_confirmation' => 'bool',
        'checkout_coupon_entry' => 'bool',
        'order_confirmation_template' => 'string',
        'allow_referrals' => 'bool',
        'display_premium_fill_orders' => 'string',
        'display_backorder_fill_orders' => 'string',
        'allow_sub_address_change' => 'string',
        'billing_promotion_default' => 'string',
        'launch_pad_default_renewal_promotion' => 'string',
        'site_subscriptions_auto_forward' => 'bool',
        'maximum_cir_emails' => 'int',
        'international_ship_via' => 'string',
        'e_miles_pass_code' => 'string',
        'auto_create_amb_authorizations' => 'bool',
        'default_docket_number' => 'string',
        'show_saved_credit_cards' => 'bool',
        'is_phone_number2_shown' => 'bool',
        'is_phone_number3_shown' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'cache_duration_options' => 'int32',
        'cache_duration_valid_values' => 'int32',
        'cache_duration_catalog' => 'int32',
        'cache_duration_search_results' => 'int32',
        'cache_duration_other_setup' => 'int32',
        'cache_duration_session' => 'int32',
        'note_user' => null,
        'question_choice_sort_order' => null,
        'question_name_as_prompt' => null,
        'response_name_as_prompt' => null,
        'quick_order_display_logout' => null,
        'quick_order_show_promo_link' => null,
        'quick_order_brief_sub_status' => null,
        'launch_pad_promo_entry' => null,
        'require_company_name' => null,
        'full_description_narrative_type' => null,
        'brief_description_narrative_type' => null,
        'currency_code' => null,
        'default_catalog_promotion_code' => null,
        'display_sales_pitch' => null,
        'display_cart_add_gift_link' => null,
        'display_phone_number2' => null,
        'display_phone_number3' => null,
        'default_entry_organization' => null,
        'authentication_group' => null,
        'renewal_notice_days' => 'int32',
        'allow_bill_me' => null,
        'cart_expire_days' => 'int32',
        'ship_to_relationship_code' => null,
        'also_purchased_history_days' => 'int32',
        'also_purchased_max_rows' => 'int32',
        'also_purchased_threshold' => 'int32',
        'root_tree_level' => null,
        'quick_order_default_promotion' => null,
        'quick_order_hide_product_list' => null,
        'quick_order_show_confirmation' => null,
        'checkout_coupon_entry' => null,
        'order_confirmation_template' => null,
        'allow_referrals' => null,
        'display_premium_fill_orders' => null,
        'display_backorder_fill_orders' => null,
        'allow_sub_address_change' => null,
        'billing_promotion_default' => null,
        'launch_pad_default_renewal_promotion' => null,
        'site_subscriptions_auto_forward' => null,
        'maximum_cir_emails' => 'int32',
        'international_ship_via' => null,
        'e_miles_pass_code' => null,
        'auto_create_amb_authorizations' => null,
        'default_docket_number' => null,
        'show_saved_credit_cards' => null,
        'is_phone_number2_shown' => null,
        'is_phone_number3_shown' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'cache_duration_options' => 'CacheDurationOptions',
        'cache_duration_valid_values' => 'CacheDurationValidValues',
        'cache_duration_catalog' => 'CacheDurationCatalog',
        'cache_duration_search_results' => 'CacheDurationSearchResults',
        'cache_duration_other_setup' => 'CacheDurationOtherSetup',
        'cache_duration_session' => 'CacheDurationSession',
        'note_user' => 'NoteUser',
        'question_choice_sort_order' => 'QuestionChoiceSortOrder',
        'question_name_as_prompt' => 'QuestionNameAsPrompt',
        'response_name_as_prompt' => 'ResponseNameAsPrompt',
        'quick_order_display_logout' => 'QuickOrderDisplayLogout',
        'quick_order_show_promo_link' => 'QuickOrderShowPromoLink',
        'quick_order_brief_sub_status' => 'QuickOrderBriefSubStatus',
        'launch_pad_promo_entry' => 'LaunchPadPromoEntry',
        'require_company_name' => 'RequireCompanyName',
        'full_description_narrative_type' => 'FullDescriptionNarrativeType',
        'brief_description_narrative_type' => 'BriefDescriptionNarrativeType',
        'currency_code' => 'CurrencyCode',
        'default_catalog_promotion_code' => 'DefaultCatalogPromotionCode',
        'display_sales_pitch' => 'DisplaySalesPitch',
        'display_cart_add_gift_link' => 'DisplayCartAddGiftLink',
        'display_phone_number2' => 'DisplayPhoneNumber2',
        'display_phone_number3' => 'DisplayPhoneNumber3',
        'default_entry_organization' => 'DefaultEntryOrganization',
        'authentication_group' => 'AuthenticationGroup',
        'renewal_notice_days' => 'RenewalNoticeDays',
        'allow_bill_me' => 'AllowBillMe',
        'cart_expire_days' => 'CartExpireDays',
        'ship_to_relationship_code' => 'ShipToRelationshipCode',
        'also_purchased_history_days' => 'AlsoPurchasedHistoryDays',
        'also_purchased_max_rows' => 'AlsoPurchasedMaxRows',
        'also_purchased_threshold' => 'AlsoPurchasedThreshold',
        'root_tree_level' => 'RootTreeLevel',
        'quick_order_default_promotion' => 'QuickOrderDefaultPromotion',
        'quick_order_hide_product_list' => 'QuickOrderHideProductList',
        'quick_order_show_confirmation' => 'QuickOrderShowConfirmation',
        'checkout_coupon_entry' => 'CheckoutCouponEntry',
        'order_confirmation_template' => 'OrderConfirmationTemplate',
        'allow_referrals' => 'AllowReferrals',
        'display_premium_fill_orders' => 'DisplayPremiumFillOrders',
        'display_backorder_fill_orders' => 'DisplayBackorderFillOrders',
        'allow_sub_address_change' => 'AllowSubAddressChange',
        'billing_promotion_default' => 'BillingPromotionDefault',
        'launch_pad_default_renewal_promotion' => 'LaunchPadDefaultRenewalPromotion',
        'site_subscriptions_auto_forward' => 'SiteSubscriptionsAutoForward',
        'maximum_cir_emails' => 'MaximumCirEmails',
        'international_ship_via' => 'InternationalShipVia',
        'e_miles_pass_code' => 'EMilesPassCode',
        'auto_create_amb_authorizations' => 'AutoCreateAmbAuthorizations',
        'default_docket_number' => 'DefaultDocketNumber',
        'show_saved_credit_cards' => 'ShowSavedCreditCards',
        'is_phone_number2_shown' => 'IsPhoneNumber2Shown',
        'is_phone_number3_shown' => 'IsPhoneNumber3Shown'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'cache_duration_options' => 'setCacheDurationOptions',
        'cache_duration_valid_values' => 'setCacheDurationValidValues',
        'cache_duration_catalog' => 'setCacheDurationCatalog',
        'cache_duration_search_results' => 'setCacheDurationSearchResults',
        'cache_duration_other_setup' => 'setCacheDurationOtherSetup',
        'cache_duration_session' => 'setCacheDurationSession',
        'note_user' => 'setNoteUser',
        'question_choice_sort_order' => 'setQuestionChoiceSortOrder',
        'question_name_as_prompt' => 'setQuestionNameAsPrompt',
        'response_name_as_prompt' => 'setResponseNameAsPrompt',
        'quick_order_display_logout' => 'setQuickOrderDisplayLogout',
        'quick_order_show_promo_link' => 'setQuickOrderShowPromoLink',
        'quick_order_brief_sub_status' => 'setQuickOrderBriefSubStatus',
        'launch_pad_promo_entry' => 'setLaunchPadPromoEntry',
        'require_company_name' => 'setRequireCompanyName',
        'full_description_narrative_type' => 'setFullDescriptionNarrativeType',
        'brief_description_narrative_type' => 'setBriefDescriptionNarrativeType',
        'currency_code' => 'setCurrencyCode',
        'default_catalog_promotion_code' => 'setDefaultCatalogPromotionCode',
        'display_sales_pitch' => 'setDisplaySalesPitch',
        'display_cart_add_gift_link' => 'setDisplayCartAddGiftLink',
        'display_phone_number2' => 'setDisplayPhoneNumber2',
        'display_phone_number3' => 'setDisplayPhoneNumber3',
        'default_entry_organization' => 'setDefaultEntryOrganization',
        'authentication_group' => 'setAuthenticationGroup',
        'renewal_notice_days' => 'setRenewalNoticeDays',
        'allow_bill_me' => 'setAllowBillMe',
        'cart_expire_days' => 'setCartExpireDays',
        'ship_to_relationship_code' => 'setShipToRelationshipCode',
        'also_purchased_history_days' => 'setAlsoPurchasedHistoryDays',
        'also_purchased_max_rows' => 'setAlsoPurchasedMaxRows',
        'also_purchased_threshold' => 'setAlsoPurchasedThreshold',
        'root_tree_level' => 'setRootTreeLevel',
        'quick_order_default_promotion' => 'setQuickOrderDefaultPromotion',
        'quick_order_hide_product_list' => 'setQuickOrderHideProductList',
        'quick_order_show_confirmation' => 'setQuickOrderShowConfirmation',
        'checkout_coupon_entry' => 'setCheckoutCouponEntry',
        'order_confirmation_template' => 'setOrderConfirmationTemplate',
        'allow_referrals' => 'setAllowReferrals',
        'display_premium_fill_orders' => 'setDisplayPremiumFillOrders',
        'display_backorder_fill_orders' => 'setDisplayBackorderFillOrders',
        'allow_sub_address_change' => 'setAllowSubAddressChange',
        'billing_promotion_default' => 'setBillingPromotionDefault',
        'launch_pad_default_renewal_promotion' => 'setLaunchPadDefaultRenewalPromotion',
        'site_subscriptions_auto_forward' => 'setSiteSubscriptionsAutoForward',
        'maximum_cir_emails' => 'setMaximumCirEmails',
        'international_ship_via' => 'setInternationalShipVia',
        'e_miles_pass_code' => 'setEMilesPassCode',
        'auto_create_amb_authorizations' => 'setAutoCreateAmbAuthorizations',
        'default_docket_number' => 'setDefaultDocketNumber',
        'show_saved_credit_cards' => 'setShowSavedCreditCards',
        'is_phone_number2_shown' => 'setIsPhoneNumber2Shown',
        'is_phone_number3_shown' => 'setIsPhoneNumber3Shown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'cache_duration_options' => 'getCacheDurationOptions',
        'cache_duration_valid_values' => 'getCacheDurationValidValues',
        'cache_duration_catalog' => 'getCacheDurationCatalog',
        'cache_duration_search_results' => 'getCacheDurationSearchResults',
        'cache_duration_other_setup' => 'getCacheDurationOtherSetup',
        'cache_duration_session' => 'getCacheDurationSession',
        'note_user' => 'getNoteUser',
        'question_choice_sort_order' => 'getQuestionChoiceSortOrder',
        'question_name_as_prompt' => 'getQuestionNameAsPrompt',
        'response_name_as_prompt' => 'getResponseNameAsPrompt',
        'quick_order_display_logout' => 'getQuickOrderDisplayLogout',
        'quick_order_show_promo_link' => 'getQuickOrderShowPromoLink',
        'quick_order_brief_sub_status' => 'getQuickOrderBriefSubStatus',
        'launch_pad_promo_entry' => 'getLaunchPadPromoEntry',
        'require_company_name' => 'getRequireCompanyName',
        'full_description_narrative_type' => 'getFullDescriptionNarrativeType',
        'brief_description_narrative_type' => 'getBriefDescriptionNarrativeType',
        'currency_code' => 'getCurrencyCode',
        'default_catalog_promotion_code' => 'getDefaultCatalogPromotionCode',
        'display_sales_pitch' => 'getDisplaySalesPitch',
        'display_cart_add_gift_link' => 'getDisplayCartAddGiftLink',
        'display_phone_number2' => 'getDisplayPhoneNumber2',
        'display_phone_number3' => 'getDisplayPhoneNumber3',
        'default_entry_organization' => 'getDefaultEntryOrganization',
        'authentication_group' => 'getAuthenticationGroup',
        'renewal_notice_days' => 'getRenewalNoticeDays',
        'allow_bill_me' => 'getAllowBillMe',
        'cart_expire_days' => 'getCartExpireDays',
        'ship_to_relationship_code' => 'getShipToRelationshipCode',
        'also_purchased_history_days' => 'getAlsoPurchasedHistoryDays',
        'also_purchased_max_rows' => 'getAlsoPurchasedMaxRows',
        'also_purchased_threshold' => 'getAlsoPurchasedThreshold',
        'root_tree_level' => 'getRootTreeLevel',
        'quick_order_default_promotion' => 'getQuickOrderDefaultPromotion',
        'quick_order_hide_product_list' => 'getQuickOrderHideProductList',
        'quick_order_show_confirmation' => 'getQuickOrderShowConfirmation',
        'checkout_coupon_entry' => 'getCheckoutCouponEntry',
        'order_confirmation_template' => 'getOrderConfirmationTemplate',
        'allow_referrals' => 'getAllowReferrals',
        'display_premium_fill_orders' => 'getDisplayPremiumFillOrders',
        'display_backorder_fill_orders' => 'getDisplayBackorderFillOrders',
        'allow_sub_address_change' => 'getAllowSubAddressChange',
        'billing_promotion_default' => 'getBillingPromotionDefault',
        'launch_pad_default_renewal_promotion' => 'getLaunchPadDefaultRenewalPromotion',
        'site_subscriptions_auto_forward' => 'getSiteSubscriptionsAutoForward',
        'maximum_cir_emails' => 'getMaximumCirEmails',
        'international_ship_via' => 'getInternationalShipVia',
        'e_miles_pass_code' => 'getEMilesPassCode',
        'auto_create_amb_authorizations' => 'getAutoCreateAmbAuthorizations',
        'default_docket_number' => 'getDefaultDocketNumber',
        'show_saved_credit_cards' => 'getShowSavedCreditCards',
        'is_phone_number2_shown' => 'getIsPhoneNumber2Shown',
        'is_phone_number3_shown' => 'getIsPhoneNumber3Shown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['cache_duration_options'] = isset($data['cache_duration_options']) ? $data['cache_duration_options'] : null;
        $this->container['cache_duration_valid_values'] = isset($data['cache_duration_valid_values']) ? $data['cache_duration_valid_values'] : null;
        $this->container['cache_duration_catalog'] = isset($data['cache_duration_catalog']) ? $data['cache_duration_catalog'] : null;
        $this->container['cache_duration_search_results'] = isset($data['cache_duration_search_results']) ? $data['cache_duration_search_results'] : null;
        $this->container['cache_duration_other_setup'] = isset($data['cache_duration_other_setup']) ? $data['cache_duration_other_setup'] : null;
        $this->container['cache_duration_session'] = isset($data['cache_duration_session']) ? $data['cache_duration_session'] : null;
        $this->container['note_user'] = isset($data['note_user']) ? $data['note_user'] : null;
        $this->container['question_choice_sort_order'] = isset($data['question_choice_sort_order']) ? $data['question_choice_sort_order'] : null;
        $this->container['question_name_as_prompt'] = isset($data['question_name_as_prompt']) ? $data['question_name_as_prompt'] : null;
        $this->container['response_name_as_prompt'] = isset($data['response_name_as_prompt']) ? $data['response_name_as_prompt'] : null;
        $this->container['quick_order_display_logout'] = isset($data['quick_order_display_logout']) ? $data['quick_order_display_logout'] : null;
        $this->container['quick_order_show_promo_link'] = isset($data['quick_order_show_promo_link']) ? $data['quick_order_show_promo_link'] : null;
        $this->container['quick_order_brief_sub_status'] = isset($data['quick_order_brief_sub_status']) ? $data['quick_order_brief_sub_status'] : null;
        $this->container['launch_pad_promo_entry'] = isset($data['launch_pad_promo_entry']) ? $data['launch_pad_promo_entry'] : null;
        $this->container['require_company_name'] = isset($data['require_company_name']) ? $data['require_company_name'] : null;
        $this->container['full_description_narrative_type'] = isset($data['full_description_narrative_type']) ? $data['full_description_narrative_type'] : null;
        $this->container['brief_description_narrative_type'] = isset($data['brief_description_narrative_type']) ? $data['brief_description_narrative_type'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['default_catalog_promotion_code'] = isset($data['default_catalog_promotion_code']) ? $data['default_catalog_promotion_code'] : null;
        $this->container['display_sales_pitch'] = isset($data['display_sales_pitch']) ? $data['display_sales_pitch'] : null;
        $this->container['display_cart_add_gift_link'] = isset($data['display_cart_add_gift_link']) ? $data['display_cart_add_gift_link'] : null;
        $this->container['display_phone_number2'] = isset($data['display_phone_number2']) ? $data['display_phone_number2'] : null;
        $this->container['display_phone_number3'] = isset($data['display_phone_number3']) ? $data['display_phone_number3'] : null;
        $this->container['default_entry_organization'] = isset($data['default_entry_organization']) ? $data['default_entry_organization'] : null;
        $this->container['authentication_group'] = isset($data['authentication_group']) ? $data['authentication_group'] : null;
        $this->container['renewal_notice_days'] = isset($data['renewal_notice_days']) ? $data['renewal_notice_days'] : null;
        $this->container['allow_bill_me'] = isset($data['allow_bill_me']) ? $data['allow_bill_me'] : null;
        $this->container['cart_expire_days'] = isset($data['cart_expire_days']) ? $data['cart_expire_days'] : null;
        $this->container['ship_to_relationship_code'] = isset($data['ship_to_relationship_code']) ? $data['ship_to_relationship_code'] : null;
        $this->container['also_purchased_history_days'] = isset($data['also_purchased_history_days']) ? $data['also_purchased_history_days'] : null;
        $this->container['also_purchased_max_rows'] = isset($data['also_purchased_max_rows']) ? $data['also_purchased_max_rows'] : null;
        $this->container['also_purchased_threshold'] = isset($data['also_purchased_threshold']) ? $data['also_purchased_threshold'] : null;
        $this->container['root_tree_level'] = isset($data['root_tree_level']) ? $data['root_tree_level'] : null;
        $this->container['quick_order_default_promotion'] = isset($data['quick_order_default_promotion']) ? $data['quick_order_default_promotion'] : null;
        $this->container['quick_order_hide_product_list'] = isset($data['quick_order_hide_product_list']) ? $data['quick_order_hide_product_list'] : null;
        $this->container['quick_order_show_confirmation'] = isset($data['quick_order_show_confirmation']) ? $data['quick_order_show_confirmation'] : null;
        $this->container['checkout_coupon_entry'] = isset($data['checkout_coupon_entry']) ? $data['checkout_coupon_entry'] : null;
        $this->container['order_confirmation_template'] = isset($data['order_confirmation_template']) ? $data['order_confirmation_template'] : null;
        $this->container['allow_referrals'] = isset($data['allow_referrals']) ? $data['allow_referrals'] : null;
        $this->container['display_premium_fill_orders'] = isset($data['display_premium_fill_orders']) ? $data['display_premium_fill_orders'] : null;
        $this->container['display_backorder_fill_orders'] = isset($data['display_backorder_fill_orders']) ? $data['display_backorder_fill_orders'] : null;
        $this->container['allow_sub_address_change'] = isset($data['allow_sub_address_change']) ? $data['allow_sub_address_change'] : null;
        $this->container['billing_promotion_default'] = isset($data['billing_promotion_default']) ? $data['billing_promotion_default'] : null;
        $this->container['launch_pad_default_renewal_promotion'] = isset($data['launch_pad_default_renewal_promotion']) ? $data['launch_pad_default_renewal_promotion'] : null;
        $this->container['site_subscriptions_auto_forward'] = isset($data['site_subscriptions_auto_forward']) ? $data['site_subscriptions_auto_forward'] : null;
        $this->container['maximum_cir_emails'] = isset($data['maximum_cir_emails']) ? $data['maximum_cir_emails'] : null;
        $this->container['international_ship_via'] = isset($data['international_ship_via']) ? $data['international_ship_via'] : null;
        $this->container['e_miles_pass_code'] = isset($data['e_miles_pass_code']) ? $data['e_miles_pass_code'] : null;
        $this->container['auto_create_amb_authorizations'] = isset($data['auto_create_amb_authorizations']) ? $data['auto_create_amb_authorizations'] : null;
        $this->container['default_docket_number'] = isset($data['default_docket_number']) ? $data['default_docket_number'] : null;
        $this->container['show_saved_credit_cards'] = isset($data['show_saved_credit_cards']) ? $data['show_saved_credit_cards'] : null;
        $this->container['is_phone_number2_shown'] = isset($data['is_phone_number2_shown']) ? $data['is_phone_number2_shown'] : null;
        $this->container['is_phone_number3_shown'] = isset($data['is_phone_number3_shown']) ? $data['is_phone_number3_shown'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code for the site.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the site.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cache_duration_options
     *
     * @return int
     */
    public function getCacheDurationOptions()
    {
        return $this->container['cache_duration_options'];
    }

    /**
     * Sets cache_duration_options
     *
     * @param int $cache_duration_options The duration to cache options, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationOptions($cache_duration_options)
    {
        $this->container['cache_duration_options'] = $cache_duration_options;

        return $this;
    }

    /**
     * Gets cache_duration_valid_values
     *
     * @return int
     */
    public function getCacheDurationValidValues()
    {
        return $this->container['cache_duration_valid_values'];
    }

    /**
     * Sets cache_duration_valid_values
     *
     * @param int $cache_duration_valid_values The duration to cache valid values, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationValidValues($cache_duration_valid_values)
    {
        $this->container['cache_duration_valid_values'] = $cache_duration_valid_values;

        return $this;
    }

    /**
     * Gets cache_duration_catalog
     *
     * @return int
     */
    public function getCacheDurationCatalog()
    {
        return $this->container['cache_duration_catalog'];
    }

    /**
     * Sets cache_duration_catalog
     *
     * @param int $cache_duration_catalog The duration to cache catalogs, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationCatalog($cache_duration_catalog)
    {
        $this->container['cache_duration_catalog'] = $cache_duration_catalog;

        return $this;
    }

    /**
     * Gets cache_duration_search_results
     *
     * @return int
     */
    public function getCacheDurationSearchResults()
    {
        return $this->container['cache_duration_search_results'];
    }

    /**
     * Sets cache_duration_search_results
     *
     * @param int $cache_duration_search_results The duration to cache search results, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationSearchResults($cache_duration_search_results)
    {
        $this->container['cache_duration_search_results'] = $cache_duration_search_results;

        return $this;
    }

    /**
     * Gets cache_duration_other_setup
     *
     * @return int
     */
    public function getCacheDurationOtherSetup()
    {
        return $this->container['cache_duration_other_setup'];
    }

    /**
     * Sets cache_duration_other_setup
     *
     * @param int $cache_duration_other_setup The duration to cache other setup values, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationOtherSetup($cache_duration_other_setup)
    {
        $this->container['cache_duration_other_setup'] = $cache_duration_other_setup;

        return $this;
    }

    /**
     * Gets cache_duration_session
     *
     * @return int
     */
    public function getCacheDurationSession()
    {
        return $this->container['cache_duration_session'];
    }

    /**
     * Sets cache_duration_session
     *
     * @param int $cache_duration_session The duration to cache a session, in minutes.
     *
     * @return $this
     */
    public function setCacheDurationSession($cache_duration_session)
    {
        $this->container['cache_duration_session'] = $cache_duration_session;

        return $this;
    }

    /**
     * Gets note_user
     *
     * @return string
     */
    public function getNoteUser()
    {
        return $this->container['note_user'];
    }

    /**
     * Sets note_user
     *
     * @param string $note_user The user that web notes are assigned to.
     *
     * @return $this
     */
    public function setNoteUser($note_user)
    {
        $this->container['note_user'] = $note_user;

        return $this;
    }

    /**
     * Gets question_choice_sort_order
     *
     * @return string
     */
    public function getQuestionChoiceSortOrder()
    {
        return $this->container['question_choice_sort_order'];
    }

    /**
     * Sets question_choice_sort_order
     *
     * @param string $question_choice_sort_order Question choice ordering. A = alphabetic, O = Other, S = sequence.
     *
     * @return $this
     */
    public function setQuestionChoiceSortOrder($question_choice_sort_order)
    {
        $this->container['question_choice_sort_order'] = $question_choice_sort_order;

        return $this;
    }

    /**
     * Gets question_name_as_prompt
     *
     * @return bool
     */
    public function getQuestionNameAsPrompt()
    {
        return $this->container['question_name_as_prompt'];
    }

    /**
     * Sets question_name_as_prompt
     *
     * @param bool $question_name_as_prompt Should the question name be used as the prompt?
     *
     * @return $this
     */
    public function setQuestionNameAsPrompt($question_name_as_prompt)
    {
        $this->container['question_name_as_prompt'] = $question_name_as_prompt;

        return $this;
    }

    /**
     * Gets response_name_as_prompt
     *
     * @return bool
     */
    public function getResponseNameAsPrompt()
    {
        return $this->container['response_name_as_prompt'];
    }

    /**
     * Sets response_name_as_prompt
     *
     * @param bool $response_name_as_prompt Should the response name be used as the prompt?
     *
     * @return $this
     */
    public function setResponseNameAsPrompt($response_name_as_prompt)
    {
        $this->container['response_name_as_prompt'] = $response_name_as_prompt;

        return $this;
    }

    /**
     * Gets quick_order_display_logout
     *
     * @return bool
     */
    public function getQuickOrderDisplayLogout()
    {
        return $this->container['quick_order_display_logout'];
    }

    /**
     * Sets quick_order_display_logout
     *
     * @param bool $quick_order_display_logout If the Quick Order display logout option is set to yes, a logout control will be displayed on   the QuickOrder page of the website when a user is logged in.
     *
     * @return $this
     */
    public function setQuickOrderDisplayLogout($quick_order_display_logout)
    {
        $this->container['quick_order_display_logout'] = $quick_order_display_logout;

        return $this;
    }

    /**
     * Gets quick_order_show_promo_link
     *
     * @return string
     */
    public function getQuickOrderShowPromoLink()
    {
        return $this->container['quick_order_show_promo_link'];
    }

    /**
     * Sets quick_order_show_promo_link
     *
     * @param string $quick_order_show_promo_link The QOPMOLNK option determines whether a link to allow the user to enter a promotion code will be   displayed on the QuickOrder page.   O = Optional.  Display link when there is no current promotion code.  Y = Always display link. N = Never display link.
     *
     * @return $this
     */
    public function setQuickOrderShowPromoLink($quick_order_show_promo_link)
    {
        $this->container['quick_order_show_promo_link'] = $quick_order_show_promo_link;

        return $this;
    }

    /**
     * Gets quick_order_brief_sub_status
     *
     * @return bool
     */
    public function getQuickOrderBriefSubStatus()
    {
        return $this->container['quick_order_brief_sub_status'];
    }

    /**
     * Sets quick_order_brief_sub_status
     *
     * @param bool $quick_order_brief_sub_status Should the brief subscription status information be displayed on the QuickOrder page for renewal?  If yes, display only information on whether subscription is active or inactive.  Otherwise, show all information about subscription status (last issue sent, issues remaining, etc.).
     *
     * @return $this
     */
    public function setQuickOrderBriefSubStatus($quick_order_brief_sub_status)
    {
        $this->container['quick_order_brief_sub_status'] = $quick_order_brief_sub_status;

        return $this;
    }

    /**
     * Gets launch_pad_promo_entry
     *
     * @return bool
     */
    public function getLaunchPadPromoEntry()
    {
        return $this->container['launch_pad_promo_entry'];
    }

    /**
     * Sets launch_pad_promo_entry
     *
     * @param bool $launch_pad_promo_entry Should a text box be available for the user to enter a promotion code on the Launch Pad page when   the destination is 'renew?'
     *
     * @return $this
     */
    public function setLaunchPadPromoEntry($launch_pad_promo_entry)
    {
        $this->container['launch_pad_promo_entry'] = $launch_pad_promo_entry;

        return $this;
    }

    /**
     * Gets require_company_name
     *
     * @return bool
     */
    public function getRequireCompanyName()
    {
        return $this->container['require_company_name'];
    }

    /**
     * Sets require_company_name
     *
     * @param bool $require_company_name Is a company name required when entering an address?
     *
     * @return $this
     */
    public function setRequireCompanyName($require_company_name)
    {
        $this->container['require_company_name'] = $require_company_name;

        return $this;
    }

    /**
     * Gets full_description_narrative_type
     *
     * @return string
     */
    public function getFullDescriptionNarrativeType()
    {
        return $this->container['full_description_narrative_type'];
    }

    /**
     * Sets full_description_narrative_type
     *
     * @param string $full_description_narrative_type The type of narrative that should be used to store a full description of each item.  The full description will be displayed on the product page.
     *
     * @return $this
     */
    public function setFullDescriptionNarrativeType($full_description_narrative_type)
    {
        $this->container['full_description_narrative_type'] = $full_description_narrative_type;

        return $this;
    }

    /**
     * Gets brief_description_narrative_type
     *
     * @return string
     */
    public function getBriefDescriptionNarrativeType()
    {
        return $this->container['brief_description_narrative_type'];
    }

    /**
     * Sets brief_description_narrative_type
     *
     * @param string $brief_description_narrative_type The type of narrative that should be used to store a brief description of each item.  The brief name description will be displayed when the item is included on a list of items in search   results or the catalog.
     *
     * @return $this
     */
    public function setBriefDescriptionNarrativeType($brief_description_narrative_type)
    {
        $this->container['brief_description_narrative_type'] = $brief_description_narrative_type;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code used by the website.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets default_catalog_promotion_code
     *
     * @return string
     */
    public function getDefaultCatalogPromotionCode()
    {
        return $this->container['default_catalog_promotion_code'];
    }

    /**
     * Sets default_catalog_promotion_code
     *
     * @param string $default_catalog_promotion_code The default catalog promotion code used by the website for looking up prices and for shopping carts   in the absence of a user-provided one.
     *
     * @return $this
     */
    public function setDefaultCatalogPromotionCode($default_catalog_promotion_code)
    {
        $this->container['default_catalog_promotion_code'] = $default_catalog_promotion_code;

        return $this;
    }

    /**
     * Gets display_sales_pitch
     *
     * @return bool
     */
    public function getDisplaySalesPitch()
    {
        return $this->container['display_sales_pitch'];
    }

    /**
     * Sets display_sales_pitch
     *
     * @param bool $display_sales_pitch Should the sales pitch should be displayed on the product page?  The sales pitch is the item narrative that is defined with narrative type PCH.
     *
     * @return $this
     */
    public function setDisplaySalesPitch($display_sales_pitch)
    {
        $this->container['display_sales_pitch'] = $display_sales_pitch;

        return $this;
    }

    /**
     * Gets display_cart_add_gift_link
     *
     * @return bool
     */
    public function getDisplayCartAddGiftLink()
    {
        return $this->container['display_cart_add_gift_link'];
    }

    /**
     * Sets display_cart_add_gift_link
     *
     * @param bool $display_cart_add_gift_link Should a link will be displayed for each shopping cart line where the ship-to and bill-to are   different to redirect the customer to a page where they can send the same gift to another person?
     *
     * @return $this
     */
    public function setDisplayCartAddGiftLink($display_cart_add_gift_link)
    {
        $this->container['display_cart_add_gift_link'] = $display_cart_add_gift_link;

        return $this;
    }

    /**
     * Gets display_phone_number2
     *
     * @return bool
     */
    public function getDisplayPhoneNumber2()
    {
        return $this->container['display_phone_number2'];
    }

    /**
     * Sets display_phone_number2
     *
     * @param bool $display_phone_number2 Should the website will prompt for phone number 2 when the customer is asked to enter an address?
     *
     * @return $this
     */
    public function setDisplayPhoneNumber2($display_phone_number2)
    {
        $this->container['display_phone_number2'] = $display_phone_number2;

        return $this;
    }

    /**
     * Gets display_phone_number3
     *
     * @return bool
     */
    public function getDisplayPhoneNumber3()
    {
        return $this->container['display_phone_number3'];
    }

    /**
     * Sets display_phone_number3
     *
     * @param bool $display_phone_number3 Should the website will prompt for phone number 3 when the customer is asked to enter an address?
     *
     * @return $this
     */
    public function setDisplayPhoneNumber3($display_phone_number3)
    {
        $this->container['display_phone_number3'] = $display_phone_number3;

        return $this;
    }

    /**
     * Gets default_entry_organization
     *
     * @return string
     */
    public function getDefaultEntryOrganization()
    {
        return $this->container['default_entry_organization'];
    }

    /**
     * Sets default_entry_organization
     *
     * @param string $default_entry_organization The default entry organization used in absence of a supplied billing organization, primarily for   the purpose of creating Electronic Payment IDs.
     *
     * @return $this
     */
    public function setDefaultEntryOrganization($default_entry_organization)
    {
        $this->container['default_entry_organization'] = $default_entry_organization;

        return $this;
    }

    /**
     * Gets authentication_group
     *
     * @return string
     */
    public function getAuthenticationGroup()
    {
        return $this->container['authentication_group'];
    }

    /**
     * Sets authentication_group
     *
     * @param string $authentication_group Authentication group
     *
     * @return $this
     */
    public function setAuthenticationGroup($authentication_group)
    {
        $this->container['authentication_group'] = $authentication_group;

        return $this;
    }

    /**
     * Gets renewal_notice_days
     *
     * @return int
     */
    public function getRenewalNoticeDays()
    {
        return $this->container['renewal_notice_days'];
    }

    /**
     * Sets renewal_notice_days
     *
     * @param int $renewal_notice_days When a customer views the status of their subscription they  will be presented with an invitation   to renew if their subscription expires within the given number of days.
     *
     * @return $this
     */
    public function setRenewalNoticeDays($renewal_notice_days)
    {
        $this->container['renewal_notice_days'] = $renewal_notice_days;

        return $this;
    }

    /**
     * Gets allow_bill_me
     *
     * @return bool
     */
    public function getAllowBillMe()
    {
        return $this->container['allow_bill_me'];
    }

    /**
     * Sets allow_bill_me
     *
     * @param bool $allow_bill_me Is \"bill me later\" a valid payment method?
     *
     * @return $this
     */
    public function setAllowBillMe($allow_bill_me)
    {
        $this->container['allow_bill_me'] = $allow_bill_me;

        return $this;
    }

    /**
     * Gets cart_expire_days
     *
     * @return int
     */
    public function getCartExpireDays()
    {
        return $this->container['cart_expire_days'];
    }

    /**
     * Sets cart_expire_days
     *
     * @param int $cart_expire_days The number of days until the a cart expires.
     *
     * @return $this
     */
    public function setCartExpireDays($cart_expire_days)
    {
        $this->container['cart_expire_days'] = $cart_expire_days;

        return $this;
    }

    /**
     * Gets ship_to_relationship_code
     *
     * @return string
     */
    public function getShipToRelationshipCode()
    {
        return $this->container['ship_to_relationship_code'];
    }

    /**
     * Sets ship_to_relationship_code
     *
     * @param string $ship_to_relationship_code When a customer ships an order to another customer, create a relationship between   the ordering customer and the receiving customer using this relationship code.  This relationship is used to remember the previously used ship-to addresses for a customer   so they can select them when they set the ship-to address on their next order.
     *
     * @return $this
     */
    public function setShipToRelationshipCode($ship_to_relationship_code)
    {
        $this->container['ship_to_relationship_code'] = $ship_to_relationship_code;

        return $this;
    }

    /**
     * Gets also_purchased_history_days
     *
     * @return int
     */
    public function getAlsoPurchasedHistoryDays()
    {
        return $this->container['also_purchased_history_days'];
    }

    /**
     * Sets also_purchased_history_days
     *
     * @param int $also_purchased_history_days The number of days to look back in the order history to determine which items to show in the   product catalog under the \"customers who purchased this product also purchased\" product listing.
     *
     * @return $this
     */
    public function setAlsoPurchasedHistoryDays($also_purchased_history_days)
    {
        $this->container['also_purchased_history_days'] = $also_purchased_history_days;

        return $this;
    }

    /**
     * Gets also_purchased_max_rows
     *
     * @return int
     */
    public function getAlsoPurchasedMaxRows()
    {
        return $this->container['also_purchased_max_rows'];
    }

    /**
     * Sets also_purchased_max_rows
     *
     * @param int $also_purchased_max_rows Show at most this many products in the product catalog under the \"customers who purchased this   product also purchased\" listing.
     *
     * @return $this
     */
    public function setAlsoPurchasedMaxRows($also_purchased_max_rows)
    {
        $this->container['also_purchased_max_rows'] = $also_purchased_max_rows;

        return $this;
    }

    /**
     * Gets also_purchased_threshold
     *
     * @return int
     */
    public function getAlsoPurchasedThreshold()
    {
        return $this->container['also_purchased_threshold'];
    }

    /**
     * Sets also_purchased_threshold
     *
     * @param int $also_purchased_threshold Don't show an \"also purchased\" product unless it was purchased with the given product at least   this many times in the given time period.
     *
     * @return $this
     */
    public function setAlsoPurchasedThreshold($also_purchased_threshold)
    {
        $this->container['also_purchased_threshold'] = $also_purchased_threshold;

        return $this;
    }

    /**
     * Gets root_tree_level
     *
     * @return string
     */
    public function getRootTreeLevel()
    {
        return $this->container['root_tree_level'];
    }

    /**
     * Sets root_tree_level
     *
     * @param string $root_tree_level For the given web site, limit product catalog browsing and searching to items listed in or under   this subject tree level.
     *
     * @return $this
     */
    public function setRootTreeLevel($root_tree_level)
    {
        $this->container['root_tree_level'] = $root_tree_level;

        return $this;
    }

    /**
     * Gets quick_order_default_promotion
     *
     * @return string
     */
    public function getQuickOrderDefaultPromotion()
    {
        return $this->container['quick_order_default_promotion'];
    }

    /**
     * Sets quick_order_default_promotion
     *
     * @param string $quick_order_default_promotion Specifies which promotion code to use on the Quick Order page if no promotion code was passed on   the page URL. If the option is left blank than the user will be asked to enter a promotion code.
     *
     * @return $this
     */
    public function setQuickOrderDefaultPromotion($quick_order_default_promotion)
    {
        $this->container['quick_order_default_promotion'] = $quick_order_default_promotion;

        return $this;
    }

    /**
     * Gets quick_order_hide_product_list
     *
     * @return bool
     */
    public function getQuickOrderHideProductList()
    {
        return $this->container['quick_order_hide_product_list'];
    }

    /**
     * Sets quick_order_hide_product_list
     *
     * @param bool $quick_order_hide_product_list Should the product list should be displayed?  The product list will always be displayed if a promotion narrative is not provided.
     *
     * @return $this
     */
    public function setQuickOrderHideProductList($quick_order_hide_product_list)
    {
        $this->container['quick_order_hide_product_list'] = $quick_order_hide_product_list;

        return $this;
    }

    /**
     * Gets quick_order_show_confirmation
     *
     * @return bool
     */
    public function getQuickOrderShowConfirmation()
    {
        return $this->container['quick_order_show_confirmation'];
    }

    /**
     * Sets quick_order_show_confirmation
     *
     * @param bool $quick_order_show_confirmation Should the QuickOrder page will use a 2-step with an order page followed by a receipt page?  If not, then it will use a 3-step process that includes a confirmation page before the receipt.  In the 3-step process, the payment information will be collected on the confirmation page.
     *
     * @return $this
     */
    public function setQuickOrderShowConfirmation($quick_order_show_confirmation)
    {
        $this->container['quick_order_show_confirmation'] = $quick_order_show_confirmation;

        return $this;
    }

    /**
     * Gets checkout_coupon_entry
     *
     * @return bool
     */
    public function getCheckoutCouponEntry()
    {
        return $this->container['checkout_coupon_entry'];
    }

    /**
     * Sets checkout_coupon_entry
     *
     * @param bool $checkout_coupon_entry Should the coupon code entry will be allowed on the website's checkout page?
     *
     * @return $this
     */
    public function setCheckoutCouponEntry($checkout_coupon_entry)
    {
        $this->container['checkout_coupon_entry'] = $checkout_coupon_entry;

        return $this;
    }

    /**
     * Gets order_confirmation_template
     *
     * @return string
     */
    public function getOrderConfirmationTemplate()
    {
        return $this->container['order_confirmation_template'];
    }

    /**
     * Sets order_confirmation_template
     *
     * @param string $order_confirmation_template Send an order confirmation email to the bill-to customer when the order is placed on the website.    This option specifies which \"communication template\" to use for the confirmation email.  If the this option is left blank than no confirmation email is sent when the order is placed.
     *
     * @return $this
     */
    public function setOrderConfirmationTemplate($order_confirmation_template)
    {
        $this->container['order_confirmation_template'] = $order_confirmation_template;

        return $this;
    }

    /**
     * Gets allow_referrals
     *
     * @return bool
     */
    public function getAllowReferrals()
    {
        return $this->container['allow_referrals'];
    }

    /**
     * Sets allow_referrals
     *
     * @param bool $allow_referrals Should the customer be prompted for referrals after submitting a controlled order?  Referred customers will use the same address as the original customer.
     *
     * @return $this
     */
    public function setAllowReferrals($allow_referrals)
    {
        $this->container['allow_referrals'] = $allow_referrals;

        return $this;
    }

    /**
     * Gets display_premium_fill_orders
     *
     * @return string
     */
    public function getDisplayPremiumFillOrders()
    {
        return $this->container['display_premium_fill_orders'];
    }

    /**
     * Sets display_premium_fill_orders
     *
     * @param string $display_premium_fill_orders Controls how backorder fulfillment orders are displayed on the website.  S = Display the backorder fill orders in the list of orders on the Order History page.  M = Merge the backorder fill orders into the list of order lines on the Order Status page for the   original order.  L = List the backorder fill orders on the Order Status page for the original order   in a separate list below the list of order lines for the original order.
     *
     * @return $this
     */
    public function setDisplayPremiumFillOrders($display_premium_fill_orders)
    {
        $this->container['display_premium_fill_orders'] = $display_premium_fill_orders;

        return $this;
    }

    /**
     * Gets display_backorder_fill_orders
     *
     * @return string
     */
    public function getDisplayBackorderFillOrders()
    {
        return $this->container['display_backorder_fill_orders'];
    }

    /**
     * Sets display_backorder_fill_orders
     *
     * @param string $display_backorder_fill_orders Controls how backorder fulfillment orders are displayed on the website.  S = Display the backorder fill orders in the list of orders on the Order History page.  M = Merge the backorder fill orders into the list of order lines on the Order Status page for the   original order. L = List the backorder fill orders on the Order Status page for the original order   in a separate list below the list of order lines for the original order.
     *
     * @return $this
     */
    public function setDisplayBackorderFillOrders($display_backorder_fill_orders)
    {
        $this->container['display_backorder_fill_orders'] = $display_backorder_fill_orders;

        return $this;
    }

    /**
     * Gets allow_sub_address_change
     *
     * @return string
     */
    public function getAllowSubAddressChange()
    {
        return $this->container['allow_sub_address_change'];
    }

    /**
     * Sets allow_sub_address_change
     *
     * @param string $allow_sub_address_change Should customers be allowed to change their current subscription address from the subscription status   page? Depending on the option value, customers may also be allowed to change the subscription address   code.  C = Allow address and address code changes.  N = Do not allow changes.  Y = Allow subscription address changes.
     *
     * @return $this
     */
    public function setAllowSubAddressChange($allow_sub_address_change)
    {
        $this->container['allow_sub_address_change'] = $allow_sub_address_change;

        return $this;
    }

    /**
     * Gets billing_promotion_default
     *
     * @return string
     */
    public function getBillingPromotionDefault()
    {
        return $this->container['billing_promotion_default'];
    }

    /**
     * Sets billing_promotion_default
     *
     * @param string $billing_promotion_default The default billing promotion code used by the web.    If the option is blank, the promotion code will remain blank.
     *
     * @return $this
     */
    public function setBillingPromotionDefault($billing_promotion_default)
    {
        $this->container['billing_promotion_default'] = $billing_promotion_default;

        return $this;
    }

    /**
     * Gets launch_pad_default_renewal_promotion
     *
     * @return string
     */
    public function getLaunchPadDefaultRenewalPromotion()
    {
        return $this->container['launch_pad_default_renewal_promotion'];
    }

    /**
     * Sets launch_pad_default_renewal_promotion
     *
     * @param string $launch_pad_default_renewal_promotion The site's default renewal promotion code that will be used when the user is sent   to the launch pad page with a destination of 'renew' and no promotion code.
     *
     * @return $this
     */
    public function setLaunchPadDefaultRenewalPromotion($launch_pad_default_renewal_promotion)
    {
        $this->container['launch_pad_default_renewal_promotion'] = $launch_pad_default_renewal_promotion;

        return $this;
    }

    /**
     * Gets site_subscriptions_auto_forward
     *
     * @return bool
     */
    public function getSiteSubscriptionsAutoForward()
    {
        return $this->container['site_subscriptions_auto_forward'];
    }

    /**
     * Sets site_subscriptions_auto_forward
     *
     * @param bool $site_subscriptions_auto_forward Should the SiteSubscriptions page automatically send the customer to the SubscriptionStatus page if   only one subscription is found?
     *
     * @return $this
     */
    public function setSiteSubscriptionsAutoForward($site_subscriptions_auto_forward)
    {
        $this->container['site_subscriptions_auto_forward'] = $site_subscriptions_auto_forward;

        return $this;
    }

    /**
     * Gets maximum_cir_emails
     *
     * @return int
     */
    public function getMaximumCirEmails()
    {
        return $this->container['maximum_cir_emails'];
    }

    /**
     * Sets maximum_cir_emails
     *
     * @param int $maximum_cir_emails The maximum number of cir email addresses a user is allowed to add through the website for each   subscription.
     *
     * @return $this
     */
    public function setMaximumCirEmails($maximum_cir_emails)
    {
        $this->container['maximum_cir_emails'] = $maximum_cir_emails;

        return $this;
    }

    /**
     * Gets international_ship_via
     *
     * @return string
     */
    public function getInternationalShipVia()
    {
        return $this->container['international_ship_via'];
    }

    /**
     * Sets international_ship_via
     *
     * @param string $international_ship_via the ship via code to be used for international orders.  An order with a ship to address that has a country that is not equal to the default country will   be considered an international order.
     *
     * @return $this
     */
    public function setInternationalShipVia($international_ship_via)
    {
        $this->container['international_ship_via'] = $international_ship_via;

        return $this;
    }

    /**
     * Gets e_miles_pass_code
     *
     * @return string
     */
    public function getEMilesPassCode()
    {
        return $this->container['e_miles_pass_code'];
    }

    /**
     * Sets e_miles_pass_code
     *
     * @param string $e_miles_pass_code If you are participating in the e-Miles promotional program to bring traffic to your website(s),   add a valid e-Miles pass code here.
     *
     * @return $this
     */
    public function setEMilesPassCode($e_miles_pass_code)
    {
        $this->container['e_miles_pass_code'] = $e_miles_pass_code;

        return $this;
    }

    /**
     * Gets auto_create_amb_authorizations
     *
     * @return bool
     */
    public function getAutoCreateAmbAuthorizations()
    {
        return $this->container['auto_create_amb_authorizations'];
    }

    /**
     * Sets auto_create_amb_authorizations
     *
     * @param bool $auto_create_amb_authorizations During the checkout process on the web, a new AMB authorization record (CDSCVI) will be created   (using the ship-to customer's email)   if the following are all true:  1) This option is set to 'Y'  2) There is a valid Authorization Group (AUTH_GRP) on the item (CDSITM)  3) a CDSCVI for this authorization group does not already exist.
     *
     * @return $this
     */
    public function setAutoCreateAmbAuthorizations($auto_create_amb_authorizations)
    {
        $this->container['auto_create_amb_authorizations'] = $auto_create_amb_authorizations;

        return $this;
    }

    /**
     * Gets default_docket_number
     *
     * @return string
     */
    public function getDefaultDocketNumber()
    {
        return $this->container['default_docket_number'];
    }

    /**
     * Sets default_docket_number
     *
     * @param string $default_docket_number The default docket number is used on the Foundation website to set the default docket number for   orders.
     *
     * @return $this
     */
    public function setDefaultDocketNumber($default_docket_number)
    {
        $this->container['default_docket_number'] = $default_docket_number;

        return $this;
    }

    /**
     * Gets show_saved_credit_cards
     *
     * @return bool
     */
    public function getShowSavedCreditCards()
    {
        return $this->container['show_saved_credit_cards'];
    }

    /**
     * Sets show_saved_credit_cards
     *
     * @param bool $show_saved_credit_cards Should customers be allowed to choose from a list of credit cards saved on their account when they   place orders?
     *
     * @return $this
     */
    public function setShowSavedCreditCards($show_saved_credit_cards)
    {
        $this->container['show_saved_credit_cards'] = $show_saved_credit_cards;

        return $this;
    }

    /**
     * Gets is_phone_number2_shown
     *
     * @return bool
     */
    public function getIsPhoneNumber2Shown()
    {
        return $this->container['is_phone_number2_shown'];
    }

    /**
     * Sets is_phone_number2_shown
     *
     * @param bool $is_phone_number2_shown Should the phone number 2 field be displayed?
     *
     * @return $this
     */
    public function setIsPhoneNumber2Shown($is_phone_number2_shown)
    {
        $this->container['is_phone_number2_shown'] = $is_phone_number2_shown;

        return $this;
    }

    /**
     * Gets is_phone_number3_shown
     *
     * @return bool
     */
    public function getIsPhoneNumber3Shown()
    {
        return $this->container['is_phone_number3_shown'];
    }

    /**
     * Sets is_phone_number3_shown
     *
     * @param bool $is_phone_number3_shown Should the phone number 3 field be displayed?
     *
     * @return $this
     */
    public function setIsPhoneNumber3Shown($is_phone_number3_shown)
    {
        $this->container['is_phone_number3_shown'] = $is_phone_number3_shown;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


