<?php
/**
 * DigitalWalletCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * DigitalWalletCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Information for creating a digital wallet
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DigitalWalletCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DigitalWalletCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_agreement_id' => 'string',
        'credit_reserve_rule_id' => 'string',
        'payment_code' => 'string',
        'payment_date' => '\DateTime',
        'transaction_id' => 'string',
        'transaction_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_agreement_id' => null,
        'credit_reserve_rule_id' => null,
        'payment_code' => null,
        'payment_date' => 'date-time',
        'transaction_id' => null,
        'transaction_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_agreement_id' => 'BillingAgreementId',
        'credit_reserve_rule_id' => 'CreditReserveRuleId',
        'payment_code' => 'PaymentCode',
        'payment_date' => 'PaymentDate',
        'transaction_id' => 'TransactionId',
        'transaction_status' => 'TransactionStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_agreement_id' => 'setBillingAgreementId',
        'credit_reserve_rule_id' => 'setCreditReserveRuleId',
        'payment_code' => 'setPaymentCode',
        'payment_date' => 'setPaymentDate',
        'transaction_id' => 'setTransactionId',
        'transaction_status' => 'setTransactionStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_agreement_id' => 'getBillingAgreementId',
        'credit_reserve_rule_id' => 'getCreditReserveRuleId',
        'payment_code' => 'getPaymentCode',
        'payment_date' => 'getPaymentDate',
        'transaction_id' => 'getTransactionId',
        'transaction_status' => 'getTransactionStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_STATUS_AUTHORIZED = 'Authorized';
    const TRANSACTION_STATUS_SETTLED = 'Settled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStatusAllowableValues()
    {
        return [
            self::TRANSACTION_STATUS_AUTHORIZED,
            self::TRANSACTION_STATUS_SETTLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_agreement_id'] = isset($data['billing_agreement_id']) ? $data['billing_agreement_id'] : null;
        $this->container['credit_reserve_rule_id'] = isset($data['credit_reserve_rule_id']) ? $data['credit_reserve_rule_id'] : null;
        $this->container['payment_code'] = isset($data['payment_code']) ? $data['payment_code'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!is_null($this->container['transaction_status']) && !in_array($this->container['transaction_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_agreement_id
     *
     * @return string
     */
    public function getBillingAgreementId()
    {
        return $this->container['billing_agreement_id'];
    }

    /**
     * Sets billing_agreement_id
     *
     * @param string $billing_agreement_id Billing Agreement ID
     *
     * @return $this
     */
    public function setBillingAgreementId($billing_agreement_id)
    {
        $this->container['billing_agreement_id'] = $billing_agreement_id;

        return $this;
    }

    /**
     * Gets credit_reserve_rule_id
     *
     * @return string
     */
    public function getCreditReserveRuleId()
    {
        return $this->container['credit_reserve_rule_id'];
    }

    /**
     * Sets credit_reserve_rule_id
     *
     * @param string $credit_reserve_rule_id Credit Reserve Rule ID
     *
     * @return $this
     */
    public function setCreditReserveRuleId($credit_reserve_rule_id)
    {
        $this->container['credit_reserve_rule_id'] = $credit_reserve_rule_id;

        return $this;
    }

    /**
     * Gets payment_code
     *
     * @return string
     */
    public function getPaymentCode()
    {
        return $this->container['payment_code'];
    }

    /**
     * Sets payment_code
     *
     * @param string $payment_code Digital wallet payment code
     *
     * @return $this
     */
    public function setPaymentCode($payment_code)
    {
        $this->container['payment_code'] = $payment_code;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date Payment date
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Transaction ID
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status Transaction Status
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!is_null($transaction_status) && !in_array($transaction_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


