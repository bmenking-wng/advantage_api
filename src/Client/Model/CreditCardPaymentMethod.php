<?php
/**
 * CreditCardPaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CreditCardPaymentMethod Class Doc Comment
 *
 * @category Class
 * @description Information pertaining to a payment method.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardPaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'provider' => 'string',
        'vendor' => 'string',
        'account_id' => 'string',
        'security_code_handling' => 'string',
        'is_maestro' => 'bool',
        'save_for_future_use' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'provider' => null,
        'vendor' => null,
        'account_id' => null,
        'security_code_handling' => null,
        'is_maestro' => null,
        'save_for_future_use' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'provider' => 'Provider',
        'vendor' => 'Vendor',
        'account_id' => 'AccountId',
        'security_code_handling' => 'SecurityCodeHandling',
        'is_maestro' => 'IsMaestro',
        'save_for_future_use' => 'SaveForFutureUse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'provider' => 'setProvider',
        'vendor' => 'setVendor',
        'account_id' => 'setAccountId',
        'security_code_handling' => 'setSecurityCodeHandling',
        'is_maestro' => 'setIsMaestro',
        'save_for_future_use' => 'setSaveForFutureUse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'provider' => 'getProvider',
        'vendor' => 'getVendor',
        'account_id' => 'getAccountId',
        'security_code_handling' => 'getSecurityCodeHandling',
        'is_maestro' => 'getIsMaestro',
        'save_for_future_use' => 'getSaveForFutureUse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROVIDER_UNKNOWN = 'Unknown';
    const PROVIDER_AMERICAN_EXPRESS = 'AmericanExpress';
    const PROVIDER_AUSTRALIAN_BANK_CARD = 'AustralianBankCard';
    const PROVIDER_BANK_CARD = 'BankCard';
    const PROVIDER_CARTE_BLUE = 'CarteBlue';
    const PROVIDER_DINERS_CLUB = 'DinersClub';
    const PROVIDER_DISCOVER = 'Discover';
    const PROVIDER_DANKORT = 'Dankort';
    const PROVIDER_VISA = 'Visa';
    const PROVIDER_VISA_DELTA = 'VisaDelta';
    const PROVIDER_VISA_ELECTRON = 'VisaElectron';
    const PROVIDER_JCB = 'Jcb';
    const PROVIDER_MAESTRO_DOMESTIC = 'MaestroDomestic';
    const PROVIDER_MAESTRO_INTERNATIONAL = 'MaestroInternational';
    const PROVIDER_MASTER_CARD = 'MasterCard';
    const VENDOR_UNKNOWN = 'Unknown';
    const VENDOR_ADVANCED_INTEGRATION_METHOD = 'AdvancedIntegrationMethod';
    const VENDOR_CHASE_PAYMENTECH = 'ChasePaymentech';
    const VENDOR_CYBER_SOURCE = 'CyberSource';
    const VENDOR_DATA_CASH = 'DataCash';
    const VENDOR_DIBS_PAYMENT_SERVICES = 'DibsPaymentServices';
    const VENDOR_EGATE_VIRTUAL_PAYMENT_CLIENT = 'EgateVirtualPaymentClient';
    const VENDOR_FIRST_DATA = 'FirstData';
    const VENDOR_FRANCE_CT6 = 'FranceCt6';
    const VENDOR_HDFC_BANK = 'HdfcBank';
    const VENDOR_LITLE = 'Litle';
    const VENDOR_GENERIC_VENDOR = 'GenericVendor';
    const VENDOR_OGONE_DIRECTLINK = 'OgoneDirectlink';
    const VENDOR_PAYFLOW_PRO = 'PayflowPro';
    const VENDOR_PAYLINE = 'Payline';
    const VENDOR_PAYMENT_EXPRESS = 'PaymentExpress';
    const VENDOR_TEST_VENDOR = 'TestVendor';
    const VENDOR_WESTPAC = 'Westpac';
    const VENDOR_WORLDPAY = 'Worldpay';
    const SECURITY_CODE_HANDLING_REQUIRED = 'Required';
    const SECURITY_CODE_HANDLING_OPTIONAL = 'Optional';
    const SECURITY_CODE_HANDLING_NONE = 'None';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_UNKNOWN,
            self::PROVIDER_AMERICAN_EXPRESS,
            self::PROVIDER_AUSTRALIAN_BANK_CARD,
            self::PROVIDER_BANK_CARD,
            self::PROVIDER_CARTE_BLUE,
            self::PROVIDER_DINERS_CLUB,
            self::PROVIDER_DISCOVER,
            self::PROVIDER_DANKORT,
            self::PROVIDER_VISA,
            self::PROVIDER_VISA_DELTA,
            self::PROVIDER_VISA_ELECTRON,
            self::PROVIDER_JCB,
            self::PROVIDER_MAESTRO_DOMESTIC,
            self::PROVIDER_MAESTRO_INTERNATIONAL,
            self::PROVIDER_MASTER_CARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVendorAllowableValues()
    {
        return [
            self::VENDOR_UNKNOWN,
            self::VENDOR_ADVANCED_INTEGRATION_METHOD,
            self::VENDOR_CHASE_PAYMENTECH,
            self::VENDOR_CYBER_SOURCE,
            self::VENDOR_DATA_CASH,
            self::VENDOR_DIBS_PAYMENT_SERVICES,
            self::VENDOR_EGATE_VIRTUAL_PAYMENT_CLIENT,
            self::VENDOR_FIRST_DATA,
            self::VENDOR_FRANCE_CT6,
            self::VENDOR_HDFC_BANK,
            self::VENDOR_LITLE,
            self::VENDOR_GENERIC_VENDOR,
            self::VENDOR_OGONE_DIRECTLINK,
            self::VENDOR_PAYFLOW_PRO,
            self::VENDOR_PAYLINE,
            self::VENDOR_PAYMENT_EXPRESS,
            self::VENDOR_TEST_VENDOR,
            self::VENDOR_WESTPAC,
            self::VENDOR_WORLDPAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityCodeHandlingAllowableValues()
    {
        return [
            self::SECURITY_CODE_HANDLING_REQUIRED,
            self::SECURITY_CODE_HANDLING_OPTIONAL,
            self::SECURITY_CODE_HANDLING_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['security_code_handling'] = isset($data['security_code_handling']) ? $data['security_code_handling'] : null;
        $this->container['is_maestro'] = isset($data['is_maestro']) ? $data['is_maestro'] : null;
        $this->container['save_for_future_use'] = isset($data['save_for_future_use']) ? $data['save_for_future_use'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVendorAllowableValues();
        if (!is_null($this->container['vendor']) && !in_array($this->container['vendor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vendor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityCodeHandlingAllowableValues();
        if (!is_null($this->container['security_code_handling']) && !in_array($this->container['security_code_handling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'security_code_handling', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code identifying the payment method.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this payment method.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider Card provider (Visa, Mastercard, etc.)
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($provider) && !in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor Credit Card Vendor (Cybersource, Litle, Westpac, etc.)
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $allowedValues = $this->getVendorAllowableValues();
        if (!is_null($vendor) && !in_array($vendor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vendor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Account ID
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets security_code_handling
     *
     * @return string
     */
    public function getSecurityCodeHandling()
    {
        return $this->container['security_code_handling'];
    }

    /**
     * Sets security_code_handling
     *
     * @param string $security_code_handling Indicates how to handle the card security code.
     *
     * @return $this
     */
    public function setSecurityCodeHandling($security_code_handling)
    {
        $allowedValues = $this->getSecurityCodeHandlingAllowableValues();
        if (!is_null($security_code_handling) && !in_array($security_code_handling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'security_code_handling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_code_handling'] = $security_code_handling;

        return $this;
    }

    /**
     * Gets is_maestro
     *
     * @return bool
     */
    public function getIsMaestro()
    {
        return $this->container['is_maestro'];
    }

    /**
     * Sets is_maestro
     *
     * @param bool $is_maestro True if the card is a Maestro card.
     *
     * @return $this
     */
    public function setIsMaestro($is_maestro)
    {
        $this->container['is_maestro'] = $is_maestro;

        return $this;
    }

    /**
     * Gets save_for_future_use
     *
     * @return string
     */
    public function getSaveForFutureUse()
    {
        return $this->container['save_for_future_use'];
    }

    /**
     * Sets save_for_future_use
     *
     * @param string $save_for_future_use Default value of save for future use for this payment method
     *
     * @return $this
     */
    public function setSaveForFutureUse($save_for_future_use)
    {
        $this->container['save_for_future_use'] = $save_for_future_use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


