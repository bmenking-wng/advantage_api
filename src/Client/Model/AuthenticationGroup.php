<?php
/**
 * AuthenticationGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AuthenticationGroup Class Doc Comment
 *
 * @category Class
 * @description Authentication Group Model
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthenticationGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthenticationGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'password_security_setting' => 'string',
        'last_updated_by' => 'string',
        'last_updated' => '\DateTime',
        'is_in_use' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'password_security_setting' => null,
        'last_updated_by' => null,
        'last_updated' => 'date-time',
        'is_in_use' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'password_security_setting' => 'PasswordSecuritySetting',
        'last_updated_by' => 'LastUpdatedBy',
        'last_updated' => 'LastUpdated',
        'is_in_use' => 'IsInUse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'password_security_setting' => 'setPasswordSecuritySetting',
        'last_updated_by' => 'setLastUpdatedBy',
        'last_updated' => 'setLastUpdated',
        'is_in_use' => 'setIsInUse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'password_security_setting' => 'getPasswordSecuritySetting',
        'last_updated_by' => 'getLastUpdatedBy',
        'last_updated' => 'getLastUpdated',
        'is_in_use' => 'getIsInUse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PASSWORD_SECURITY_SETTING_MASKED = 'Masked';
    const PASSWORD_SECURITY_SETTING_MD5_HASH = 'Md5Hash';
    const PASSWORD_SECURITY_SETTING_NONE = 'None';
    const PASSWORD_SECURITY_SETTING_SALTED_MD5 = 'SaltedMd5';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordSecuritySettingAllowableValues()
    {
        return [
            self::PASSWORD_SECURITY_SETTING_MASKED,
            self::PASSWORD_SECURITY_SETTING_MD5_HASH,
            self::PASSWORD_SECURITY_SETTING_NONE,
            self::PASSWORD_SECURITY_SETTING_SALTED_MD5,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['password_security_setting'] = isset($data['password_security_setting']) ? $data['password_security_setting'] : null;
        $this->container['last_updated_by'] = isset($data['last_updated_by']) ? $data['last_updated_by'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['is_in_use'] = isset($data['is_in_use']) ? $data['is_in_use'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPasswordSecuritySettingAllowableValues();
        if (!is_null($this->container['password_security_setting']) && !in_array($this->container['password_security_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'password_security_setting', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Value of Authentication Group Code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Value of Authentication Group Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password_security_setting
     *
     * @return string
     */
    public function getPasswordSecuritySetting()
    {
        return $this->container['password_security_setting'];
    }

    /**
     * Sets password_security_setting
     *
     * @param string $password_security_setting How are user passwords secured in the database for this authentication group?
     *
     * @return $this
     */
    public function setPasswordSecuritySetting($password_security_setting)
    {
        $allowedValues = $this->getPasswordSecuritySettingAllowableValues();
        if (!is_null($password_security_setting) && !in_array($password_security_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'password_security_setting', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_security_setting'] = $password_security_setting;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string $last_updated_by Value of Last Updated by
     *
     * @return $this
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated Value of Last Updated on
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets is_in_use
     *
     * @return bool
     */
    public function getIsInUse()
    {
        return $this->container['is_in_use'];
    }

    /**
     * Sets is_in_use
     *
     * @param bool $is_in_use Is this authentication group in use?  If it is in use then the password security setting cannot be changed.
     *
     * @return $this
     */
    public function setIsInUse($is_in_use)
    {
        $this->container['is_in_use'] = $is_in_use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


