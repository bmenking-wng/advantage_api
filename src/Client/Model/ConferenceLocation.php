<?php
/**
 * ConferenceLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConferenceLocation Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a Conference Location
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConferenceLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conference_id' => 'string',
        'location_code' => 'string',
        'location_name' => 'string',
        'location_site_code' => 'string',
        'starts' => '\DateTime',
        'ends' => '\DateTime',
        'early_registration_deadline' => '\DateTime',
        'on_time_registration_deadline' => '\DateTime',
        'registration_ends' => '\DateTime',
        'room_reservation_deadline' => '\DateTime',
        'no_charge_cancel_deadline' => '\DateTime',
        'no_credit_cancel_deadline' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conference_id' => null,
        'location_code' => null,
        'location_name' => null,
        'location_site_code' => null,
        'starts' => 'date-time',
        'ends' => 'date-time',
        'early_registration_deadline' => 'date-time',
        'on_time_registration_deadline' => 'date-time',
        'registration_ends' => 'date-time',
        'room_reservation_deadline' => 'date-time',
        'no_charge_cancel_deadline' => 'date-time',
        'no_credit_cancel_deadline' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conference_id' => 'ConferenceId',
        'location_code' => 'LocationCode',
        'location_name' => 'LocationName',
        'location_site_code' => 'LocationSiteCode',
        'starts' => 'Starts',
        'ends' => 'Ends',
        'early_registration_deadline' => 'EarlyRegistrationDeadline',
        'on_time_registration_deadline' => 'OnTimeRegistrationDeadline',
        'registration_ends' => 'RegistrationEnds',
        'room_reservation_deadline' => 'RoomReservationDeadline',
        'no_charge_cancel_deadline' => 'NoChargeCancelDeadline',
        'no_credit_cancel_deadline' => 'NoCreditCancelDeadline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conference_id' => 'setConferenceId',
        'location_code' => 'setLocationCode',
        'location_name' => 'setLocationName',
        'location_site_code' => 'setLocationSiteCode',
        'starts' => 'setStarts',
        'ends' => 'setEnds',
        'early_registration_deadline' => 'setEarlyRegistrationDeadline',
        'on_time_registration_deadline' => 'setOnTimeRegistrationDeadline',
        'registration_ends' => 'setRegistrationEnds',
        'room_reservation_deadline' => 'setRoomReservationDeadline',
        'no_charge_cancel_deadline' => 'setNoChargeCancelDeadline',
        'no_credit_cancel_deadline' => 'setNoCreditCancelDeadline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conference_id' => 'getConferenceId',
        'location_code' => 'getLocationCode',
        'location_name' => 'getLocationName',
        'location_site_code' => 'getLocationSiteCode',
        'starts' => 'getStarts',
        'ends' => 'getEnds',
        'early_registration_deadline' => 'getEarlyRegistrationDeadline',
        'on_time_registration_deadline' => 'getOnTimeRegistrationDeadline',
        'registration_ends' => 'getRegistrationEnds',
        'room_reservation_deadline' => 'getRoomReservationDeadline',
        'no_charge_cancel_deadline' => 'getNoChargeCancelDeadline',
        'no_credit_cancel_deadline' => 'getNoCreditCancelDeadline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conference_id'] = isset($data['conference_id']) ? $data['conference_id'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['location_site_code'] = isset($data['location_site_code']) ? $data['location_site_code'] : null;
        $this->container['starts'] = isset($data['starts']) ? $data['starts'] : null;
        $this->container['ends'] = isset($data['ends']) ? $data['ends'] : null;
        $this->container['early_registration_deadline'] = isset($data['early_registration_deadline']) ? $data['early_registration_deadline'] : null;
        $this->container['on_time_registration_deadline'] = isset($data['on_time_registration_deadline']) ? $data['on_time_registration_deadline'] : null;
        $this->container['registration_ends'] = isset($data['registration_ends']) ? $data['registration_ends'] : null;
        $this->container['room_reservation_deadline'] = isset($data['room_reservation_deadline']) ? $data['room_reservation_deadline'] : null;
        $this->container['no_charge_cancel_deadline'] = isset($data['no_charge_cancel_deadline']) ? $data['no_charge_cancel_deadline'] : null;
        $this->container['no_credit_cancel_deadline'] = isset($data['no_credit_cancel_deadline']) ? $data['no_credit_cancel_deadline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conference_id
     *
     * @return string
     */
    public function getConferenceId()
    {
        return $this->container['conference_id'];
    }

    /**
     * Sets conference_id
     *
     * @param string $conference_id Conference ID
     *
     * @return $this
     */
    public function setConferenceId($conference_id)
    {
        $this->container['conference_id'] = $conference_id;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code Conference Location
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name Location name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets location_site_code
     *
     * @return string
     */
    public function getLocationSiteCode()
    {
        return $this->container['location_site_code'];
    }

    /**
     * Sets location_site_code
     *
     * @param string $location_site_code Conference location site (hotel) code
     *
     * @return $this
     */
    public function setLocationSiteCode($location_site_code)
    {
        $this->container['location_site_code'] = $location_site_code;

        return $this;
    }

    /**
     * Gets starts
     *
     * @return \DateTime
     */
    public function getStarts()
    {
        return $this->container['starts'];
    }

    /**
     * Sets starts
     *
     * @param \DateTime $starts Conference start date
     *
     * @return $this
     */
    public function setStarts($starts)
    {
        $this->container['starts'] = $starts;

        return $this;
    }

    /**
     * Gets ends
     *
     * @return \DateTime
     */
    public function getEnds()
    {
        return $this->container['ends'];
    }

    /**
     * Sets ends
     *
     * @param \DateTime $ends Conference end date
     *
     * @return $this
     */
    public function setEnds($ends)
    {
        $this->container['ends'] = $ends;

        return $this;
    }

    /**
     * Gets early_registration_deadline
     *
     * @return \DateTime
     */
    public function getEarlyRegistrationDeadline()
    {
        return $this->container['early_registration_deadline'];
    }

    /**
     * Sets early_registration_deadline
     *
     * @param \DateTime $early_registration_deadline Last day for early registration
     *
     * @return $this
     */
    public function setEarlyRegistrationDeadline($early_registration_deadline)
    {
        $this->container['early_registration_deadline'] = $early_registration_deadline;

        return $this;
    }

    /**
     * Gets on_time_registration_deadline
     *
     * @return \DateTime
     */
    public function getOnTimeRegistrationDeadline()
    {
        return $this->container['on_time_registration_deadline'];
    }

    /**
     * Sets on_time_registration_deadline
     *
     * @param \DateTime $on_time_registration_deadline Last day for on-time registration
     *
     * @return $this
     */
    public function setOnTimeRegistrationDeadline($on_time_registration_deadline)
    {
        $this->container['on_time_registration_deadline'] = $on_time_registration_deadline;

        return $this;
    }

    /**
     * Gets registration_ends
     *
     * @return \DateTime
     */
    public function getRegistrationEnds()
    {
        return $this->container['registration_ends'];
    }

    /**
     * Sets registration_ends
     *
     * @param \DateTime $registration_ends Date when registrations are no longer accepted on the website
     *
     * @return $this
     */
    public function setRegistrationEnds($registration_ends)
    {
        $this->container['registration_ends'] = $registration_ends;

        return $this;
    }

    /**
     * Gets room_reservation_deadline
     *
     * @return \DateTime
     */
    public function getRoomReservationDeadline()
    {
        return $this->container['room_reservation_deadline'];
    }

    /**
     * Sets room_reservation_deadline
     *
     * @param \DateTime $room_reservation_deadline Last day to reserve hotel rooms
     *
     * @return $this
     */
    public function setRoomReservationDeadline($room_reservation_deadline)
    {
        $this->container['room_reservation_deadline'] = $room_reservation_deadline;

        return $this;
    }

    /**
     * Gets no_charge_cancel_deadline
     *
     * @return \DateTime
     */
    public function getNoChargeCancelDeadline()
    {
        return $this->container['no_charge_cancel_deadline'];
    }

    /**
     * Sets no_charge_cancel_deadline
     *
     * @param \DateTime $no_charge_cancel_deadline Last date to cancel without charges
     *
     * @return $this
     */
    public function setNoChargeCancelDeadline($no_charge_cancel_deadline)
    {
        $this->container['no_charge_cancel_deadline'] = $no_charge_cancel_deadline;

        return $this;
    }

    /**
     * Gets no_credit_cancel_deadline
     *
     * @return \DateTime
     */
    public function getNoCreditCancelDeadline()
    {
        return $this->container['no_credit_cancel_deadline'];
    }

    /**
     * Sets no_credit_cancel_deadline
     *
     * @param \DateTime $no_credit_cancel_deadline Last date to cancel with at least a partial refund
     *
     * @return $this
     */
    public function setNoCreditCancelDeadline($no_credit_cancel_deadline)
    {
        $this->container['no_credit_cancel_deadline'] = $no_credit_cancel_deadline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


