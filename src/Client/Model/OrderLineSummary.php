<?php
/**
 * OrderLineSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderLineSummary Class Doc Comment
 *
 * @category Class
 * @description The summary information for an order line.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderLineSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderLineSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_currency_code' => 'string',
        'discount' => 'double',
        'is_package_component' => 'bool',
        'is_premium' => 'bool',
        'item_number' => 'string',
        'line_number' => 'int',
        'net_discount' => 'double',
        'net_sales_amount' => 'double',
        'net_shipping_charges' => 'double',
        'net_tax' => 'double',
        'net_total_cost' => 'double',
        'order_number' => 'string',
        'package_header_line_id' => 'int',
        'product_name' => 'string',
        'product_type' => 'string',
        'promotion_choice' => '\Advantage\Client\Model\PromotionChoiceSummary',
        'promotion_code' => 'string',
        'quantity_ordered' => 'int',
        'sales_amount_ordered' => 'double',
        'sales_amount_shipped' => 'double',
        'shipping_charges' => 'double',
        'ship_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'tax' => 'double',
        'total_cost' => 'double',
        'unit_price' => 'double',
        'is_cancelled' => 'bool',
        'is_association_component' => 'bool',
        'operation_code' => 'string',
        'is_gift' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_currency_code' => null,
        'discount' => 'double',
        'is_package_component' => null,
        'is_premium' => null,
        'item_number' => null,
        'line_number' => 'int32',
        'net_discount' => 'double',
        'net_sales_amount' => 'double',
        'net_shipping_charges' => 'double',
        'net_tax' => 'double',
        'net_total_cost' => 'double',
        'order_number' => null,
        'package_header_line_id' => 'int32',
        'product_name' => null,
        'product_type' => null,
        'promotion_choice' => null,
        'promotion_code' => null,
        'quantity_ordered' => 'int32',
        'sales_amount_ordered' => 'double',
        'sales_amount_shipped' => 'double',
        'shipping_charges' => 'double',
        'ship_to' => null,
        'tax' => 'double',
        'total_cost' => 'double',
        'unit_price' => 'double',
        'is_cancelled' => null,
        'is_association_component' => null,
        'operation_code' => null,
        'is_gift' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_currency_code' => 'BillingCurrencyCode',
        'discount' => 'Discount',
        'is_package_component' => 'IsPackageComponent',
        'is_premium' => 'IsPremium',
        'item_number' => 'ItemNumber',
        'line_number' => 'LineNumber',
        'net_discount' => 'NetDiscount',
        'net_sales_amount' => 'NetSalesAmount',
        'net_shipping_charges' => 'NetShippingCharges',
        'net_tax' => 'NetTax',
        'net_total_cost' => 'NetTotalCost',
        'order_number' => 'OrderNumber',
        'package_header_line_id' => 'PackageHeaderLineId',
        'product_name' => 'ProductName',
        'product_type' => 'ProductType',
        'promotion_choice' => 'PromotionChoice',
        'promotion_code' => 'PromotionCode',
        'quantity_ordered' => 'QuantityOrdered',
        'sales_amount_ordered' => 'SalesAmountOrdered',
        'sales_amount_shipped' => 'SalesAmountShipped',
        'shipping_charges' => 'ShippingCharges',
        'ship_to' => 'ShipTo',
        'tax' => 'Tax',
        'total_cost' => 'TotalCost',
        'unit_price' => 'UnitPrice',
        'is_cancelled' => 'IsCancelled',
        'is_association_component' => 'IsAssociationComponent',
        'operation_code' => 'OperationCode',
        'is_gift' => 'IsGift'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_currency_code' => 'setBillingCurrencyCode',
        'discount' => 'setDiscount',
        'is_package_component' => 'setIsPackageComponent',
        'is_premium' => 'setIsPremium',
        'item_number' => 'setItemNumber',
        'line_number' => 'setLineNumber',
        'net_discount' => 'setNetDiscount',
        'net_sales_amount' => 'setNetSalesAmount',
        'net_shipping_charges' => 'setNetShippingCharges',
        'net_tax' => 'setNetTax',
        'net_total_cost' => 'setNetTotalCost',
        'order_number' => 'setOrderNumber',
        'package_header_line_id' => 'setPackageHeaderLineId',
        'product_name' => 'setProductName',
        'product_type' => 'setProductType',
        'promotion_choice' => 'setPromotionChoice',
        'promotion_code' => 'setPromotionCode',
        'quantity_ordered' => 'setQuantityOrdered',
        'sales_amount_ordered' => 'setSalesAmountOrdered',
        'sales_amount_shipped' => 'setSalesAmountShipped',
        'shipping_charges' => 'setShippingCharges',
        'ship_to' => 'setShipTo',
        'tax' => 'setTax',
        'total_cost' => 'setTotalCost',
        'unit_price' => 'setUnitPrice',
        'is_cancelled' => 'setIsCancelled',
        'is_association_component' => 'setIsAssociationComponent',
        'operation_code' => 'setOperationCode',
        'is_gift' => 'setIsGift'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_currency_code' => 'getBillingCurrencyCode',
        'discount' => 'getDiscount',
        'is_package_component' => 'getIsPackageComponent',
        'is_premium' => 'getIsPremium',
        'item_number' => 'getItemNumber',
        'line_number' => 'getLineNumber',
        'net_discount' => 'getNetDiscount',
        'net_sales_amount' => 'getNetSalesAmount',
        'net_shipping_charges' => 'getNetShippingCharges',
        'net_tax' => 'getNetTax',
        'net_total_cost' => 'getNetTotalCost',
        'order_number' => 'getOrderNumber',
        'package_header_line_id' => 'getPackageHeaderLineId',
        'product_name' => 'getProductName',
        'product_type' => 'getProductType',
        'promotion_choice' => 'getPromotionChoice',
        'promotion_code' => 'getPromotionCode',
        'quantity_ordered' => 'getQuantityOrdered',
        'sales_amount_ordered' => 'getSalesAmountOrdered',
        'sales_amount_shipped' => 'getSalesAmountShipped',
        'shipping_charges' => 'getShippingCharges',
        'ship_to' => 'getShipTo',
        'tax' => 'getTax',
        'total_cost' => 'getTotalCost',
        'unit_price' => 'getUnitPrice',
        'is_cancelled' => 'getIsCancelled',
        'is_association_component' => 'getIsAssociationComponent',
        'operation_code' => 'getOperationCode',
        'is_gift' => 'getIsGift'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_PRODUCT = 'Product';
    const PRODUCT_TYPE_SUBSCRIPTION = 'Subscription';
    const PRODUCT_TYPE_ACCESS = 'Access';
    const PRODUCT_TYPE_CONFERENCE = 'Conference';
    const PRODUCT_TYPE_BACK_ISSUE = 'BackIssue';
    const PRODUCT_TYPE_PACKAGE = 'Package';
    const PRODUCT_TYPE_UNKNOWN = 'Unknown';
    const PRODUCT_TYPE_MEMBERSHIP = 'Membership';
    const PRODUCT_TYPE_DONATION = 'Donation';
    const PRODUCT_TYPE_PRINT_JOB = 'PrintJob';
    const PRODUCT_TYPE_REPRINT = 'Reprint';
    const PRODUCT_TYPE_SERVICE = 'Service';
    const PRODUCT_TYPE_STOCK = 'Stock';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_PRODUCT,
            self::PRODUCT_TYPE_SUBSCRIPTION,
            self::PRODUCT_TYPE_ACCESS,
            self::PRODUCT_TYPE_CONFERENCE,
            self::PRODUCT_TYPE_BACK_ISSUE,
            self::PRODUCT_TYPE_PACKAGE,
            self::PRODUCT_TYPE_UNKNOWN,
            self::PRODUCT_TYPE_MEMBERSHIP,
            self::PRODUCT_TYPE_DONATION,
            self::PRODUCT_TYPE_PRINT_JOB,
            self::PRODUCT_TYPE_REPRINT,
            self::PRODUCT_TYPE_SERVICE,
            self::PRODUCT_TYPE_STOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['is_package_component'] = isset($data['is_package_component']) ? $data['is_package_component'] : null;
        $this->container['is_premium'] = isset($data['is_premium']) ? $data['is_premium'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['net_discount'] = isset($data['net_discount']) ? $data['net_discount'] : null;
        $this->container['net_sales_amount'] = isset($data['net_sales_amount']) ? $data['net_sales_amount'] : null;
        $this->container['net_shipping_charges'] = isset($data['net_shipping_charges']) ? $data['net_shipping_charges'] : null;
        $this->container['net_tax'] = isset($data['net_tax']) ? $data['net_tax'] : null;
        $this->container['net_total_cost'] = isset($data['net_total_cost']) ? $data['net_total_cost'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['package_header_line_id'] = isset($data['package_header_line_id']) ? $data['package_header_line_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['promotion_choice'] = isset($data['promotion_choice']) ? $data['promotion_choice'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['quantity_ordered'] = isset($data['quantity_ordered']) ? $data['quantity_ordered'] : null;
        $this->container['sales_amount_ordered'] = isset($data['sales_amount_ordered']) ? $data['sales_amount_ordered'] : null;
        $this->container['sales_amount_shipped'] = isset($data['sales_amount_shipped']) ? $data['sales_amount_shipped'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['is_cancelled'] = isset($data['is_cancelled']) ? $data['is_cancelled'] : null;
        $this->container['is_association_component'] = isset($data['is_association_component']) ? $data['is_association_component'] : null;
        $this->container['operation_code'] = isset($data['operation_code']) ? $data['operation_code'] : null;
        $this->container['is_gift'] = isset($data['is_gift']) ? $data['is_gift'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_currency_code
     *
     * @return string
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     *
     * @param string $billing_currency_code Billing currency code.
     *
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount Order line discount amount.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets is_package_component
     *
     * @return bool
     */
    public function getIsPackageComponent()
    {
        return $this->container['is_package_component'];
    }

    /**
     * Sets is_package_component
     *
     * @param bool $is_package_component Is this a package component?
     *
     * @return $this
     */
    public function setIsPackageComponent($is_package_component)
    {
        $this->container['is_package_component'] = $is_package_component;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool
     */
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool $is_premium Is this order line a premium?
     *
     * @return $this
     */
    public function setIsPremium($is_premium)
    {
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number Item number of the product on the order line.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Order line ID
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets net_discount
     *
     * @return double
     */
    public function getNetDiscount()
    {
        return $this->container['net_discount'];
    }

    /**
     * Sets net_discount
     *
     * @param double $net_discount Order line discount amount.
     *
     * @return $this
     */
    public function setNetDiscount($net_discount)
    {
        $this->container['net_discount'] = $net_discount;

        return $this;
    }

    /**
     * Gets net_sales_amount
     *
     * @return double
     */
    public function getNetSalesAmount()
    {
        return $this->container['net_sales_amount'];
    }

    /**
     * Sets net_sales_amount
     *
     * @param double $net_sales_amount Order line sales amount.
     *
     * @return $this
     */
    public function setNetSalesAmount($net_sales_amount)
    {
        $this->container['net_sales_amount'] = $net_sales_amount;

        return $this;
    }

    /**
     * Gets net_shipping_charges
     *
     * @return double
     */
    public function getNetShippingCharges()
    {
        return $this->container['net_shipping_charges'];
    }

    /**
     * Sets net_shipping_charges
     *
     * @param double $net_shipping_charges Order line shipping/postage charges.
     *
     * @return $this
     */
    public function setNetShippingCharges($net_shipping_charges)
    {
        $this->container['net_shipping_charges'] = $net_shipping_charges;

        return $this;
    }

    /**
     * Gets net_tax
     *
     * @return double
     */
    public function getNetTax()
    {
        return $this->container['net_tax'];
    }

    /**
     * Sets net_tax
     *
     * @param double $net_tax Order line tax amount.
     *
     * @return $this
     */
    public function setNetTax($net_tax)
    {
        $this->container['net_tax'] = $net_tax;

        return $this;
    }

    /**
     * Gets net_total_cost
     *
     * @return double
     */
    public function getNetTotalCost()
    {
        return $this->container['net_total_cost'];
    }

    /**
     * Sets net_total_cost
     *
     * @param double $net_total_cost Net order line cost.
     *
     * @return $this
     */
    public function setNetTotalCost($net_total_cost)
    {
        $this->container['net_total_cost'] = $net_total_cost;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number The Advantage order number.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets package_header_line_id
     *
     * @return int
     */
    public function getPackageHeaderLineId()
    {
        return $this->container['package_header_line_id'];
    }

    /**
     * Sets package_header_line_id
     *
     * @param int $package_header_line_id Returns the line ID of the package header, or zero.
     *
     * @return $this
     */
    public function setPackageHeaderLineId($package_header_line_id)
    {
        $this->container['package_header_line_id'] = $package_header_line_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name Product title.
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type Product type (e.g. CIR, PRO, CEM).
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets promotion_choice
     *
     * @return \Advantage\Client\Model\PromotionChoiceSummary
     */
    public function getPromotionChoice()
    {
        return $this->container['promotion_choice'];
    }

    /**
     * Sets promotion_choice
     *
     * @param \Advantage\Client\Model\PromotionChoiceSummary $promotion_choice Promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoice($promotion_choice)
    {
        $this->container['promotion_choice'] = $promotion_choice;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code Promotion/key code.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets quantity_ordered
     *
     * @return int
     */
    public function getQuantityOrdered()
    {
        return $this->container['quantity_ordered'];
    }

    /**
     * Sets quantity_ordered
     *
     * @param int $quantity_ordered Quantity ordered.
     *
     * @return $this
     */
    public function setQuantityOrdered($quantity_ordered)
    {
        $this->container['quantity_ordered'] = $quantity_ordered;

        return $this;
    }

    /**
     * Gets sales_amount_ordered
     *
     * @return double
     */
    public function getSalesAmountOrdered()
    {
        return $this->container['sales_amount_ordered'];
    }

    /**
     * Sets sales_amount_ordered
     *
     * @param double $sales_amount_ordered Order line sales amount.
     *
     * @return $this
     */
    public function setSalesAmountOrdered($sales_amount_ordered)
    {
        $this->container['sales_amount_ordered'] = $sales_amount_ordered;

        return $this;
    }

    /**
     * Gets sales_amount_shipped
     *
     * @return double
     */
    public function getSalesAmountShipped()
    {
        return $this->container['sales_amount_shipped'];
    }

    /**
     * Sets sales_amount_shipped
     *
     * @param double $sales_amount_shipped Order line sales amount.
     *
     * @return $this
     */
    public function setSalesAmountShipped($sales_amount_shipped)
    {
        $this->container['sales_amount_shipped'] = $sales_amount_shipped;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return double
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param double $shipping_charges Order line shipping/postage charges.
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {
        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $ship_to Ship-to customer
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax Order line tax amount.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost Net order line cost.
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price Price per quantity ordered.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool $is_cancelled Is the order line canceled?
     *
     * @return $this
     */
    public function setIsCancelled($is_cancelled)
    {
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets is_association_component
     *
     * @return bool
     */
    public function getIsAssociationComponent()
    {
        return $this->container['is_association_component'];
    }

    /**
     * Sets is_association_component
     *
     * @param bool $is_association_component Is the order line a component of an association membership?
     *
     * @return $this
     */
    public function setIsAssociationComponent($is_association_component)
    {
        $this->container['is_association_component'] = $is_association_component;

        return $this;
    }

    /**
     * Gets operation_code
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operation_code'];
    }

    /**
     * Sets operation_code
     *
     * @param string $operation_code Operation code for subscription order line. Blank for non-subscription order line.
     *
     * @return $this
     */
    public function setOperationCode($operation_code)
    {
        $this->container['operation_code'] = $operation_code;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool $is_gift True if the bill-to customer number does not match the ship-to customer number
     *
     * @return $this
     */
    public function setIsGift($is_gift)
    {
        $this->container['is_gift'] = $is_gift;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


