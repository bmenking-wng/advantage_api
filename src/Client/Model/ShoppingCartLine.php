<?php
/**
 * ShoppingCartLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ShoppingCartLine Class Doc Comment
 *
 * @category Class
 * @description Information for a line in the shopping cart.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShoppingCartLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShoppingCartLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_id' => 'int',
        'ship_to' => '\Advantage\Client\Model\CustomerAddressKey',
        'item_number' => 'string',
        'product_name' => 'string',
        'product_type' => 'string',
        'promotion_code' => 'string',
        'promotion_choice' => '\Advantage\Client\Model\PromotionChoice',
        'price' => 'double',
        'quantity' => 'int',
        'profile_id' => 'string',
        'total_discount_percent' => 'double',
        'discounts' => '\Advantage\Client\Model\ItemDiscount[]',
        'access' => '\Advantage\Client\Model\ShoppingCartAccessLine',
        'donation' => '\Advantage\Client\Model\ShoppingCartDonationLine'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_id' => 'int32',
        'ship_to' => null,
        'item_number' => null,
        'product_name' => null,
        'product_type' => null,
        'promotion_code' => null,
        'promotion_choice' => null,
        'price' => 'double',
        'quantity' => 'int32',
        'profile_id' => null,
        'total_discount_percent' => 'double',
        'discounts' => null,
        'access' => null,
        'donation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_id' => 'LineId',
        'ship_to' => 'ShipTo',
        'item_number' => 'ItemNumber',
        'product_name' => 'ProductName',
        'product_type' => 'ProductType',
        'promotion_code' => 'PromotionCode',
        'promotion_choice' => 'PromotionChoice',
        'price' => 'Price',
        'quantity' => 'Quantity',
        'profile_id' => 'ProfileId',
        'total_discount_percent' => 'TotalDiscountPercent',
        'discounts' => 'Discounts',
        'access' => 'Access',
        'donation' => 'Donation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_id' => 'setLineId',
        'ship_to' => 'setShipTo',
        'item_number' => 'setItemNumber',
        'product_name' => 'setProductName',
        'product_type' => 'setProductType',
        'promotion_code' => 'setPromotionCode',
        'promotion_choice' => 'setPromotionChoice',
        'price' => 'setPrice',
        'quantity' => 'setQuantity',
        'profile_id' => 'setProfileId',
        'total_discount_percent' => 'setTotalDiscountPercent',
        'discounts' => 'setDiscounts',
        'access' => 'setAccess',
        'donation' => 'setDonation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_id' => 'getLineId',
        'ship_to' => 'getShipTo',
        'item_number' => 'getItemNumber',
        'product_name' => 'getProductName',
        'product_type' => 'getProductType',
        'promotion_code' => 'getPromotionCode',
        'promotion_choice' => 'getPromotionChoice',
        'price' => 'getPrice',
        'quantity' => 'getQuantity',
        'profile_id' => 'getProfileId',
        'total_discount_percent' => 'getTotalDiscountPercent',
        'discounts' => 'getDiscounts',
        'access' => 'getAccess',
        'donation' => 'getDonation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_PRODUCT = 'Product';
    const PRODUCT_TYPE_SUBSCRIPTION = 'Subscription';
    const PRODUCT_TYPE_ACCESS = 'Access';
    const PRODUCT_TYPE_CONFERENCE = 'Conference';
    const PRODUCT_TYPE_BACK_ISSUE = 'BackIssue';
    const PRODUCT_TYPE_PACKAGE = 'Package';
    const PRODUCT_TYPE_UNKNOWN = 'Unknown';
    const PRODUCT_TYPE_MEMBERSHIP = 'Membership';
    const PRODUCT_TYPE_DONATION = 'Donation';
    const PRODUCT_TYPE_PRINT_JOB = 'PrintJob';
    const PRODUCT_TYPE_REPRINT = 'Reprint';
    const PRODUCT_TYPE_SERVICE = 'Service';
    const PRODUCT_TYPE_STOCK = 'Stock';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_PRODUCT,
            self::PRODUCT_TYPE_SUBSCRIPTION,
            self::PRODUCT_TYPE_ACCESS,
            self::PRODUCT_TYPE_CONFERENCE,
            self::PRODUCT_TYPE_BACK_ISSUE,
            self::PRODUCT_TYPE_PACKAGE,
            self::PRODUCT_TYPE_UNKNOWN,
            self::PRODUCT_TYPE_MEMBERSHIP,
            self::PRODUCT_TYPE_DONATION,
            self::PRODUCT_TYPE_PRINT_JOB,
            self::PRODUCT_TYPE_REPRINT,
            self::PRODUCT_TYPE_SERVICE,
            self::PRODUCT_TYPE_STOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['promotion_choice'] = isset($data['promotion_choice']) ? $data['promotion_choice'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['total_discount_percent'] = isset($data['total_discount_percent']) ? $data['total_discount_percent'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
        $this->container['donation'] = isset($data['donation']) ? $data['donation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_id
     *
     * @return int
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     *
     * @param int $line_id The identifier for the shopping cart line, unique within the cart.
     *
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $ship_to The ship-to for this order line.  (Optional.  The ship-to need not be identified until  the cart is converted to an order.  The line-level ship-to can default from the cart-level  ship-to when the cart is converted to an order.)
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number The item number identifying the product.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product.
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type The type of the product.
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code applied to the item.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets promotion_choice
     *
     * @return \Advantage\Client\Model\PromotionChoice
     */
    public function getPromotionChoice()
    {
        return $this->container['promotion_choice'];
    }

    /**
     * Sets promotion_choice
     *
     * @param \Advantage\Client\Model\PromotionChoice $promotion_choice The promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoice($promotion_choice)
    {
        $this->container['promotion_choice'] = $promotion_choice;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price The unit price for the item.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of this particular item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The unique identifier for the profile storing the question responses associated with this item.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets total_discount_percent
     *
     * @return double
     */
    public function getTotalDiscountPercent()
    {
        return $this->container['total_discount_percent'];
    }

    /**
     * Sets total_discount_percent
     *
     * @param double $total_discount_percent The total percentage that the item's price has been discounted.
     *
     * @return $this
     */
    public function setTotalDiscountPercent($total_discount_percent)
    {
        $this->container['total_discount_percent'] = $total_discount_percent;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Advantage\Client\Model\ItemDiscount[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Advantage\Client\Model\ItemDiscount[] $discounts The discount source codes, indicating which discounts were applied to determine this item's price.
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \Advantage\Client\Model\ShoppingCartAccessLine
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \Advantage\Client\Model\ShoppingCartAccessLine $access Information about an access (AMB) shopping cart line
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets donation
     *
     * @return \Advantage\Client\Model\ShoppingCartDonationLine
     */
    public function getDonation()
    {
        return $this->container['donation'];
    }

    /**
     * Sets donation
     *
     * @param \Advantage\Client\Model\ShoppingCartDonationLine $donation Information about a donation (DNT) shopping cart line
     *
     * @return $this
     */
    public function setDonation($donation)
    {
        $this->container['donation'] = $donation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


