<?php
/**
 * ClientArea
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ClientArea Class Doc Comment
 *
 * @category Class
 * @description This class is part of the CSL module.  It is used internally at ACS.  Represents an ACS client area.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientArea implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientArea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_number' => 'string',
        'code' => 'string',
        'name' => 'string',
        'custom_branch_name' => 'string',
        'expiration_date' => '\DateTime',
        'revision_name' => 'string',
        'revision_code' => 'string',
        'server_name' => 'string',
        'version_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_number' => null,
        'code' => null,
        'name' => null,
        'custom_branch_name' => null,
        'expiration_date' => 'date-time',
        'revision_name' => null,
        'revision_code' => null,
        'server_name' => null,
        'version_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_number' => 'ClientNumber',
        'code' => 'Code',
        'name' => 'Name',
        'custom_branch_name' => 'CustomBranchName',
        'expiration_date' => 'ExpirationDate',
        'revision_name' => 'RevisionName',
        'revision_code' => 'RevisionCode',
        'server_name' => 'ServerName',
        'version_number' => 'VersionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_number' => 'setClientNumber',
        'code' => 'setCode',
        'name' => 'setName',
        'custom_branch_name' => 'setCustomBranchName',
        'expiration_date' => 'setExpirationDate',
        'revision_name' => 'setRevisionName',
        'revision_code' => 'setRevisionCode',
        'server_name' => 'setServerName',
        'version_number' => 'setVersionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_number' => 'getClientNumber',
        'code' => 'getCode',
        'name' => 'getName',
        'custom_branch_name' => 'getCustomBranchName',
        'expiration_date' => 'getExpirationDate',
        'revision_name' => 'getRevisionName',
        'revision_code' => 'getRevisionCode',
        'server_name' => 'getServerName',
        'version_number' => 'getVersionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_number'] = isset($data['client_number']) ? $data['client_number'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['custom_branch_name'] = isset($data['custom_branch_name']) ? $data['custom_branch_name'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['revision_name'] = isset($data['revision_name']) ? $data['revision_name'] : null;
        $this->container['revision_code'] = isset($data['revision_code']) ? $data['revision_code'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['version_number'] = isset($data['version_number']) ? $data['version_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_number
     *
     * @return string
     */
    public function getClientNumber()
    {
        return $this->container['client_number'];
    }

    /**
     * Sets client_number
     *
     * @param string $client_number The customer number of the client
     *
     * @return $this
     */
    public function setClientNumber($client_number)
    {
        $this->container['client_number'] = $client_number;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code A unique code identifying the client area
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the client area
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets custom_branch_name
     *
     * @return string
     */
    public function getCustomBranchName()
    {
        return $this->container['custom_branch_name'];
    }

    /**
     * Sets custom_branch_name
     *
     * @param string $custom_branch_name The branch name for the client area.  The value will be null if the client is not on a custom branch.
     *
     * @return $this
     */
    public function setCustomBranchName($custom_branch_name)
    {
        $this->container['custom_branch_name'] = $custom_branch_name;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date The license expiration date for the client area
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets revision_name
     *
     * @return string
     */
    public function getRevisionName()
    {
        return $this->container['revision_name'];
    }

    /**
     * Sets revision_name
     *
     * @param string $revision_name The formatted revision number for the client area
     *
     * @return $this
     */
    public function setRevisionName($revision_name)
    {
        $this->container['revision_name'] = $revision_name;

        return $this;
    }

    /**
     * Gets revision_code
     *
     * @return string
     */
    public function getRevisionCode()
    {
        return $this->container['revision_code'];
    }

    /**
     * Sets revision_code
     *
     * @param string $revision_code The revision number for the client area
     *
     * @return $this
     */
    public function setRevisionCode($revision_code)
    {
        $this->container['revision_code'] = $revision_code;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name The server name for the client area
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets version_number
     *
     * @return string
     */
    public function getVersionNumber()
    {
        return $this->container['version_number'];
    }

    /**
     * Sets version_number
     *
     * @param string $version_number The full version number (xxxx.xx.xxxx) for the client area
     *
     * @return $this
     */
    public function setVersionNumber($version_number)
    {
        $this->container['version_number'] = $version_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


