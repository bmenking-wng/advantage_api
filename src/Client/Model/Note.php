<?php
/**
 * Note
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Note Class Doc Comment
 *
 * @category Class
 * @description An Advantage note
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Note implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Note';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'note_id' => 'string',
        'contact_date' => '\DateTime',
        'subject' => 'string',
        'status' => 'string',
        'note_text' => 'string',
        'resolved_date' => '\DateTime',
        'system_name' => 'string',
        'note_letters' => '\Advantage\Client\Model\Letter[]',
        'documents' => '\Advantage\Client\Model\Document[]',
        'regarding_product' => 'string',
        'reason_code' => 'string',
        'reason_category' => 'string',
        'reason_category_description' => 'string',
        'action_code' => 'string',
        'completion_date' => '\DateTime',
        'added_by' => 'string',
        'upsell_path' => 'string',
        'follow_up_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'note_id' => null,
        'contact_date' => 'date-time',
        'subject' => null,
        'status' => null,
        'note_text' => null,
        'resolved_date' => 'date-time',
        'system_name' => null,
        'note_letters' => null,
        'documents' => null,
        'regarding_product' => null,
        'reason_code' => null,
        'reason_category' => null,
        'reason_category_description' => null,
        'action_code' => null,
        'completion_date' => 'date-time',
        'added_by' => null,
        'upsell_path' => null,
        'follow_up_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'note_id' => 'NoteId',
        'contact_date' => 'ContactDate',
        'subject' => 'Subject',
        'status' => 'Status',
        'note_text' => 'NoteText',
        'resolved_date' => 'ResolvedDate',
        'system_name' => 'SystemName',
        'note_letters' => 'NoteLetters',
        'documents' => 'Documents',
        'regarding_product' => 'RegardingProduct',
        'reason_code' => 'ReasonCode',
        'reason_category' => 'ReasonCategory',
        'reason_category_description' => 'ReasonCategoryDescription',
        'action_code' => 'ActionCode',
        'completion_date' => 'CompletionDate',
        'added_by' => 'AddedBy',
        'upsell_path' => 'UpsellPath',
        'follow_up_user' => 'FollowUpUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'note_id' => 'setNoteId',
        'contact_date' => 'setContactDate',
        'subject' => 'setSubject',
        'status' => 'setStatus',
        'note_text' => 'setNoteText',
        'resolved_date' => 'setResolvedDate',
        'system_name' => 'setSystemName',
        'note_letters' => 'setNoteLetters',
        'documents' => 'setDocuments',
        'regarding_product' => 'setRegardingProduct',
        'reason_code' => 'setReasonCode',
        'reason_category' => 'setReasonCategory',
        'reason_category_description' => 'setReasonCategoryDescription',
        'action_code' => 'setActionCode',
        'completion_date' => 'setCompletionDate',
        'added_by' => 'setAddedBy',
        'upsell_path' => 'setUpsellPath',
        'follow_up_user' => 'setFollowUpUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'note_id' => 'getNoteId',
        'contact_date' => 'getContactDate',
        'subject' => 'getSubject',
        'status' => 'getStatus',
        'note_text' => 'getNoteText',
        'resolved_date' => 'getResolvedDate',
        'system_name' => 'getSystemName',
        'note_letters' => 'getNoteLetters',
        'documents' => 'getDocuments',
        'regarding_product' => 'getRegardingProduct',
        'reason_code' => 'getReasonCode',
        'reason_category' => 'getReasonCategory',
        'reason_category_description' => 'getReasonCategoryDescription',
        'action_code' => 'getActionCode',
        'completion_date' => 'getCompletionDate',
        'added_by' => 'getAddedBy',
        'upsell_path' => 'getUpsellPath',
        'follow_up_user' => 'getFollowUpUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OPEN = 'Open';
    const STATUS_CLOSED = 'Closed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['note_id'] = isset($data['note_id']) ? $data['note_id'] : null;
        $this->container['contact_date'] = isset($data['contact_date']) ? $data['contact_date'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['note_text'] = isset($data['note_text']) ? $data['note_text'] : null;
        $this->container['resolved_date'] = isset($data['resolved_date']) ? $data['resolved_date'] : null;
        $this->container['system_name'] = isset($data['system_name']) ? $data['system_name'] : null;
        $this->container['note_letters'] = isset($data['note_letters']) ? $data['note_letters'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['regarding_product'] = isset($data['regarding_product']) ? $data['regarding_product'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['reason_category'] = isset($data['reason_category']) ? $data['reason_category'] : null;
        $this->container['reason_category_description'] = isset($data['reason_category_description']) ? $data['reason_category_description'] : null;
        $this->container['action_code'] = isset($data['action_code']) ? $data['action_code'] : null;
        $this->container['completion_date'] = isset($data['completion_date']) ? $data['completion_date'] : null;
        $this->container['added_by'] = isset($data['added_by']) ? $data['added_by'] : null;
        $this->container['upsell_path'] = isset($data['upsell_path']) ? $data['upsell_path'] : null;
        $this->container['follow_up_user'] = isset($data['follow_up_user']) ? $data['follow_up_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets note_id
     *
     * @return string
     */
    public function getNoteId()
    {
        return $this->container['note_id'];
    }

    /**
     * Sets note_id
     *
     * @param string $note_id The note id
     *
     * @return $this
     */
    public function setNoteId($note_id)
    {
        $this->container['note_id'] = $note_id;

        return $this;
    }

    /**
     * Gets contact_date
     *
     * @return \DateTime
     */
    public function getContactDate()
    {
        return $this->container['contact_date'];
    }

    /**
     * Sets contact_date
     *
     * @param \DateTime $contact_date The date the note was created
     *
     * @return $this
     */
    public function setContactDate($contact_date)
    {
        $this->container['contact_date'] = $contact_date;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The note subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The note status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets note_text
     *
     * @return string
     */
    public function getNoteText()
    {
        return $this->container['note_text'];
    }

    /**
     * Sets note_text
     *
     * @param string $note_text The text of the note
     *
     * @return $this
     */
    public function setNoteText($note_text)
    {
        $this->container['note_text'] = $note_text;

        return $this;
    }

    /**
     * Gets resolved_date
     *
     * @return \DateTime
     */
    public function getResolvedDate()
    {
        return $this->container['resolved_date'];
    }

    /**
     * Sets resolved_date
     *
     * @param \DateTime $resolved_date The date on which the note was resolved
     *
     * @return $this
     */
    public function setResolvedDate($resolved_date)
    {
        $this->container['resolved_date'] = $resolved_date;

        return $this;
    }

    /**
     * Gets system_name
     *
     * @return string
     */
    public function getSystemName()
    {
        return $this->container['system_name'];
    }

    /**
     * Sets system_name
     *
     * @param string $system_name The name of the system that created the note
     *
     * @return $this
     */
    public function setSystemName($system_name)
    {
        $this->container['system_name'] = $system_name;

        return $this;
    }

    /**
     * Gets note_letters
     *
     * @return \Advantage\Client\Model\Letter[]
     */
    public function getNoteLetters()
    {
        return $this->container['note_letters'];
    }

    /**
     * Sets note_letters
     *
     * @param \Advantage\Client\Model\Letter[] $note_letters The letter associated with the note
     *
     * @return $this
     */
    public function setNoteLetters($note_letters)
    {
        $this->container['note_letters'] = $note_letters;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Advantage\Client\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Advantage\Client\Model\Document[] $documents The documents associated with the note
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets regarding_product
     *
     * @return string
     */
    public function getRegardingProduct()
    {
        return $this->container['regarding_product'];
    }

    /**
     * Sets regarding_product
     *
     * @param string $regarding_product The name of the product this note is regarding
     *
     * @return $this
     */
    public function setRegardingProduct($regarding_product)
    {
        $this->container['regarding_product'] = $regarding_product;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code The reason code associated with the note
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets reason_category
     *
     * @return string
     */
    public function getReasonCategory()
    {
        return $this->container['reason_category'];
    }

    /**
     * Sets reason_category
     *
     * @param string $reason_category The reason category associated with the note
     *
     * @return $this
     */
    public function setReasonCategory($reason_category)
    {
        $this->container['reason_category'] = $reason_category;

        return $this;
    }

    /**
     * Gets reason_category_description
     *
     * @return string
     */
    public function getReasonCategoryDescription()
    {
        return $this->container['reason_category_description'];
    }

    /**
     * Sets reason_category_description
     *
     * @param string $reason_category_description The reason category description associated with the note
     *
     * @return $this
     */
    public function setReasonCategoryDescription($reason_category_description)
    {
        $this->container['reason_category_description'] = $reason_category_description;

        return $this;
    }

    /**
     * Gets action_code
     *
     * @return string
     */
    public function getActionCode()
    {
        return $this->container['action_code'];
    }

    /**
     * Sets action_code
     *
     * @param string $action_code The action code associated with the note
     *
     * @return $this
     */
    public function setActionCode($action_code)
    {
        $this->container['action_code'] = $action_code;

        return $this;
    }

    /**
     * Gets completion_date
     *
     * @return \DateTime
     */
    public function getCompletionDate()
    {
        return $this->container['completion_date'];
    }

    /**
     * Sets completion_date
     *
     * @param \DateTime $completion_date The date on which the action was completed
     *
     * @return $this
     */
    public function setCompletionDate($completion_date)
    {
        $this->container['completion_date'] = $completion_date;

        return $this;
    }

    /**
     * Gets added_by
     *
     * @return string
     */
    public function getAddedBy()
    {
        return $this->container['added_by'];
    }

    /**
     * Sets added_by
     *
     * @param string $added_by The user who added the note
     *
     * @return $this
     */
    public function setAddedBy($added_by)
    {
        $this->container['added_by'] = $added_by;

        return $this;
    }

    /**
     * Gets upsell_path
     *
     * @return string
     */
    public function getUpsellPath()
    {
        return $this->container['upsell_path'];
    }

    /**
     * Sets upsell_path
     *
     * @param string $upsell_path The Upsell Path for the note
     *
     * @return $this
     */
    public function setUpsellPath($upsell_path)
    {
        $this->container['upsell_path'] = $upsell_path;

        return $this;
    }

    /**
     * Gets follow_up_user
     *
     * @return string
     */
    public function getFollowUpUser()
    {
        return $this->container['follow_up_user'];
    }

    /**
     * Sets follow_up_user
     *
     * @param string $follow_up_user The user who followed up on the note
     *
     * @return $this
     */
    public function setFollowUpUser($follow_up_user)
    {
        $this->container['follow_up_user'] = $follow_up_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


