<?php
/**
 * ClientJob
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ClientJob Class Doc Comment
 *
 * @category Class
 * @description This class is part of the CSL module.  It is used internally at ACS.  Represents an ACS client job.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientJob implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientJob';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_number' => 'string',
        'code' => 'string',
        'name' => 'string',
        'contact_email' => 'string',
        'is_web_enabled' => 'bool',
        'is_web_visible' => 'bool',
        'product_code' => 'string',
        'priority' => 'int',
        'timesheet_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_number' => null,
        'code' => null,
        'name' => null,
        'contact_email' => null,
        'is_web_enabled' => null,
        'is_web_visible' => null,
        'product_code' => null,
        'priority' => 'int32',
        'timesheet_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_number' => 'ClientNumber',
        'code' => 'Code',
        'name' => 'Name',
        'contact_email' => 'ContactEmail',
        'is_web_enabled' => 'IsWebEnabled',
        'is_web_visible' => 'IsWebVisible',
        'product_code' => 'ProductCode',
        'priority' => 'Priority',
        'timesheet_status' => 'TimesheetStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_number' => 'setClientNumber',
        'code' => 'setCode',
        'name' => 'setName',
        'contact_email' => 'setContactEmail',
        'is_web_enabled' => 'setIsWebEnabled',
        'is_web_visible' => 'setIsWebVisible',
        'product_code' => 'setProductCode',
        'priority' => 'setPriority',
        'timesheet_status' => 'setTimesheetStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_number' => 'getClientNumber',
        'code' => 'getCode',
        'name' => 'getName',
        'contact_email' => 'getContactEmail',
        'is_web_enabled' => 'getIsWebEnabled',
        'is_web_visible' => 'getIsWebVisible',
        'product_code' => 'getProductCode',
        'priority' => 'getPriority',
        'timesheet_status' => 'getTimesheetStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIMESHEET_STATUS_CLOSED_TO_TIMESHEET_ENTRY = 'ClosedToTimesheetEntry';
    const TIMESHEET_STATUS_CLOSED_TO_CSL_ENTRY = 'ClosedToCslEntry';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetStatusAllowableValues()
    {
        return [
            self::TIMESHEET_STATUS_CLOSED_TO_TIMESHEET_ENTRY,
            self::TIMESHEET_STATUS_CLOSED_TO_CSL_ENTRY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_number'] = isset($data['client_number']) ? $data['client_number'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['is_web_enabled'] = isset($data['is_web_enabled']) ? $data['is_web_enabled'] : null;
        $this->container['is_web_visible'] = isset($data['is_web_visible']) ? $data['is_web_visible'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['timesheet_status'] = isset($data['timesheet_status']) ? $data['timesheet_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimesheetStatusAllowableValues();
        if (!is_null($this->container['timesheet_status']) && !in_array($this->container['timesheet_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'timesheet_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_number
     *
     * @return string
     */
    public function getClientNumber()
    {
        return $this->container['client_number'];
    }

    /**
     * Sets client_number
     *
     * @param string $client_number The customer number of the client
     *
     * @return $this
     */
    public function setClientNumber($client_number)
    {
        $this->container['client_number'] = $client_number;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code for the client job
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for the client job
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email The ACS contact email address for the client job
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets is_web_enabled
     *
     * @return bool
     */
    public function getIsWebEnabled()
    {
        return $this->container['is_web_enabled'];
    }

    /**
     * Sets is_web_enabled
     *
     * @param bool $is_web_enabled Is the client job web enabled?
     *
     * @return $this
     */
    public function setIsWebEnabled($is_web_enabled)
    {
        $this->container['is_web_enabled'] = $is_web_enabled;

        return $this;
    }

    /**
     * Gets is_web_visible
     *
     * @return bool
     */
    public function getIsWebVisible()
    {
        return $this->container['is_web_visible'];
    }

    /**
     * Sets is_web_visible
     *
     * @param bool $is_web_visible Is the client job web visible?
     *
     * @return $this
     */
    public function setIsWebVisible($is_web_visible)
    {
        $this->container['is_web_visible'] = $is_web_visible;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code The product code for the client job
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority The priority for the client job.  A client job can be assigned a priority value greater than zero to boost the urgency of the tasks  in this job.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets timesheet_status
     *
     * @return string
     */
    public function getTimesheetStatus()
    {
        return $this->container['timesheet_status'];
    }

    /**
     * Sets timesheet_status
     *
     * @param string $timesheet_status The timesheet status for the client job
     *
     * @return $this
     */
    public function setTimesheetStatus($timesheet_status)
    {
        $allowedValues = $this->getTimesheetStatusAllowableValues();
        if (!is_null($timesheet_status) && !in_array($timesheet_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'timesheet_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_status'] = $timesheet_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


