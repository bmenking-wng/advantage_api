<?php
/**
 * OrderHistoryFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderHistoryFilter Class Doc Comment
 *
 * @category Class
 * @description Filter criteria for order history search
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderHistoryFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderHistoryFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'search' => 'string',
        'begin_date' => '\DateTime',
        'end_date' => '\DateTime',
        'exclude_backorder_fufillment' => 'bool',
        'exclude_premium_fill' => 'bool',
        'membership_organization' => 'string',
        'owning_organizations' => 'string[]',
        'is_posted' => 'bool',
        'has_product_order_line' => 'bool',
        'is_in_status_that_allows_modifications' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'search' => null,
        'begin_date' => 'date-time',
        'end_date' => 'date-time',
        'exclude_backorder_fufillment' => null,
        'exclude_premium_fill' => null,
        'membership_organization' => null,
        'owning_organizations' => null,
        'is_posted' => null,
        'has_product_order_line' => null,
        'is_in_status_that_allows_modifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'search' => 'Search',
        'begin_date' => 'BeginDate',
        'end_date' => 'EndDate',
        'exclude_backorder_fufillment' => 'ExcludeBackorderFufillment',
        'exclude_premium_fill' => 'ExcludePremiumFill',
        'membership_organization' => 'MembershipOrganization',
        'owning_organizations' => 'OwningOrganizations',
        'is_posted' => 'IsPosted',
        'has_product_order_line' => 'HasProductOrderLine',
        'is_in_status_that_allows_modifications' => 'IsInStatusThatAllowsModifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'search' => 'setSearch',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'exclude_backorder_fufillment' => 'setExcludeBackorderFufillment',
        'exclude_premium_fill' => 'setExcludePremiumFill',
        'membership_organization' => 'setMembershipOrganization',
        'owning_organizations' => 'setOwningOrganizations',
        'is_posted' => 'setIsPosted',
        'has_product_order_line' => 'setHasProductOrderLine',
        'is_in_status_that_allows_modifications' => 'setIsInStatusThatAllowsModifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'search' => 'getSearch',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'exclude_backorder_fufillment' => 'getExcludeBackorderFufillment',
        'exclude_premium_fill' => 'getExcludePremiumFill',
        'membership_organization' => 'getMembershipOrganization',
        'owning_organizations' => 'getOwningOrganizations',
        'is_posted' => 'getIsPosted',
        'has_product_order_line' => 'getHasProductOrderLine',
        'is_in_status_that_allows_modifications' => 'getIsInStatusThatAllowsModifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['search'] = isset($data['search']) ? $data['search'] : null;
        $this->container['begin_date'] = isset($data['begin_date']) ? $data['begin_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['exclude_backorder_fufillment'] = isset($data['exclude_backorder_fufillment']) ? $data['exclude_backorder_fufillment'] : null;
        $this->container['exclude_premium_fill'] = isset($data['exclude_premium_fill']) ? $data['exclude_premium_fill'] : null;
        $this->container['membership_organization'] = isset($data['membership_organization']) ? $data['membership_organization'] : null;
        $this->container['owning_organizations'] = isset($data['owning_organizations']) ? $data['owning_organizations'] : null;
        $this->container['is_posted'] = isset($data['is_posted']) ? $data['is_posted'] : null;
        $this->container['has_product_order_line'] = isset($data['has_product_order_line']) ? $data['has_product_order_line'] : null;
        $this->container['is_in_status_that_allows_modifications'] = isset($data['is_in_status_that_allows_modifications']) ? $data['is_in_status_that_allows_modifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets search
     *
     * @return string
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param string $search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on the order.
     *
     * @return $this
     */
    public function setSearch($search)
    {
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date The beginning date. Only orders placed after this date will be returned.
     *
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The end date. Only orders placed before this date will be returned.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets exclude_backorder_fufillment
     *
     * @return bool
     */
    public function getExcludeBackorderFufillment()
    {
        return $this->container['exclude_backorder_fufillment'];
    }

    /**
     * Sets exclude_backorder_fufillment
     *
     * @param bool $exclude_backorder_fufillment Exclude backorder-fulfillment orders
     *
     * @return $this
     */
    public function setExcludeBackorderFufillment($exclude_backorder_fufillment)
    {
        $this->container['exclude_backorder_fufillment'] = $exclude_backorder_fufillment;

        return $this;
    }

    /**
     * Gets exclude_premium_fill
     *
     * @return bool
     */
    public function getExcludePremiumFill()
    {
        return $this->container['exclude_premium_fill'];
    }

    /**
     * Sets exclude_premium_fill
     *
     * @param bool $exclude_premium_fill Exclude premium-fill orders
     *
     * @return $this
     */
    public function setExcludePremiumFill($exclude_premium_fill)
    {
        $this->container['exclude_premium_fill'] = $exclude_premium_fill;

        return $this;
    }

    /**
     * Gets membership_organization
     *
     * @return string
     */
    public function getMembershipOrganization()
    {
        return $this->container['membership_organization'];
    }

    /**
     * Sets membership_organization
     *
     * @param string $membership_organization Membership organization to filter by
     *
     * @return $this
     */
    public function setMembershipOrganization($membership_organization)
    {
        $this->container['membership_organization'] = $membership_organization;

        return $this;
    }

    /**
     * Gets owning_organizations
     *
     * @return string[]
     */
    public function getOwningOrganizations()
    {
        return $this->container['owning_organizations'];
    }

    /**
     * Sets owning_organizations
     *
     * @param string[] $owning_organizations Owning organizations to filter by
     *
     * @return $this
     */
    public function setOwningOrganizations($owning_organizations)
    {
        $this->container['owning_organizations'] = $owning_organizations;

        return $this;
    }

    /**
     * Gets is_posted
     *
     * @return bool
     */
    public function getIsPosted()
    {
        return $this->container['is_posted'];
    }

    /**
     * Sets is_posted
     *
     * @param bool $is_posted Order's posting status. Filter orders based on whether or not  the order is posted.
     *
     * @return $this
     */
    public function setIsPosted($is_posted)
    {
        $this->container['is_posted'] = $is_posted;

        return $this;
    }

    /**
     * Gets has_product_order_line
     *
     * @return bool
     */
    public function getHasProductOrderLine()
    {
        return $this->container['has_product_order_line'];
    }

    /**
     * Sets has_product_order_line
     *
     * @param bool $has_product_order_line Filter orders based on whether or not the order has   a product order line.
     *
     * @return $this
     */
    public function setHasProductOrderLine($has_product_order_line)
    {
        $this->container['has_product_order_line'] = $has_product_order_line;

        return $this;
    }

    /**
     * Gets is_in_status_that_allows_modifications
     *
     * @return bool
     */
    public function getIsInStatusThatAllowsModifications()
    {
        return $this->container['is_in_status_that_allows_modifications'];
    }

    /**
     * Sets is_in_status_that_allows_modifications
     *
     * @param bool $is_in_status_that_allows_modifications Filter orders based on whether or not the order  is in a status that allows further modification
     *
     * @return $this
     */
    public function setIsInStatusThatAllowsModifications($is_in_status_that_allows_modifications)
    {
        $this->container['is_in_status_that_allows_modifications'] = $is_in_status_that_allows_modifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


