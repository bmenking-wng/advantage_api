<?php
/**
 * ConferenceAttendeeSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConferenceAttendeeSession Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a specific selected session for a conference attendee
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceAttendeeSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConferenceAttendeeSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'session_code' => 'string',
        'session_name' => 'string',
        'web_participation_type' => 'string',
        'amount_charged' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'session_code' => null,
        'session_name' => null,
        'web_participation_type' => null,
        'amount_charged' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_code' => 'SessionCode',
        'session_name' => 'SessionName',
        'web_participation_type' => 'WebParticipationType',
        'amount_charged' => 'AmountCharged'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_code' => 'setSessionCode',
        'session_name' => 'setSessionName',
        'web_participation_type' => 'setWebParticipationType',
        'amount_charged' => 'setAmountCharged'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_code' => 'getSessionCode',
        'session_name' => 'getSessionName',
        'web_participation_type' => 'getWebParticipationType',
        'amount_charged' => 'getAmountCharged'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session_code'] = isset($data['session_code']) ? $data['session_code'] : null;
        $this->container['session_name'] = isset($data['session_name']) ? $data['session_name'] : null;
        $this->container['web_participation_type'] = isset($data['web_participation_type']) ? $data['web_participation_type'] : null;
        $this->container['amount_charged'] = isset($data['amount_charged']) ? $data['amount_charged'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_code
     *
     * @return string
     */
    public function getSessionCode()
    {
        return $this->container['session_code'];
    }

    /**
     * Sets session_code
     *
     * @param string $session_code Session ID
     *
     * @return $this
     */
    public function setSessionCode($session_code)
    {
        $this->container['session_code'] = $session_code;

        return $this;
    }

    /**
     * Gets session_name
     *
     * @return string
     */
    public function getSessionName()
    {
        return $this->container['session_name'];
    }

    /**
     * Sets session_name
     *
     * @param string $session_name Session name
     *
     * @return $this
     */
    public function setSessionName($session_name)
    {
        $this->container['session_name'] = $session_name;

        return $this;
    }

    /**
     * Gets web_participation_type
     *
     * @return string
     */
    public function getWebParticipationType()
    {
        return $this->container['web_participation_type'];
    }

    /**
     * Sets web_participation_type
     *
     * @param string $web_participation_type The Web Participation Type is one of the following:  -  \"C\" (available on the Web when the conference opens)  -  \"S\" (available on the Web when session selection opens)  -  blank (not available on the Web)
     *
     * @return $this
     */
    public function setWebParticipationType($web_participation_type)
    {
        $this->container['web_participation_type'] = $web_participation_type;

        return $this;
    }

    /**
     * Gets amount_charged
     *
     * @return double
     */
    public function getAmountCharged()
    {
        return $this->container['amount_charged'];
    }

    /**
     * Sets amount_charged
     *
     * @param double $amount_charged Amount charged for session
     *
     * @return $this
     */
    public function setAmountCharged($amount_charged)
    {
        $this->container['amount_charged'] = $amount_charged;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


