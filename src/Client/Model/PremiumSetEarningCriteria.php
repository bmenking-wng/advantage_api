<?php
/**
 * PremiumSetEarningCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PremiumSetEarningCriteria Class Doc Comment
 *
 * @category Class
 * @description Information for how a premium set will be earned.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PremiumSetEarningCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PremiumSetEarningCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'paidup_percent' => 'int',
        'days_to_respond' => 'int',
        'within_responses' => 'string',
        'awarded_based_on' => 'string',
        'awarded_based_on_lower_limit' => 'int',
        'awarded_based_on_upper_limit' => 'int',
        'require_ship_to_self' => 'bool',
        'require_payment_with_order' => 'bool',
        'order_source_code' => 'string',
        'once_per_recipient' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'paidup_percent' => 'int32',
        'days_to_respond' => 'int32',
        'within_responses' => null,
        'awarded_based_on' => null,
        'awarded_based_on_lower_limit' => 'int32',
        'awarded_based_on_upper_limit' => 'int32',
        'require_ship_to_self' => null,
        'require_payment_with_order' => null,
        'order_source_code' => null,
        'once_per_recipient' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paidup_percent' => 'PaidupPercent',
        'days_to_respond' => 'DaysToRespond',
        'within_responses' => 'WithinResponses',
        'awarded_based_on' => 'AwardedBasedOn',
        'awarded_based_on_lower_limit' => 'AwardedBasedOnLowerLimit',
        'awarded_based_on_upper_limit' => 'AwardedBasedOnUpperLimit',
        'require_ship_to_self' => 'RequireShipToSelf',
        'require_payment_with_order' => 'RequirePaymentWithOrder',
        'order_source_code' => 'OrderSourceCode',
        'once_per_recipient' => 'OncePerRecipient'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paidup_percent' => 'setPaidupPercent',
        'days_to_respond' => 'setDaysToRespond',
        'within_responses' => 'setWithinResponses',
        'awarded_based_on' => 'setAwardedBasedOn',
        'awarded_based_on_lower_limit' => 'setAwardedBasedOnLowerLimit',
        'awarded_based_on_upper_limit' => 'setAwardedBasedOnUpperLimit',
        'require_ship_to_self' => 'setRequireShipToSelf',
        'require_payment_with_order' => 'setRequirePaymentWithOrder',
        'order_source_code' => 'setOrderSourceCode',
        'once_per_recipient' => 'setOncePerRecipient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paidup_percent' => 'getPaidupPercent',
        'days_to_respond' => 'getDaysToRespond',
        'within_responses' => 'getWithinResponses',
        'awarded_based_on' => 'getAwardedBasedOn',
        'awarded_based_on_lower_limit' => 'getAwardedBasedOnLowerLimit',
        'awarded_based_on_upper_limit' => 'getAwardedBasedOnUpperLimit',
        'require_ship_to_self' => 'getRequireShipToSelf',
        'require_payment_with_order' => 'getRequirePaymentWithOrder',
        'order_source_code' => 'getOrderSourceCode',
        'once_per_recipient' => 'getOncePerRecipient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AWARDED_BASED_ON_SHIPPING_ORDER_TOTAL = 'ShippingOrderTotal';
    const AWARDED_BASED_ON_ORDER_LINES = 'OrderLines';
    const AWARDED_BASED_ON_TERM_LENGTH = 'TermLength';
    const AWARDED_BASED_ON_ORDER_TOTAL = 'OrderTotal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAwardedBasedOnAllowableValues()
    {
        return [
            self::AWARDED_BASED_ON_SHIPPING_ORDER_TOTAL,
            self::AWARDED_BASED_ON_ORDER_LINES,
            self::AWARDED_BASED_ON_TERM_LENGTH,
            self::AWARDED_BASED_ON_ORDER_TOTAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paidup_percent'] = isset($data['paidup_percent']) ? $data['paidup_percent'] : null;
        $this->container['days_to_respond'] = isset($data['days_to_respond']) ? $data['days_to_respond'] : null;
        $this->container['within_responses'] = isset($data['within_responses']) ? $data['within_responses'] : null;
        $this->container['awarded_based_on'] = isset($data['awarded_based_on']) ? $data['awarded_based_on'] : null;
        $this->container['awarded_based_on_lower_limit'] = isset($data['awarded_based_on_lower_limit']) ? $data['awarded_based_on_lower_limit'] : null;
        $this->container['awarded_based_on_upper_limit'] = isset($data['awarded_based_on_upper_limit']) ? $data['awarded_based_on_upper_limit'] : null;
        $this->container['require_ship_to_self'] = isset($data['require_ship_to_self']) ? $data['require_ship_to_self'] : null;
        $this->container['require_payment_with_order'] = isset($data['require_payment_with_order']) ? $data['require_payment_with_order'] : null;
        $this->container['order_source_code'] = isset($data['order_source_code']) ? $data['order_source_code'] : null;
        $this->container['once_per_recipient'] = isset($data['once_per_recipient']) ? $data['once_per_recipient'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAwardedBasedOnAllowableValues();
        if (!is_null($this->container['awarded_based_on']) && !in_array($this->container['awarded_based_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'awarded_based_on', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paidup_percent
     *
     * @return int
     */
    public function getPaidupPercent()
    {
        return $this->container['paidup_percent'];
    }

    /**
     * Sets paidup_percent
     *
     * @param int $paidup_percent Specifies the % of the total order amount that must be paid up before the premium can be fulfilled.  This should only be provided if premium set is earned at Payment.
     *
     * @return $this
     */
    public function setPaidupPercent($paidup_percent)
    {
        $this->container['paidup_percent'] = $paidup_percent;

        return $this;
    }

    /**
     * Gets days_to_respond
     *
     * @return int
     */
    public function getDaysToRespond()
    {
        return $this->container['days_to_respond'];
    }

    /**
     * Sets days_to_respond
     *
     * @param int $days_to_respond A customer earns the premium if the response came in within this number of days.  This should only be provided if premium set is earned at FirstDays.
     *
     * @return $this
     */
    public function setDaysToRespond($days_to_respond)
    {
        $this->container['days_to_respond'] = $days_to_respond;

        return $this;
    }

    /**
     * Gets within_responses
     *
     * @return string
     */
    public function getWithinResponses()
    {
        return $this->container['within_responses'];
    }

    /**
     * Sets within_responses
     *
     * @param string $within_responses A customer earns the premium if the customer's response if within the first N responses, where N is this number.  This should only be provided if premium set is earned at FirstResponses.
     *
     * @return $this
     */
    public function setWithinResponses($within_responses)
    {
        $this->container['within_responses'] = $within_responses;

        return $this;
    }

    /**
     * Gets awarded_based_on
     *
     * @return string
     */
    public function getAwardedBasedOn()
    {
        return $this->container['awarded_based_on'];
    }

    /**
     * Sets awarded_based_on
     *
     * @param string $awarded_based_on The AwardedBasedOn flag indicates whether a premium set is awarded based on sub term, order amount or number of order lines.
     *
     * @return $this
     */
    public function setAwardedBasedOn($awarded_based_on)
    {
        $allowedValues = $this->getAwardedBasedOnAllowableValues();
        if (!is_null($awarded_based_on) && !in_array($awarded_based_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'awarded_based_on', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['awarded_based_on'] = $awarded_based_on;

        return $this;
    }

    /**
     * Gets awarded_based_on_lower_limit
     *
     * @return int
     */
    public function getAwardedBasedOnLowerLimit()
    {
        return $this->container['awarded_based_on_lower_limit'];
    }

    /**
     * Sets awarded_based_on_lower_limit
     *
     * @param int $awarded_based_on_lower_limit Specifies the lower limit (measurement determined by AwardedBasedOn) for which a premium set is awarded.
     *
     * @return $this
     */
    public function setAwardedBasedOnLowerLimit($awarded_based_on_lower_limit)
    {
        $this->container['awarded_based_on_lower_limit'] = $awarded_based_on_lower_limit;

        return $this;
    }

    /**
     * Gets awarded_based_on_upper_limit
     *
     * @return int
     */
    public function getAwardedBasedOnUpperLimit()
    {
        return $this->container['awarded_based_on_upper_limit'];
    }

    /**
     * Sets awarded_based_on_upper_limit
     *
     * @param int $awarded_based_on_upper_limit Specifies the upper limit (measurement determined by AwardedBasedOn) for which a premium set is awarded.
     *
     * @return $this
     */
    public function setAwardedBasedOnUpperLimit($awarded_based_on_upper_limit)
    {
        $this->container['awarded_based_on_upper_limit'] = $awarded_based_on_upper_limit;

        return $this;
    }

    /**
     * Gets require_ship_to_self
     *
     * @return bool
     */
    public function getRequireShipToSelf()
    {
        return $this->container['require_ship_to_self'];
    }

    /**
     * Sets require_ship_to_self
     *
     * @param bool $require_ship_to_self Is the premium only available when the ship-to customer equals the bill-to customer?
     *
     * @return $this
     */
    public function setRequireShipToSelf($require_ship_to_self)
    {
        $this->container['require_ship_to_self'] = $require_ship_to_self;

        return $this;
    }

    /**
     * Gets require_payment_with_order
     *
     * @return bool
     */
    public function getRequirePaymentWithOrder()
    {
        return $this->container['require_payment_with_order'];
    }

    /**
     * Sets require_payment_with_order
     *
     * @param bool $require_payment_with_order The Require Payment With Order flag indicates whether a premium set is applicable only to orders received with full payment.
     *
     * @return $this
     */
    public function setRequirePaymentWithOrder($require_payment_with_order)
    {
        $this->container['require_payment_with_order'] = $require_payment_with_order;

        return $this;
    }

    /**
     * Gets order_source_code
     *
     * @return string
     */
    public function getOrderSourceCode()
    {
        return $this->container['order_source_code'];
    }

    /**
     * Sets order_source_code
     *
     * @param string $order_source_code The Order Source Code indicates what channel the response came through.
     *
     * @return $this
     */
    public function setOrderSourceCode($order_source_code)
    {
        $this->container['order_source_code'] = $order_source_code;

        return $this;
    }

    /**
     * Gets once_per_recipient
     *
     * @return bool
     */
    public function getOncePerRecipient()
    {
        return $this->container['once_per_recipient'];
    }

    /**
     * Sets once_per_recipient
     *
     * @param bool $once_per_recipient Specifies if only one premium is fulfilled per recipient.
     *
     * @return $this
     */
    public function setOncePerRecipient($once_per_recipient)
    {
        $this->container['once_per_recipient'] = $once_per_recipient;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


