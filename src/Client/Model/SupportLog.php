<?php
/**
 * SupportLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SupportLog Class Doc Comment
 *
 * @category Class
 * @description This class is part of the CSL module.  It is used internally at ACS.  Represents an ACS client support log.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupportLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupportLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'csl_number' => 'string',
        'name' => 'string',
        'client' => '\Advantage\Client\Model\ClientSummary',
        'activity_category_code' => 'string',
        'actual_hours' => 'double',
        'analyst' => '\Advantage\Client\Model\AcsEmployee',
        'area_code' => 'string',
        'contact' => '\Advantage\Client\Model\ClientContactSummary',
        'client_project_id' => 'string',
        'client_task_number' => 'string',
        'configuration' => 'string',
        'creation_date' => '\DateTime',
        'creation_user' => 'string',
        'date_completed' => '\DateTime',
        'discount_hours' => 'double',
        'discount_percent' => 'double',
        'engineer' => '\Advantage\Client\Model\AcsEmployee',
        'estimated_hours' => 'double',
        'is_billable' => 'bool',
        'is_web_visible' => 'bool',
        'job_code' => 'string',
        'lead_engineer' => '\Advantage\Client\Model\AcsEmployee',
        'posted_hours' => 'double',
        'priority' => 'string',
        'problem_code' => 'string',
        'program' => 'string',
        'research_and_development_type' => 'string',
        'status_code' => 'string',
        'status_update_date' => '\DateTime',
        'swat_reason_code' => 'string',
        'target_date' => '\DateTime',
        'target_revision' => 'string',
        'tracking_code' => 'string',
        'update_date' => '\DateTime',
        'update_user' => 'string',
        'modification' => '\Advantage\Client\Model\ModificationTracking',
        'attachments' => '\Advantage\Client\Model\SupportLogAttachment[]',
        'comments' => '\Advantage\Client\Model\SupportLogComment[]',
        'work_items' => '\Advantage\Client\Model\TeamFoundationWorkItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'csl_number' => null,
        'name' => null,
        'client' => null,
        'activity_category_code' => null,
        'actual_hours' => 'double',
        'analyst' => null,
        'area_code' => null,
        'contact' => null,
        'client_project_id' => null,
        'client_task_number' => null,
        'configuration' => null,
        'creation_date' => 'date-time',
        'creation_user' => null,
        'date_completed' => 'date-time',
        'discount_hours' => 'double',
        'discount_percent' => 'double',
        'engineer' => null,
        'estimated_hours' => 'double',
        'is_billable' => null,
        'is_web_visible' => null,
        'job_code' => null,
        'lead_engineer' => null,
        'posted_hours' => 'double',
        'priority' => null,
        'problem_code' => null,
        'program' => null,
        'research_and_development_type' => null,
        'status_code' => null,
        'status_update_date' => 'date-time',
        'swat_reason_code' => null,
        'target_date' => 'date-time',
        'target_revision' => null,
        'tracking_code' => null,
        'update_date' => 'date-time',
        'update_user' => null,
        'modification' => null,
        'attachments' => null,
        'comments' => null,
        'work_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'csl_number' => 'CslNumber',
        'name' => 'Name',
        'client' => 'Client',
        'activity_category_code' => 'ActivityCategoryCode',
        'actual_hours' => 'ActualHours',
        'analyst' => 'Analyst',
        'area_code' => 'AreaCode',
        'contact' => 'Contact',
        'client_project_id' => 'ClientProjectId',
        'client_task_number' => 'ClientTaskNumber',
        'configuration' => 'Configuration',
        'creation_date' => 'CreationDate',
        'creation_user' => 'CreationUser',
        'date_completed' => 'DateCompleted',
        'discount_hours' => 'DiscountHours',
        'discount_percent' => 'DiscountPercent',
        'engineer' => 'Engineer',
        'estimated_hours' => 'EstimatedHours',
        'is_billable' => 'IsBillable',
        'is_web_visible' => 'IsWebVisible',
        'job_code' => 'JobCode',
        'lead_engineer' => 'LeadEngineer',
        'posted_hours' => 'PostedHours',
        'priority' => 'Priority',
        'problem_code' => 'ProblemCode',
        'program' => 'Program',
        'research_and_development_type' => 'ResearchAndDevelopmentType',
        'status_code' => 'StatusCode',
        'status_update_date' => 'StatusUpdateDate',
        'swat_reason_code' => 'SwatReasonCode',
        'target_date' => 'TargetDate',
        'target_revision' => 'TargetRevision',
        'tracking_code' => 'TrackingCode',
        'update_date' => 'UpdateDate',
        'update_user' => 'UpdateUser',
        'modification' => 'Modification',
        'attachments' => 'Attachments',
        'comments' => 'Comments',
        'work_items' => 'WorkItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'csl_number' => 'setCslNumber',
        'name' => 'setName',
        'client' => 'setClient',
        'activity_category_code' => 'setActivityCategoryCode',
        'actual_hours' => 'setActualHours',
        'analyst' => 'setAnalyst',
        'area_code' => 'setAreaCode',
        'contact' => 'setContact',
        'client_project_id' => 'setClientProjectId',
        'client_task_number' => 'setClientTaskNumber',
        'configuration' => 'setConfiguration',
        'creation_date' => 'setCreationDate',
        'creation_user' => 'setCreationUser',
        'date_completed' => 'setDateCompleted',
        'discount_hours' => 'setDiscountHours',
        'discount_percent' => 'setDiscountPercent',
        'engineer' => 'setEngineer',
        'estimated_hours' => 'setEstimatedHours',
        'is_billable' => 'setIsBillable',
        'is_web_visible' => 'setIsWebVisible',
        'job_code' => 'setJobCode',
        'lead_engineer' => 'setLeadEngineer',
        'posted_hours' => 'setPostedHours',
        'priority' => 'setPriority',
        'problem_code' => 'setProblemCode',
        'program' => 'setProgram',
        'research_and_development_type' => 'setResearchAndDevelopmentType',
        'status_code' => 'setStatusCode',
        'status_update_date' => 'setStatusUpdateDate',
        'swat_reason_code' => 'setSwatReasonCode',
        'target_date' => 'setTargetDate',
        'target_revision' => 'setTargetRevision',
        'tracking_code' => 'setTrackingCode',
        'update_date' => 'setUpdateDate',
        'update_user' => 'setUpdateUser',
        'modification' => 'setModification',
        'attachments' => 'setAttachments',
        'comments' => 'setComments',
        'work_items' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'csl_number' => 'getCslNumber',
        'name' => 'getName',
        'client' => 'getClient',
        'activity_category_code' => 'getActivityCategoryCode',
        'actual_hours' => 'getActualHours',
        'analyst' => 'getAnalyst',
        'area_code' => 'getAreaCode',
        'contact' => 'getContact',
        'client_project_id' => 'getClientProjectId',
        'client_task_number' => 'getClientTaskNumber',
        'configuration' => 'getConfiguration',
        'creation_date' => 'getCreationDate',
        'creation_user' => 'getCreationUser',
        'date_completed' => 'getDateCompleted',
        'discount_hours' => 'getDiscountHours',
        'discount_percent' => 'getDiscountPercent',
        'engineer' => 'getEngineer',
        'estimated_hours' => 'getEstimatedHours',
        'is_billable' => 'getIsBillable',
        'is_web_visible' => 'getIsWebVisible',
        'job_code' => 'getJobCode',
        'lead_engineer' => 'getLeadEngineer',
        'posted_hours' => 'getPostedHours',
        'priority' => 'getPriority',
        'problem_code' => 'getProblemCode',
        'program' => 'getProgram',
        'research_and_development_type' => 'getResearchAndDevelopmentType',
        'status_code' => 'getStatusCode',
        'status_update_date' => 'getStatusUpdateDate',
        'swat_reason_code' => 'getSwatReasonCode',
        'target_date' => 'getTargetDate',
        'target_revision' => 'getTargetRevision',
        'tracking_code' => 'getTrackingCode',
        'update_date' => 'getUpdateDate',
        'update_user' => 'getUpdateUser',
        'modification' => 'getModification',
        'attachments' => 'getAttachments',
        'comments' => 'getComments',
        'work_items' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_DEAD_IN_THE_WATER = 'DeadInTheWater';
    const PRIORITY_MUST_HAVE_BY_TARGET = 'MustHaveByTarget';
    const PRIORITY_DESIRED_BY_TARGET = 'DesiredByTarget';
    const PRIORITY_OK_PAST_TARGET = 'OkPastTarget';
    const RESEARCH_AND_DEVELOPMENT_TYPE_CAPITALIZED = 'Capitalized';
    const RESEARCH_AND_DEVELOPMENT_TYPE_NON_RESEARCH_AND_DEVELOPMENT = 'NonResearchAndDevelopment';
    const RESEARCH_AND_DEVELOPMENT_TYPE_NON_DEVELOPMENT = 'NonDevelopment';
    const RESEARCH_AND_DEVELOPMENT_TYPE_RESEARCH_AND_DEVELOPMENT = 'ResearchAndDevelopment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_DEAD_IN_THE_WATER,
            self::PRIORITY_MUST_HAVE_BY_TARGET,
            self::PRIORITY_DESIRED_BY_TARGET,
            self::PRIORITY_OK_PAST_TARGET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResearchAndDevelopmentTypeAllowableValues()
    {
        return [
            self::RESEARCH_AND_DEVELOPMENT_TYPE_CAPITALIZED,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_NON_RESEARCH_AND_DEVELOPMENT,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_NON_DEVELOPMENT,
            self::RESEARCH_AND_DEVELOPMENT_TYPE_RESEARCH_AND_DEVELOPMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['csl_number'] = isset($data['csl_number']) ? $data['csl_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['activity_category_code'] = isset($data['activity_category_code']) ? $data['activity_category_code'] : null;
        $this->container['actual_hours'] = isset($data['actual_hours']) ? $data['actual_hours'] : null;
        $this->container['analyst'] = isset($data['analyst']) ? $data['analyst'] : null;
        $this->container['area_code'] = isset($data['area_code']) ? $data['area_code'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['client_project_id'] = isset($data['client_project_id']) ? $data['client_project_id'] : null;
        $this->container['client_task_number'] = isset($data['client_task_number']) ? $data['client_task_number'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['creation_user'] = isset($data['creation_user']) ? $data['creation_user'] : null;
        $this->container['date_completed'] = isset($data['date_completed']) ? $data['date_completed'] : null;
        $this->container['discount_hours'] = isset($data['discount_hours']) ? $data['discount_hours'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['engineer'] = isset($data['engineer']) ? $data['engineer'] : null;
        $this->container['estimated_hours'] = isset($data['estimated_hours']) ? $data['estimated_hours'] : null;
        $this->container['is_billable'] = isset($data['is_billable']) ? $data['is_billable'] : null;
        $this->container['is_web_visible'] = isset($data['is_web_visible']) ? $data['is_web_visible'] : null;
        $this->container['job_code'] = isset($data['job_code']) ? $data['job_code'] : null;
        $this->container['lead_engineer'] = isset($data['lead_engineer']) ? $data['lead_engineer'] : null;
        $this->container['posted_hours'] = isset($data['posted_hours']) ? $data['posted_hours'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['problem_code'] = isset($data['problem_code']) ? $data['problem_code'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['research_and_development_type'] = isset($data['research_and_development_type']) ? $data['research_and_development_type'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_update_date'] = isset($data['status_update_date']) ? $data['status_update_date'] : null;
        $this->container['swat_reason_code'] = isset($data['swat_reason_code']) ? $data['swat_reason_code'] : null;
        $this->container['target_date'] = isset($data['target_date']) ? $data['target_date'] : null;
        $this->container['target_revision'] = isset($data['target_revision']) ? $data['target_revision'] : null;
        $this->container['tracking_code'] = isset($data['tracking_code']) ? $data['tracking_code'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['update_user'] = isset($data['update_user']) ? $data['update_user'] : null;
        $this->container['modification'] = isset($data['modification']) ? $data['modification'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['work_items'] = isset($data['work_items']) ? $data['work_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResearchAndDevelopmentTypeAllowableValues();
        if (!is_null($this->container['research_and_development_type']) && !in_array($this->container['research_and_development_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'research_and_development_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets csl_number
     *
     * @return string
     */
    public function getCslNumber()
    {
        return $this->container['csl_number'];
    }

    /**
     * Sets csl_number
     *
     * @param string $csl_number The client support log (CSL) number is a unique number that identifies a support request
     *
     * @return $this
     */
    public function setCslNumber($csl_number)
    {
        $this->container['csl_number'] = $csl_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The description of the support log
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Advantage\Client\Model\ClientSummary
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Advantage\Client\Model\ClientSummary $client The client who requested support
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets activity_category_code
     *
     * @return string
     */
    public function getActivityCategoryCode()
    {
        return $this->container['activity_category_code'];
    }

    /**
     * Sets activity_category_code
     *
     * @param string $activity_category_code The activity category for the support log
     *
     * @return $this
     */
    public function setActivityCategoryCode($activity_category_code)
    {
        $this->container['activity_category_code'] = $activity_category_code;

        return $this;
    }

    /**
     * Gets actual_hours
     *
     * @return double
     */
    public function getActualHours()
    {
        return $this->container['actual_hours'];
    }

    /**
     * Sets actual_hours
     *
     * @param double $actual_hours The actual number of hours that have been spent on the support log
     *
     * @return $this
     */
    public function setActualHours($actual_hours)
    {
        $this->container['actual_hours'] = $actual_hours;

        return $this;
    }

    /**
     * Gets analyst
     *
     * @return \Advantage\Client\Model\AcsEmployee
     */
    public function getAnalyst()
    {
        return $this->container['analyst'];
    }

    /**
     * Sets analyst
     *
     * @param \Advantage\Client\Model\AcsEmployee $analyst The analyst who is assigned to work on the support log
     *
     * @return $this
     */
    public function setAnalyst($analyst)
    {
        $this->container['analyst'] = $analyst;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return string
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param string $area_code The client area where the problem is occurring
     *
     * @return $this
     */
    public function setAreaCode($area_code)
    {
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Advantage\Client\Model\ClientContactSummary
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Advantage\Client\Model\ClientContactSummary $contact The client contact for the support log
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets client_project_id
     *
     * @return string
     */
    public function getClientProjectId()
    {
        return $this->container['client_project_id'];
    }

    /**
     * Sets client_project_id
     *
     * @param string $client_project_id The client project id for the support log
     *
     * @return $this
     */
    public function setClientProjectId($client_project_id)
    {
        $this->container['client_project_id'] = $client_project_id;

        return $this;
    }

    /**
     * Gets client_task_number
     *
     * @return string
     */
    public function getClientTaskNumber()
    {
        return $this->container['client_task_number'];
    }

    /**
     * Sets client_task_number
     *
     * @param string $client_task_number The client task number for the support log
     *
     * @return $this
     */
    public function setClientTaskNumber($client_task_number)
    {
        $this->container['client_task_number'] = $client_task_number;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string $configuration The configuration information for the support log
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date The date the support log was created
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_user
     *
     * @return string
     */
    public function getCreationUser()
    {
        return $this->container['creation_user'];
    }

    /**
     * Sets creation_user
     *
     * @param string $creation_user The user code of the user who created the support log
     *
     * @return $this
     */
    public function setCreationUser($creation_user)
    {
        $this->container['creation_user'] = $creation_user;

        return $this;
    }

    /**
     * Gets date_completed
     *
     * @return \DateTime
     */
    public function getDateCompleted()
    {
        return $this->container['date_completed'];
    }

    /**
     * Sets date_completed
     *
     * @param \DateTime $date_completed The date the support log was marked complete
     *
     * @return $this
     */
    public function setDateCompleted($date_completed)
    {
        $this->container['date_completed'] = $date_completed;

        return $this;
    }

    /**
     * Gets discount_hours
     *
     * @return double
     */
    public function getDiscountHours()
    {
        return $this->container['discount_hours'];
    }

    /**
     * Sets discount_hours
     *
     * @param double $discount_hours The number of hours that were discounted for the support log
     *
     * @return $this
     */
    public function setDiscountHours($discount_hours)
    {
        $this->container['discount_hours'] = $discount_hours;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent The discount percent for the support log
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets engineer
     *
     * @return \Advantage\Client\Model\AcsEmployee
     */
    public function getEngineer()
    {
        return $this->container['engineer'];
    }

    /**
     * Sets engineer
     *
     * @param \Advantage\Client\Model\AcsEmployee $engineer The engineer assigned to work on the support log
     *
     * @return $this
     */
    public function setEngineer($engineer)
    {
        $this->container['engineer'] = $engineer;

        return $this;
    }

    /**
     * Gets estimated_hours
     *
     * @return double
     */
    public function getEstimatedHours()
    {
        return $this->container['estimated_hours'];
    }

    /**
     * Sets estimated_hours
     *
     * @param double $estimated_hours The estimated number of hours to be spent on the support log
     *
     * @return $this
     */
    public function setEstimatedHours($estimated_hours)
    {
        $this->container['estimated_hours'] = $estimated_hours;

        return $this;
    }

    /**
     * Gets is_billable
     *
     * @return bool
     */
    public function getIsBillable()
    {
        return $this->container['is_billable'];
    }

    /**
     * Sets is_billable
     *
     * @param bool $is_billable Is time spent working on this support log billable?
     *
     * @return $this
     */
    public function setIsBillable($is_billable)
    {
        $this->container['is_billable'] = $is_billable;

        return $this;
    }

    /**
     * Gets is_web_visible
     *
     * @return bool
     */
    public function getIsWebVisible()
    {
        return $this->container['is_web_visible'];
    }

    /**
     * Sets is_web_visible
     *
     * @param bool $is_web_visible Should this support log be visible from the support website?
     *
     * @return $this
     */
    public function setIsWebVisible($is_web_visible)
    {
        $this->container['is_web_visible'] = $is_web_visible;

        return $this;
    }

    /**
     * Gets job_code
     *
     * @return string
     */
    public function getJobCode()
    {
        return $this->container['job_code'];
    }

    /**
     * Sets job_code
     *
     * @param string $job_code The job code for the support log
     *
     * @return $this
     */
    public function setJobCode($job_code)
    {
        $this->container['job_code'] = $job_code;

        return $this;
    }

    /**
     * Gets lead_engineer
     *
     * @return \Advantage\Client\Model\AcsEmployee
     */
    public function getLeadEngineer()
    {
        return $this->container['lead_engineer'];
    }

    /**
     * Sets lead_engineer
     *
     * @param \Advantage\Client\Model\AcsEmployee $lead_engineer The lead engineer is used to identify which engineering team a support log is assigned to
     *
     * @return $this
     */
    public function setLeadEngineer($lead_engineer)
    {
        $this->container['lead_engineer'] = $lead_engineer;

        return $this;
    }

    /**
     * Gets posted_hours
     *
     * @return double
     */
    public function getPostedHours()
    {
        return $this->container['posted_hours'];
    }

    /**
     * Sets posted_hours
     *
     * @param double $posted_hours The number of hours spent on the support log that have been posted
     *
     * @return $this
     */
    public function setPostedHours($posted_hours)
    {
        $this->container['posted_hours'] = $posted_hours;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The urgency level of the support log
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets problem_code
     *
     * @return string
     */
    public function getProblemCode()
    {
        return $this->container['problem_code'];
    }

    /**
     * Sets problem_code
     *
     * @param string $problem_code The problem code of the support log
     *
     * @return $this
     */
    public function setProblemCode($problem_code)
    {
        $this->container['problem_code'] = $problem_code;

        return $this;
    }

    /**
     * Gets program
     *
     * @return string
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param string $program The program where the problem is occurring
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets research_and_development_type
     *
     * @return string
     */
    public function getResearchAndDevelopmentType()
    {
        return $this->container['research_and_development_type'];
    }

    /**
     * Sets research_and_development_type
     *
     * @param string $research_and_development_type The research and development type for the support log
     *
     * @return $this
     */
    public function setResearchAndDevelopmentType($research_and_development_type)
    {
        $allowedValues = $this->getResearchAndDevelopmentTypeAllowableValues();
        if (!is_null($research_and_development_type) && !in_array($research_and_development_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'research_and_development_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['research_and_development_type'] = $research_and_development_type;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code The status of the support log
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_update_date
     *
     * @return \DateTime
     */
    public function getStatusUpdateDate()
    {
        return $this->container['status_update_date'];
    }

    /**
     * Sets status_update_date
     *
     * @param \DateTime $status_update_date The date the status was last updated
     *
     * @return $this
     */
    public function setStatusUpdateDate($status_update_date)
    {
        $this->container['status_update_date'] = $status_update_date;

        return $this;
    }

    /**
     * Gets swat_reason_code
     *
     * @return string
     */
    public function getSwatReasonCode()
    {
        return $this->container['swat_reason_code'];
    }

    /**
     * Sets swat_reason_code
     *
     * @param string $swat_reason_code The SWAT reason for the support log.  This is used to describe why the work done on a task is non-billable.
     *
     * @return $this
     */
    public function setSwatReasonCode($swat_reason_code)
    {
        $this->container['swat_reason_code'] = $swat_reason_code;

        return $this;
    }

    /**
     * Gets target_date
     *
     * @return \DateTime
     */
    public function getTargetDate()
    {
        return $this->container['target_date'];
    }

    /**
     * Sets target_date
     *
     * @param \DateTime $target_date The date targeted for completion of the support log
     *
     * @return $this
     */
    public function setTargetDate($target_date)
    {
        $this->container['target_date'] = $target_date;

        return $this;
    }

    /**
     * Gets target_revision
     *
     * @return string
     */
    public function getTargetRevision()
    {
        return $this->container['target_revision'];
    }

    /**
     * Sets target_revision
     *
     * @param string $target_revision The revision that is being targeted for a modification support log
     *
     * @return $this
     */
    public function setTargetRevision($target_revision)
    {
        $this->container['target_revision'] = $target_revision;

        return $this;
    }

    /**
     * Gets tracking_code
     *
     * @return string
     */
    public function getTrackingCode()
    {
        return $this->container['tracking_code'];
    }

    /**
     * Sets tracking_code
     *
     * @param string $tracking_code The tracking code for the support log
     *
     * @return $this
     */
    public function setTrackingCode($tracking_code)
    {
        $this->container['tracking_code'] = $tracking_code;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date The date the support log was last updated
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets update_user
     *
     * @return string
     */
    public function getUpdateUser()
    {
        return $this->container['update_user'];
    }

    /**
     * Sets update_user
     *
     * @param string $update_user The user who last updated the support log
     *
     * @return $this
     */
    public function setUpdateUser($update_user)
    {
        $this->container['update_user'] = $update_user;

        return $this;
    }

    /**
     * Gets modification
     *
     * @return \Advantage\Client\Model\ModificationTracking
     */
    public function getModification()
    {
        return $this->container['modification'];
    }

    /**
     * Sets modification
     *
     * @param \Advantage\Client\Model\ModificationTracking $modification Information about modification support tasks
     *
     * @return $this
     */
    public function setModification($modification)
    {
        $this->container['modification'] = $modification;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Advantage\Client\Model\SupportLogAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Advantage\Client\Model\SupportLogAttachment[] $attachments Files that have been attached to the client support log
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Advantage\Client\Model\SupportLogComment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Advantage\Client\Model\SupportLogComment[] $comments Comments that have been added to the client support log
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets work_items
     *
     * @return \Advantage\Client\Model\TeamFoundationWorkItem[]
     */
    public function getWorkItems()
    {
        return $this->container['work_items'];
    }

    /**
     * Sets work_items
     *
     * @param \Advantage\Client\Model\TeamFoundationWorkItem[] $work_items Work items that have been added to the client support log
     *
     * @return $this
     */
    public function setWorkItems($work_items)
    {
        $this->container['work_items'] = $work_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


