<?php
/**
 * AdvantageUserPreferences
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AdvantageUserPreferences Class Doc Comment
 *
 * @category Class
 * @description Model for Preferences for Advantage User
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvantageUserPreferences implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvantageUserPreferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ui_date_format' => 'string',
        'printer_code' => 'string',
        'printer_form_code' => 'string',
        'ui_time_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ui_date_format' => null,
        'printer_code' => null,
        'printer_form_code' => null,
        'ui_time_format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ui_date_format' => 'UiDateFormat',
        'printer_code' => 'PrinterCode',
        'printer_form_code' => 'PrinterFormCode',
        'ui_time_format' => 'UITimeFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ui_date_format' => 'setUiDateFormat',
        'printer_code' => 'setPrinterCode',
        'printer_form_code' => 'setPrinterFormCode',
        'ui_time_format' => 'setUiTimeFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ui_date_format' => 'getUiDateFormat',
        'printer_code' => 'getPrinterCode',
        'printer_form_code' => 'getPrinterFormCode',
        'ui_time_format' => 'getUiTimeFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UI_DATE_FORMAT_AMERICAN = 'American';
    const UI_DATE_FORMAT_EUROPEAN = 'European';
    const UI_DATE_FORMAT_MILITARY = 'Military';
    const UI_DATE_FORMAT__DEFAULT = 'Default';
    const UI_TIME_FORMAT_TWELVE_HOUR_CLOCK = 'TwelveHourClock';
    const UI_TIME_FORMAT_TWENTY_FOUR_HOUR_CLOCK = 'TwentyFourHourClock';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUiDateFormatAllowableValues()
    {
        return [
            self::UI_DATE_FORMAT_AMERICAN,
            self::UI_DATE_FORMAT_EUROPEAN,
            self::UI_DATE_FORMAT_MILITARY,
            self::UI_DATE_FORMAT__DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUiTimeFormatAllowableValues()
    {
        return [
            self::UI_TIME_FORMAT_TWELVE_HOUR_CLOCK,
            self::UI_TIME_FORMAT_TWENTY_FOUR_HOUR_CLOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ui_date_format'] = isset($data['ui_date_format']) ? $data['ui_date_format'] : null;
        $this->container['printer_code'] = isset($data['printer_code']) ? $data['printer_code'] : null;
        $this->container['printer_form_code'] = isset($data['printer_form_code']) ? $data['printer_form_code'] : null;
        $this->container['ui_time_format'] = isset($data['ui_time_format']) ? $data['ui_time_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUiDateFormatAllowableValues();
        if (!is_null($this->container['ui_date_format']) && !in_array($this->container['ui_date_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ui_date_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUiTimeFormatAllowableValues();
        if (!is_null($this->container['ui_time_format']) && !in_array($this->container['ui_time_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ui_time_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ui_date_format
     *
     * @return string
     */
    public function getUiDateFormat()
    {
        return $this->container['ui_date_format'];
    }

    /**
     * Sets ui_date_format
     *
     * @param string $ui_date_format Value of Date Option
     *
     * @return $this
     */
    public function setUiDateFormat($ui_date_format)
    {
        $allowedValues = $this->getUiDateFormatAllowableValues();
        if (!is_null($ui_date_format) && !in_array($ui_date_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ui_date_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ui_date_format'] = $ui_date_format;

        return $this;
    }

    /**
     * Gets printer_code
     *
     * @return string
     */
    public function getPrinterCode()
    {
        return $this->container['printer_code'];
    }

    /**
     * Sets printer_code
     *
     * @param string $printer_code Value of Printer Code
     *
     * @return $this
     */
    public function setPrinterCode($printer_code)
    {
        $this->container['printer_code'] = $printer_code;

        return $this;
    }

    /**
     * Gets printer_form_code
     *
     * @return string
     */
    public function getPrinterFormCode()
    {
        return $this->container['printer_form_code'];
    }

    /**
     * Sets printer_form_code
     *
     * @param string $printer_form_code Value of Printer Form
     *
     * @return $this
     */
    public function setPrinterFormCode($printer_form_code)
    {
        $this->container['printer_form_code'] = $printer_form_code;

        return $this;
    }

    /**
     * Gets ui_time_format
     *
     * @return string
     */
    public function getUiTimeFormat()
    {
        return $this->container['ui_time_format'];
    }

    /**
     * Sets ui_time_format
     *
     * @param string $ui_time_format Value of Time Format
     *
     * @return $this
     */
    public function setUiTimeFormat($ui_time_format)
    {
        $allowedValues = $this->getUiTimeFormatAllowableValues();
        if (!is_null($ui_time_format) && !in_array($ui_time_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ui_time_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ui_time_format'] = $ui_time_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


