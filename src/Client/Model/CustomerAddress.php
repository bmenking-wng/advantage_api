<?php
/**
 * CustomerAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CustomerAddress Class Doc Comment
 *
 * @category Class
 * @description Information for a customer&#39;s address.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'full_name' => 'string',
        'name' => '\Advantage\Client\Model\CustomerName',
        'email' => 'string',
        'phone' => 'string',
        'phone2' => 'string',
        'phone3' => 'string',
        'fax' => 'string',
        'company' => 'string',
        'department' => 'string',
        'postal_address' => '\Advantage\Client\Model\PostalAddress',
        'address_code' => 'string',
        'customer_number' => 'string',
        'promote_by_email' => 'string',
        'promote_by_phone' => 'string',
        'promote_by_sms' => 'string',
        'promote_by_mail' => 'string',
        'promote_by_fax' => 'string',
        'is_valid_bill_to_address' => 'bool',
        'is_valid_ship_to_address' => 'bool',
        'not_ok_as_bill_to_reason' => 'string',
        'nixie_counter' => 'int',
        'not_ok_as_ship_to_reason' => 'string',
        'promote_by_phone1' => 'string',
        'promote_by_phone2' => 'string',
        'promote_by_phone3' => 'string',
        'is_default' => 'bool',
        'change_source' => 'string',
        'job_position_code' => 'string',
        'job_title_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'full_name' => null,
        'name' => null,
        'email' => null,
        'phone' => null,
        'phone2' => null,
        'phone3' => null,
        'fax' => null,
        'company' => null,
        'department' => null,
        'postal_address' => null,
        'address_code' => null,
        'customer_number' => null,
        'promote_by_email' => null,
        'promote_by_phone' => null,
        'promote_by_sms' => null,
        'promote_by_mail' => null,
        'promote_by_fax' => null,
        'is_valid_bill_to_address' => null,
        'is_valid_ship_to_address' => null,
        'not_ok_as_bill_to_reason' => null,
        'nixie_counter' => 'int32',
        'not_ok_as_ship_to_reason' => null,
        'promote_by_phone1' => null,
        'promote_by_phone2' => null,
        'promote_by_phone3' => null,
        'is_default' => null,
        'change_source' => null,
        'job_position_code' => null,
        'job_title_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'full_name' => 'FullName',
        'name' => 'Name',
        'email' => 'Email',
        'phone' => 'Phone',
        'phone2' => 'Phone2',
        'phone3' => 'Phone3',
        'fax' => 'Fax',
        'company' => 'Company',
        'department' => 'Department',
        'postal_address' => 'PostalAddress',
        'address_code' => 'AddressCode',
        'customer_number' => 'CustomerNumber',
        'promote_by_email' => 'PromoteByEmail',
        'promote_by_phone' => 'PromoteByPhone',
        'promote_by_sms' => 'PromoteBySms',
        'promote_by_mail' => 'PromoteByMail',
        'promote_by_fax' => 'PromoteByFax',
        'is_valid_bill_to_address' => 'IsValidBillToAddress',
        'is_valid_ship_to_address' => 'IsValidShipToAddress',
        'not_ok_as_bill_to_reason' => 'NotOkAsBillToReason',
        'nixie_counter' => 'NixieCounter',
        'not_ok_as_ship_to_reason' => 'NotOkAsShipToReason',
        'promote_by_phone1' => 'PromoteByPhone1',
        'promote_by_phone2' => 'PromoteByPhone2',
        'promote_by_phone3' => 'PromoteByPhone3',
        'is_default' => 'IsDefault',
        'change_source' => 'ChangeSource',
        'job_position_code' => 'JobPositionCode',
        'job_title_name' => 'JobTitleName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'full_name' => 'setFullName',
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'phone2' => 'setPhone2',
        'phone3' => 'setPhone3',
        'fax' => 'setFax',
        'company' => 'setCompany',
        'department' => 'setDepartment',
        'postal_address' => 'setPostalAddress',
        'address_code' => 'setAddressCode',
        'customer_number' => 'setCustomerNumber',
        'promote_by_email' => 'setPromoteByEmail',
        'promote_by_phone' => 'setPromoteByPhone',
        'promote_by_sms' => 'setPromoteBySms',
        'promote_by_mail' => 'setPromoteByMail',
        'promote_by_fax' => 'setPromoteByFax',
        'is_valid_bill_to_address' => 'setIsValidBillToAddress',
        'is_valid_ship_to_address' => 'setIsValidShipToAddress',
        'not_ok_as_bill_to_reason' => 'setNotOkAsBillToReason',
        'nixie_counter' => 'setNixieCounter',
        'not_ok_as_ship_to_reason' => 'setNotOkAsShipToReason',
        'promote_by_phone1' => 'setPromoteByPhone1',
        'promote_by_phone2' => 'setPromoteByPhone2',
        'promote_by_phone3' => 'setPromoteByPhone3',
        'is_default' => 'setIsDefault',
        'change_source' => 'setChangeSource',
        'job_position_code' => 'setJobPositionCode',
        'job_title_name' => 'setJobTitleName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'full_name' => 'getFullName',
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'phone2' => 'getPhone2',
        'phone3' => 'getPhone3',
        'fax' => 'getFax',
        'company' => 'getCompany',
        'department' => 'getDepartment',
        'postal_address' => 'getPostalAddress',
        'address_code' => 'getAddressCode',
        'customer_number' => 'getCustomerNumber',
        'promote_by_email' => 'getPromoteByEmail',
        'promote_by_phone' => 'getPromoteByPhone',
        'promote_by_sms' => 'getPromoteBySms',
        'promote_by_mail' => 'getPromoteByMail',
        'promote_by_fax' => 'getPromoteByFax',
        'is_valid_bill_to_address' => 'getIsValidBillToAddress',
        'is_valid_ship_to_address' => 'getIsValidShipToAddress',
        'not_ok_as_bill_to_reason' => 'getNotOkAsBillToReason',
        'nixie_counter' => 'getNixieCounter',
        'not_ok_as_ship_to_reason' => 'getNotOkAsShipToReason',
        'promote_by_phone1' => 'getPromoteByPhone1',
        'promote_by_phone2' => 'getPromoteByPhone2',
        'promote_by_phone3' => 'getPromoteByPhone3',
        'is_default' => 'getIsDefault',
        'change_source' => 'getChangeSource',
        'job_position_code' => 'getJobPositionCode',
        'job_title_name' => 'getJobTitleName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone2'] = isset($data['phone2']) ? $data['phone2'] : null;
        $this->container['phone3'] = isset($data['phone3']) ? $data['phone3'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['address_code'] = isset($data['address_code']) ? $data['address_code'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['promote_by_email'] = isset($data['promote_by_email']) ? $data['promote_by_email'] : null;
        $this->container['promote_by_phone'] = isset($data['promote_by_phone']) ? $data['promote_by_phone'] : null;
        $this->container['promote_by_sms'] = isset($data['promote_by_sms']) ? $data['promote_by_sms'] : null;
        $this->container['promote_by_mail'] = isset($data['promote_by_mail']) ? $data['promote_by_mail'] : null;
        $this->container['promote_by_fax'] = isset($data['promote_by_fax']) ? $data['promote_by_fax'] : null;
        $this->container['is_valid_bill_to_address'] = isset($data['is_valid_bill_to_address']) ? $data['is_valid_bill_to_address'] : null;
        $this->container['is_valid_ship_to_address'] = isset($data['is_valid_ship_to_address']) ? $data['is_valid_ship_to_address'] : null;
        $this->container['not_ok_as_bill_to_reason'] = isset($data['not_ok_as_bill_to_reason']) ? $data['not_ok_as_bill_to_reason'] : null;
        $this->container['nixie_counter'] = isset($data['nixie_counter']) ? $data['nixie_counter'] : null;
        $this->container['not_ok_as_ship_to_reason'] = isset($data['not_ok_as_ship_to_reason']) ? $data['not_ok_as_ship_to_reason'] : null;
        $this->container['promote_by_phone1'] = isset($data['promote_by_phone1']) ? $data['promote_by_phone1'] : null;
        $this->container['promote_by_phone2'] = isset($data['promote_by_phone2']) ? $data['promote_by_phone2'] : null;
        $this->container['promote_by_phone3'] = isset($data['promote_by_phone3']) ? $data['promote_by_phone3'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['change_source'] = isset($data['change_source']) ? $data['change_source'] : null;
        $this->container['job_position_code'] = isset($data['job_position_code']) ? $data['job_position_code'] : null;
        $this->container['job_title_name'] = isset($data['job_title_name']) ? $data['job_title_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name The full name of the customer.
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Advantage\Client\Model\CustomerName
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Advantage\Client\Model\CustomerName $name The elements of the customer's name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email for the customer.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The primary phone number for the customer.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string $phone2 An alternate phone number for the customer.
     *
     * @return $this
     */
    public function setPhone2($phone2)
    {
        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets phone3
     *
     * @return string
     */
    public function getPhone3()
    {
        return $this->container['phone3'];
    }

    /**
     * Sets phone3
     *
     * @param string $phone3 An alternate phone number for the customer.
     *
     * @return $this
     */
    public function setPhone3($phone3)
    {
        $this->container['phone3'] = $phone3;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax The Fax number for the customer.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company The company name.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department The department name
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Advantage\Client\Model\PostalAddress
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Advantage\Client\Model\PostalAddress $postal_address The physical postal address.
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets address_code
     *
     * @return string
     */
    public function getAddressCode()
    {
        return $this->container['address_code'];
    }

    /**
     * Sets address_code
     *
     * @param string $address_code The identifying address code for this address.
     *
     * @return $this
     */
    public function setAddressCode($address_code)
    {
        $this->container['address_code'] = $address_code;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The customer number.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets promote_by_email
     *
     * @return string
     */
    public function getPromoteByEmail()
    {
        return $this->container['promote_by_email'];
    }

    /**
     * Sets promote_by_email
     *
     * @param string $promote_by_email Specifies whether or not to send promotional emails.
     *
     * @return $this
     */
    public function setPromoteByEmail($promote_by_email)
    {
        $this->container['promote_by_email'] = $promote_by_email;

        return $this;
    }

    /**
     * Gets promote_by_phone
     *
     * @return string
     */
    public function getPromoteByPhone()
    {
        return $this->container['promote_by_phone'];
    }

    /**
     * Sets promote_by_phone
     *
     * @param string $promote_by_phone Specifies whether or not to make promotional calls.
     *
     * @return $this
     */
    public function setPromoteByPhone($promote_by_phone)
    {
        $this->container['promote_by_phone'] = $promote_by_phone;

        return $this;
    }

    /**
     * Gets promote_by_sms
     *
     * @return string
     */
    public function getPromoteBySms()
    {
        return $this->container['promote_by_sms'];
    }

    /**
     * Sets promote_by_sms
     *
     * @param string $promote_by_sms Specifies whether or not to send promotional texts.
     *
     * @return $this
     */
    public function setPromoteBySms($promote_by_sms)
    {
        $this->container['promote_by_sms'] = $promote_by_sms;

        return $this;
    }

    /**
     * Gets promote_by_mail
     *
     * @return string
     */
    public function getPromoteByMail()
    {
        return $this->container['promote_by_mail'];
    }

    /**
     * Sets promote_by_mail
     *
     * @param string $promote_by_mail Specifies whether or not to send promotional mail.
     *
     * @return $this
     */
    public function setPromoteByMail($promote_by_mail)
    {
        $this->container['promote_by_mail'] = $promote_by_mail;

        return $this;
    }

    /**
     * Gets promote_by_fax
     *
     * @return string
     */
    public function getPromoteByFax()
    {
        return $this->container['promote_by_fax'];
    }

    /**
     * Sets promote_by_fax
     *
     * @param string $promote_by_fax Specifies whether or not to send promotional faxes.
     *
     * @return $this
     */
    public function setPromoteByFax($promote_by_fax)
    {
        $this->container['promote_by_fax'] = $promote_by_fax;

        return $this;
    }

    /**
     * Gets is_valid_bill_to_address
     *
     * @return bool
     */
    public function getIsValidBillToAddress()
    {
        return $this->container['is_valid_bill_to_address'];
    }

    /**
     * Sets is_valid_bill_to_address
     *
     * @param bool $is_valid_bill_to_address Specifies whether or not this is a valid bill to address.
     *
     * @return $this
     */
    public function setIsValidBillToAddress($is_valid_bill_to_address)
    {
        $this->container['is_valid_bill_to_address'] = $is_valid_bill_to_address;

        return $this;
    }

    /**
     * Gets is_valid_ship_to_address
     *
     * @return bool
     */
    public function getIsValidShipToAddress()
    {
        return $this->container['is_valid_ship_to_address'];
    }

    /**
     * Sets is_valid_ship_to_address
     *
     * @param bool $is_valid_ship_to_address Specifies whether or not this is a valid ship to address.
     *
     * @return $this
     */
    public function setIsValidShipToAddress($is_valid_ship_to_address)
    {
        $this->container['is_valid_ship_to_address'] = $is_valid_ship_to_address;

        return $this;
    }

    /**
     * Gets not_ok_as_bill_to_reason
     *
     * @return string
     */
    public function getNotOkAsBillToReason()
    {
        return $this->container['not_ok_as_bill_to_reason'];
    }

    /**
     * Sets not_ok_as_bill_to_reason
     *
     * @param string $not_ok_as_bill_to_reason If IsValidBillToAddress is false, then this holds the reason why the address cannot be used as a bill-to.
     *
     * @return $this
     */
    public function setNotOkAsBillToReason($not_ok_as_bill_to_reason)
    {
        $this->container['not_ok_as_bill_to_reason'] = $not_ok_as_bill_to_reason;

        return $this;
    }

    /**
     * Gets nixie_counter
     *
     * @return int
     */
    public function getNixieCounter()
    {
        return $this->container['nixie_counter'];
    }

    /**
     * Sets nixie_counter
     *
     * @param int $nixie_counter The nixie counter.
     *
     * @return $this
     */
    public function setNixieCounter($nixie_counter)
    {
        $this->container['nixie_counter'] = $nixie_counter;

        return $this;
    }

    /**
     * Gets not_ok_as_ship_to_reason
     *
     * @return string
     */
    public function getNotOkAsShipToReason()
    {
        return $this->container['not_ok_as_ship_to_reason'];
    }

    /**
     * Sets not_ok_as_ship_to_reason
     *
     * @param string $not_ok_as_ship_to_reason If IsValidShipToAddress is false, then this holds the reason why the address cannot be used as a ship-to.
     *
     * @return $this
     */
    public function setNotOkAsShipToReason($not_ok_as_ship_to_reason)
    {
        $this->container['not_ok_as_ship_to_reason'] = $not_ok_as_ship_to_reason;

        return $this;
    }

    /**
     * Gets promote_by_phone1
     *
     * @return string
     */
    public function getPromoteByPhone1()
    {
        return $this->container['promote_by_phone1'];
    }

    /**
     * Sets promote_by_phone1
     *
     * @param string $promote_by_phone1 Specifies whether or not to make promotional calls to the customer's Phone Number 1.
     *
     * @return $this
     */
    public function setPromoteByPhone1($promote_by_phone1)
    {
        $this->container['promote_by_phone1'] = $promote_by_phone1;

        return $this;
    }

    /**
     * Gets promote_by_phone2
     *
     * @return string
     */
    public function getPromoteByPhone2()
    {
        return $this->container['promote_by_phone2'];
    }

    /**
     * Sets promote_by_phone2
     *
     * @param string $promote_by_phone2 Specifies whether or not to make promotional calls to the customer's Phone Number 2.
     *
     * @return $this
     */
    public function setPromoteByPhone2($promote_by_phone2)
    {
        $this->container['promote_by_phone2'] = $promote_by_phone2;

        return $this;
    }

    /**
     * Gets promote_by_phone3
     *
     * @return string
     */
    public function getPromoteByPhone3()
    {
        return $this->container['promote_by_phone3'];
    }

    /**
     * Sets promote_by_phone3
     *
     * @param string $promote_by_phone3 Specifies whether or not to make promotional calls to the customer's Phone Number 3.
     *
     * @return $this
     */
    public function setPromoteByPhone3($promote_by_phone3)
    {
        $this->container['promote_by_phone3'] = $promote_by_phone3;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default Is this the customer's default address?
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets change_source
     *
     * @return string
     */
    public function getChangeSource()
    {
        return $this->container['change_source'];
    }

    /**
     * Sets change_source
     *
     * @param string $change_source The system that last changed the customer record
     *
     * @return $this
     */
    public function setChangeSource($change_source)
    {
        $this->container['change_source'] = $change_source;

        return $this;
    }

    /**
     * Gets job_position_code
     *
     * @return string
     */
    public function getJobPositionCode()
    {
        return $this->container['job_position_code'];
    }

    /**
     * Sets job_position_code
     *
     * @param string $job_position_code Position code indicating position in company
     *
     * @return $this
     */
    public function setJobPositionCode($job_position_code)
    {
        $this->container['job_position_code'] = $job_position_code;

        return $this;
    }

    /**
     * Gets job_title_name
     *
     * @return string
     */
    public function getJobTitleName()
    {
        return $this->container['job_title_name'];
    }

    /**
     * Sets job_title_name
     *
     * @param string $job_title_name Prospect's job title
     *
     * @return $this
     */
    public function setJobTitleName($job_title_name)
    {
        $this->container['job_title_name'] = $job_title_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


