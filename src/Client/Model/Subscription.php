<?php
/**
 * Subscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Subscription Class Doc Comment
 *
 * @category Class
 * @description Information about a customer&#39;s existing subscription.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Subscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'publication' => '\Advantage\Client\Model\PublicationSummary',
        'access_expires' => '\DateTime',
        'alternate_delivery' => '\Advantage\Client\Model\SubscriptionAlternateDelivery',
        'adjustment_reason_code' => 'string',
        'back_issue_unit_price' => 'double',
        'billing_currency_code' => 'string',
        'billing_organization_code' => 'string',
        'billing_status_code' => 'string',
        'billing_status_description' => 'string',
        'business_industry_code' => 'string',
        'status' => '\Advantage\Client\Model\SubscriptionStatus',
        'control_group_date' => '\DateTime',
        'copies' => 'int',
        'date_signed' => '\DateTime',
        'delivery_code' => 'string',
        'demographics' => '\Advantage\Client\Model\DemographicValue[]',
        'direct_debit_request_id' => 'string',
        'ship_to' => '\Advantage\Client\Model\SubscriptionAddressSummary',
        'bill_to' => '\Advantage\Client\Model\CustomerAddressSummary',
        'donor_type_code' => 'string',
        'edition_code' => 'string',
        'term_expires' => '\Advantage\Client\Model\Issue',
        'subscription_expires' => '\Advantage\Client\Model\Issue',
        'subscription_issues_remaining' => 'int',
        'subscription_started' => '\Advantage\Client\Model\Issue',
        'is_excluded_from_gracing' => 'bool',
        'is_group' => 'bool',
        'installment_billing_code' => 'string',
        'term_issues_remaining' => 'int',
        'issue_group_code' => 'string',
        'is_controlled' => 'bool',
        'is_future_term' => 'bool',
        'is_future_term_nonpaid_installment_bill' => 'bool',
        'is_past_term' => 'bool',
        'is_gracing' => 'bool',
        'is_payment_due' => 'bool',
        'is_premium' => 'bool',
        'is_proforma' => 'bool',
        'is_qualified' => 'bool',
        'is_term_paid' => 'bool',
        'last_fulfillment_only_issue' => '\Advantage\Client\Model\Issue',
        'last_issue_served' => '\Advantage\Client\Model\Issue',
        'last_order_number' => 'string',
        'last_order_source_code' => 'string',
        'last_renewal_date' => '\DateTime',
        'last_renewal_promotion_code_sent' => 'string',
        'linked_premiums' => '\Advantage\Client\Model\LinkedPremium[]',
        'local_currency_code' => 'string',
        'membership_organization_code' => 'string',
        'membership_category_code' => 'string',
        'number_advanced_renewals' => 'int',
        'package' => '\Advantage\Client\Model\SubscriptionPackageSource',
        'paid_through_date' => '\DateTime',
        'postage_amount' => 'double',
        'profile_id' => 'string',
        'promote_by_sms' => 'string',
        'promotion_choice_code' => 'string',
        'promotion_code' => 'string',
        'rate' => 'double',
        'rate_code' => 'string',
        'referred_by_customer_number' => 'string',
        'remaining_liability' => 'double',
        'renewal_policy' => '\Advantage\Client\Model\RenewalPolicy',
        'risk_free_issues' => 'int',
        'sales_rep_code' => 'string',
        'ship_through' => '\Advantage\Client\Model\CustomerAddressKey',
        'term_starts' => '\Advantage\Client\Model\Issue',
        'subscription_id' => 'string',
        'subscription_class' => 'string',
        'subscription_type_code' => 'string',
        'suspend_resume_date' => '\DateTime',
        'suspend_start_date' => '\DateTime',
        'term_length' => 'int',
        'term_number' => 'int',
        'auto_charge_settings' => '\Advantage\Client\Model\SubscriptionAutoChargeSettings',
        'original_order' => '\Advantage\Client\Model\OriginalOrder',
        'related_debits' => '\Advantage\Client\Model\Debit[]',
        'related_credits' => '\Advantage\Client\Model\Credit[]',
        'auto_renew_chain_id' => 'string',
        'auto_renew_chain_sequence' => 'int',
        'number_auto_renewals' => 'int',
        'linked_agreement_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'publication' => null,
        'access_expires' => 'date-time',
        'alternate_delivery' => null,
        'adjustment_reason_code' => null,
        'back_issue_unit_price' => 'double',
        'billing_currency_code' => null,
        'billing_organization_code' => null,
        'billing_status_code' => null,
        'billing_status_description' => null,
        'business_industry_code' => null,
        'status' => null,
        'control_group_date' => 'date-time',
        'copies' => 'int32',
        'date_signed' => 'date-time',
        'delivery_code' => null,
        'demographics' => null,
        'direct_debit_request_id' => null,
        'ship_to' => null,
        'bill_to' => null,
        'donor_type_code' => null,
        'edition_code' => null,
        'term_expires' => null,
        'subscription_expires' => null,
        'subscription_issues_remaining' => 'int32',
        'subscription_started' => null,
        'is_excluded_from_gracing' => null,
        'is_group' => null,
        'installment_billing_code' => null,
        'term_issues_remaining' => 'int32',
        'issue_group_code' => null,
        'is_controlled' => null,
        'is_future_term' => null,
        'is_future_term_nonpaid_installment_bill' => null,
        'is_past_term' => null,
        'is_gracing' => null,
        'is_payment_due' => null,
        'is_premium' => null,
        'is_proforma' => null,
        'is_qualified' => null,
        'is_term_paid' => null,
        'last_fulfillment_only_issue' => null,
        'last_issue_served' => null,
        'last_order_number' => null,
        'last_order_source_code' => null,
        'last_renewal_date' => 'date-time',
        'last_renewal_promotion_code_sent' => null,
        'linked_premiums' => null,
        'local_currency_code' => null,
        'membership_organization_code' => null,
        'membership_category_code' => null,
        'number_advanced_renewals' => 'int32',
        'package' => null,
        'paid_through_date' => 'date-time',
        'postage_amount' => 'double',
        'profile_id' => null,
        'promote_by_sms' => null,
        'promotion_choice_code' => null,
        'promotion_code' => null,
        'rate' => 'double',
        'rate_code' => null,
        'referred_by_customer_number' => null,
        'remaining_liability' => 'double',
        'renewal_policy' => null,
        'risk_free_issues' => 'int32',
        'sales_rep_code' => null,
        'ship_through' => null,
        'term_starts' => null,
        'subscription_id' => null,
        'subscription_class' => null,
        'subscription_type_code' => null,
        'suspend_resume_date' => 'date-time',
        'suspend_start_date' => 'date-time',
        'term_length' => 'int32',
        'term_number' => 'int32',
        'auto_charge_settings' => null,
        'original_order' => null,
        'related_debits' => null,
        'related_credits' => null,
        'auto_renew_chain_id' => null,
        'auto_renew_chain_sequence' => 'int32',
        'number_auto_renewals' => 'int32',
        'linked_agreement_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'publication' => 'Publication',
        'access_expires' => 'AccessExpires',
        'alternate_delivery' => 'AlternateDelivery',
        'adjustment_reason_code' => 'AdjustmentReasonCode',
        'back_issue_unit_price' => 'BackIssueUnitPrice',
        'billing_currency_code' => 'BillingCurrencyCode',
        'billing_organization_code' => 'BillingOrganizationCode',
        'billing_status_code' => 'BillingStatusCode',
        'billing_status_description' => 'BillingStatusDescription',
        'business_industry_code' => 'BusinessIndustryCode',
        'status' => 'Status',
        'control_group_date' => 'ControlGroupDate',
        'copies' => 'Copies',
        'date_signed' => 'DateSigned',
        'delivery_code' => 'DeliveryCode',
        'demographics' => 'Demographics',
        'direct_debit_request_id' => 'DirectDebitRequestId',
        'ship_to' => 'ShipTo',
        'bill_to' => 'BillTo',
        'donor_type_code' => 'DonorTypeCode',
        'edition_code' => 'EditionCode',
        'term_expires' => 'TermExpires',
        'subscription_expires' => 'SubscriptionExpires',
        'subscription_issues_remaining' => 'SubscriptionIssuesRemaining',
        'subscription_started' => 'SubscriptionStarted',
        'is_excluded_from_gracing' => 'IsExcludedFromGracing',
        'is_group' => 'IsGroup',
        'installment_billing_code' => 'InstallmentBillingCode',
        'term_issues_remaining' => 'TermIssuesRemaining',
        'issue_group_code' => 'IssueGroupCode',
        'is_controlled' => 'IsControlled',
        'is_future_term' => 'IsFutureTerm',
        'is_future_term_nonpaid_installment_bill' => 'IsFutureTermNonpaidInstallmentBill',
        'is_past_term' => 'IsPastTerm',
        'is_gracing' => 'IsGracing',
        'is_payment_due' => 'IsPaymentDue',
        'is_premium' => 'IsPremium',
        'is_proforma' => 'IsProforma',
        'is_qualified' => 'IsQualified',
        'is_term_paid' => 'IsTermPaid',
        'last_fulfillment_only_issue' => 'LastFulfillmentOnlyIssue',
        'last_issue_served' => 'LastIssueServed',
        'last_order_number' => 'LastOrderNumber',
        'last_order_source_code' => 'LastOrderSourceCode',
        'last_renewal_date' => 'LastRenewalDate',
        'last_renewal_promotion_code_sent' => 'LastRenewalPromotionCodeSent',
        'linked_premiums' => 'LinkedPremiums',
        'local_currency_code' => 'LocalCurrencyCode',
        'membership_organization_code' => 'MembershipOrganizationCode',
        'membership_category_code' => 'MembershipCategoryCode',
        'number_advanced_renewals' => 'NumberAdvancedRenewals',
        'package' => 'Package',
        'paid_through_date' => 'PaidThroughDate',
        'postage_amount' => 'PostageAmount',
        'profile_id' => 'ProfileId',
        'promote_by_sms' => 'PromoteBySms',
        'promotion_choice_code' => 'PromotionChoiceCode',
        'promotion_code' => 'PromotionCode',
        'rate' => 'Rate',
        'rate_code' => 'RateCode',
        'referred_by_customer_number' => 'ReferredByCustomerNumber',
        'remaining_liability' => 'RemainingLiability',
        'renewal_policy' => 'RenewalPolicy',
        'risk_free_issues' => 'RiskFreeIssues',
        'sales_rep_code' => 'SalesRepCode',
        'ship_through' => 'ShipThrough',
        'term_starts' => 'TermStarts',
        'subscription_id' => 'SubscriptionId',
        'subscription_class' => 'SubscriptionClass',
        'subscription_type_code' => 'SubscriptionTypeCode',
        'suspend_resume_date' => 'SuspendResumeDate',
        'suspend_start_date' => 'SuspendStartDate',
        'term_length' => 'TermLength',
        'term_number' => 'TermNumber',
        'auto_charge_settings' => 'AutoChargeSettings',
        'original_order' => 'OriginalOrder',
        'related_debits' => 'RelatedDebits',
        'related_credits' => 'RelatedCredits',
        'auto_renew_chain_id' => 'AutoRenewChainId',
        'auto_renew_chain_sequence' => 'AutoRenewChainSequence',
        'number_auto_renewals' => 'NumberAutoRenewals',
        'linked_agreement_id' => 'LinkedAgreementId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'publication' => 'setPublication',
        'access_expires' => 'setAccessExpires',
        'alternate_delivery' => 'setAlternateDelivery',
        'adjustment_reason_code' => 'setAdjustmentReasonCode',
        'back_issue_unit_price' => 'setBackIssueUnitPrice',
        'billing_currency_code' => 'setBillingCurrencyCode',
        'billing_organization_code' => 'setBillingOrganizationCode',
        'billing_status_code' => 'setBillingStatusCode',
        'billing_status_description' => 'setBillingStatusDescription',
        'business_industry_code' => 'setBusinessIndustryCode',
        'status' => 'setStatus',
        'control_group_date' => 'setControlGroupDate',
        'copies' => 'setCopies',
        'date_signed' => 'setDateSigned',
        'delivery_code' => 'setDeliveryCode',
        'demographics' => 'setDemographics',
        'direct_debit_request_id' => 'setDirectDebitRequestId',
        'ship_to' => 'setShipTo',
        'bill_to' => 'setBillTo',
        'donor_type_code' => 'setDonorTypeCode',
        'edition_code' => 'setEditionCode',
        'term_expires' => 'setTermExpires',
        'subscription_expires' => 'setSubscriptionExpires',
        'subscription_issues_remaining' => 'setSubscriptionIssuesRemaining',
        'subscription_started' => 'setSubscriptionStarted',
        'is_excluded_from_gracing' => 'setIsExcludedFromGracing',
        'is_group' => 'setIsGroup',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'term_issues_remaining' => 'setTermIssuesRemaining',
        'issue_group_code' => 'setIssueGroupCode',
        'is_controlled' => 'setIsControlled',
        'is_future_term' => 'setIsFutureTerm',
        'is_future_term_nonpaid_installment_bill' => 'setIsFutureTermNonpaidInstallmentBill',
        'is_past_term' => 'setIsPastTerm',
        'is_gracing' => 'setIsGracing',
        'is_payment_due' => 'setIsPaymentDue',
        'is_premium' => 'setIsPremium',
        'is_proforma' => 'setIsProforma',
        'is_qualified' => 'setIsQualified',
        'is_term_paid' => 'setIsTermPaid',
        'last_fulfillment_only_issue' => 'setLastFulfillmentOnlyIssue',
        'last_issue_served' => 'setLastIssueServed',
        'last_order_number' => 'setLastOrderNumber',
        'last_order_source_code' => 'setLastOrderSourceCode',
        'last_renewal_date' => 'setLastRenewalDate',
        'last_renewal_promotion_code_sent' => 'setLastRenewalPromotionCodeSent',
        'linked_premiums' => 'setLinkedPremiums',
        'local_currency_code' => 'setLocalCurrencyCode',
        'membership_organization_code' => 'setMembershipOrganizationCode',
        'membership_category_code' => 'setMembershipCategoryCode',
        'number_advanced_renewals' => 'setNumberAdvancedRenewals',
        'package' => 'setPackage',
        'paid_through_date' => 'setPaidThroughDate',
        'postage_amount' => 'setPostageAmount',
        'profile_id' => 'setProfileId',
        'promote_by_sms' => 'setPromoteBySms',
        'promotion_choice_code' => 'setPromotionChoiceCode',
        'promotion_code' => 'setPromotionCode',
        'rate' => 'setRate',
        'rate_code' => 'setRateCode',
        'referred_by_customer_number' => 'setReferredByCustomerNumber',
        'remaining_liability' => 'setRemainingLiability',
        'renewal_policy' => 'setRenewalPolicy',
        'risk_free_issues' => 'setRiskFreeIssues',
        'sales_rep_code' => 'setSalesRepCode',
        'ship_through' => 'setShipThrough',
        'term_starts' => 'setTermStarts',
        'subscription_id' => 'setSubscriptionId',
        'subscription_class' => 'setSubscriptionClass',
        'subscription_type_code' => 'setSubscriptionTypeCode',
        'suspend_resume_date' => 'setSuspendResumeDate',
        'suspend_start_date' => 'setSuspendStartDate',
        'term_length' => 'setTermLength',
        'term_number' => 'setTermNumber',
        'auto_charge_settings' => 'setAutoChargeSettings',
        'original_order' => 'setOriginalOrder',
        'related_debits' => 'setRelatedDebits',
        'related_credits' => 'setRelatedCredits',
        'auto_renew_chain_id' => 'setAutoRenewChainId',
        'auto_renew_chain_sequence' => 'setAutoRenewChainSequence',
        'number_auto_renewals' => 'setNumberAutoRenewals',
        'linked_agreement_id' => 'setLinkedAgreementId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'publication' => 'getPublication',
        'access_expires' => 'getAccessExpires',
        'alternate_delivery' => 'getAlternateDelivery',
        'adjustment_reason_code' => 'getAdjustmentReasonCode',
        'back_issue_unit_price' => 'getBackIssueUnitPrice',
        'billing_currency_code' => 'getBillingCurrencyCode',
        'billing_organization_code' => 'getBillingOrganizationCode',
        'billing_status_code' => 'getBillingStatusCode',
        'billing_status_description' => 'getBillingStatusDescription',
        'business_industry_code' => 'getBusinessIndustryCode',
        'status' => 'getStatus',
        'control_group_date' => 'getControlGroupDate',
        'copies' => 'getCopies',
        'date_signed' => 'getDateSigned',
        'delivery_code' => 'getDeliveryCode',
        'demographics' => 'getDemographics',
        'direct_debit_request_id' => 'getDirectDebitRequestId',
        'ship_to' => 'getShipTo',
        'bill_to' => 'getBillTo',
        'donor_type_code' => 'getDonorTypeCode',
        'edition_code' => 'getEditionCode',
        'term_expires' => 'getTermExpires',
        'subscription_expires' => 'getSubscriptionExpires',
        'subscription_issues_remaining' => 'getSubscriptionIssuesRemaining',
        'subscription_started' => 'getSubscriptionStarted',
        'is_excluded_from_gracing' => 'getIsExcludedFromGracing',
        'is_group' => 'getIsGroup',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'term_issues_remaining' => 'getTermIssuesRemaining',
        'issue_group_code' => 'getIssueGroupCode',
        'is_controlled' => 'getIsControlled',
        'is_future_term' => 'getIsFutureTerm',
        'is_future_term_nonpaid_installment_bill' => 'getIsFutureTermNonpaidInstallmentBill',
        'is_past_term' => 'getIsPastTerm',
        'is_gracing' => 'getIsGracing',
        'is_payment_due' => 'getIsPaymentDue',
        'is_premium' => 'getIsPremium',
        'is_proforma' => 'getIsProforma',
        'is_qualified' => 'getIsQualified',
        'is_term_paid' => 'getIsTermPaid',
        'last_fulfillment_only_issue' => 'getLastFulfillmentOnlyIssue',
        'last_issue_served' => 'getLastIssueServed',
        'last_order_number' => 'getLastOrderNumber',
        'last_order_source_code' => 'getLastOrderSourceCode',
        'last_renewal_date' => 'getLastRenewalDate',
        'last_renewal_promotion_code_sent' => 'getLastRenewalPromotionCodeSent',
        'linked_premiums' => 'getLinkedPremiums',
        'local_currency_code' => 'getLocalCurrencyCode',
        'membership_organization_code' => 'getMembershipOrganizationCode',
        'membership_category_code' => 'getMembershipCategoryCode',
        'number_advanced_renewals' => 'getNumberAdvancedRenewals',
        'package' => 'getPackage',
        'paid_through_date' => 'getPaidThroughDate',
        'postage_amount' => 'getPostageAmount',
        'profile_id' => 'getProfileId',
        'promote_by_sms' => 'getPromoteBySms',
        'promotion_choice_code' => 'getPromotionChoiceCode',
        'promotion_code' => 'getPromotionCode',
        'rate' => 'getRate',
        'rate_code' => 'getRateCode',
        'referred_by_customer_number' => 'getReferredByCustomerNumber',
        'remaining_liability' => 'getRemainingLiability',
        'renewal_policy' => 'getRenewalPolicy',
        'risk_free_issues' => 'getRiskFreeIssues',
        'sales_rep_code' => 'getSalesRepCode',
        'ship_through' => 'getShipThrough',
        'term_starts' => 'getTermStarts',
        'subscription_id' => 'getSubscriptionId',
        'subscription_class' => 'getSubscriptionClass',
        'subscription_type_code' => 'getSubscriptionTypeCode',
        'suspend_resume_date' => 'getSuspendResumeDate',
        'suspend_start_date' => 'getSuspendStartDate',
        'term_length' => 'getTermLength',
        'term_number' => 'getTermNumber',
        'auto_charge_settings' => 'getAutoChargeSettings',
        'original_order' => 'getOriginalOrder',
        'related_debits' => 'getRelatedDebits',
        'related_credits' => 'getRelatedCredits',
        'auto_renew_chain_id' => 'getAutoRenewChainId',
        'auto_renew_chain_sequence' => 'getAutoRenewChainSequence',
        'number_auto_renewals' => 'getNumberAutoRenewals',
        'linked_agreement_id' => 'getLinkedAgreementId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_CLASS_REGULAR = 'Regular';
    const SUBSCRIPTION_CLASS_DELAYED_START = 'DelayedStart';
    const SUBSCRIPTION_CLASS_MONTHLY_INVOICED = 'MonthlyInvoiced';
    const SUBSCRIPTION_CLASS_PERPETUAL = 'Perpetual';
    const SUBSCRIPTION_CLASS_QUALIFIED_NONPAID = 'QualifiedNonpaid';
    const SUBSCRIPTION_CLASS_AGREEMENT = 'Agreement';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionClassAllowableValues()
    {
        return [
            self::SUBSCRIPTION_CLASS_REGULAR,
            self::SUBSCRIPTION_CLASS_DELAYED_START,
            self::SUBSCRIPTION_CLASS_MONTHLY_INVOICED,
            self::SUBSCRIPTION_CLASS_PERPETUAL,
            self::SUBSCRIPTION_CLASS_QUALIFIED_NONPAID,
            self::SUBSCRIPTION_CLASS_AGREEMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['publication'] = isset($data['publication']) ? $data['publication'] : null;
        $this->container['access_expires'] = isset($data['access_expires']) ? $data['access_expires'] : null;
        $this->container['alternate_delivery'] = isset($data['alternate_delivery']) ? $data['alternate_delivery'] : null;
        $this->container['adjustment_reason_code'] = isset($data['adjustment_reason_code']) ? $data['adjustment_reason_code'] : null;
        $this->container['back_issue_unit_price'] = isset($data['back_issue_unit_price']) ? $data['back_issue_unit_price'] : null;
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['billing_organization_code'] = isset($data['billing_organization_code']) ? $data['billing_organization_code'] : null;
        $this->container['billing_status_code'] = isset($data['billing_status_code']) ? $data['billing_status_code'] : null;
        $this->container['billing_status_description'] = isset($data['billing_status_description']) ? $data['billing_status_description'] : null;
        $this->container['business_industry_code'] = isset($data['business_industry_code']) ? $data['business_industry_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['control_group_date'] = isset($data['control_group_date']) ? $data['control_group_date'] : null;
        $this->container['copies'] = isset($data['copies']) ? $data['copies'] : null;
        $this->container['date_signed'] = isset($data['date_signed']) ? $data['date_signed'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['direct_debit_request_id'] = isset($data['direct_debit_request_id']) ? $data['direct_debit_request_id'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['donor_type_code'] = isset($data['donor_type_code']) ? $data['donor_type_code'] : null;
        $this->container['edition_code'] = isset($data['edition_code']) ? $data['edition_code'] : null;
        $this->container['term_expires'] = isset($data['term_expires']) ? $data['term_expires'] : null;
        $this->container['subscription_expires'] = isset($data['subscription_expires']) ? $data['subscription_expires'] : null;
        $this->container['subscription_issues_remaining'] = isset($data['subscription_issues_remaining']) ? $data['subscription_issues_remaining'] : null;
        $this->container['subscription_started'] = isset($data['subscription_started']) ? $data['subscription_started'] : null;
        $this->container['is_excluded_from_gracing'] = isset($data['is_excluded_from_gracing']) ? $data['is_excluded_from_gracing'] : null;
        $this->container['is_group'] = isset($data['is_group']) ? $data['is_group'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['term_issues_remaining'] = isset($data['term_issues_remaining']) ? $data['term_issues_remaining'] : null;
        $this->container['issue_group_code'] = isset($data['issue_group_code']) ? $data['issue_group_code'] : null;
        $this->container['is_controlled'] = isset($data['is_controlled']) ? $data['is_controlled'] : null;
        $this->container['is_future_term'] = isset($data['is_future_term']) ? $data['is_future_term'] : null;
        $this->container['is_future_term_nonpaid_installment_bill'] = isset($data['is_future_term_nonpaid_installment_bill']) ? $data['is_future_term_nonpaid_installment_bill'] : null;
        $this->container['is_past_term'] = isset($data['is_past_term']) ? $data['is_past_term'] : null;
        $this->container['is_gracing'] = isset($data['is_gracing']) ? $data['is_gracing'] : null;
        $this->container['is_payment_due'] = isset($data['is_payment_due']) ? $data['is_payment_due'] : null;
        $this->container['is_premium'] = isset($data['is_premium']) ? $data['is_premium'] : null;
        $this->container['is_proforma'] = isset($data['is_proforma']) ? $data['is_proforma'] : null;
        $this->container['is_qualified'] = isset($data['is_qualified']) ? $data['is_qualified'] : null;
        $this->container['is_term_paid'] = isset($data['is_term_paid']) ? $data['is_term_paid'] : null;
        $this->container['last_fulfillment_only_issue'] = isset($data['last_fulfillment_only_issue']) ? $data['last_fulfillment_only_issue'] : null;
        $this->container['last_issue_served'] = isset($data['last_issue_served']) ? $data['last_issue_served'] : null;
        $this->container['last_order_number'] = isset($data['last_order_number']) ? $data['last_order_number'] : null;
        $this->container['last_order_source_code'] = isset($data['last_order_source_code']) ? $data['last_order_source_code'] : null;
        $this->container['last_renewal_date'] = isset($data['last_renewal_date']) ? $data['last_renewal_date'] : null;
        $this->container['last_renewal_promotion_code_sent'] = isset($data['last_renewal_promotion_code_sent']) ? $data['last_renewal_promotion_code_sent'] : null;
        $this->container['linked_premiums'] = isset($data['linked_premiums']) ? $data['linked_premiums'] : null;
        $this->container['local_currency_code'] = isset($data['local_currency_code']) ? $data['local_currency_code'] : null;
        $this->container['membership_organization_code'] = isset($data['membership_organization_code']) ? $data['membership_organization_code'] : null;
        $this->container['membership_category_code'] = isset($data['membership_category_code']) ? $data['membership_category_code'] : null;
        $this->container['number_advanced_renewals'] = isset($data['number_advanced_renewals']) ? $data['number_advanced_renewals'] : null;
        $this->container['package'] = isset($data['package']) ? $data['package'] : null;
        $this->container['paid_through_date'] = isset($data['paid_through_date']) ? $data['paid_through_date'] : null;
        $this->container['postage_amount'] = isset($data['postage_amount']) ? $data['postage_amount'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['promote_by_sms'] = isset($data['promote_by_sms']) ? $data['promote_by_sms'] : null;
        $this->container['promotion_choice_code'] = isset($data['promotion_choice_code']) ? $data['promotion_choice_code'] : null;
        $this->container['promotion_code'] = isset($data['promotion_code']) ? $data['promotion_code'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['rate_code'] = isset($data['rate_code']) ? $data['rate_code'] : null;
        $this->container['referred_by_customer_number'] = isset($data['referred_by_customer_number']) ? $data['referred_by_customer_number'] : null;
        $this->container['remaining_liability'] = isset($data['remaining_liability']) ? $data['remaining_liability'] : null;
        $this->container['renewal_policy'] = isset($data['renewal_policy']) ? $data['renewal_policy'] : null;
        $this->container['risk_free_issues'] = isset($data['risk_free_issues']) ? $data['risk_free_issues'] : null;
        $this->container['sales_rep_code'] = isset($data['sales_rep_code']) ? $data['sales_rep_code'] : null;
        $this->container['ship_through'] = isset($data['ship_through']) ? $data['ship_through'] : null;
        $this->container['term_starts'] = isset($data['term_starts']) ? $data['term_starts'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['subscription_class'] = isset($data['subscription_class']) ? $data['subscription_class'] : null;
        $this->container['subscription_type_code'] = isset($data['subscription_type_code']) ? $data['subscription_type_code'] : null;
        $this->container['suspend_resume_date'] = isset($data['suspend_resume_date']) ? $data['suspend_resume_date'] : null;
        $this->container['suspend_start_date'] = isset($data['suspend_start_date']) ? $data['suspend_start_date'] : null;
        $this->container['term_length'] = isset($data['term_length']) ? $data['term_length'] : null;
        $this->container['term_number'] = isset($data['term_number']) ? $data['term_number'] : null;
        $this->container['auto_charge_settings'] = isset($data['auto_charge_settings']) ? $data['auto_charge_settings'] : null;
        $this->container['original_order'] = isset($data['original_order']) ? $data['original_order'] : null;
        $this->container['related_debits'] = isset($data['related_debits']) ? $data['related_debits'] : null;
        $this->container['related_credits'] = isset($data['related_credits']) ? $data['related_credits'] : null;
        $this->container['auto_renew_chain_id'] = isset($data['auto_renew_chain_id']) ? $data['auto_renew_chain_id'] : null;
        $this->container['auto_renew_chain_sequence'] = isset($data['auto_renew_chain_sequence']) ? $data['auto_renew_chain_sequence'] : null;
        $this->container['number_auto_renewals'] = isset($data['number_auto_renewals']) ? $data['number_auto_renewals'] : null;
        $this->container['linked_agreement_id'] = isset($data['linked_agreement_id']) ? $data['linked_agreement_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubscriptionClassAllowableValues();
        if (!is_null($this->container['subscription_class']) && !in_array($this->container['subscription_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscription_class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets publication
     *
     * @return \Advantage\Client\Model\PublicationSummary
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \Advantage\Client\Model\PublicationSummary $publication The subscribed publication
     *
     * @return $this
     */
    public function setPublication($publication)
    {
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets access_expires
     *
     * @return \DateTime
     */
    public function getAccessExpires()
    {
        return $this->container['access_expires'];
    }

    /**
     * Sets access_expires
     *
     * @param \DateTime $access_expires The final expire date for the current subscription with the gracing days added in.
     *
     * @return $this
     */
    public function setAccessExpires($access_expires)
    {
        $this->container['access_expires'] = $access_expires;

        return $this;
    }

    /**
     * Gets alternate_delivery
     *
     * @return \Advantage\Client\Model\SubscriptionAlternateDelivery
     */
    public function getAlternateDelivery()
    {
        return $this->container['alternate_delivery'];
    }

    /**
     * Sets alternate_delivery
     *
     * @param \Advantage\Client\Model\SubscriptionAlternateDelivery $alternate_delivery The adjustment/cancellation reason code.
     *
     * @return $this
     */
    public function setAlternateDelivery($alternate_delivery)
    {
        $this->container['alternate_delivery'] = $alternate_delivery;

        return $this;
    }

    /**
     * Gets adjustment_reason_code
     *
     * @return string
     */
    public function getAdjustmentReasonCode()
    {
        return $this->container['adjustment_reason_code'];
    }

    /**
     * Sets adjustment_reason_code
     *
     * @param string $adjustment_reason_code The last applied adjustment reason code
     *
     * @return $this
     */
    public function setAdjustmentReasonCode($adjustment_reason_code)
    {
        $this->container['adjustment_reason_code'] = $adjustment_reason_code;

        return $this;
    }

    /**
     * Gets back_issue_unit_price
     *
     * @return double
     */
    public function getBackIssueUnitPrice()
    {
        return $this->container['back_issue_unit_price'];
    }

    /**
     * Sets back_issue_unit_price
     *
     * @param double $back_issue_unit_price The unit price of a back issue for the subscription's publication and currency.
     *
     * @return $this
     */
    public function setBackIssueUnitPrice($back_issue_unit_price)
    {
        $this->container['back_issue_unit_price'] = $back_issue_unit_price;

        return $this;
    }

    /**
     * Gets billing_currency_code
     *
     * @return string
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     *
     * @param string $billing_currency_code The billing currency code.
     *
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets billing_organization_code
     *
     * @return string
     */
    public function getBillingOrganizationCode()
    {
        return $this->container['billing_organization_code'];
    }

    /**
     * Sets billing_organization_code
     *
     * @param string $billing_organization_code The billing organization.
     *
     * @return $this
     */
    public function setBillingOrganizationCode($billing_organization_code)
    {
        $this->container['billing_organization_code'] = $billing_organization_code;

        return $this;
    }

    /**
     * Gets billing_status_code
     *
     * @return string
     */
    public function getBillingStatusCode()
    {
        return $this->container['billing_status_code'];
    }

    /**
     * Sets billing_status_code
     *
     * @param string $billing_status_code The subscription's billing status code.  The valid codes are defined  at the CDSSYS/KWV view for the CRC-STS field,   e.g. B - billed, C - comp, P - paid, A - on-approval
     *
     * @return $this
     */
    public function setBillingStatusCode($billing_status_code)
    {
        $this->container['billing_status_code'] = $billing_status_code;

        return $this;
    }

    /**
     * Gets billing_status_description
     *
     * @return string
     */
    public function getBillingStatusDescription()
    {
        return $this->container['billing_status_description'];
    }

    /**
     * Sets billing_status_description
     *
     * @param string $billing_status_description The localized description of the subscription's billing status code.
     *
     * @return $this
     */
    public function setBillingStatusDescription($billing_status_description)
    {
        $this->container['billing_status_description'] = $billing_status_description;

        return $this;
    }

    /**
     * Gets business_industry_code
     *
     * @return string
     */
    public function getBusinessIndustryCode()
    {
        return $this->container['business_industry_code'];
    }

    /**
     * Sets business_industry_code
     *
     * @param string $business_industry_code The business industry
     *
     * @return $this
     */
    public function setBusinessIndustryCode($business_industry_code)
    {
        $this->container['business_industry_code'] = $business_industry_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Advantage\Client\Model\SubscriptionStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Advantage\Client\Model\SubscriptionStatus $status The subscription's circulation status code.  The valid codes are defined  at the CDSSYS/KWV view for the CRC-STS field.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets control_group_date
     *
     * @return \DateTime
     */
    public function getControlGroupDate()
    {
        return $this->container['control_group_date'];
    }

    /**
     * Sets control_group_date
     *
     * @param \DateTime $control_group_date The control group date.
     *
     * @return $this
     */
    public function setControlGroupDate($control_group_date)
    {
        $this->container['control_group_date'] = $control_group_date;

        return $this;
    }

    /**
     * Gets copies
     *
     * @return int
     */
    public function getCopies()
    {
        return $this->container['copies'];
    }

    /**
     * Sets copies
     *
     * @param int $copies The number of copies.
     *
     * @return $this
     */
    public function setCopies($copies)
    {
        $this->container['copies'] = $copies;

        return $this;
    }

    /**
     * Gets date_signed
     *
     * @return \DateTime
     */
    public function getDateSigned()
    {
        return $this->container['date_signed'];
    }

    /**
     * Sets date_signed
     *
     * @param \DateTime $date_signed The date signed for the current subscription.
     *
     * @return $this
     */
    public function setDateSigned($date_signed)
    {
        $this->container['date_signed'] = $date_signed;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code The delivery code.
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Advantage\Client\Model\DemographicValue[]
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Advantage\Client\Model\DemographicValue[] $demographics Demographic field values for the subscription
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets direct_debit_request_id
     *
     * @return string
     */
    public function getDirectDebitRequestId()
    {
        return $this->container['direct_debit_request_id'];
    }

    /**
     * Sets direct_debit_request_id
     *
     * @param string $direct_debit_request_id The direct debit request ID.
     *
     * @return $this
     */
    public function setDirectDebitRequestId($direct_debit_request_id)
    {
        $this->container['direct_debit_request_id'] = $direct_debit_request_id;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Advantage\Client\Model\SubscriptionAddressSummary
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Advantage\Client\Model\SubscriptionAddressSummary $ship_to This ship-to customer address
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \Advantage\Client\Model\CustomerAddressSummary
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \Advantage\Client\Model\CustomerAddressSummary $bill_to The bill-to customer address.
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets donor_type_code
     *
     * @return string
     */
    public function getDonorTypeCode()
    {
        return $this->container['donor_type_code'];
    }

    /**
     * Sets donor_type_code
     *
     * @param string $donor_type_code The donor type of the donor.
     *
     * @return $this
     */
    public function setDonorTypeCode($donor_type_code)
    {
        $this->container['donor_type_code'] = $donor_type_code;

        return $this;
    }

    /**
     * Gets edition_code
     *
     * @return string
     */
    public function getEditionCode()
    {
        return $this->container['edition_code'];
    }

    /**
     * Sets edition_code
     *
     * @param string $edition_code The subscription edition code.
     *
     * @return $this
     */
    public function setEditionCode($edition_code)
    {
        $this->container['edition_code'] = $edition_code;

        return $this;
    }

    /**
     * Gets term_expires
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getTermExpires()
    {
        return $this->container['term_expires'];
    }

    /**
     * Sets term_expires
     *
     * @param \Advantage\Client\Model\Issue $term_expires The expire date of the subscription.
     *
     * @return $this
     */
    public function setTermExpires($term_expires)
    {
        $this->container['term_expires'] = $term_expires;

        return $this;
    }

    /**
     * Gets subscription_expires
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getSubscriptionExpires()
    {
        return $this->container['subscription_expires'];
    }

    /**
     * Sets subscription_expires
     *
     * @param \Advantage\Client\Model\Issue $subscription_expires The final expire date of the subscription.
     *
     * @return $this
     */
    public function setSubscriptionExpires($subscription_expires)
    {
        $this->container['subscription_expires'] = $subscription_expires;

        return $this;
    }

    /**
     * Gets subscription_issues_remaining
     *
     * @return int
     */
    public function getSubscriptionIssuesRemaining()
    {
        return $this->container['subscription_issues_remaining'];
    }

    /**
     * Sets subscription_issues_remaining
     *
     * @param int $subscription_issues_remaining The number of issues remain on the subscription, including future terms.
     *
     * @return $this
     */
    public function setSubscriptionIssuesRemaining($subscription_issues_remaining)
    {
        $this->container['subscription_issues_remaining'] = $subscription_issues_remaining;

        return $this;
    }

    /**
     * Gets subscription_started
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getSubscriptionStarted()
    {
        return $this->container['subscription_started'];
    }

    /**
     * Sets subscription_started
     *
     * @param \Advantage\Client\Model\Issue $subscription_started The date of the first issue the subscriber received for the subscription.
     *
     * @return $this
     */
    public function setSubscriptionStarted($subscription_started)
    {
        $this->container['subscription_started'] = $subscription_started;

        return $this;
    }

    /**
     * Gets is_excluded_from_gracing
     *
     * @return bool
     */
    public function getIsExcludedFromGracing()
    {
        return $this->container['is_excluded_from_gracing'];
    }

    /**
     * Sets is_excluded_from_gracing
     *
     * @param bool $is_excluded_from_gracing True if this subscription is excluded from gracing, false otherwise
     *
     * @return $this
     */
    public function setIsExcludedFromGracing($is_excluded_from_gracing)
    {
        $this->container['is_excluded_from_gracing'] = $is_excluded_from_gracing;

        return $this;
    }

    /**
     * Gets is_group
     *
     * @return bool
     */
    public function getIsGroup()
    {
        return $this->container['is_group'];
    }

    /**
     * Sets is_group
     *
     * @param bool $is_group Is this part of a group subscription?
     *
     * @return $this
     */
    public function setIsGroup($is_group)
    {
        $this->container['is_group'] = $is_group;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code The installment billing code.
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets term_issues_remaining
     *
     * @return int
     */
    public function getTermIssuesRemaining()
    {
        return $this->container['term_issues_remaining'];
    }

    /**
     * Sets term_issues_remaining
     *
     * @param int $term_issues_remaining The number of issues remaining on the subscription term.
     *
     * @return $this
     */
    public function setTermIssuesRemaining($term_issues_remaining)
    {
        $this->container['term_issues_remaining'] = $term_issues_remaining;

        return $this;
    }

    /**
     * Gets issue_group_code
     *
     * @return string
     */
    public function getIssueGroupCode()
    {
        return $this->container['issue_group_code'];
    }

    /**
     * Sets issue_group_code
     *
     * @param string $issue_group_code The issue group.
     *
     * @return $this
     */
    public function setIssueGroupCode($issue_group_code)
    {
        $this->container['issue_group_code'] = $issue_group_code;

        return $this;
    }

    /**
     * Gets is_controlled
     *
     * @return bool
     */
    public function getIsControlled()
    {
        return $this->container['is_controlled'];
    }

    /**
     * Sets is_controlled
     *
     * @param bool $is_controlled Is the subscription controlled?
     *
     * @return $this
     */
    public function setIsControlled($is_controlled)
    {
        $this->container['is_controlled'] = $is_controlled;

        return $this;
    }

    /**
     * Gets is_future_term
     *
     * @return bool
     */
    public function getIsFutureTerm()
    {
        return $this->container['is_future_term'];
    }

    /**
     * Sets is_future_term
     *
     * @param bool $is_future_term Is the current subscription term a future term? i.e. is located in the future term table.
     *
     * @return $this
     */
    public function setIsFutureTerm($is_future_term)
    {
        $this->container['is_future_term'] = $is_future_term;

        return $this;
    }

    /**
     * Gets is_future_term_nonpaid_installment_bill
     *
     * @return bool
     */
    public function getIsFutureTermNonpaidInstallmentBill()
    {
        return $this->container['is_future_term_nonpaid_installment_bill'];
    }

    /**
     * Sets is_future_term_nonpaid_installment_bill
     *
     * @param bool $is_future_term_nonpaid_installment_bill Are there are any unpaid, installment billed future terms for the subscription?
     *
     * @return $this
     */
    public function setIsFutureTermNonpaidInstallmentBill($is_future_term_nonpaid_installment_bill)
    {
        $this->container['is_future_term_nonpaid_installment_bill'] = $is_future_term_nonpaid_installment_bill;

        return $this;
    }

    /**
     * Gets is_past_term
     *
     * @return bool
     */
    public function getIsPastTerm()
    {
        return $this->container['is_past_term'];
    }

    /**
     * Sets is_past_term
     *
     * @param bool $is_past_term Is the subscription term past term? i.e. is located in the past term table.
     *
     * @return $this
     */
    public function setIsPastTerm($is_past_term)
    {
        $this->container['is_past_term'] = $is_past_term;

        return $this;
    }

    /**
     * Gets is_gracing
     *
     * @return bool
     */
    public function getIsGracing()
    {
        return $this->container['is_gracing'];
    }

    /**
     * Sets is_gracing
     *
     * @param bool $is_gracing Is the subscription expired and being served grace issues?
     *
     * @return $this
     */
    public function setIsGracing($is_gracing)
    {
        $this->container['is_gracing'] = $is_gracing;

        return $this;
    }

    /**
     * Gets is_payment_due
     *
     * @return bool
     */
    public function getIsPaymentDue()
    {
        return $this->container['is_payment_due'];
    }

    /**
     * Sets is_payment_due
     *
     * @param bool $is_payment_due Is the payment due for the subscription?
     *
     * @return $this
     */
    public function setIsPaymentDue($is_payment_due)
    {
        $this->container['is_payment_due'] = $is_payment_due;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool
     */
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool $is_premium Is premium subscription?
     *
     * @return $this
     */
    public function setIsPremium($is_premium)
    {
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets is_proforma
     *
     * @return bool
     */
    public function getIsProforma()
    {
        return $this->container['is_proforma'];
    }

    /**
     * Sets is_proforma
     *
     * @param bool $is_proforma Is the subscription a proforma subscription?
     *
     * @return $this
     */
    public function setIsProforma($is_proforma)
    {
        $this->container['is_proforma'] = $is_proforma;

        return $this;
    }

    /**
     * Gets is_qualified
     *
     * @return bool
     */
    public function getIsQualified()
    {
        return $this->container['is_qualified'];
    }

    /**
     * Sets is_qualified
     *
     * @param bool $is_qualified Is the subscription qualified?
     *
     * @return $this
     */
    public function setIsQualified($is_qualified)
    {
        $this->container['is_qualified'] = $is_qualified;

        return $this;
    }

    /**
     * Gets is_term_paid
     *
     * @return bool
     */
    public function getIsTermPaid()
    {
        return $this->container['is_term_paid'];
    }

    /**
     * Sets is_term_paid
     *
     * @param bool $is_term_paid Have the original subscription and all mod transactions been paid for?
     *
     * @return $this
     */
    public function setIsTermPaid($is_term_paid)
    {
        $this->container['is_term_paid'] = $is_term_paid;

        return $this;
    }

    /**
     * Gets last_fulfillment_only_issue
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getLastFulfillmentOnlyIssue()
    {
        return $this->container['last_fulfillment_only_issue'];
    }

    /**
     * Sets last_fulfillment_only_issue
     *
     * @param \Advantage\Client\Model\Issue $last_fulfillment_only_issue The last fulfillment-only issue that was fulfilled.
     *
     * @return $this
     */
    public function setLastFulfillmentOnlyIssue($last_fulfillment_only_issue)
    {
        $this->container['last_fulfillment_only_issue'] = $last_fulfillment_only_issue;

        return $this;
    }

    /**
     * Gets last_issue_served
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getLastIssueServed()
    {
        return $this->container['last_issue_served'];
    }

    /**
     * Sets last_issue_served
     *
     * @param \Advantage\Client\Model\Issue $last_issue_served The last issue this subscription received.
     *
     * @return $this
     */
    public function setLastIssueServed($last_issue_served)
    {
        $this->container['last_issue_served'] = $last_issue_served;

        return $this;
    }

    /**
     * Gets last_order_number
     *
     * @return string
     */
    public function getLastOrderNumber()
    {
        return $this->container['last_order_number'];
    }

    /**
     * Sets last_order_number
     *
     * @param string $last_order_number The last order number that modified the subscription.
     *
     * @return $this
     */
    public function setLastOrderNumber($last_order_number)
    {
        $this->container['last_order_number'] = $last_order_number;

        return $this;
    }

    /**
     * Gets last_order_source_code
     *
     * @return string
     */
    public function getLastOrderSourceCode()
    {
        return $this->container['last_order_source_code'];
    }

    /**
     * Sets last_order_source_code
     *
     * @param string $last_order_source_code The order source associated with the last order to modify the subscription.
     *
     * @return $this
     */
    public function setLastOrderSourceCode($last_order_source_code)
    {
        $this->container['last_order_source_code'] = $last_order_source_code;

        return $this;
    }

    /**
     * Gets last_renewal_date
     *
     * @return \DateTime
     */
    public function getLastRenewalDate()
    {
        return $this->container['last_renewal_date'];
    }

    /**
     * Sets last_renewal_date
     *
     * @param \DateTime $last_renewal_date The last renewal date of the last renewal that was sent.
     *
     * @return $this
     */
    public function setLastRenewalDate($last_renewal_date)
    {
        $this->container['last_renewal_date'] = $last_renewal_date;

        return $this;
    }

    /**
     * Gets last_renewal_promotion_code_sent
     *
     * @return string
     */
    public function getLastRenewalPromotionCodeSent()
    {
        return $this->container['last_renewal_promotion_code_sent'];
    }

    /**
     * Sets last_renewal_promotion_code_sent
     *
     * @param string $last_renewal_promotion_code_sent The last renewal promotion code that was sent.
     *
     * @return $this
     */
    public function setLastRenewalPromotionCodeSent($last_renewal_promotion_code_sent)
    {
        $this->container['last_renewal_promotion_code_sent'] = $last_renewal_promotion_code_sent;

        return $this;
    }

    /**
     * Gets linked_premiums
     *
     * @return \Advantage\Client\Model\LinkedPremium[]
     */
    public function getLinkedPremiums()
    {
        return $this->container['linked_premiums'];
    }

    /**
     * Sets linked_premiums
     *
     * @param \Advantage\Client\Model\LinkedPremium[] $linked_premiums Returns a list of linked premiums
     *
     * @return $this
     */
    public function setLinkedPremiums($linked_premiums)
    {
        $this->container['linked_premiums'] = $linked_premiums;

        return $this;
    }

    /**
     * Gets local_currency_code
     *
     * @return string
     */
    public function getLocalCurrencyCode()
    {
        return $this->container['local_currency_code'];
    }

    /**
     * Sets local_currency_code
     *
     * @param string $local_currency_code The local currency code from the subscription.
     *
     * @return $this
     */
    public function setLocalCurrencyCode($local_currency_code)
    {
        $this->container['local_currency_code'] = $local_currency_code;

        return $this;
    }

    /**
     * Gets membership_organization_code
     *
     * @return string
     */
    public function getMembershipOrganizationCode()
    {
        return $this->container['membership_organization_code'];
    }

    /**
     * Sets membership_organization_code
     *
     * @param string $membership_organization_code The membership organization.
     *
     * @return $this
     */
    public function setMembershipOrganizationCode($membership_organization_code)
    {
        $this->container['membership_organization_code'] = $membership_organization_code;

        return $this;
    }

    /**
     * Gets membership_category_code
     *
     * @return string
     */
    public function getMembershipCategoryCode()
    {
        return $this->container['membership_category_code'];
    }

    /**
     * Sets membership_category_code
     *
     * @param string $membership_category_code The membership category.
     *
     * @return $this
     */
    public function setMembershipCategoryCode($membership_category_code)
    {
        $this->container['membership_category_code'] = $membership_category_code;

        return $this;
    }

    /**
     * Gets number_advanced_renewals
     *
     * @return int
     */
    public function getNumberAdvancedRenewals()
    {
        return $this->container['number_advanced_renewals'];
    }

    /**
     * Sets number_advanced_renewals
     *
     * @param int $number_advanced_renewals The number of advanced renewals for the subscription's current term.
     *
     * @return $this
     */
    public function setNumberAdvancedRenewals($number_advanced_renewals)
    {
        $this->container['number_advanced_renewals'] = $number_advanced_renewals;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \Advantage\Client\Model\SubscriptionPackageSource
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \Advantage\Client\Model\SubscriptionPackageSource $package If this subscription was ordered as part of a package then use this property  to trace the subscription back to the package component.
     *
     * @return $this
     */
    public function setPackage($package)
    {
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets paid_through_date
     *
     * @return \DateTime
     */
    public function getPaidThroughDate()
    {
        return $this->container['paid_through_date'];
    }

    /**
     * Sets paid_through_date
     *
     * @param \DateTime $paid_through_date The date the subscription has been paid through.
     *
     * @return $this
     */
    public function setPaidThroughDate($paid_through_date)
    {
        $this->container['paid_through_date'] = $paid_through_date;

        return $this;
    }

    /**
     * Gets postage_amount
     *
     * @return double
     */
    public function getPostageAmount()
    {
        return $this->container['postage_amount'];
    }

    /**
     * Sets postage_amount
     *
     * @param double $postage_amount The postage amount.
     *
     * @return $this
     */
    public function setPostageAmount($postage_amount)
    {
        $this->container['postage_amount'] = $postage_amount;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The profile id for the subscription term.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets promote_by_sms
     *
     * @return string
     */
    public function getPromoteBySms()
    {
        return $this->container['promote_by_sms'];
    }

    /**
     * Sets promote_by_sms
     *
     * @param string $promote_by_sms The promote flags for the current term of the current subscription.
     *
     * @return $this
     */
    public function setPromoteBySms($promote_by_sms)
    {
        $this->container['promote_by_sms'] = $promote_by_sms;

        return $this;
    }

    /**
     * Gets promotion_choice_code
     *
     * @return string
     */
    public function getPromotionChoiceCode()
    {
        return $this->container['promotion_choice_code'];
    }

    /**
     * Sets promotion_choice_code
     *
     * @param string $promotion_choice_code The promotion choice.
     *
     * @return $this
     */
    public function setPromotionChoiceCode($promotion_choice_code)
    {
        $this->container['promotion_choice_code'] = $promotion_choice_code;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string $promotion_code The promotion code.
     *
     * @return $this
     */
    public function setPromotionCode($promotion_code)
    {
        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate The rate. The price of the publication.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets rate_code
     *
     * @return string
     */
    public function getRateCode()
    {
        return $this->container['rate_code'];
    }

    /**
     * Sets rate_code
     *
     * @param string $rate_code The rate code, determining the unit price for an item.
     *
     * @return $this
     */
    public function setRateCode($rate_code)
    {
        $this->container['rate_code'] = $rate_code;

        return $this;
    }

    /**
     * Gets referred_by_customer_number
     *
     * @return string
     */
    public function getReferredByCustomerNumber()
    {
        return $this->container['referred_by_customer_number'];
    }

    /**
     * Sets referred_by_customer_number
     *
     * @param string $referred_by_customer_number The customer number of the reference customer.
     *
     * @return $this
     */
    public function setReferredByCustomerNumber($referred_by_customer_number)
    {
        $this->container['referred_by_customer_number'] = $referred_by_customer_number;

        return $this;
    }

    /**
     * Gets remaining_liability
     *
     * @return double
     */
    public function getRemainingLiability()
    {
        return $this->container['remaining_liability'];
    }

    /**
     * Sets remaining_liability
     *
     * @param double $remaining_liability The remaining liability, the calculated billing currency amount of remaining issues for this term.
     *
     * @return $this
     */
    public function setRemainingLiability($remaining_liability)
    {
        $this->container['remaining_liability'] = $remaining_liability;

        return $this;
    }

    /**
     * Gets renewal_policy
     *
     * @return \Advantage\Client\Model\RenewalPolicy
     */
    public function getRenewalPolicy()
    {
        return $this->container['renewal_policy'];
    }

    /**
     * Sets renewal_policy
     *
     * @param \Advantage\Client\Model\RenewalPolicy $renewal_policy The renewal policy.
     *
     * @return $this
     */
    public function setRenewalPolicy($renewal_policy)
    {
        $this->container['renewal_policy'] = $renewal_policy;

        return $this;
    }

    /**
     * Gets risk_free_issues
     *
     * @return int
     */
    public function getRiskFreeIssues()
    {
        return $this->container['risk_free_issues'];
    }

    /**
     * Sets risk_free_issues
     *
     * @param int $risk_free_issues The number of issues a subscriber is due to receive even if the subscription is cancelled.
     *
     * @return $this
     */
    public function setRiskFreeIssues($risk_free_issues)
    {
        $this->container['risk_free_issues'] = $risk_free_issues;

        return $this;
    }

    /**
     * Gets sales_rep_code
     *
     * @return string
     */
    public function getSalesRepCode()
    {
        return $this->container['sales_rep_code'];
    }

    /**
     * Sets sales_rep_code
     *
     * @param string $sales_rep_code The sales representative code for the last order of the subscription.
     *
     * @return $this
     */
    public function setSalesRepCode($sales_rep_code)
    {
        $this->container['sales_rep_code'] = $sales_rep_code;

        return $this;
    }

    /**
     * Gets ship_through
     *
     * @return \Advantage\Client\Model\CustomerAddressKey
     */
    public function getShipThrough()
    {
        return $this->container['ship_through'];
    }

    /**
     * Sets ship_through
     *
     * @param \Advantage\Client\Model\CustomerAddressKey $ship_through The customer number of the freight forwarder that will receive the shipment to distribute to the ship-to.
     *
     * @return $this
     */
    public function setShipThrough($ship_through)
    {
        $this->container['ship_through'] = $ship_through;

        return $this;
    }

    /**
     * Gets term_starts
     *
     * @return \Advantage\Client\Model\Issue
     */
    public function getTermStarts()
    {
        return $this->container['term_starts'];
    }

    /**
     * Sets term_starts
     *
     * @param \Advantage\Client\Model\Issue $term_starts The start date for the current subscription.  If the start date isn't specified on a future term then the  expected start date is calculated, assuming the subscription is continuous.
     *
     * @return $this
     */
    public function setTermStarts($term_starts)
    {
        $this->container['term_starts'] = $term_starts;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string $subscription_id The subscription ID.
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets subscription_class
     *
     * @return string
     */
    public function getSubscriptionClass()
    {
        return $this->container['subscription_class'];
    }

    /**
     * Sets subscription_class
     *
     * @param string $subscription_class The subscription class.
     *
     * @return $this
     */
    public function setSubscriptionClass($subscription_class)
    {
        $allowedValues = $this->getSubscriptionClassAllowableValues();
        if (!is_null($subscription_class) && !in_array($subscription_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscription_class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscription_class'] = $subscription_class;

        return $this;
    }

    /**
     * Gets subscription_type_code
     *
     * @return string
     */
    public function getSubscriptionTypeCode()
    {
        return $this->container['subscription_type_code'];
    }

    /**
     * Sets subscription_type_code
     *
     * @param string $subscription_type_code The subscription type code, describing a group of similar subscriptions.
     *
     * @return $this
     */
    public function setSubscriptionTypeCode($subscription_type_code)
    {
        $this->container['subscription_type_code'] = $subscription_type_code;

        return $this;
    }

    /**
     * Gets suspend_resume_date
     *
     * @return \DateTime
     */
    public function getSuspendResumeDate()
    {
        return $this->container['suspend_resume_date'];
    }

    /**
     * Sets suspend_resume_date
     *
     * @param \DateTime $suspend_resume_date The date that a subscription will be resumed after a suspension.
     *
     * @return $this
     */
    public function setSuspendResumeDate($suspend_resume_date)
    {
        $this->container['suspend_resume_date'] = $suspend_resume_date;

        return $this;
    }

    /**
     * Gets suspend_start_date
     *
     * @return \DateTime
     */
    public function getSuspendStartDate()
    {
        return $this->container['suspend_start_date'];
    }

    /**
     * Sets suspend_start_date
     *
     * @param \DateTime $suspend_start_date The date of the start of subscription suspension.
     *
     * @return $this
     */
    public function setSuspendStartDate($suspend_start_date)
    {
        $this->container['suspend_start_date'] = $suspend_start_date;

        return $this;
    }

    /**
     * Gets term_length
     *
     * @return int
     */
    public function getTermLength()
    {
        return $this->container['term_length'];
    }

    /**
     * Sets term_length
     *
     * @param int $term_length The number of issues included in the subscription order.
     *
     * @return $this
     */
    public function setTermLength($term_length)
    {
        $this->container['term_length'] = $term_length;

        return $this;
    }

    /**
     * Gets term_number
     *
     * @return int
     */
    public function getTermNumber()
    {
        return $this->container['term_number'];
    }

    /**
     * Sets term_number
     *
     * @param int $term_number The term number, indicating how many times the subscriber has ordered the subscription.
     *
     * @return $this
     */
    public function setTermNumber($term_number)
    {
        $this->container['term_number'] = $term_number;

        return $this;
    }

    /**
     * Gets auto_charge_settings
     *
     * @return \Advantage\Client\Model\SubscriptionAutoChargeSettings
     */
    public function getAutoChargeSettings()
    {
        return $this->container['auto_charge_settings'];
    }

    /**
     * Sets auto_charge_settings
     *
     * @param \Advantage\Client\Model\SubscriptionAutoChargeSettings $auto_charge_settings This subscription's auto charge settings. Null if auto-charge has not been set up for the current   subscription.
     *
     * @return $this
     */
    public function setAutoChargeSettings($auto_charge_settings)
    {
        $this->container['auto_charge_settings'] = $auto_charge_settings;

        return $this;
    }

    /**
     * Gets original_order
     *
     * @return \Advantage\Client\Model\OriginalOrder
     */
    public function getOriginalOrder()
    {
        return $this->container['original_order'];
    }

    /**
     * Sets original_order
     *
     * @param \Advantage\Client\Model\OriginalOrder $original_order The order that initially created this subscription term.
     *
     * @return $this
     */
    public function setOriginalOrder($original_order)
    {
        $this->container['original_order'] = $original_order;

        return $this;
    }

    /**
     * Gets related_debits
     *
     * @return \Advantage\Client\Model\Debit[]
     */
    public function getRelatedDebits()
    {
        return $this->container['related_debits'];
    }

    /**
     * Sets related_debits
     *
     * @param \Advantage\Client\Model\Debit[] $related_debits The debits associated with this subscription term
     *
     * @return $this
     */
    public function setRelatedDebits($related_debits)
    {
        $this->container['related_debits'] = $related_debits;

        return $this;
    }

    /**
     * Gets related_credits
     *
     * @return \Advantage\Client\Model\Credit[]
     */
    public function getRelatedCredits()
    {
        return $this->container['related_credits'];
    }

    /**
     * Sets related_credits
     *
     * @param \Advantage\Client\Model\Credit[] $related_credits The credits associated with this subscription term
     *
     * @return $this
     */
    public function setRelatedCredits($related_credits)
    {
        $this->container['related_credits'] = $related_credits;

        return $this;
    }

    /**
     * Gets auto_renew_chain_id
     *
     * @return string
     */
    public function getAutoRenewChainId()
    {
        return $this->container['auto_renew_chain_id'];
    }

    /**
     * Sets auto_renew_chain_id
     *
     * @param string $auto_renew_chain_id The auto-renew chain ID
     *
     * @return $this
     */
    public function setAutoRenewChainId($auto_renew_chain_id)
    {
        $this->container['auto_renew_chain_id'] = $auto_renew_chain_id;

        return $this;
    }

    /**
     * Gets auto_renew_chain_sequence
     *
     * @return int
     */
    public function getAutoRenewChainSequence()
    {
        return $this->container['auto_renew_chain_sequence'];
    }

    /**
     * Sets auto_renew_chain_sequence
     *
     * @param int $auto_renew_chain_sequence The auto-renew chain sequence
     *
     * @return $this
     */
    public function setAutoRenewChainSequence($auto_renew_chain_sequence)
    {
        $this->container['auto_renew_chain_sequence'] = $auto_renew_chain_sequence;

        return $this;
    }

    /**
     * Gets number_auto_renewals
     *
     * @return int
     */
    public function getNumberAutoRenewals()
    {
        return $this->container['number_auto_renewals'];
    }

    /**
     * Sets number_auto_renewals
     *
     * @param int $number_auto_renewals The number of times this subscription has been auto-renewed under the current auto-renew chain ID
     *
     * @return $this
     */
    public function setNumberAutoRenewals($number_auto_renewals)
    {
        $this->container['number_auto_renewals'] = $number_auto_renewals;

        return $this;
    }

    /**
     * Gets linked_agreement_id
     *
     * @return string
     */
    public function getLinkedAgreementId()
    {
        return $this->container['linked_agreement_id'];
    }

    /**
     * Sets linked_agreement_id
     *
     * @param string $linked_agreement_id The ID of the agreement that the current subscription is a component of an agreement.  Null if the current subscription is not an agreement component.
     *
     * @return $this
     */
    public function setLinkedAgreementId($linked_agreement_id)
    {
        $this->container['linked_agreement_id'] = $linked_agreement_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


