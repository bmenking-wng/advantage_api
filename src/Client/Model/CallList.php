<?php
/**
 * CallList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CallList Class Doc Comment
 *
 * @category Class
 * @description Data transfer object for CallList data
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'callback_days' => 'int',
        'calls_assigned' => 'int',
        'calls_completed' => 'int',
        'calls_lost' => 'int',
        'calls_remaining' => 'int',
        'calls_remaining_on_list' => 'int',
        'calls_unassigned' => 'int',
        'call_type' => 'string',
        'date_created' => '\DateTime',
        'focus_item_number' => 'string',
        'list_date' => '\DateTime',
        'name' => 'string',
        'code' => 'string',
        'priority' => 'int',
        'sales_made' => 'int',
        'sales_total' => 'double',
        'sales_total_currency' => 'string',
        'source' => 'string',
        'status' => 'string',
        'narrative' => 'string',
        'total_callbacks' => 'int',
        'total_calls' => 'int',
        'calls' => '\Advantage\Client\Model\Call[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'callback_days' => 'int32',
        'calls_assigned' => 'int32',
        'calls_completed' => 'int32',
        'calls_lost' => 'int32',
        'calls_remaining' => 'int32',
        'calls_remaining_on_list' => 'int32',
        'calls_unassigned' => 'int32',
        'call_type' => null,
        'date_created' => 'date-time',
        'focus_item_number' => null,
        'list_date' => 'date-time',
        'name' => null,
        'code' => null,
        'priority' => 'int32',
        'sales_made' => 'int32',
        'sales_total' => 'double',
        'sales_total_currency' => null,
        'source' => null,
        'status' => null,
        'narrative' => null,
        'total_callbacks' => 'int32',
        'total_calls' => 'int32',
        'calls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'callback_days' => 'CallbackDays',
        'calls_assigned' => 'CallsAssigned',
        'calls_completed' => 'CallsCompleted',
        'calls_lost' => 'CallsLost',
        'calls_remaining' => 'CallsRemaining',
        'calls_remaining_on_list' => 'CallsRemainingOnList',
        'calls_unassigned' => 'CallsUnassigned',
        'call_type' => 'CallType',
        'date_created' => 'DateCreated',
        'focus_item_number' => 'FocusItemNumber',
        'list_date' => 'ListDate',
        'name' => 'Name',
        'code' => 'Code',
        'priority' => 'Priority',
        'sales_made' => 'SalesMade',
        'sales_total' => 'SalesTotal',
        'sales_total_currency' => 'SalesTotalCurrency',
        'source' => 'Source',
        'status' => 'Status',
        'narrative' => 'Narrative',
        'total_callbacks' => 'TotalCallbacks',
        'total_calls' => 'TotalCalls',
        'calls' => 'Calls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'callback_days' => 'setCallbackDays',
        'calls_assigned' => 'setCallsAssigned',
        'calls_completed' => 'setCallsCompleted',
        'calls_lost' => 'setCallsLost',
        'calls_remaining' => 'setCallsRemaining',
        'calls_remaining_on_list' => 'setCallsRemainingOnList',
        'calls_unassigned' => 'setCallsUnassigned',
        'call_type' => 'setCallType',
        'date_created' => 'setDateCreated',
        'focus_item_number' => 'setFocusItemNumber',
        'list_date' => 'setListDate',
        'name' => 'setName',
        'code' => 'setCode',
        'priority' => 'setPriority',
        'sales_made' => 'setSalesMade',
        'sales_total' => 'setSalesTotal',
        'sales_total_currency' => 'setSalesTotalCurrency',
        'source' => 'setSource',
        'status' => 'setStatus',
        'narrative' => 'setNarrative',
        'total_callbacks' => 'setTotalCallbacks',
        'total_calls' => 'setTotalCalls',
        'calls' => 'setCalls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'callback_days' => 'getCallbackDays',
        'calls_assigned' => 'getCallsAssigned',
        'calls_completed' => 'getCallsCompleted',
        'calls_lost' => 'getCallsLost',
        'calls_remaining' => 'getCallsRemaining',
        'calls_remaining_on_list' => 'getCallsRemainingOnList',
        'calls_unassigned' => 'getCallsUnassigned',
        'call_type' => 'getCallType',
        'date_created' => 'getDateCreated',
        'focus_item_number' => 'getFocusItemNumber',
        'list_date' => 'getListDate',
        'name' => 'getName',
        'code' => 'getCode',
        'priority' => 'getPriority',
        'sales_made' => 'getSalesMade',
        'sales_total' => 'getSalesTotal',
        'sales_total_currency' => 'getSalesTotalCurrency',
        'source' => 'getSource',
        'status' => 'getStatus',
        'narrative' => 'getNarrative',
        'total_callbacks' => 'getTotalCallbacks',
        'total_calls' => 'getTotalCalls',
        'calls' => 'getCalls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['callback_days'] = isset($data['callback_days']) ? $data['callback_days'] : null;
        $this->container['calls_assigned'] = isset($data['calls_assigned']) ? $data['calls_assigned'] : null;
        $this->container['calls_completed'] = isset($data['calls_completed']) ? $data['calls_completed'] : null;
        $this->container['calls_lost'] = isset($data['calls_lost']) ? $data['calls_lost'] : null;
        $this->container['calls_remaining'] = isset($data['calls_remaining']) ? $data['calls_remaining'] : null;
        $this->container['calls_remaining_on_list'] = isset($data['calls_remaining_on_list']) ? $data['calls_remaining_on_list'] : null;
        $this->container['calls_unassigned'] = isset($data['calls_unassigned']) ? $data['calls_unassigned'] : null;
        $this->container['call_type'] = isset($data['call_type']) ? $data['call_type'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['focus_item_number'] = isset($data['focus_item_number']) ? $data['focus_item_number'] : null;
        $this->container['list_date'] = isset($data['list_date']) ? $data['list_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['sales_made'] = isset($data['sales_made']) ? $data['sales_made'] : null;
        $this->container['sales_total'] = isset($data['sales_total']) ? $data['sales_total'] : null;
        $this->container['sales_total_currency'] = isset($data['sales_total_currency']) ? $data['sales_total_currency'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['narrative'] = isset($data['narrative']) ? $data['narrative'] : null;
        $this->container['total_callbacks'] = isset($data['total_callbacks']) ? $data['total_callbacks'] : null;
        $this->container['total_calls'] = isset($data['total_calls']) ? $data['total_calls'] : null;
        $this->container['calls'] = isset($data['calls']) ? $data['calls'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets callback_days
     *
     * @return int
     */
    public function getCallbackDays()
    {
        return $this->container['callback_days'];
    }

    /**
     * Sets callback_days
     *
     * @param int $callback_days Callback days
     *
     * @return $this
     */
    public function setCallbackDays($callback_days)
    {
        $this->container['callback_days'] = $callback_days;

        return $this;
    }

    /**
     * Gets calls_assigned
     *
     * @return int
     */
    public function getCallsAssigned()
    {
        return $this->container['calls_assigned'];
    }

    /**
     * Sets calls_assigned
     *
     * @param int $calls_assigned Total calls assigned
     *
     * @return $this
     */
    public function setCallsAssigned($calls_assigned)
    {
        $this->container['calls_assigned'] = $calls_assigned;

        return $this;
    }

    /**
     * Gets calls_completed
     *
     * @return int
     */
    public function getCallsCompleted()
    {
        return $this->container['calls_completed'];
    }

    /**
     * Sets calls_completed
     *
     * @param int $calls_completed Total number of completed calls
     *
     * @return $this
     */
    public function setCallsCompleted($calls_completed)
    {
        $this->container['calls_completed'] = $calls_completed;

        return $this;
    }

    /**
     * Gets calls_lost
     *
     * @return int
     */
    public function getCallsLost()
    {
        return $this->container['calls_lost'];
    }

    /**
     * Sets calls_lost
     *
     * @param int $calls_lost Total number of calls lost
     *
     * @return $this
     */
    public function setCallsLost($calls_lost)
    {
        $this->container['calls_lost'] = $calls_lost;

        return $this;
    }

    /**
     * Gets calls_remaining
     *
     * @return int
     */
    public function getCallsRemaining()
    {
        return $this->container['calls_remaining'];
    }

    /**
     * Sets calls_remaining
     *
     * @param int $calls_remaining Total number of remaining calls
     *
     * @return $this
     */
    public function setCallsRemaining($calls_remaining)
    {
        $this->container['calls_remaining'] = $calls_remaining;

        return $this;
    }

    /**
     * Gets calls_remaining_on_list
     *
     * @return int
     */
    public function getCallsRemainingOnList()
    {
        return $this->container['calls_remaining_on_list'];
    }

    /**
     * Sets calls_remaining_on_list
     *
     * @param int $calls_remaining_on_list Total number of calls remaining on the list
     *
     * @return $this
     */
    public function setCallsRemainingOnList($calls_remaining_on_list)
    {
        $this->container['calls_remaining_on_list'] = $calls_remaining_on_list;

        return $this;
    }

    /**
     * Gets calls_unassigned
     *
     * @return int
     */
    public function getCallsUnassigned()
    {
        return $this->container['calls_unassigned'];
    }

    /**
     * Sets calls_unassigned
     *
     * @param int $calls_unassigned Total calls unassigned
     *
     * @return $this
     */
    public function setCallsUnassigned($calls_unassigned)
    {
        $this->container['calls_unassigned'] = $calls_unassigned;

        return $this;
    }

    /**
     * Gets call_type
     *
     * @return string
     */
    public function getCallType()
    {
        return $this->container['call_type'];
    }

    /**
     * Sets call_type
     *
     * @param string $call_type Call Type
     *
     * @return $this
     */
    public function setCallType($call_type)
    {
        $this->container['call_type'] = $call_type;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created Date Created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets focus_item_number
     *
     * @return string
     */
    public function getFocusItemNumber()
    {
        return $this->container['focus_item_number'];
    }

    /**
     * Sets focus_item_number
     *
     * @param string $focus_item_number Focus Item Number
     *
     * @return $this
     */
    public function setFocusItemNumber($focus_item_number)
    {
        $this->container['focus_item_number'] = $focus_item_number;

        return $this;
    }

    /**
     * Gets list_date
     *
     * @return \DateTime
     */
    public function getListDate()
    {
        return $this->container['list_date'];
    }

    /**
     * Sets list_date
     *
     * @param \DateTime $list_date List Date
     *
     * @return $this
     */
    public function setListDate($list_date)
    {
        $this->container['list_date'] = $list_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name List Description
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code List ID
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority List Priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets sales_made
     *
     * @return int
     */
    public function getSalesMade()
    {
        return $this->container['sales_made'];
    }

    /**
     * Sets sales_made
     *
     * @param int $sales_made Number of sales made
     *
     * @return $this
     */
    public function setSalesMade($sales_made)
    {
        $this->container['sales_made'] = $sales_made;

        return $this;
    }

    /**
     * Gets sales_total
     *
     * @return double
     */
    public function getSalesTotal()
    {
        return $this->container['sales_total'];
    }

    /**
     * Sets sales_total
     *
     * @param double $sales_total Sales Total
     *
     * @return $this
     */
    public function setSalesTotal($sales_total)
    {
        $this->container['sales_total'] = $sales_total;

        return $this;
    }

    /**
     * Gets sales_total_currency
     *
     * @return string
     */
    public function getSalesTotalCurrency()
    {
        return $this->container['sales_total_currency'];
    }

    /**
     * Sets sales_total_currency
     *
     * @param string $sales_total_currency Currency that sales total was calculated in
     *
     * @return $this
     */
    public function setSalesTotalCurrency($sales_total_currency)
    {
        $this->container['sales_total_currency'] = $sales_total_currency;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source List Source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status List Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets narrative
     *
     * @return string
     */
    public function getNarrative()
    {
        return $this->container['narrative'];
    }

    /**
     * Sets narrative
     *
     * @param string $narrative Narrative in Rich Text Format (RTF)
     *
     * @return $this
     */
    public function setNarrative($narrative)
    {
        $this->container['narrative'] = $narrative;

        return $this;
    }

    /**
     * Gets total_callbacks
     *
     * @return int
     */
    public function getTotalCallbacks()
    {
        return $this->container['total_callbacks'];
    }

    /**
     * Sets total_callbacks
     *
     * @param int $total_callbacks Total number of callbacks
     *
     * @return $this
     */
    public function setTotalCallbacks($total_callbacks)
    {
        $this->container['total_callbacks'] = $total_callbacks;

        return $this;
    }

    /**
     * Gets total_calls
     *
     * @return int
     */
    public function getTotalCalls()
    {
        return $this->container['total_calls'];
    }

    /**
     * Sets total_calls
     *
     * @param int $total_calls Total calls on call list
     *
     * @return $this
     */
    public function setTotalCalls($total_calls)
    {
        $this->container['total_calls'] = $total_calls;

        return $this;
    }

    /**
     * Gets calls
     *
     * @return \Advantage\Client\Model\Call[]
     */
    public function getCalls()
    {
        return $this->container['calls'];
    }

    /**
     * Sets calls
     *
     * @param \Advantage\Client\Model\Call[] $calls The calls included on the call list
     *
     * @return $this
     */
    public function setCalls($calls)
    {
        $this->container['calls'] = $calls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


