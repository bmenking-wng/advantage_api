<?php
/**
 * SubscriptionLineDefaults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * SubscriptionLineDefaults Class Doc Comment
 *
 * @category Class
 * @description Default values for subscription order lines
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionLineDefaults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionLineDefaults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'membership_organization' => 'string',
        'membership_category' => 'string',
        'delivery_code' => 'string',
        'term_length' => 'int',
        'renewal_policy_code' => 'string',
        'email' => '\Advantage\Client\Model\SubscriptionEmail',
        'active_non_member_subscriptions' => '\Advantage\Client\Model\NonMemberSubscription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'membership_organization' => null,
        'membership_category' => null,
        'delivery_code' => null,
        'term_length' => 'int32',
        'renewal_policy_code' => null,
        'email' => null,
        'active_non_member_subscriptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'membership_organization' => 'MembershipOrganization',
        'membership_category' => 'MembershipCategory',
        'delivery_code' => 'DeliveryCode',
        'term_length' => 'TermLength',
        'renewal_policy_code' => 'RenewalPolicyCode',
        'email' => 'Email',
        'active_non_member_subscriptions' => 'ActiveNonMemberSubscriptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'membership_organization' => 'setMembershipOrganization',
        'membership_category' => 'setMembershipCategory',
        'delivery_code' => 'setDeliveryCode',
        'term_length' => 'setTermLength',
        'renewal_policy_code' => 'setRenewalPolicyCode',
        'email' => 'setEmail',
        'active_non_member_subscriptions' => 'setActiveNonMemberSubscriptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'membership_organization' => 'getMembershipOrganization',
        'membership_category' => 'getMembershipCategory',
        'delivery_code' => 'getDeliveryCode',
        'term_length' => 'getTermLength',
        'renewal_policy_code' => 'getRenewalPolicyCode',
        'email' => 'getEmail',
        'active_non_member_subscriptions' => 'getActiveNonMemberSubscriptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['membership_organization'] = isset($data['membership_organization']) ? $data['membership_organization'] : null;
        $this->container['membership_category'] = isset($data['membership_category']) ? $data['membership_category'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['term_length'] = isset($data['term_length']) ? $data['term_length'] : null;
        $this->container['renewal_policy_code'] = isset($data['renewal_policy_code']) ? $data['renewal_policy_code'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['active_non_member_subscriptions'] = isset($data['active_non_member_subscriptions']) ? $data['active_non_member_subscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets membership_organization
     *
     * @return string
     */
    public function getMembershipOrganization()
    {
        return $this->container['membership_organization'];
    }

    /**
     * Sets membership_organization
     *
     * @param string $membership_organization Membership organization
     *
     * @return $this
     */
    public function setMembershipOrganization($membership_organization)
    {
        $this->container['membership_organization'] = $membership_organization;

        return $this;
    }

    /**
     * Gets membership_category
     *
     * @return string
     */
    public function getMembershipCategory()
    {
        return $this->container['membership_category'];
    }

    /**
     * Sets membership_category
     *
     * @param string $membership_category Membership category
     *
     * @return $this
     */
    public function setMembershipCategory($membership_category)
    {
        $this->container['membership_category'] = $membership_category;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code Delivery code
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets term_length
     *
     * @return int
     */
    public function getTermLength()
    {
        return $this->container['term_length'];
    }

    /**
     * Sets term_length
     *
     * @param int $term_length The subscription term (the number of issues).
     *
     * @return $this
     */
    public function setTermLength($term_length)
    {
        $this->container['term_length'] = $term_length;

        return $this;
    }

    /**
     * Gets renewal_policy_code
     *
     * @return string
     */
    public function getRenewalPolicyCode()
    {
        return $this->container['renewal_policy_code'];
    }

    /**
     * Sets renewal_policy_code
     *
     * @param string $renewal_policy_code Indicates whether a renewal notice should be sent to the subscriber.
     *
     * @return $this
     */
    public function setRenewalPolicyCode($renewal_policy_code)
    {
        $this->container['renewal_policy_code'] = $renewal_policy_code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Advantage\Client\Model\SubscriptionEmail
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Advantage\Client\Model\SubscriptionEmail $email Default subscription email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets active_non_member_subscriptions
     *
     * @return \Advantage\Client\Model\NonMemberSubscription[]
     */
    public function getActiveNonMemberSubscriptions()
    {
        return $this->container['active_non_member_subscriptions'];
    }

    /**
     * Sets active_non_member_subscriptions
     *
     * @param \Advantage\Client\Model\NonMemberSubscription[] $active_non_member_subscriptions List of active non-member subscriptions that overlap with baby pubs for this order line
     *
     * @return $this
     */
    public function setActiveNonMemberSubscriptions($active_non_member_subscriptions)
    {
        $this->container['active_non_member_subscriptions'] = $active_non_member_subscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


