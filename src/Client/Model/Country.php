<?php
/**
 * Country
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * Country Class Doc Comment
 *
 * @category Class
 * @description Information related to a country.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Country implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Country';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'postal_code_mask' => 'string',
        'iso_alpha2' => 'string',
        'iso_alpha3' => 'string',
        'region_code' => 'string',
        'iso_numeric' => 'int',
        'states' => '\Advantage\Client\Model\State[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'postal_code_mask' => null,
        'iso_alpha2' => null,
        'iso_alpha3' => null,
        'region_code' => null,
        'iso_numeric' => 'int32',
        'states' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'postal_code_mask' => 'PostalCodeMask',
        'iso_alpha2' => 'IsoAlpha2',
        'iso_alpha3' => 'IsoAlpha3',
        'region_code' => 'RegionCode',
        'iso_numeric' => 'IsoNumeric',
        'states' => 'States'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'postal_code_mask' => 'setPostalCodeMask',
        'iso_alpha2' => 'setIsoAlpha2',
        'iso_alpha3' => 'setIsoAlpha3',
        'region_code' => 'setRegionCode',
        'iso_numeric' => 'setIsoNumeric',
        'states' => 'setStates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'postal_code_mask' => 'getPostalCodeMask',
        'iso_alpha2' => 'getIsoAlpha2',
        'iso_alpha3' => 'getIsoAlpha3',
        'region_code' => 'getRegionCode',
        'iso_numeric' => 'getIsoNumeric',
        'states' => 'getStates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['postal_code_mask'] = isset($data['postal_code_mask']) ? $data['postal_code_mask'] : null;
        $this->container['iso_alpha2'] = isset($data['iso_alpha2']) ? $data['iso_alpha2'] : null;
        $this->container['iso_alpha3'] = isset($data['iso_alpha3']) ? $data['iso_alpha3'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
        $this->container['iso_numeric'] = isset($data['iso_numeric']) ? $data['iso_numeric'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code A unique code identifying the country.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the country.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets postal_code_mask
     *
     * @return string
     */
    public function getPostalCodeMask()
    {
        return $this->container['postal_code_mask'];
    }

    /**
     * Sets postal_code_mask
     *
     * @param string $postal_code_mask The mask used to validate the postal code. A = alphanumeric, 9 = numeric, X = optional alphanumeric, 1 = optional numeric.
     *
     * @return $this
     */
    public function setPostalCodeMask($postal_code_mask)
    {
        $this->container['postal_code_mask'] = $postal_code_mask;

        return $this;
    }

    /**
     * Gets iso_alpha2
     *
     * @return string
     */
    public function getIsoAlpha2()
    {
        return $this->container['iso_alpha2'];
    }

    /**
     * Sets iso_alpha2
     *
     * @param string $iso_alpha2 The 2-character alphabetic symbol for the country, following the ISO standard.
     *
     * @return $this
     */
    public function setIsoAlpha2($iso_alpha2)
    {
        $this->container['iso_alpha2'] = $iso_alpha2;

        return $this;
    }

    /**
     * Gets iso_alpha3
     *
     * @return string
     */
    public function getIsoAlpha3()
    {
        return $this->container['iso_alpha3'];
    }

    /**
     * Sets iso_alpha3
     *
     * @param string $iso_alpha3 The 3-character alphabetic symbol for the country, following the ISO standard.
     *
     * @return $this
     */
    public function setIsoAlpha3($iso_alpha3)
    {
        $this->container['iso_alpha3'] = $iso_alpha3;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string $region_code The identifier for the region of this country.
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets iso_numeric
     *
     * @return int
     */
    public function getIsoNumeric()
    {
        return $this->container['iso_numeric'];
    }

    /**
     * Sets iso_numeric
     *
     * @param int $iso_numeric The numeric symbol for the country, following the ISO standard.
     *
     * @return $this
     */
    public function setIsoNumeric($iso_numeric)
    {
        $this->container['iso_numeric'] = $iso_numeric;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \Advantage\Client\Model\State[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Advantage\Client\Model\State[] $states The states that are part of the country.
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


