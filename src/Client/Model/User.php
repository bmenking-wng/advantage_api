<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description Information for an Advantage user authentication record.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authentication_number' => 'string',
        'authentication_group_code' => 'string',
        'user_name' => 'string',
        'display_name' => 'string',
        'name' => '\Advantage\Client\Model\CustomerName',
        'customer_number' => 'string',
        'primary_email' => 'string',
        'last_login_utc' => '\DateTime',
        'is_locked_out' => 'bool',
        'is_enabled' => 'bool',
        'password_hint' => 'string',
        'password_change_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authentication_number' => null,
        'authentication_group_code' => null,
        'user_name' => null,
        'display_name' => null,
        'name' => null,
        'customer_number' => null,
        'primary_email' => null,
        'last_login_utc' => 'date-time',
        'is_locked_out' => null,
        'is_enabled' => null,
        'password_hint' => null,
        'password_change_required' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_number' => 'AuthenticationNumber',
        'authentication_group_code' => 'AuthenticationGroupCode',
        'user_name' => 'UserName',
        'display_name' => 'DisplayName',
        'name' => 'Name',
        'customer_number' => 'CustomerNumber',
        'primary_email' => 'PrimaryEmail',
        'last_login_utc' => 'LastLoginUtc',
        'is_locked_out' => 'IsLockedOut',
        'is_enabled' => 'IsEnabled',
        'password_hint' => 'PasswordHint',
        'password_change_required' => 'PasswordChangeRequired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_number' => 'setAuthenticationNumber',
        'authentication_group_code' => 'setAuthenticationGroupCode',
        'user_name' => 'setUserName',
        'display_name' => 'setDisplayName',
        'name' => 'setName',
        'customer_number' => 'setCustomerNumber',
        'primary_email' => 'setPrimaryEmail',
        'last_login_utc' => 'setLastLoginUtc',
        'is_locked_out' => 'setIsLockedOut',
        'is_enabled' => 'setIsEnabled',
        'password_hint' => 'setPasswordHint',
        'password_change_required' => 'setPasswordChangeRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_number' => 'getAuthenticationNumber',
        'authentication_group_code' => 'getAuthenticationGroupCode',
        'user_name' => 'getUserName',
        'display_name' => 'getDisplayName',
        'name' => 'getName',
        'customer_number' => 'getCustomerNumber',
        'primary_email' => 'getPrimaryEmail',
        'last_login_utc' => 'getLastLoginUtc',
        'is_locked_out' => 'getIsLockedOut',
        'is_enabled' => 'getIsEnabled',
        'password_hint' => 'getPasswordHint',
        'password_change_required' => 'getPasswordChangeRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authentication_number'] = isset($data['authentication_number']) ? $data['authentication_number'] : null;
        $this->container['authentication_group_code'] = isset($data['authentication_group_code']) ? $data['authentication_group_code'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['primary_email'] = isset($data['primary_email']) ? $data['primary_email'] : null;
        $this->container['last_login_utc'] = isset($data['last_login_utc']) ? $data['last_login_utc'] : null;
        $this->container['is_locked_out'] = isset($data['is_locked_out']) ? $data['is_locked_out'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['password_hint'] = isset($data['password_hint']) ? $data['password_hint'] : null;
        $this->container['password_change_required'] = isset($data['password_change_required']) ? $data['password_change_required'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_number
     *
     * @return string
     */
    public function getAuthenticationNumber()
    {
        return $this->container['authentication_number'];
    }

    /**
     * Sets authentication_number
     *
     * @param string $authentication_number The unique number for the customer authentication method.
     *
     * @return $this
     */
    public function setAuthenticationNumber($authentication_number)
    {
        $this->container['authentication_number'] = $authentication_number;

        return $this;
    }

    /**
     * Gets authentication_group_code
     *
     * @return string
     */
    public function getAuthenticationGroupCode()
    {
        return $this->container['authentication_group_code'];
    }

    /**
     * Sets authentication_group_code
     *
     * @param string $authentication_group_code The authentication group the web user belongs to.
     *
     * @return $this
     */
    public function setAuthenticationGroupCode($authentication_group_code)
    {
        $this->container['authentication_group_code'] = $authentication_group_code;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name The web user's username.
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Full display name of the web user.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Advantage\Client\Model\CustomerName
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Advantage\Client\Model\CustomerName $name The web user's customer name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The web user's Advantage customer number.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets primary_email
     *
     * @return string
     */
    public function getPrimaryEmail()
    {
        return $this->container['primary_email'];
    }

    /**
     * Sets primary_email
     *
     * @param string $primary_email The web user's primary email address.
     *
     * @return $this
     */
    public function setPrimaryEmail($primary_email)
    {
        $this->container['primary_email'] = $primary_email;

        return $this;
    }

    /**
     * Gets last_login_utc
     *
     * @return \DateTime
     */
    public function getLastLoginUtc()
    {
        return $this->container['last_login_utc'];
    }

    /**
     * Sets last_login_utc
     *
     * @param \DateTime $last_login_utc The web user's date of last log in.
     *
     * @return $this
     */
    public function setLastLoginUtc($last_login_utc)
    {
        $this->container['last_login_utc'] = $last_login_utc;

        return $this;
    }

    /**
     * Gets is_locked_out
     *
     * @return bool
     */
    public function getIsLockedOut()
    {
        return $this->container['is_locked_out'];
    }

    /**
     * Sets is_locked_out
     *
     * @param bool $is_locked_out Is the user locked out of the account?
     *
     * @return $this
     */
    public function setIsLockedOut($is_locked_out)
    {
        $this->container['is_locked_out'] = $is_locked_out;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled Is the user account enabled?
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets password_hint
     *
     * @return string
     */
    public function getPasswordHint()
    {
        return $this->container['password_hint'];
    }

    /**
     * Sets password_hint
     *
     * @param string $password_hint A password hint to can provided by a customer to help them remember their password
     *
     * @return $this
     */
    public function setPasswordHint($password_hint)
    {
        $this->container['password_hint'] = $password_hint;

        return $this;
    }

    /**
     * Gets password_change_required
     *
     * @return bool
     */
    public function getPasswordChangeRequired()
    {
        return $this->container['password_change_required'];
    }

    /**
     * Sets password_change_required
     *
     * @param bool $password_change_required A password change can be required which will redirect the user to the screen to reset password.
     *
     * @return $this
     */
    public function setPasswordChangeRequired($password_change_required)
    {
        $this->container['password_change_required'] = $password_change_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


