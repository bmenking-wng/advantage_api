<?php
/**
 * ProductUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ProductUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description Information for an Advantage product.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'product_family' => 'string',
        'product_category_code' => 'string',
        'publication_date' => '\DateTime',
        'narratives' => '\Advantage\Client\Model\Narrative[]',
        'product_details' => '\Advantage\Client\Model\OneOffProductUpdateRequest',
        'subscription_details' => '\Advantage\Client\Model\SubscriptionProductUpdateRequest',
        'access_details' => '\Advantage\Client\Model\AccessProductUpdateRequest',
        'conference_details' => '\Advantage\Client\Model\ConferenceProductUpdateRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'product_family' => null,
        'product_category_code' => null,
        'publication_date' => 'date-time',
        'narratives' => null,
        'product_details' => null,
        'subscription_details' => null,
        'access_details' => null,
        'conference_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'product_family' => 'ProductFamily',
        'product_category_code' => 'ProductCategoryCode',
        'publication_date' => 'PublicationDate',
        'narratives' => 'Narratives',
        'product_details' => 'ProductDetails',
        'subscription_details' => 'SubscriptionDetails',
        'access_details' => 'AccessDetails',
        'conference_details' => 'ConferenceDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'product_family' => 'setProductFamily',
        'product_category_code' => 'setProductCategoryCode',
        'publication_date' => 'setPublicationDate',
        'narratives' => 'setNarratives',
        'product_details' => 'setProductDetails',
        'subscription_details' => 'setSubscriptionDetails',
        'access_details' => 'setAccessDetails',
        'conference_details' => 'setConferenceDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'product_family' => 'getProductFamily',
        'product_category_code' => 'getProductCategoryCode',
        'publication_date' => 'getPublicationDate',
        'narratives' => 'getNarratives',
        'product_details' => 'getProductDetails',
        'subscription_details' => 'getSubscriptionDetails',
        'access_details' => 'getAccessDetails',
        'conference_details' => 'getConferenceDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['product_family'] = isset($data['product_family']) ? $data['product_family'] : null;
        $this->container['product_category_code'] = isset($data['product_category_code']) ? $data['product_category_code'] : null;
        $this->container['publication_date'] = isset($data['publication_date']) ? $data['publication_date'] : null;
        $this->container['narratives'] = isset($data['narratives']) ? $data['narratives'] : null;
        $this->container['product_details'] = isset($data['product_details']) ? $data['product_details'] : null;
        $this->container['subscription_details'] = isset($data['subscription_details']) ? $data['subscription_details'] : null;
        $this->container['access_details'] = isset($data['access_details']) ? $data['access_details'] : null;
        $this->container['conference_details'] = isset($data['conference_details']) ? $data['conference_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the product.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_family
     *
     * @return string
     */
    public function getProductFamily()
    {
        return $this->container['product_family'];
    }

    /**
     * Sets product_family
     *
     * @param string $product_family The product family of the product.
     *
     * @return $this
     */
    public function setProductFamily($product_family)
    {
        $this->container['product_family'] = $product_family;

        return $this;
    }

    /**
     * Gets product_category_code
     *
     * @return string
     */
    public function getProductCategoryCode()
    {
        return $this->container['product_category_code'];
    }

    /**
     * Sets product_category_code
     *
     * @param string $product_category_code The product category of the product.
     *
     * @return $this
     */
    public function setProductCategoryCode($product_category_code)
    {
        $this->container['product_category_code'] = $product_category_code;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return \DateTime
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param \DateTime $publication_date The product's publication date.
     *
     * @return $this
     */
    public function setPublicationDate($publication_date)
    {
        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets narratives
     *
     * @return \Advantage\Client\Model\Narrative[]
     */
    public function getNarratives()
    {
        return $this->container['narratives'];
    }

    /**
     * Sets narratives
     *
     * @param \Advantage\Client\Model\Narrative[] $narratives The narratives for the product.
     *
     * @return $this
     */
    public function setNarratives($narratives)
    {
        $this->container['narratives'] = $narratives;

        return $this;
    }

    /**
     * Gets product_details
     *
     * @return \Advantage\Client\Model\OneOffProductUpdateRequest
     */
    public function getProductDetails()
    {
        return $this->container['product_details'];
    }

    /**
     * Sets product_details
     *
     * @param \Advantage\Client\Model\OneOffProductUpdateRequest $product_details Information specific to a one-off product.
     *
     * @return $this
     */
    public function setProductDetails($product_details)
    {
        $this->container['product_details'] = $product_details;

        return $this;
    }

    /**
     * Gets subscription_details
     *
     * @return \Advantage\Client\Model\SubscriptionProductUpdateRequest
     */
    public function getSubscriptionDetails()
    {
        return $this->container['subscription_details'];
    }

    /**
     * Sets subscription_details
     *
     * @param \Advantage\Client\Model\SubscriptionProductUpdateRequest $subscription_details Information specific to a subscription product. Null if the product is not a subscription.
     *
     * @return $this
     */
    public function setSubscriptionDetails($subscription_details)
    {
        $this->container['subscription_details'] = $subscription_details;

        return $this;
    }

    /**
     * Gets access_details
     *
     * @return \Advantage\Client\Model\AccessProductUpdateRequest
     */
    public function getAccessDetails()
    {
        return $this->container['access_details'];
    }

    /**
     * Sets access_details
     *
     * @param \Advantage\Client\Model\AccessProductUpdateRequest $access_details Information specific to an access product. Null if the product is not a access product.
     *
     * @return $this
     */
    public function setAccessDetails($access_details)
    {
        $this->container['access_details'] = $access_details;

        return $this;
    }

    /**
     * Gets conference_details
     *
     * @return \Advantage\Client\Model\ConferenceProductUpdateRequest
     */
    public function getConferenceDetails()
    {
        return $this->container['conference_details'];
    }

    /**
     * Sets conference_details
     *
     * @param \Advantage\Client\Model\ConferenceProductUpdateRequest $conference_details Information specific to a conference product. Null if the product is not a conference product.
     *
     * @return $this
     */
    public function setConferenceDetails($conference_details)
    {
        $this->container['conference_details'] = $conference_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


