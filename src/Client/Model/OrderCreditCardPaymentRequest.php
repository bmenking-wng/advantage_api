<?php
/**
 * OrderCreditCardPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * OrderCreditCardPaymentRequest Class Doc Comment
 *
 * @category Class
 * @description Information about a payment made toward an order from a credit card payment method.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCreditCardPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCreditCardPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_number' => 'string',
        'payment_method_code' => 'string',
        'card_vault_token' => 'string',
        'token' => 'string',
        'card_number_or_mask' => 'string',
        'expire_month' => 'int',
        'expire_year' => 'int',
        'amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_number' => null,
        'payment_method_code' => null,
        'card_vault_token' => null,
        'token' => null,
        'card_number_or_mask' => null,
        'expire_month' => 'int32',
        'expire_year' => 'int32',
        'amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_number' => 'CustomerNumber',
        'payment_method_code' => 'PaymentMethodCode',
        'card_vault_token' => 'CardVaultToken',
        'token' => 'Token',
        'card_number_or_mask' => 'CardNumberOrMask',
        'expire_month' => 'ExpireMonth',
        'expire_year' => 'ExpireYear',
        'amount' => 'Amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_number' => 'setCustomerNumber',
        'payment_method_code' => 'setPaymentMethodCode',
        'card_vault_token' => 'setCardVaultToken',
        'token' => 'setToken',
        'card_number_or_mask' => 'setCardNumberOrMask',
        'expire_month' => 'setExpireMonth',
        'expire_year' => 'setExpireYear',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_number' => 'getCustomerNumber',
        'payment_method_code' => 'getPaymentMethodCode',
        'card_vault_token' => 'getCardVaultToken',
        'token' => 'getToken',
        'card_number_or_mask' => 'getCardNumberOrMask',
        'expire_month' => 'getExpireMonth',
        'expire_year' => 'getExpireYear',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['payment_method_code'] = isset($data['payment_method_code']) ? $data['payment_method_code'] : null;
        $this->container['card_vault_token'] = isset($data['card_vault_token']) ? $data['card_vault_token'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['card_number_or_mask'] = isset($data['card_number_or_mask']) ? $data['card_number_or_mask'] : null;
        $this->container['expire_month'] = isset($data['expire_month']) ? $data['expire_month'] : null;
        $this->container['expire_year'] = isset($data['expire_year']) ? $data['expire_year'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number The Advantage customer number of the customer providing the payment.
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets payment_method_code
     *
     * @return string
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     *
     * @param string $payment_method_code The credit card type (e.g., VISA)
     *
     * @return $this
     */
    public function setPaymentMethodCode($payment_method_code)
    {
        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets card_vault_token
     *
     * @return string
     */
    public function getCardVaultToken()
    {
        return $this->container['card_vault_token'];
    }

    /**
     * Sets card_vault_token
     *
     * @param string $card_vault_token The Card Vault token (for tokens, the card mask must also be supplied).
     *
     * @return $this
     */
    public function setCardVaultToken($card_vault_token)
    {
        $this->container['card_vault_token'] = $card_vault_token;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The card token (for tokens, the card mask must also be supplied).
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets card_number_or_mask
     *
     * @return string
     */
    public function getCardNumberOrMask()
    {
        return $this->container['card_number_or_mask'];
    }

    /**
     * Sets card_number_or_mask
     *
     * @param string $card_number_or_mask The card number, or mask, if supplying token.
     *
     * @return $this
     */
    public function setCardNumberOrMask($card_number_or_mask)
    {
        $this->container['card_number_or_mask'] = $card_number_or_mask;

        return $this;
    }

    /**
     * Gets expire_month
     *
     * @return int
     */
    public function getExpireMonth()
    {
        return $this->container['expire_month'];
    }

    /**
     * Sets expire_month
     *
     * @param int $expire_month The card expiration month (MM)
     *
     * @return $this
     */
    public function setExpireMonth($expire_month)
    {
        $this->container['expire_month'] = $expire_month;

        return $this;
    }

    /**
     * Gets expire_year
     *
     * @return int
     */
    public function getExpireYear()
    {
        return $this->container['expire_year'];
    }

    /**
     * Sets expire_year
     *
     * @param int $expire_year The card expiration year (CCYY)
     *
     * @return $this
     */
    public function setExpireYear($expire_year)
    {
        $this->container['expire_year'] = $expire_year;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount to pay on the order
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


