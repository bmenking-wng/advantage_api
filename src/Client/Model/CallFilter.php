<?php
/**
 * CallFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * CallFilter Class Doc Comment
 *
 * @category Class
 * @description Filter criteria for callbacks search
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list_id' => 'string',
        'list_date' => '\DateTime',
        'include_completed' => 'bool',
        'include_contacted' => 'bool',
        'include_callbacks' => 'bool',
        'include_uncontacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list_id' => null,
        'list_date' => 'date-time',
        'include_completed' => null,
        'include_contacted' => null,
        'include_callbacks' => null,
        'include_uncontacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_id' => 'ListId',
        'list_date' => 'ListDate',
        'include_completed' => 'IncludeCompleted',
        'include_contacted' => 'IncludeContacted',
        'include_callbacks' => 'IncludeCallbacks',
        'include_uncontacted' => 'IncludeUncontacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_id' => 'setListId',
        'list_date' => 'setListDate',
        'include_completed' => 'setIncludeCompleted',
        'include_contacted' => 'setIncludeContacted',
        'include_callbacks' => 'setIncludeCallbacks',
        'include_uncontacted' => 'setIncludeUncontacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_id' => 'getListId',
        'list_date' => 'getListDate',
        'include_completed' => 'getIncludeCompleted',
        'include_contacted' => 'getIncludeContacted',
        'include_callbacks' => 'getIncludeCallbacks',
        'include_uncontacted' => 'getIncludeUncontacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list_id'] = isset($data['list_id']) ? $data['list_id'] : null;
        $this->container['list_date'] = isset($data['list_date']) ? $data['list_date'] : null;
        $this->container['include_completed'] = isset($data['include_completed']) ? $data['include_completed'] : null;
        $this->container['include_contacted'] = isset($data['include_contacted']) ? $data['include_contacted'] : null;
        $this->container['include_callbacks'] = isset($data['include_callbacks']) ? $data['include_callbacks'] : null;
        $this->container['include_uncontacted'] = isset($data['include_uncontacted']) ? $data['include_uncontacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_id
     *
     * @return string
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param string $list_id The List Id of the list to filter results by
     *
     * @return $this
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets list_date
     *
     * @return \DateTime
     */
    public function getListDate()
    {
        return $this->container['list_date'];
    }

    /**
     * Sets list_date
     *
     * @param \DateTime $list_date The date associated with the call list
     *
     * @return $this
     */
    public function setListDate($list_date)
    {
        $this->container['list_date'] = $list_date;

        return $this;
    }

    /**
     * Gets include_completed
     *
     * @return bool
     */
    public function getIncludeCompleted()
    {
        return $this->container['include_completed'];
    }

    /**
     * Sets include_completed
     *
     * @param bool $include_completed True to include calls that have been completed
     *
     * @return $this
     */
    public function setIncludeCompleted($include_completed)
    {
        $this->container['include_completed'] = $include_completed;

        return $this;
    }

    /**
     * Gets include_contacted
     *
     * @return bool
     */
    public function getIncludeContacted()
    {
        return $this->container['include_contacted'];
    }

    /**
     * Sets include_contacted
     *
     * @param bool $include_contacted True to include calls where the customer has been contacted
     *
     * @return $this
     */
    public function setIncludeContacted($include_contacted)
    {
        $this->container['include_contacted'] = $include_contacted;

        return $this;
    }

    /**
     * Gets include_callbacks
     *
     * @return bool
     */
    public function getIncludeCallbacks()
    {
        return $this->container['include_callbacks'];
    }

    /**
     * Sets include_callbacks
     *
     * @param bool $include_callbacks True to include calls callbacks
     *
     * @return $this
     */
    public function setIncludeCallbacks($include_callbacks)
    {
        $this->container['include_callbacks'] = $include_callbacks;

        return $this;
    }

    /**
     * Gets include_uncontacted
     *
     * @return bool
     */
    public function getIncludeUncontacted()
    {
        return $this->container['include_uncontacted'];
    }

    /**
     * Sets include_uncontacted
     *
     * @param bool $include_uncontacted True to include calls that have been made
     *
     * @return $this
     */
    public function setIncludeUncontacted($include_uncontacted)
    {
        $this->container['include_uncontacted'] = $include_uncontacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


