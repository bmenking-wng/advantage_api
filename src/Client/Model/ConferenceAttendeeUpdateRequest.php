<?php
/**
 * ConferenceAttendeeUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * ConferenceAttendeeUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description Contains all of the information about a conference attendee&#39;s registration
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceAttendeeUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConferenceAttendeeUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'badge_name' => 'string',
        'attendee_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'badge_name' => null,
        'attendee_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'badge_name' => 'BadgeName',
        'attendee_type' => 'AttendeeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'badge_name' => 'setBadgeName',
        'attendee_type' => 'setAttendeeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'badge_name' => 'getBadgeName',
        'attendee_type' => 'getAttendeeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ATTENDEE_TYPE_ATTENDEE = 'Attendee';
    const ATTENDEE_TYPE_EXHIBITOR = 'Exhibitor';
    const ATTENDEE_TYPE_PRESENTER = 'Presenter';
    const ATTENDEE_TYPE_STAFF = 'Staff';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttendeeTypeAllowableValues()
    {
        return [
            self::ATTENDEE_TYPE_ATTENDEE,
            self::ATTENDEE_TYPE_EXHIBITOR,
            self::ATTENDEE_TYPE_PRESENTER,
            self::ATTENDEE_TYPE_STAFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['badge_name'] = isset($data['badge_name']) ? $data['badge_name'] : null;
        $this->container['attendee_type'] = isset($data['attendee_type']) ? $data['attendee_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAttendeeTypeAllowableValues();
        if (!is_null($this->container['attendee_type']) && !in_array($this->container['attendee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'attendee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets badge_name
     *
     * @return string
     */
    public function getBadgeName()
    {
        return $this->container['badge_name'];
    }

    /**
     * Sets badge_name
     *
     * @param string $badge_name The conference attendee registration (badge) name
     *
     * @return $this
     */
    public function setBadgeName($badge_name)
    {
        $this->container['badge_name'] = $badge_name;

        return $this;
    }

    /**
     * Gets attendee_type
     *
     * @return string
     */
    public function getAttendeeType()
    {
        return $this->container['attendee_type'];
    }

    /**
     * Sets attendee_type
     *
     * @param string $attendee_type Conference attendee registration type
     *
     * @return $this
     */
    public function setAttendeeType($attendee_type)
    {
        $allowedValues = $this->getAttendeeTypeAllowableValues();
        if (!is_null($attendee_type) && !in_array($attendee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'attendee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attendee_type'] = $attendee_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


