<?php
/**
 * AssociationDiscountBenefit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * AssociationDiscountBenefit Class Doc Comment
 *
 * @category Class
 * @description Information for an association product family discount.
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssociationDiscountBenefit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssociationDiscountBenefit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'product_category_code' => 'string',
        'discount_percent' => 'double',
        'discount_combination_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'name' => null,
        'description' => null,
        'product_category_code' => null,
        'discount_percent' => 'double',
        'discount_combination_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'description' => 'Description',
        'product_category_code' => 'ProductCategoryCode',
        'discount_percent' => 'DiscountPercent',
        'discount_combination_code' => 'DiscountCombinationCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'product_category_code' => 'setProductCategoryCode',
        'discount_percent' => 'setDiscountPercent',
        'discount_combination_code' => 'setDiscountCombinationCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'product_category_code' => 'getProductCategoryCode',
        'discount_percent' => 'getDiscountPercent',
        'discount_combination_code' => 'getDiscountCombinationCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISCOUNT_COMBINATION_CODE_COMPOUND = 'Compound';
    const DISCOUNT_COMBINATION_CODE_ADD = 'Add';
    const DISCOUNT_COMBINATION_CODE_USE_SMALLER = 'UseSmaller';
    const DISCOUNT_COMBINATION_CODE_USE_GREATER = 'UseGreater';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST = 'UseFirst';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND = 'UseSecond';
    const DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT = 'UseFirstOrDefault';
    const DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT = 'UseSecondOrDefault';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountCombinationCodeAllowableValues()
    {
        return [
            self::DISCOUNT_COMBINATION_CODE_COMPOUND,
            self::DISCOUNT_COMBINATION_CODE_ADD,
            self::DISCOUNT_COMBINATION_CODE_USE_SMALLER,
            self::DISCOUNT_COMBINATION_CODE_USE_GREATER,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND,
            self::DISCOUNT_COMBINATION_CODE_USE_FIRST_OR_DEFAULT,
            self::DISCOUNT_COMBINATION_CODE_USE_SECOND_OR_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['product_category_code'] = isset($data['product_category_code']) ? $data['product_category_code'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_combination_code'] = isset($data['discount_combination_code']) ? $data['discount_combination_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($this->container['discount_combination_code']) && !in_array($this->container['discount_combination_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'discount_combination_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Partner family discount code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of product family discount
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the product family discount.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_category_code
     *
     * @return string
     */
    public function getProductCategoryCode()
    {
        return $this->container['product_category_code'];
    }

    /**
     * Sets product_category_code
     *
     * @param string $product_category_code The product category that this discount applies to.
     *
     * @return $this
     */
    public function setProductCategoryCode($product_category_code)
    {
        $this->container['product_category_code'] = $product_category_code;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent The discount percentage
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_combination_code
     *
     * @return string
     */
    public function getDiscountCombinationCode()
    {
        return $this->container['discount_combination_code'];
    }

    /**
     * Sets discount_combination_code
     *
     * @param string $discount_combination_code The discount combination code, indicating how this discount is combined with other discounts.
     *
     * @return $this
     */
    public function setDiscountCombinationCode($discount_combination_code)
    {
        $allowedValues = $this->getDiscountCombinationCodeAllowableValues();
        if (!is_null($discount_combination_code) && !in_array($discount_combination_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'discount_combination_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_combination_code'] = $discount_combination_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


