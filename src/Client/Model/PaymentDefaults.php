<?php
/**
 * PaymentDefaults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Model;

use \ArrayAccess;
use \Advantage\Client\ObjectSerializer;

/**
 * PaymentDefaults Class Doc Comment
 *
 * @category Class
 * @description Defaults for entering a payment for an order
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentDefaults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentDefaults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_checks' => 'bool',
        'accept_credit_cards' => 'bool',
        'valid_credit_card_payment_methods' => '\Advantage\Client\Model\CreditCardPaymentMethod[]',
        'accept_direct_debits' => 'bool',
        'valid_direct_debit_payment_methods' => '\Advantage\Client\Model\DirectDebitPaymentMethod[]',
        'accept_digital_wallets' => 'bool',
        'valid_digital_wallet_payment_methods' => '\Advantage\Client\Model\DigitalWalletPaymentMethod[]',
        'accept_gift_certificates' => 'bool',
        'accept_miscellaneous_credits' => 'bool',
        'accept_available_credits' => 'bool',
        'available_credits' => '\Advantage\Client\Model\Credit[]',
        'installment_billing_code' => 'string',
        'saved_payments' => '\Advantage\Client\Model\SavedPayment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_checks' => null,
        'accept_credit_cards' => null,
        'valid_credit_card_payment_methods' => null,
        'accept_direct_debits' => null,
        'valid_direct_debit_payment_methods' => null,
        'accept_digital_wallets' => null,
        'valid_digital_wallet_payment_methods' => null,
        'accept_gift_certificates' => null,
        'accept_miscellaneous_credits' => null,
        'accept_available_credits' => null,
        'available_credits' => null,
        'installment_billing_code' => null,
        'saved_payments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_checks' => 'AcceptChecks',
        'accept_credit_cards' => 'AcceptCreditCards',
        'valid_credit_card_payment_methods' => 'ValidCreditCardPaymentMethods',
        'accept_direct_debits' => 'AcceptDirectDebits',
        'valid_direct_debit_payment_methods' => 'ValidDirectDebitPaymentMethods',
        'accept_digital_wallets' => 'AcceptDigitalWallets',
        'valid_digital_wallet_payment_methods' => 'ValidDigitalWalletPaymentMethods',
        'accept_gift_certificates' => 'AcceptGiftCertificates',
        'accept_miscellaneous_credits' => 'AcceptMiscellaneousCredits',
        'accept_available_credits' => 'AcceptAvailableCredits',
        'available_credits' => 'AvailableCredits',
        'installment_billing_code' => 'InstallmentBillingCode',
        'saved_payments' => 'SavedPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_checks' => 'setAcceptChecks',
        'accept_credit_cards' => 'setAcceptCreditCards',
        'valid_credit_card_payment_methods' => 'setValidCreditCardPaymentMethods',
        'accept_direct_debits' => 'setAcceptDirectDebits',
        'valid_direct_debit_payment_methods' => 'setValidDirectDebitPaymentMethods',
        'accept_digital_wallets' => 'setAcceptDigitalWallets',
        'valid_digital_wallet_payment_methods' => 'setValidDigitalWalletPaymentMethods',
        'accept_gift_certificates' => 'setAcceptGiftCertificates',
        'accept_miscellaneous_credits' => 'setAcceptMiscellaneousCredits',
        'accept_available_credits' => 'setAcceptAvailableCredits',
        'available_credits' => 'setAvailableCredits',
        'installment_billing_code' => 'setInstallmentBillingCode',
        'saved_payments' => 'setSavedPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_checks' => 'getAcceptChecks',
        'accept_credit_cards' => 'getAcceptCreditCards',
        'valid_credit_card_payment_methods' => 'getValidCreditCardPaymentMethods',
        'accept_direct_debits' => 'getAcceptDirectDebits',
        'valid_direct_debit_payment_methods' => 'getValidDirectDebitPaymentMethods',
        'accept_digital_wallets' => 'getAcceptDigitalWallets',
        'valid_digital_wallet_payment_methods' => 'getValidDigitalWalletPaymentMethods',
        'accept_gift_certificates' => 'getAcceptGiftCertificates',
        'accept_miscellaneous_credits' => 'getAcceptMiscellaneousCredits',
        'accept_available_credits' => 'getAcceptAvailableCredits',
        'available_credits' => 'getAvailableCredits',
        'installment_billing_code' => 'getInstallmentBillingCode',
        'saved_payments' => 'getSavedPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_checks'] = isset($data['accept_checks']) ? $data['accept_checks'] : null;
        $this->container['accept_credit_cards'] = isset($data['accept_credit_cards']) ? $data['accept_credit_cards'] : null;
        $this->container['valid_credit_card_payment_methods'] = isset($data['valid_credit_card_payment_methods']) ? $data['valid_credit_card_payment_methods'] : null;
        $this->container['accept_direct_debits'] = isset($data['accept_direct_debits']) ? $data['accept_direct_debits'] : null;
        $this->container['valid_direct_debit_payment_methods'] = isset($data['valid_direct_debit_payment_methods']) ? $data['valid_direct_debit_payment_methods'] : null;
        $this->container['accept_digital_wallets'] = isset($data['accept_digital_wallets']) ? $data['accept_digital_wallets'] : null;
        $this->container['valid_digital_wallet_payment_methods'] = isset($data['valid_digital_wallet_payment_methods']) ? $data['valid_digital_wallet_payment_methods'] : null;
        $this->container['accept_gift_certificates'] = isset($data['accept_gift_certificates']) ? $data['accept_gift_certificates'] : null;
        $this->container['accept_miscellaneous_credits'] = isset($data['accept_miscellaneous_credits']) ? $data['accept_miscellaneous_credits'] : null;
        $this->container['accept_available_credits'] = isset($data['accept_available_credits']) ? $data['accept_available_credits'] : null;
        $this->container['available_credits'] = isset($data['available_credits']) ? $data['available_credits'] : null;
        $this->container['installment_billing_code'] = isset($data['installment_billing_code']) ? $data['installment_billing_code'] : null;
        $this->container['saved_payments'] = isset($data['saved_payments']) ? $data['saved_payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_checks
     *
     * @return bool
     */
    public function getAcceptChecks()
    {
        return $this->container['accept_checks'];
    }

    /**
     * Sets accept_checks
     *
     * @param bool $accept_checks True if check payments are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptChecks($accept_checks)
    {
        $this->container['accept_checks'] = $accept_checks;

        return $this;
    }

    /**
     * Gets accept_credit_cards
     *
     * @return bool
     */
    public function getAcceptCreditCards()
    {
        return $this->container['accept_credit_cards'];
    }

    /**
     * Sets accept_credit_cards
     *
     * @param bool $accept_credit_cards True if credit cards are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptCreditCards($accept_credit_cards)
    {
        $this->container['accept_credit_cards'] = $accept_credit_cards;

        return $this;
    }

    /**
     * Gets valid_credit_card_payment_methods
     *
     * @return \Advantage\Client\Model\CreditCardPaymentMethod[]
     */
    public function getValidCreditCardPaymentMethods()
    {
        return $this->container['valid_credit_card_payment_methods'];
    }

    /**
     * Sets valid_credit_card_payment_methods
     *
     * @param \Advantage\Client\Model\CreditCardPaymentMethod[] $valid_credit_card_payment_methods Credit card payment codes valid to pay for an order
     *
     * @return $this
     */
    public function setValidCreditCardPaymentMethods($valid_credit_card_payment_methods)
    {
        $this->container['valid_credit_card_payment_methods'] = $valid_credit_card_payment_methods;

        return $this;
    }

    /**
     * Gets accept_direct_debits
     *
     * @return bool
     */
    public function getAcceptDirectDebits()
    {
        return $this->container['accept_direct_debits'];
    }

    /**
     * Sets accept_direct_debits
     *
     * @param bool $accept_direct_debits True if direct debit payments are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptDirectDebits($accept_direct_debits)
    {
        $this->container['accept_direct_debits'] = $accept_direct_debits;

        return $this;
    }

    /**
     * Gets valid_direct_debit_payment_methods
     *
     * @return \Advantage\Client\Model\DirectDebitPaymentMethod[]
     */
    public function getValidDirectDebitPaymentMethods()
    {
        return $this->container['valid_direct_debit_payment_methods'];
    }

    /**
     * Sets valid_direct_debit_payment_methods
     *
     * @param \Advantage\Client\Model\DirectDebitPaymentMethod[] $valid_direct_debit_payment_methods Direct debit payment codes valid to pay for an order
     *
     * @return $this
     */
    public function setValidDirectDebitPaymentMethods($valid_direct_debit_payment_methods)
    {
        $this->container['valid_direct_debit_payment_methods'] = $valid_direct_debit_payment_methods;

        return $this;
    }

    /**
     * Gets accept_digital_wallets
     *
     * @return bool
     */
    public function getAcceptDigitalWallets()
    {
        return $this->container['accept_digital_wallets'];
    }

    /**
     * Sets accept_digital_wallets
     *
     * @param bool $accept_digital_wallets True if digital wallet payments are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptDigitalWallets($accept_digital_wallets)
    {
        $this->container['accept_digital_wallets'] = $accept_digital_wallets;

        return $this;
    }

    /**
     * Gets valid_digital_wallet_payment_methods
     *
     * @return \Advantage\Client\Model\DigitalWalletPaymentMethod[]
     */
    public function getValidDigitalWalletPaymentMethods()
    {
        return $this->container['valid_digital_wallet_payment_methods'];
    }

    /**
     * Sets valid_digital_wallet_payment_methods
     *
     * @param \Advantage\Client\Model\DigitalWalletPaymentMethod[] $valid_digital_wallet_payment_methods Digital wallet payment codes valid to pay for an order
     *
     * @return $this
     */
    public function setValidDigitalWalletPaymentMethods($valid_digital_wallet_payment_methods)
    {
        $this->container['valid_digital_wallet_payment_methods'] = $valid_digital_wallet_payment_methods;

        return $this;
    }

    /**
     * Gets accept_gift_certificates
     *
     * @return bool
     */
    public function getAcceptGiftCertificates()
    {
        return $this->container['accept_gift_certificates'];
    }

    /**
     * Sets accept_gift_certificates
     *
     * @param bool $accept_gift_certificates True if gift certificates are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptGiftCertificates($accept_gift_certificates)
    {
        $this->container['accept_gift_certificates'] = $accept_gift_certificates;

        return $this;
    }

    /**
     * Gets accept_miscellaneous_credits
     *
     * @return bool
     */
    public function getAcceptMiscellaneousCredits()
    {
        return $this->container['accept_miscellaneous_credits'];
    }

    /**
     * Sets accept_miscellaneous_credits
     *
     * @param bool $accept_miscellaneous_credits True if miscellaneous credits are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptMiscellaneousCredits($accept_miscellaneous_credits)
    {
        $this->container['accept_miscellaneous_credits'] = $accept_miscellaneous_credits;

        return $this;
    }

    /**
     * Gets accept_available_credits
     *
     * @return bool
     */
    public function getAcceptAvailableCredits()
    {
        return $this->container['accept_available_credits'];
    }

    /**
     * Sets accept_available_credits
     *
     * @param bool $accept_available_credits True if adjustment credits are accepted as payment for an order
     *
     * @return $this
     */
    public function setAcceptAvailableCredits($accept_available_credits)
    {
        $this->container['accept_available_credits'] = $accept_available_credits;

        return $this;
    }

    /**
     * Gets available_credits
     *
     * @return \Advantage\Client\Model\Credit[]
     */
    public function getAvailableCredits()
    {
        return $this->container['available_credits'];
    }

    /**
     * Sets available_credits
     *
     * @param \Advantage\Client\Model\Credit[] $available_credits Credits available to be applied to an order
     *
     * @return $this
     */
    public function setAvailableCredits($available_credits)
    {
        $this->container['available_credits'] = $available_credits;

        return $this;
    }

    /**
     * Gets installment_billing_code
     *
     * @return string
     */
    public function getInstallmentBillingCode()
    {
        return $this->container['installment_billing_code'];
    }

    /**
     * Sets installment_billing_code
     *
     * @param string $installment_billing_code The default installment billing code
     *
     * @return $this
     */
    public function setInstallmentBillingCode($installment_billing_code)
    {
        $this->container['installment_billing_code'] = $installment_billing_code;

        return $this;
    }

    /**
     * Gets saved_payments
     *
     * @return \Advantage\Client\Model\SavedPayment[]
     */
    public function getSavedPayments()
    {
        return $this->container['saved_payments'];
    }

    /**
     * Sets saved_payments
     *
     * @param \Advantage\Client\Model\SavedPayment[] $saved_payments Saved electronic payments available to pay for an order
     *
     * @return $this
     */
    public function setSavedPayments($saved_payments)
    {
        $this->container['saved_payments'] = $saved_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


