<?php
/**
 * CallListApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * CallListApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation callListEndCall
     *
     * Begins an inbound call.  The inbound call list is unique for each rep and, and will only contain the inbound  calls that were not linked to existing calls.
     *
     * @param  \Advantage\Client\Model\EndCallRequest $end_call_request end_call_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function callListEndCall($end_call_request)
    {
        $this->callListEndCallWithHttpInfo($end_call_request);
    }

    /**
     * Operation callListEndCallWithHttpInfo
     *
     * Begins an inbound call.  The inbound call list is unique for each rep and, and will only contain the inbound  calls that were not linked to existing calls.
     *
     * @param  \Advantage\Client\Model\EndCallRequest $end_call_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListEndCallWithHttpInfo($end_call_request)
    {
        $returnType = '';
        $request = $this->callListEndCallRequest($end_call_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation callListEndCallAsync
     *
     * Begins an inbound call.  The inbound call list is unique for each rep and, and will only contain the inbound  calls that were not linked to existing calls.
     *
     * @param  \Advantage\Client\Model\EndCallRequest $end_call_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListEndCallAsync($end_call_request)
    {
        return $this->callListEndCallAsyncWithHttpInfo($end_call_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListEndCallAsyncWithHttpInfo
     *
     * Begins an inbound call.  The inbound call list is unique for each rep and, and will only contain the inbound  calls that were not linked to existing calls.
     *
     * @param  \Advantage\Client\Model\EndCallRequest $end_call_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListEndCallAsyncWithHttpInfo($end_call_request)
    {
        $returnType = '';
        $request = $this->callListEndCallRequest($end_call_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListEndCall'
     *
     * @param  \Advantage\Client\Model\EndCallRequest $end_call_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListEndCallRequest($end_call_request)
    {
        // verify the required parameter 'end_call_request' is set
        if ($end_call_request === null || (is_array($end_call_request) && count($end_call_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_call_request when calling callListEndCall'
            );
        }

        $resourcePath = '/call-lists/end-call';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($end_call_request)) {
            $_tempBody = $end_call_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListFindOrAddInboundCallList
     *
     * Finds or creates the inbound call list for the given sales rep.
     *
     * @param  \Advantage\Client\Model\InboundCallListCreateRequest $inbound_call_list_create_request inbound_call_list_create_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Call
     */
    public function callListFindOrAddInboundCallList($inbound_call_list_create_request)
    {
        list($response) = $this->callListFindOrAddInboundCallListWithHttpInfo($inbound_call_list_create_request);
        return $response;
    }

    /**
     * Operation callListFindOrAddInboundCallListWithHttpInfo
     *
     * Finds or creates the inbound call list for the given sales rep.
     *
     * @param  \Advantage\Client\Model\InboundCallListCreateRequest $inbound_call_list_create_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Call, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListFindOrAddInboundCallListWithHttpInfo($inbound_call_list_create_request)
    {
        $returnType = '\Advantage\Client\Model\Call';
        $request = $this->callListFindOrAddInboundCallListRequest($inbound_call_list_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Call',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListFindOrAddInboundCallListAsync
     *
     * Finds or creates the inbound call list for the given sales rep.
     *
     * @param  \Advantage\Client\Model\InboundCallListCreateRequest $inbound_call_list_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListFindOrAddInboundCallListAsync($inbound_call_list_create_request)
    {
        return $this->callListFindOrAddInboundCallListAsyncWithHttpInfo($inbound_call_list_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListFindOrAddInboundCallListAsyncWithHttpInfo
     *
     * Finds or creates the inbound call list for the given sales rep.
     *
     * @param  \Advantage\Client\Model\InboundCallListCreateRequest $inbound_call_list_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListFindOrAddInboundCallListAsyncWithHttpInfo($inbound_call_list_create_request)
    {
        $returnType = '\Advantage\Client\Model\Call';
        $request = $this->callListFindOrAddInboundCallListRequest($inbound_call_list_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListFindOrAddInboundCallList'
     *
     * @param  \Advantage\Client\Model\InboundCallListCreateRequest $inbound_call_list_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListFindOrAddInboundCallListRequest($inbound_call_list_create_request)
    {
        // verify the required parameter 'inbound_call_list_create_request' is set
        if ($inbound_call_list_create_request === null || (is_array($inbound_call_list_create_request) && count($inbound_call_list_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_call_list_create_request when calling callListFindOrAddInboundCallList'
            );
        }

        $resourcePath = '/call-lists/begin-inbound-call';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($inbound_call_list_create_request)) {
            $_tempBody = $inbound_call_list_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGet
     *
     * Gets Sales Rep.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_calls True to include a collection of the calls belonging to the call list (optional)
     * @param  \DateTime $filter_begin_date The earliest call date to include (optional)
     * @param  \DateTime $filter_end_date The latest call date to include (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CallList
     */
    public function callListGet($list_id, $list_date, $include_calls = null, $filter_begin_date = null, $filter_end_date = null)
    {
        list($response) = $this->callListGetWithHttpInfo($list_id, $list_date, $include_calls, $filter_begin_date, $filter_end_date);
        return $response;
    }

    /**
     * Operation callListGetWithHttpInfo
     *
     * Gets Sales Rep.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_calls True to include a collection of the calls belonging to the call list (optional)
     * @param  \DateTime $filter_begin_date The earliest call date to include (optional)
     * @param  \DateTime $filter_end_date The latest call date to include (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CallList, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetWithHttpInfo($list_id, $list_date, $include_calls = null, $filter_begin_date = null, $filter_end_date = null)
    {
        $returnType = '\Advantage\Client\Model\CallList';
        $request = $this->callListGetRequest($list_id, $list_date, $include_calls, $filter_begin_date, $filter_end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CallList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetAsync
     *
     * Gets Sales Rep.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_calls True to include a collection of the calls belonging to the call list (optional)
     * @param  \DateTime $filter_begin_date The earliest call date to include (optional)
     * @param  \DateTime $filter_end_date The latest call date to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetAsync($list_id, $list_date, $include_calls = null, $filter_begin_date = null, $filter_end_date = null)
    {
        return $this->callListGetAsyncWithHttpInfo($list_id, $list_date, $include_calls, $filter_begin_date, $filter_end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetAsyncWithHttpInfo
     *
     * Gets Sales Rep.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_calls True to include a collection of the calls belonging to the call list (optional)
     * @param  \DateTime $filter_begin_date The earliest call date to include (optional)
     * @param  \DateTime $filter_end_date The latest call date to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetAsyncWithHttpInfo($list_id, $list_date, $include_calls = null, $filter_begin_date = null, $filter_end_date = null)
    {
        $returnType = '\Advantage\Client\Model\CallList';
        $request = $this->callListGetRequest($list_id, $list_date, $include_calls, $filter_begin_date, $filter_end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGet'
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_calls True to include a collection of the calls belonging to the call list (optional)
     * @param  \DateTime $filter_begin_date The earliest call date to include (optional)
     * @param  \DateTime $filter_end_date The latest call date to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetRequest($list_id, $list_date, $include_calls = null, $filter_begin_date = null, $filter_end_date = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGet'
            );
        }
        // verify the required parameter 'list_date' is set
        if ($list_date === null || (is_array($list_date) && count($list_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_date when calling callListGet'
            );
        }

        $resourcePath = '/call-lists/{listId}/{listDate}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_calls !== null) {
            $queryParams['includeCalls'] = ObjectSerializer::toQueryValue($include_calls);
        }
        // query params
        if ($filter_begin_date !== null) {
            $queryParams['filter.beginDate'] = ObjectSerializer::toQueryValue($filter_begin_date);
        }
        // query params
        if ($filter_end_date !== null) {
            $queryParams['filter.endDate'] = ObjectSerializer::toQueryValue($filter_end_date);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($list_date !== null) {
            $resourcePath = str_replace(
                '{' . 'listDate' . '}',
                ObjectSerializer::toPathValue($list_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallListAssignments
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallListAssignment
     */
    public function callListGetCallListAssignments($list_id, $list_date)
    {
        list($response) = $this->callListGetCallListAssignmentsWithHttpInfo($list_id, $list_date);
        return $response;
    }

    /**
     * Operation callListGetCallListAssignmentsWithHttpInfo
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallListAssignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallListAssignmentsWithHttpInfo($list_id, $list_date)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListAssignment';
        $request = $this->callListGetCallListAssignmentsRequest($list_id, $list_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallListAssignment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallListAssignmentsAsync
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListAssignmentsAsync($list_id, $list_date)
    {
        return $this->callListGetCallListAssignmentsAsyncWithHttpInfo($list_id, $list_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallListAssignmentsAsyncWithHttpInfo
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListAssignmentsAsyncWithHttpInfo($list_id, $list_date)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListAssignment';
        $request = $this->callListGetCallListAssignmentsRequest($list_id, $list_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallListAssignments'
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallListAssignmentsRequest($list_id, $list_date)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGetCallListAssignments'
            );
        }
        // verify the required parameter 'list_date' is set
        if ($list_date === null || (is_array($list_date) && count($list_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_date when calling callListGetCallListAssignments'
            );
        }

        $resourcePath = '/call-lists/{listId}/{listDate}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($list_date !== null) {
            $resourcePath = str_replace(
                '{' . 'listDate' . '}',
                ObjectSerializer::toPathValue($list_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallListAssignmentsBySalesRep
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $sales_rep_code SalesRepCode (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_list_code List code of the list to limit the statistics to or null or empty string to compile  statistics across lists. (optional)
     * @param  \DateTime $filter_list_date The date associated with the call list (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CallListAssignment
     */
    public function callListGetCallListAssignmentsBySalesRep($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_list_code = null, $filter_list_date = null)
    {
        list($response) = $this->callListGetCallListAssignmentsBySalesRepWithHttpInfo($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_list_code, $filter_list_date);
        return $response;
    }

    /**
     * Operation callListGetCallListAssignmentsBySalesRepWithHttpInfo
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $sales_rep_code SalesRepCode (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_list_code List code of the list to limit the statistics to or null or empty string to compile  statistics across lists. (optional)
     * @param  \DateTime $filter_list_date The date associated with the call list (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CallListAssignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallListAssignmentsBySalesRepWithHttpInfo($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_list_code = null, $filter_list_date = null)
    {
        $returnType = '\Advantage\Client\Model\CallListAssignment';
        $request = $this->callListGetCallListAssignmentsBySalesRepRequest($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_list_code, $filter_list_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CallListAssignment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallListAssignmentsBySalesRepAsync
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $sales_rep_code SalesRepCode (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_list_code List code of the list to limit the statistics to or null or empty string to compile  statistics across lists. (optional)
     * @param  \DateTime $filter_list_date The date associated with the call list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListAssignmentsBySalesRepAsync($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_list_code = null, $filter_list_date = null)
    {
        return $this->callListGetCallListAssignmentsBySalesRepAsyncWithHttpInfo($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_list_code, $filter_list_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallListAssignmentsBySalesRepAsyncWithHttpInfo
     *
     * Gets call assignments for the given call list.
     *
     * @param  string $sales_rep_code SalesRepCode (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_list_code List code of the list to limit the statistics to or null or empty string to compile  statistics across lists. (optional)
     * @param  \DateTime $filter_list_date The date associated with the call list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListAssignmentsBySalesRepAsyncWithHttpInfo($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_list_code = null, $filter_list_date = null)
    {
        $returnType = '\Advantage\Client\Model\CallListAssignment';
        $request = $this->callListGetCallListAssignmentsBySalesRepRequest($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_list_code, $filter_list_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallListAssignmentsBySalesRep'
     *
     * @param  string $sales_rep_code SalesRepCode (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_list_code List code of the list to limit the statistics to or null or empty string to compile  statistics across lists. (optional)
     * @param  \DateTime $filter_list_date The date associated with the call list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallListAssignmentsBySalesRepRequest($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_list_code = null, $filter_list_date = null)
    {
        // verify the required parameter 'sales_rep_code' is set
        if ($sales_rep_code === null || (is_array($sales_rep_code) && count($sales_rep_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_rep_code when calling callListGetCallListAssignmentsBySalesRep'
            );
        }

        $resourcePath = '/call-lists/{salesRepCode}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_begin_date !== null) {
            $queryParams['filter.beginDate'] = ObjectSerializer::toQueryValue($filter_begin_date);
        }
        // query params
        if ($filter_end_date !== null) {
            $queryParams['filter.endDate'] = ObjectSerializer::toQueryValue($filter_end_date);
        }
        // query params
        if ($filter_list_code !== null) {
            $queryParams['filter.listCode'] = ObjectSerializer::toQueryValue($filter_list_code);
        }
        // query params
        if ($filter_list_date !== null) {
            $queryParams['filter.listDate'] = ObjectSerializer::toQueryValue($filter_list_date);
        }

        // path params
        if ($sales_rep_code !== null) {
            $resourcePath = str_replace(
                '{' . 'salesRepCode' . '}',
                ObjectSerializer::toPathValue($sales_rep_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallListOutcomes
     *
     * Get information about each outcome for a particular call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallListOutcome
     */
    public function callListGetCallListOutcomes($list_id, $list_date, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        list($response) = $this->callListGetCallListOutcomesWithHttpInfo($list_id, $list_date, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);
        return $response;
    }

    /**
     * Operation callListGetCallListOutcomesWithHttpInfo
     *
     * Get information about each outcome for a particular call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallListOutcome, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallListOutcomesWithHttpInfo($list_id, $list_date, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListOutcome';
        $request = $this->callListGetCallListOutcomesRequest($list_id, $list_date, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallListOutcome',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallListOutcomesAsync
     *
     * Get information about each outcome for a particular call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListOutcomesAsync($list_id, $list_date, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        return $this->callListGetCallListOutcomesAsyncWithHttpInfo($list_id, $list_date, $filter_begin_date, $filter_end_date, $filter_sales_rep_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallListOutcomesAsyncWithHttpInfo
     *
     * Get information about each outcome for a particular call list.
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallListOutcomesAsyncWithHttpInfo($list_id, $list_date, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListOutcome';
        $request = $this->callListGetCallListOutcomesRequest($list_id, $list_date, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallListOutcomes'
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallListOutcomesRequest($list_id, $list_date, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGetCallListOutcomes'
            );
        }
        // verify the required parameter 'list_date' is set
        if ($list_date === null || (is_array($list_date) && count($list_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_date when calling callListGetCallListOutcomes'
            );
        }

        $resourcePath = '/call-lists/{listId}/{listDate}/outcomes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_begin_date !== null) {
            $queryParams['filter.beginDate'] = ObjectSerializer::toQueryValue($filter_begin_date);
        }
        // query params
        if ($filter_end_date !== null) {
            $queryParams['filter.endDate'] = ObjectSerializer::toQueryValue($filter_end_date);
        }
        // query params
        if ($filter_sales_rep_code !== null) {
            $queryParams['filter.salesRepCode'] = ObjectSerializer::toQueryValue($filter_sales_rep_code);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($list_date !== null) {
            $resourcePath = str_replace(
                '{' . 'listDate' . '}',
                ObjectSerializer::toPathValue($list_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallOutcomes
     *
     * Returns the resolution codes for each outcome code valid for the current call.  Returns all resolution/outcome codes if an empty value is passed in for listId.
     *
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     * @param  string $list_id List ID, empty value indicates that all resolution codes should be returned (optional)
     * @param  \DateTime $list_date List Date (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallOutcome
     */
    public function callListGetCallOutcomes($is_inbound, $close_call_outcome, $is_callback_action, $list_id = null, $list_date = null)
    {
        list($response) = $this->callListGetCallOutcomesWithHttpInfo($is_inbound, $close_call_outcome, $is_callback_action, $list_id, $list_date);
        return $response;
    }

    /**
     * Operation callListGetCallOutcomesWithHttpInfo
     *
     * Returns the resolution codes for each outcome code valid for the current call.  Returns all resolution/outcome codes if an empty value is passed in for listId.
     *
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     * @param  string $list_id List ID, empty value indicates that all resolution codes should be returned (optional)
     * @param  \DateTime $list_date List Date (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallOutcome, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallOutcomesWithHttpInfo($is_inbound, $close_call_outcome, $is_callback_action, $list_id = null, $list_date = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallOutcome';
        $request = $this->callListGetCallOutcomesRequest($is_inbound, $close_call_outcome, $is_callback_action, $list_id, $list_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallOutcome',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallOutcomesAsync
     *
     * Returns the resolution codes for each outcome code valid for the current call.  Returns all resolution/outcome codes if an empty value is passed in for listId.
     *
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     * @param  string $list_id List ID, empty value indicates that all resolution codes should be returned (optional)
     * @param  \DateTime $list_date List Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallOutcomesAsync($is_inbound, $close_call_outcome, $is_callback_action, $list_id = null, $list_date = null)
    {
        return $this->callListGetCallOutcomesAsyncWithHttpInfo($is_inbound, $close_call_outcome, $is_callback_action, $list_id, $list_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallOutcomesAsyncWithHttpInfo
     *
     * Returns the resolution codes for each outcome code valid for the current call.  Returns all resolution/outcome codes if an empty value is passed in for listId.
     *
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     * @param  string $list_id List ID, empty value indicates that all resolution codes should be returned (optional)
     * @param  \DateTime $list_date List Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallOutcomesAsyncWithHttpInfo($is_inbound, $close_call_outcome, $is_callback_action, $list_id = null, $list_date = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallOutcome';
        $request = $this->callListGetCallOutcomesRequest($is_inbound, $close_call_outcome, $is_callback_action, $list_id, $list_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallOutcomes'
     *
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     * @param  string $list_id List ID, empty value indicates that all resolution codes should be returned (optional)
     * @param  \DateTime $list_date List Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallOutcomesRequest($is_inbound, $close_call_outcome, $is_callback_action, $list_id = null, $list_date = null)
    {
        // verify the required parameter 'is_inbound' is set
        if ($is_inbound === null || (is_array($is_inbound) && count($is_inbound) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_inbound when calling callListGetCallOutcomes'
            );
        }
        // verify the required parameter 'close_call_outcome' is set
        if ($close_call_outcome === null || (is_array($close_call_outcome) && count($close_call_outcome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $close_call_outcome when calling callListGetCallOutcomes'
            );
        }
        // verify the required parameter 'is_callback_action' is set
        if ($is_callback_action === null || (is_array($is_callback_action) && count($is_callback_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_callback_action when calling callListGetCallOutcomes'
            );
        }

        $resourcePath = '/call-lists/call-outcomes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_inbound !== null) {
            $queryParams['isInbound'] = ObjectSerializer::toQueryValue($is_inbound);
        }
        // query params
        if ($close_call_outcome !== null) {
            $queryParams['closeCallOutcome'] = ObjectSerializer::toQueryValue($close_call_outcome);
        }
        // query params
        if ($is_callback_action !== null) {
            $queryParams['isCallbackAction'] = ObjectSerializer::toQueryValue($is_callback_action);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['listId'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if ($list_date !== null) {
            $queryParams['listDate'] = ObjectSerializer::toQueryValue($list_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallOutcomesBySalesRep
     *
     * Get information about each outcome for a particular sales rep.
     *
     * @param  string $sales_rep_code Sales Rep Code (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallListOutcome
     */
    public function callListGetCallOutcomesBySalesRep($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        list($response) = $this->callListGetCallOutcomesBySalesRepWithHttpInfo($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);
        return $response;
    }

    /**
     * Operation callListGetCallOutcomesBySalesRepWithHttpInfo
     *
     * Get information about each outcome for a particular sales rep.
     *
     * @param  string $sales_rep_code Sales Rep Code (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallListOutcome, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallOutcomesBySalesRepWithHttpInfo($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListOutcome';
        $request = $this->callListGetCallOutcomesBySalesRepRequest($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallListOutcome',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallOutcomesBySalesRepAsync
     *
     * Get information about each outcome for a particular sales rep.
     *
     * @param  string $sales_rep_code Sales Rep Code (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallOutcomesBySalesRepAsync($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        return $this->callListGetCallOutcomesBySalesRepAsyncWithHttpInfo($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_sales_rep_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallOutcomesBySalesRepAsyncWithHttpInfo
     *
     * Get information about each outcome for a particular sales rep.
     *
     * @param  string $sales_rep_code Sales Rep Code (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallOutcomesBySalesRepAsyncWithHttpInfo($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallListOutcome';
        $request = $this->callListGetCallOutcomesBySalesRepRequest($sales_rep_code, $filter_begin_date, $filter_end_date, $filter_sales_rep_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallOutcomesBySalesRep'
     *
     * @param  string $sales_rep_code Sales Rep Code (required)
     * @param  \DateTime $filter_begin_date The earliest call date to include in statistics. (optional)
     * @param  \DateTime $filter_end_date The latest call date to include in statistics. (optional)
     * @param  string $filter_sales_rep_code The sales rep code to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallOutcomesBySalesRepRequest($sales_rep_code, $filter_begin_date = null, $filter_end_date = null, $filter_sales_rep_code = null)
    {
        // verify the required parameter 'sales_rep_code' is set
        if ($sales_rep_code === null || (is_array($sales_rep_code) && count($sales_rep_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_rep_code when calling callListGetCallOutcomesBySalesRep'
            );
        }

        $resourcePath = '/call-lists/{salesRepCode}/outcomes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_begin_date !== null) {
            $queryParams['filter.beginDate'] = ObjectSerializer::toQueryValue($filter_begin_date);
        }
        // query params
        if ($filter_end_date !== null) {
            $queryParams['filter.endDate'] = ObjectSerializer::toQueryValue($filter_end_date);
        }
        // query params
        if ($filter_sales_rep_code !== null) {
            $queryParams['filter.salesRepCode'] = ObjectSerializer::toQueryValue($filter_sales_rep_code);
        }

        // path params
        if ($sales_rep_code !== null) {
            $resourcePath = str_replace(
                '{' . 'salesRepCode' . '}',
                ObjectSerializer::toPathValue($sales_rep_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetCallsList
     *
     * Gets the calls for a call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_callbacks True to include callbacks (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCall
     */
    public function callListGetCallsList($list_id, $list_date, $include_callbacks = null)
    {
        list($response) = $this->callListGetCallsListWithHttpInfo($list_id, $list_date, $include_callbacks);
        return $response;
    }

    /**
     * Operation callListGetCallsListWithHttpInfo
     *
     * Gets the calls for a call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_callbacks True to include callbacks (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCall, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetCallsListWithHttpInfo($list_id, $list_date, $include_callbacks = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCall';
        $request = $this->callListGetCallsListRequest($list_id, $list_date, $include_callbacks);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCall',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetCallsListAsync
     *
     * Gets the calls for a call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_callbacks True to include callbacks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallsListAsync($list_id, $list_date, $include_callbacks = null)
    {
        return $this->callListGetCallsListAsyncWithHttpInfo($list_id, $list_date, $include_callbacks)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetCallsListAsyncWithHttpInfo
     *
     * Gets the calls for a call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_callbacks True to include callbacks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetCallsListAsyncWithHttpInfo($list_id, $list_date, $include_callbacks = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCall';
        $request = $this->callListGetCallsListRequest($list_id, $list_date, $include_callbacks);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetCallsList'
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $include_callbacks True to include callbacks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetCallsListRequest($list_id, $list_date, $include_callbacks = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGetCallsList'
            );
        }
        // verify the required parameter 'list_date' is set
        if ($list_date === null || (is_array($list_date) && count($list_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_date when calling callListGetCallsList'
            );
        }

        $resourcePath = '/call-lists/{listId}/{listDate}/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_callbacks !== null) {
            $queryParams['includeCallbacks'] = ObjectSerializer::toQueryValue($include_callbacks);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($list_date !== null) {
            $resourcePath = str_replace(
                '{' . 'listDate' . '}',
                ObjectSerializer::toPathValue($list_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetList
     *
     * Gets List of Call Lists.
     *
     * @param  string $list_id List ID (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallList
     */
    public function callListGetList($list_id)
    {
        list($response) = $this->callListGetListWithHttpInfo($list_id);
        return $response;
    }

    /**
     * Operation callListGetListWithHttpInfo
     *
     * Gets List of Call Lists.
     *
     * @param  string $list_id List ID (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallList, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetListWithHttpInfo($list_id)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallList';
        $request = $this->callListGetListRequest($list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetListAsync
     *
     * Gets List of Call Lists.
     *
     * @param  string $list_id List ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetListAsync($list_id)
    {
        return $this->callListGetListAsyncWithHttpInfo($list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetListAsyncWithHttpInfo
     *
     * Gets List of Call Lists.
     *
     * @param  string $list_id List ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetListAsyncWithHttpInfo($list_id)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallList';
        $request = $this->callListGetListRequest($list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetList'
     *
     * @param  string $list_id List ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetListRequest($list_id)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGetList'
            );
        }

        $resourcePath = '/call-lists/{listId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListGetValidCallOutcomes
     *
     * Returns the list of valid call outcomes for the specified call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultFieldValidValue
     */
    public function callListGetValidCallOutcomes($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
    {
        list($response) = $this->callListGetValidCallOutcomesWithHttpInfo($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action);
        return $response;
    }

    /**
     * Operation callListGetValidCallOutcomesWithHttpInfo
     *
     * Returns the list of valid call outcomes for the specified call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultFieldValidValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListGetValidCallOutcomesWithHttpInfo($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
    {
        $returnType = '\Advantage\Client\Model\SearchResultFieldValidValue';
        $request = $this->callListGetValidCallOutcomesRequest($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultFieldValidValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListGetValidCallOutcomesAsync
     *
     * Returns the list of valid call outcomes for the specified call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetValidCallOutcomesAsync($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
    {
        return $this->callListGetValidCallOutcomesAsyncWithHttpInfo($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListGetValidCallOutcomesAsyncWithHttpInfo
     *
     * Returns the list of valid call outcomes for the specified call list
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListGetValidCallOutcomesAsyncWithHttpInfo($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
    {
        $returnType = '\Advantage\Client\Model\SearchResultFieldValidValue';
        $request = $this->callListGetValidCallOutcomesRequest($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListGetValidCallOutcomes'
     *
     * @param  string $list_id List ID (required)
     * @param  \DateTime $list_date List Date (required)
     * @param  bool $is_inbound Is call inbound? (required)
     * @param  bool $close_call_outcome Is this a close call outcome? (required)
     * @param  bool $is_callback_action Is this a callback action? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListGetValidCallOutcomesRequest($list_id, $list_date, $is_inbound, $close_call_outcome, $is_callback_action)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling callListGetValidCallOutcomes'
            );
        }
        // verify the required parameter 'list_date' is set
        if ($list_date === null || (is_array($list_date) && count($list_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_date when calling callListGetValidCallOutcomes'
            );
        }
        // verify the required parameter 'is_inbound' is set
        if ($is_inbound === null || (is_array($is_inbound) && count($is_inbound) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_inbound when calling callListGetValidCallOutcomes'
            );
        }
        // verify the required parameter 'close_call_outcome' is set
        if ($close_call_outcome === null || (is_array($close_call_outcome) && count($close_call_outcome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $close_call_outcome when calling callListGetValidCallOutcomes'
            );
        }
        // verify the required parameter 'is_callback_action' is set
        if ($is_callback_action === null || (is_array($is_callback_action) && count($is_callback_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_callback_action when calling callListGetValidCallOutcomes'
            );
        }

        $resourcePath = '/call-lists/{listId}/{listDate}/valid-outcomes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_inbound !== null) {
            $queryParams['isInbound'] = ObjectSerializer::toQueryValue($is_inbound);
        }
        // query params
        if ($close_call_outcome !== null) {
            $queryParams['closeCallOutcome'] = ObjectSerializer::toQueryValue($close_call_outcome);
        }
        // query params
        if ($is_callback_action !== null) {
            $queryParams['isCallbackAction'] = ObjectSerializer::toQueryValue($is_callback_action);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($list_date !== null) {
            $resourcePath = str_replace(
                '{' . 'listDate' . '}',
                ObjectSerializer::toPathValue($list_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListSearch
     *
     * Gets list of call lists.
     *
     * @param  bool $include_inactive_lists include_inactive_lists (optional)
     * @param  bool $only_include_lists_with_calls_remaining only_include_lists_with_calls_remaining (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $sales_rep_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $sales_manager_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $list_id Filter on LIST-ID using &#39;Equal&#39; operator (optional)
     * @param  string $list_date Filter on LIST-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $is_remaining_call Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $is_callback Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $sales_rep_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_rep_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_rep_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_rep_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_rep_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_rep_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_rep_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_rep_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_rep_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_rep_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_rep_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $sales_manager_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_manager_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_manager_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_manager_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_manager_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_manager_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_manager_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_manager_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_manager_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_manager_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_manager_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $list_id_not_equal Filter on LIST-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_id_less Filter on LIST-ID using &#39;Less&#39; operator (optional)
     * @param  string $list_id_less_or_equal Filter on LIST-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_id_greater Filter on LIST-ID using &#39;Greater&#39; operator (optional)
     * @param  string $list_id_greater_or_equal Filter on LIST-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_id_is_null Filter on LIST-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $list_id_is_not_null Filter on LIST-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_id_like Filter on LIST-ID using &#39;Like&#39; operator (optional)
     * @param  string $list_id_not_like Filter on LIST-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $list_id_contains Filter on LIST-ID using &#39;Contains&#39; operator (optional)
     * @param  string $list_id_not_contains Filter on LIST-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $list_id_starts_with Filter on LIST-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_id_not_starts_with Filter on LIST-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_id_ends_with Filter on LIST-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_id_not_ends_with Filter on LIST-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_id_in Filter on LIST-ID using &#39;In&#39; operator (optional)
     * @param  string $list_id_between Filter on LIST-ID using &#39;Between&#39; operator (optional)
     * @param  string $list_date_not_equal Filter on LIST-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_date_less Filter on LIST-DTE using &#39;Less&#39; operator (optional)
     * @param  string $list_date_less_or_equal Filter on LIST-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_date_greater Filter on LIST-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $list_date_greater_or_equal Filter on LIST-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_date_is_null Filter on LIST-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $list_date_is_not_null Filter on LIST-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_date_like Filter on LIST-DTE using &#39;Like&#39; operator (optional)
     * @param  string $list_date_not_like Filter on LIST-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $list_date_contains Filter on LIST-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $list_date_not_contains Filter on LIST-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $list_date_starts_with Filter on LIST-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_date_not_starts_with Filter on LIST-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_date_ends_with Filter on LIST-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_date_not_ends_with Filter on LIST-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_date_in Filter on LIST-DTE using &#39;In&#39; operator (optional)
     * @param  string $list_date_between Filter on LIST-DTE using &#39;Between&#39; operator (optional)
     * @param  string $is_remaining_call_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_remaining_call_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_remaining_call_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_remaining_call_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_remaining_call_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_remaining_call_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_remaining_call_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_remaining_call_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_remaining_call_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_remaining_call_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_remaining_call_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     * @param  string $is_callback_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_callback_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_callback_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_callback_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_callback_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_callback_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_callback_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_callback_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_callback_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_callback_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_callback_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_callback_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_callback_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_callback_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_callback_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_callback_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_callback_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCallList
     */
    public function callListSearch($include_inactive_lists = null, $only_include_lists_with_calls_remaining = null, $pager_skip = null, $pager_take = null, $sales_rep_code = null, $sales_manager_code = null, $list_id = null, $list_date = null, $is_remaining_call = null, $is_callback = null, $sales_rep_code_not_equal = null, $sales_rep_code_less = null, $sales_rep_code_less_or_equal = null, $sales_rep_code_greater = null, $sales_rep_code_greater_or_equal = null, $sales_rep_code_is_null = null, $sales_rep_code_is_not_null = null, $sales_rep_code_like = null, $sales_rep_code_not_like = null, $sales_rep_code_contains = null, $sales_rep_code_not_contains = null, $sales_rep_code_starts_with = null, $sales_rep_code_not_starts_with = null, $sales_rep_code_ends_with = null, $sales_rep_code_not_ends_with = null, $sales_rep_code_in = null, $sales_rep_code_between = null, $sales_manager_code_not_equal = null, $sales_manager_code_less = null, $sales_manager_code_less_or_equal = null, $sales_manager_code_greater = null, $sales_manager_code_greater_or_equal = null, $sales_manager_code_is_null = null, $sales_manager_code_is_not_null = null, $sales_manager_code_like = null, $sales_manager_code_not_like = null, $sales_manager_code_contains = null, $sales_manager_code_not_contains = null, $sales_manager_code_starts_with = null, $sales_manager_code_not_starts_with = null, $sales_manager_code_ends_with = null, $sales_manager_code_not_ends_with = null, $sales_manager_code_in = null, $sales_manager_code_between = null, $list_id_not_equal = null, $list_id_less = null, $list_id_less_or_equal = null, $list_id_greater = null, $list_id_greater_or_equal = null, $list_id_is_null = null, $list_id_is_not_null = null, $list_id_like = null, $list_id_not_like = null, $list_id_contains = null, $list_id_not_contains = null, $list_id_starts_with = null, $list_id_not_starts_with = null, $list_id_ends_with = null, $list_id_not_ends_with = null, $list_id_in = null, $list_id_between = null, $list_date_not_equal = null, $list_date_less = null, $list_date_less_or_equal = null, $list_date_greater = null, $list_date_greater_or_equal = null, $list_date_is_null = null, $list_date_is_not_null = null, $list_date_like = null, $list_date_not_like = null, $list_date_contains = null, $list_date_not_contains = null, $list_date_starts_with = null, $list_date_not_starts_with = null, $list_date_ends_with = null, $list_date_not_ends_with = null, $list_date_in = null, $list_date_between = null, $is_remaining_call_not_equal = null, $is_remaining_call_less = null, $is_remaining_call_less_or_equal = null, $is_remaining_call_greater = null, $is_remaining_call_greater_or_equal = null, $is_remaining_call_is_null = null, $is_remaining_call_is_not_null = null, $is_remaining_call_like = null, $is_remaining_call_not_like = null, $is_remaining_call_contains = null, $is_remaining_call_not_contains = null, $is_remaining_call_starts_with = null, $is_remaining_call_not_starts_with = null, $is_remaining_call_ends_with = null, $is_remaining_call_not_ends_with = null, $is_remaining_call_in = null, $is_remaining_call_between = null, $is_callback_not_equal = null, $is_callback_less = null, $is_callback_less_or_equal = null, $is_callback_greater = null, $is_callback_greater_or_equal = null, $is_callback_is_null = null, $is_callback_is_not_null = null, $is_callback_like = null, $is_callback_not_like = null, $is_callback_contains = null, $is_callback_not_contains = null, $is_callback_starts_with = null, $is_callback_not_starts_with = null, $is_callback_ends_with = null, $is_callback_not_ends_with = null, $is_callback_in = null, $is_callback_between = null)
    {
        list($response) = $this->callListSearchWithHttpInfo($include_inactive_lists, $only_include_lists_with_calls_remaining, $pager_skip, $pager_take, $sales_rep_code, $sales_manager_code, $list_id, $list_date, $is_remaining_call, $is_callback, $sales_rep_code_not_equal, $sales_rep_code_less, $sales_rep_code_less_or_equal, $sales_rep_code_greater, $sales_rep_code_greater_or_equal, $sales_rep_code_is_null, $sales_rep_code_is_not_null, $sales_rep_code_like, $sales_rep_code_not_like, $sales_rep_code_contains, $sales_rep_code_not_contains, $sales_rep_code_starts_with, $sales_rep_code_not_starts_with, $sales_rep_code_ends_with, $sales_rep_code_not_ends_with, $sales_rep_code_in, $sales_rep_code_between, $sales_manager_code_not_equal, $sales_manager_code_less, $sales_manager_code_less_or_equal, $sales_manager_code_greater, $sales_manager_code_greater_or_equal, $sales_manager_code_is_null, $sales_manager_code_is_not_null, $sales_manager_code_like, $sales_manager_code_not_like, $sales_manager_code_contains, $sales_manager_code_not_contains, $sales_manager_code_starts_with, $sales_manager_code_not_starts_with, $sales_manager_code_ends_with, $sales_manager_code_not_ends_with, $sales_manager_code_in, $sales_manager_code_between, $list_id_not_equal, $list_id_less, $list_id_less_or_equal, $list_id_greater, $list_id_greater_or_equal, $list_id_is_null, $list_id_is_not_null, $list_id_like, $list_id_not_like, $list_id_contains, $list_id_not_contains, $list_id_starts_with, $list_id_not_starts_with, $list_id_ends_with, $list_id_not_ends_with, $list_id_in, $list_id_between, $list_date_not_equal, $list_date_less, $list_date_less_or_equal, $list_date_greater, $list_date_greater_or_equal, $list_date_is_null, $list_date_is_not_null, $list_date_like, $list_date_not_like, $list_date_contains, $list_date_not_contains, $list_date_starts_with, $list_date_not_starts_with, $list_date_ends_with, $list_date_not_ends_with, $list_date_in, $list_date_between, $is_remaining_call_not_equal, $is_remaining_call_less, $is_remaining_call_less_or_equal, $is_remaining_call_greater, $is_remaining_call_greater_or_equal, $is_remaining_call_is_null, $is_remaining_call_is_not_null, $is_remaining_call_like, $is_remaining_call_not_like, $is_remaining_call_contains, $is_remaining_call_not_contains, $is_remaining_call_starts_with, $is_remaining_call_not_starts_with, $is_remaining_call_ends_with, $is_remaining_call_not_ends_with, $is_remaining_call_in, $is_remaining_call_between, $is_callback_not_equal, $is_callback_less, $is_callback_less_or_equal, $is_callback_greater, $is_callback_greater_or_equal, $is_callback_is_null, $is_callback_is_not_null, $is_callback_like, $is_callback_not_like, $is_callback_contains, $is_callback_not_contains, $is_callback_starts_with, $is_callback_not_starts_with, $is_callback_ends_with, $is_callback_not_ends_with, $is_callback_in, $is_callback_between);
        return $response;
    }

    /**
     * Operation callListSearchWithHttpInfo
     *
     * Gets list of call lists.
     *
     * @param  bool $include_inactive_lists (optional)
     * @param  bool $only_include_lists_with_calls_remaining (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $sales_rep_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $sales_manager_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $list_id Filter on LIST-ID using &#39;Equal&#39; operator (optional)
     * @param  string $list_date Filter on LIST-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $is_remaining_call Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $is_callback Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $sales_rep_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_rep_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_rep_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_rep_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_rep_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_rep_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_rep_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_rep_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_rep_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_rep_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_rep_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $sales_manager_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_manager_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_manager_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_manager_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_manager_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_manager_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_manager_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_manager_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_manager_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_manager_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_manager_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $list_id_not_equal Filter on LIST-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_id_less Filter on LIST-ID using &#39;Less&#39; operator (optional)
     * @param  string $list_id_less_or_equal Filter on LIST-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_id_greater Filter on LIST-ID using &#39;Greater&#39; operator (optional)
     * @param  string $list_id_greater_or_equal Filter on LIST-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_id_is_null Filter on LIST-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $list_id_is_not_null Filter on LIST-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_id_like Filter on LIST-ID using &#39;Like&#39; operator (optional)
     * @param  string $list_id_not_like Filter on LIST-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $list_id_contains Filter on LIST-ID using &#39;Contains&#39; operator (optional)
     * @param  string $list_id_not_contains Filter on LIST-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $list_id_starts_with Filter on LIST-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_id_not_starts_with Filter on LIST-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_id_ends_with Filter on LIST-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_id_not_ends_with Filter on LIST-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_id_in Filter on LIST-ID using &#39;In&#39; operator (optional)
     * @param  string $list_id_between Filter on LIST-ID using &#39;Between&#39; operator (optional)
     * @param  string $list_date_not_equal Filter on LIST-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_date_less Filter on LIST-DTE using &#39;Less&#39; operator (optional)
     * @param  string $list_date_less_or_equal Filter on LIST-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_date_greater Filter on LIST-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $list_date_greater_or_equal Filter on LIST-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_date_is_null Filter on LIST-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $list_date_is_not_null Filter on LIST-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_date_like Filter on LIST-DTE using &#39;Like&#39; operator (optional)
     * @param  string $list_date_not_like Filter on LIST-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $list_date_contains Filter on LIST-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $list_date_not_contains Filter on LIST-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $list_date_starts_with Filter on LIST-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_date_not_starts_with Filter on LIST-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_date_ends_with Filter on LIST-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_date_not_ends_with Filter on LIST-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_date_in Filter on LIST-DTE using &#39;In&#39; operator (optional)
     * @param  string $list_date_between Filter on LIST-DTE using &#39;Between&#39; operator (optional)
     * @param  string $is_remaining_call_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_remaining_call_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_remaining_call_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_remaining_call_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_remaining_call_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_remaining_call_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_remaining_call_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_remaining_call_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_remaining_call_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_remaining_call_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_remaining_call_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     * @param  string $is_callback_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_callback_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_callback_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_callback_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_callback_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_callback_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_callback_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_callback_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_callback_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_callback_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_callback_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_callback_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_callback_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_callback_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_callback_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_callback_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_callback_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCallList, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListSearchWithHttpInfo($include_inactive_lists = null, $only_include_lists_with_calls_remaining = null, $pager_skip = null, $pager_take = null, $sales_rep_code = null, $sales_manager_code = null, $list_id = null, $list_date = null, $is_remaining_call = null, $is_callback = null, $sales_rep_code_not_equal = null, $sales_rep_code_less = null, $sales_rep_code_less_or_equal = null, $sales_rep_code_greater = null, $sales_rep_code_greater_or_equal = null, $sales_rep_code_is_null = null, $sales_rep_code_is_not_null = null, $sales_rep_code_like = null, $sales_rep_code_not_like = null, $sales_rep_code_contains = null, $sales_rep_code_not_contains = null, $sales_rep_code_starts_with = null, $sales_rep_code_not_starts_with = null, $sales_rep_code_ends_with = null, $sales_rep_code_not_ends_with = null, $sales_rep_code_in = null, $sales_rep_code_between = null, $sales_manager_code_not_equal = null, $sales_manager_code_less = null, $sales_manager_code_less_or_equal = null, $sales_manager_code_greater = null, $sales_manager_code_greater_or_equal = null, $sales_manager_code_is_null = null, $sales_manager_code_is_not_null = null, $sales_manager_code_like = null, $sales_manager_code_not_like = null, $sales_manager_code_contains = null, $sales_manager_code_not_contains = null, $sales_manager_code_starts_with = null, $sales_manager_code_not_starts_with = null, $sales_manager_code_ends_with = null, $sales_manager_code_not_ends_with = null, $sales_manager_code_in = null, $sales_manager_code_between = null, $list_id_not_equal = null, $list_id_less = null, $list_id_less_or_equal = null, $list_id_greater = null, $list_id_greater_or_equal = null, $list_id_is_null = null, $list_id_is_not_null = null, $list_id_like = null, $list_id_not_like = null, $list_id_contains = null, $list_id_not_contains = null, $list_id_starts_with = null, $list_id_not_starts_with = null, $list_id_ends_with = null, $list_id_not_ends_with = null, $list_id_in = null, $list_id_between = null, $list_date_not_equal = null, $list_date_less = null, $list_date_less_or_equal = null, $list_date_greater = null, $list_date_greater_or_equal = null, $list_date_is_null = null, $list_date_is_not_null = null, $list_date_like = null, $list_date_not_like = null, $list_date_contains = null, $list_date_not_contains = null, $list_date_starts_with = null, $list_date_not_starts_with = null, $list_date_ends_with = null, $list_date_not_ends_with = null, $list_date_in = null, $list_date_between = null, $is_remaining_call_not_equal = null, $is_remaining_call_less = null, $is_remaining_call_less_or_equal = null, $is_remaining_call_greater = null, $is_remaining_call_greater_or_equal = null, $is_remaining_call_is_null = null, $is_remaining_call_is_not_null = null, $is_remaining_call_like = null, $is_remaining_call_not_like = null, $is_remaining_call_contains = null, $is_remaining_call_not_contains = null, $is_remaining_call_starts_with = null, $is_remaining_call_not_starts_with = null, $is_remaining_call_ends_with = null, $is_remaining_call_not_ends_with = null, $is_remaining_call_in = null, $is_remaining_call_between = null, $is_callback_not_equal = null, $is_callback_less = null, $is_callback_less_or_equal = null, $is_callback_greater = null, $is_callback_greater_or_equal = null, $is_callback_is_null = null, $is_callback_is_not_null = null, $is_callback_like = null, $is_callback_not_like = null, $is_callback_contains = null, $is_callback_not_contains = null, $is_callback_starts_with = null, $is_callback_not_starts_with = null, $is_callback_ends_with = null, $is_callback_not_ends_with = null, $is_callback_in = null, $is_callback_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallList';
        $request = $this->callListSearchRequest($include_inactive_lists, $only_include_lists_with_calls_remaining, $pager_skip, $pager_take, $sales_rep_code, $sales_manager_code, $list_id, $list_date, $is_remaining_call, $is_callback, $sales_rep_code_not_equal, $sales_rep_code_less, $sales_rep_code_less_or_equal, $sales_rep_code_greater, $sales_rep_code_greater_or_equal, $sales_rep_code_is_null, $sales_rep_code_is_not_null, $sales_rep_code_like, $sales_rep_code_not_like, $sales_rep_code_contains, $sales_rep_code_not_contains, $sales_rep_code_starts_with, $sales_rep_code_not_starts_with, $sales_rep_code_ends_with, $sales_rep_code_not_ends_with, $sales_rep_code_in, $sales_rep_code_between, $sales_manager_code_not_equal, $sales_manager_code_less, $sales_manager_code_less_or_equal, $sales_manager_code_greater, $sales_manager_code_greater_or_equal, $sales_manager_code_is_null, $sales_manager_code_is_not_null, $sales_manager_code_like, $sales_manager_code_not_like, $sales_manager_code_contains, $sales_manager_code_not_contains, $sales_manager_code_starts_with, $sales_manager_code_not_starts_with, $sales_manager_code_ends_with, $sales_manager_code_not_ends_with, $sales_manager_code_in, $sales_manager_code_between, $list_id_not_equal, $list_id_less, $list_id_less_or_equal, $list_id_greater, $list_id_greater_or_equal, $list_id_is_null, $list_id_is_not_null, $list_id_like, $list_id_not_like, $list_id_contains, $list_id_not_contains, $list_id_starts_with, $list_id_not_starts_with, $list_id_ends_with, $list_id_not_ends_with, $list_id_in, $list_id_between, $list_date_not_equal, $list_date_less, $list_date_less_or_equal, $list_date_greater, $list_date_greater_or_equal, $list_date_is_null, $list_date_is_not_null, $list_date_like, $list_date_not_like, $list_date_contains, $list_date_not_contains, $list_date_starts_with, $list_date_not_starts_with, $list_date_ends_with, $list_date_not_ends_with, $list_date_in, $list_date_between, $is_remaining_call_not_equal, $is_remaining_call_less, $is_remaining_call_less_or_equal, $is_remaining_call_greater, $is_remaining_call_greater_or_equal, $is_remaining_call_is_null, $is_remaining_call_is_not_null, $is_remaining_call_like, $is_remaining_call_not_like, $is_remaining_call_contains, $is_remaining_call_not_contains, $is_remaining_call_starts_with, $is_remaining_call_not_starts_with, $is_remaining_call_ends_with, $is_remaining_call_not_ends_with, $is_remaining_call_in, $is_remaining_call_between, $is_callback_not_equal, $is_callback_less, $is_callback_less_or_equal, $is_callback_greater, $is_callback_greater_or_equal, $is_callback_is_null, $is_callback_is_not_null, $is_callback_like, $is_callback_not_like, $is_callback_contains, $is_callback_not_contains, $is_callback_starts_with, $is_callback_not_starts_with, $is_callback_ends_with, $is_callback_not_ends_with, $is_callback_in, $is_callback_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCallList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callListSearchAsync
     *
     * Gets list of call lists.
     *
     * @param  bool $include_inactive_lists (optional)
     * @param  bool $only_include_lists_with_calls_remaining (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $sales_rep_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $sales_manager_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $list_id Filter on LIST-ID using &#39;Equal&#39; operator (optional)
     * @param  string $list_date Filter on LIST-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $is_remaining_call Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $is_callback Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $sales_rep_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_rep_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_rep_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_rep_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_rep_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_rep_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_rep_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_rep_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_rep_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_rep_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_rep_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $sales_manager_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_manager_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_manager_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_manager_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_manager_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_manager_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_manager_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_manager_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_manager_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_manager_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_manager_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $list_id_not_equal Filter on LIST-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_id_less Filter on LIST-ID using &#39;Less&#39; operator (optional)
     * @param  string $list_id_less_or_equal Filter on LIST-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_id_greater Filter on LIST-ID using &#39;Greater&#39; operator (optional)
     * @param  string $list_id_greater_or_equal Filter on LIST-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_id_is_null Filter on LIST-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $list_id_is_not_null Filter on LIST-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_id_like Filter on LIST-ID using &#39;Like&#39; operator (optional)
     * @param  string $list_id_not_like Filter on LIST-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $list_id_contains Filter on LIST-ID using &#39;Contains&#39; operator (optional)
     * @param  string $list_id_not_contains Filter on LIST-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $list_id_starts_with Filter on LIST-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_id_not_starts_with Filter on LIST-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_id_ends_with Filter on LIST-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_id_not_ends_with Filter on LIST-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_id_in Filter on LIST-ID using &#39;In&#39; operator (optional)
     * @param  string $list_id_between Filter on LIST-ID using &#39;Between&#39; operator (optional)
     * @param  string $list_date_not_equal Filter on LIST-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_date_less Filter on LIST-DTE using &#39;Less&#39; operator (optional)
     * @param  string $list_date_less_or_equal Filter on LIST-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_date_greater Filter on LIST-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $list_date_greater_or_equal Filter on LIST-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_date_is_null Filter on LIST-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $list_date_is_not_null Filter on LIST-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_date_like Filter on LIST-DTE using &#39;Like&#39; operator (optional)
     * @param  string $list_date_not_like Filter on LIST-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $list_date_contains Filter on LIST-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $list_date_not_contains Filter on LIST-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $list_date_starts_with Filter on LIST-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_date_not_starts_with Filter on LIST-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_date_ends_with Filter on LIST-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_date_not_ends_with Filter on LIST-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_date_in Filter on LIST-DTE using &#39;In&#39; operator (optional)
     * @param  string $list_date_between Filter on LIST-DTE using &#39;Between&#39; operator (optional)
     * @param  string $is_remaining_call_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_remaining_call_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_remaining_call_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_remaining_call_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_remaining_call_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_remaining_call_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_remaining_call_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_remaining_call_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_remaining_call_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_remaining_call_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_remaining_call_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     * @param  string $is_callback_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_callback_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_callback_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_callback_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_callback_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_callback_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_callback_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_callback_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_callback_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_callback_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_callback_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_callback_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_callback_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_callback_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_callback_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_callback_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_callback_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListSearchAsync($include_inactive_lists = null, $only_include_lists_with_calls_remaining = null, $pager_skip = null, $pager_take = null, $sales_rep_code = null, $sales_manager_code = null, $list_id = null, $list_date = null, $is_remaining_call = null, $is_callback = null, $sales_rep_code_not_equal = null, $sales_rep_code_less = null, $sales_rep_code_less_or_equal = null, $sales_rep_code_greater = null, $sales_rep_code_greater_or_equal = null, $sales_rep_code_is_null = null, $sales_rep_code_is_not_null = null, $sales_rep_code_like = null, $sales_rep_code_not_like = null, $sales_rep_code_contains = null, $sales_rep_code_not_contains = null, $sales_rep_code_starts_with = null, $sales_rep_code_not_starts_with = null, $sales_rep_code_ends_with = null, $sales_rep_code_not_ends_with = null, $sales_rep_code_in = null, $sales_rep_code_between = null, $sales_manager_code_not_equal = null, $sales_manager_code_less = null, $sales_manager_code_less_or_equal = null, $sales_manager_code_greater = null, $sales_manager_code_greater_or_equal = null, $sales_manager_code_is_null = null, $sales_manager_code_is_not_null = null, $sales_manager_code_like = null, $sales_manager_code_not_like = null, $sales_manager_code_contains = null, $sales_manager_code_not_contains = null, $sales_manager_code_starts_with = null, $sales_manager_code_not_starts_with = null, $sales_manager_code_ends_with = null, $sales_manager_code_not_ends_with = null, $sales_manager_code_in = null, $sales_manager_code_between = null, $list_id_not_equal = null, $list_id_less = null, $list_id_less_or_equal = null, $list_id_greater = null, $list_id_greater_or_equal = null, $list_id_is_null = null, $list_id_is_not_null = null, $list_id_like = null, $list_id_not_like = null, $list_id_contains = null, $list_id_not_contains = null, $list_id_starts_with = null, $list_id_not_starts_with = null, $list_id_ends_with = null, $list_id_not_ends_with = null, $list_id_in = null, $list_id_between = null, $list_date_not_equal = null, $list_date_less = null, $list_date_less_or_equal = null, $list_date_greater = null, $list_date_greater_or_equal = null, $list_date_is_null = null, $list_date_is_not_null = null, $list_date_like = null, $list_date_not_like = null, $list_date_contains = null, $list_date_not_contains = null, $list_date_starts_with = null, $list_date_not_starts_with = null, $list_date_ends_with = null, $list_date_not_ends_with = null, $list_date_in = null, $list_date_between = null, $is_remaining_call_not_equal = null, $is_remaining_call_less = null, $is_remaining_call_less_or_equal = null, $is_remaining_call_greater = null, $is_remaining_call_greater_or_equal = null, $is_remaining_call_is_null = null, $is_remaining_call_is_not_null = null, $is_remaining_call_like = null, $is_remaining_call_not_like = null, $is_remaining_call_contains = null, $is_remaining_call_not_contains = null, $is_remaining_call_starts_with = null, $is_remaining_call_not_starts_with = null, $is_remaining_call_ends_with = null, $is_remaining_call_not_ends_with = null, $is_remaining_call_in = null, $is_remaining_call_between = null, $is_callback_not_equal = null, $is_callback_less = null, $is_callback_less_or_equal = null, $is_callback_greater = null, $is_callback_greater_or_equal = null, $is_callback_is_null = null, $is_callback_is_not_null = null, $is_callback_like = null, $is_callback_not_like = null, $is_callback_contains = null, $is_callback_not_contains = null, $is_callback_starts_with = null, $is_callback_not_starts_with = null, $is_callback_ends_with = null, $is_callback_not_ends_with = null, $is_callback_in = null, $is_callback_between = null)
    {
        return $this->callListSearchAsyncWithHttpInfo($include_inactive_lists, $only_include_lists_with_calls_remaining, $pager_skip, $pager_take, $sales_rep_code, $sales_manager_code, $list_id, $list_date, $is_remaining_call, $is_callback, $sales_rep_code_not_equal, $sales_rep_code_less, $sales_rep_code_less_or_equal, $sales_rep_code_greater, $sales_rep_code_greater_or_equal, $sales_rep_code_is_null, $sales_rep_code_is_not_null, $sales_rep_code_like, $sales_rep_code_not_like, $sales_rep_code_contains, $sales_rep_code_not_contains, $sales_rep_code_starts_with, $sales_rep_code_not_starts_with, $sales_rep_code_ends_with, $sales_rep_code_not_ends_with, $sales_rep_code_in, $sales_rep_code_between, $sales_manager_code_not_equal, $sales_manager_code_less, $sales_manager_code_less_or_equal, $sales_manager_code_greater, $sales_manager_code_greater_or_equal, $sales_manager_code_is_null, $sales_manager_code_is_not_null, $sales_manager_code_like, $sales_manager_code_not_like, $sales_manager_code_contains, $sales_manager_code_not_contains, $sales_manager_code_starts_with, $sales_manager_code_not_starts_with, $sales_manager_code_ends_with, $sales_manager_code_not_ends_with, $sales_manager_code_in, $sales_manager_code_between, $list_id_not_equal, $list_id_less, $list_id_less_or_equal, $list_id_greater, $list_id_greater_or_equal, $list_id_is_null, $list_id_is_not_null, $list_id_like, $list_id_not_like, $list_id_contains, $list_id_not_contains, $list_id_starts_with, $list_id_not_starts_with, $list_id_ends_with, $list_id_not_ends_with, $list_id_in, $list_id_between, $list_date_not_equal, $list_date_less, $list_date_less_or_equal, $list_date_greater, $list_date_greater_or_equal, $list_date_is_null, $list_date_is_not_null, $list_date_like, $list_date_not_like, $list_date_contains, $list_date_not_contains, $list_date_starts_with, $list_date_not_starts_with, $list_date_ends_with, $list_date_not_ends_with, $list_date_in, $list_date_between, $is_remaining_call_not_equal, $is_remaining_call_less, $is_remaining_call_less_or_equal, $is_remaining_call_greater, $is_remaining_call_greater_or_equal, $is_remaining_call_is_null, $is_remaining_call_is_not_null, $is_remaining_call_like, $is_remaining_call_not_like, $is_remaining_call_contains, $is_remaining_call_not_contains, $is_remaining_call_starts_with, $is_remaining_call_not_starts_with, $is_remaining_call_ends_with, $is_remaining_call_not_ends_with, $is_remaining_call_in, $is_remaining_call_between, $is_callback_not_equal, $is_callback_less, $is_callback_less_or_equal, $is_callback_greater, $is_callback_greater_or_equal, $is_callback_is_null, $is_callback_is_not_null, $is_callback_like, $is_callback_not_like, $is_callback_contains, $is_callback_not_contains, $is_callback_starts_with, $is_callback_not_starts_with, $is_callback_ends_with, $is_callback_not_ends_with, $is_callback_in, $is_callback_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListSearchAsyncWithHttpInfo
     *
     * Gets list of call lists.
     *
     * @param  bool $include_inactive_lists (optional)
     * @param  bool $only_include_lists_with_calls_remaining (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $sales_rep_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $sales_manager_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $list_id Filter on LIST-ID using &#39;Equal&#39; operator (optional)
     * @param  string $list_date Filter on LIST-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $is_remaining_call Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $is_callback Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $sales_rep_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_rep_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_rep_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_rep_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_rep_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_rep_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_rep_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_rep_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_rep_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_rep_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_rep_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $sales_manager_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_manager_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_manager_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_manager_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_manager_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_manager_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_manager_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_manager_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_manager_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_manager_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_manager_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $list_id_not_equal Filter on LIST-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_id_less Filter on LIST-ID using &#39;Less&#39; operator (optional)
     * @param  string $list_id_less_or_equal Filter on LIST-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_id_greater Filter on LIST-ID using &#39;Greater&#39; operator (optional)
     * @param  string $list_id_greater_or_equal Filter on LIST-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_id_is_null Filter on LIST-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $list_id_is_not_null Filter on LIST-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_id_like Filter on LIST-ID using &#39;Like&#39; operator (optional)
     * @param  string $list_id_not_like Filter on LIST-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $list_id_contains Filter on LIST-ID using &#39;Contains&#39; operator (optional)
     * @param  string $list_id_not_contains Filter on LIST-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $list_id_starts_with Filter on LIST-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_id_not_starts_with Filter on LIST-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_id_ends_with Filter on LIST-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_id_not_ends_with Filter on LIST-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_id_in Filter on LIST-ID using &#39;In&#39; operator (optional)
     * @param  string $list_id_between Filter on LIST-ID using &#39;Between&#39; operator (optional)
     * @param  string $list_date_not_equal Filter on LIST-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_date_less Filter on LIST-DTE using &#39;Less&#39; operator (optional)
     * @param  string $list_date_less_or_equal Filter on LIST-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_date_greater Filter on LIST-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $list_date_greater_or_equal Filter on LIST-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_date_is_null Filter on LIST-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $list_date_is_not_null Filter on LIST-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_date_like Filter on LIST-DTE using &#39;Like&#39; operator (optional)
     * @param  string $list_date_not_like Filter on LIST-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $list_date_contains Filter on LIST-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $list_date_not_contains Filter on LIST-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $list_date_starts_with Filter on LIST-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_date_not_starts_with Filter on LIST-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_date_ends_with Filter on LIST-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_date_not_ends_with Filter on LIST-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_date_in Filter on LIST-DTE using &#39;In&#39; operator (optional)
     * @param  string $list_date_between Filter on LIST-DTE using &#39;Between&#39; operator (optional)
     * @param  string $is_remaining_call_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_remaining_call_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_remaining_call_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_remaining_call_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_remaining_call_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_remaining_call_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_remaining_call_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_remaining_call_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_remaining_call_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_remaining_call_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_remaining_call_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     * @param  string $is_callback_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_callback_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_callback_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_callback_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_callback_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_callback_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_callback_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_callback_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_callback_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_callback_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_callback_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_callback_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_callback_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_callback_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_callback_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_callback_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_callback_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListSearchAsyncWithHttpInfo($include_inactive_lists = null, $only_include_lists_with_calls_remaining = null, $pager_skip = null, $pager_take = null, $sales_rep_code = null, $sales_manager_code = null, $list_id = null, $list_date = null, $is_remaining_call = null, $is_callback = null, $sales_rep_code_not_equal = null, $sales_rep_code_less = null, $sales_rep_code_less_or_equal = null, $sales_rep_code_greater = null, $sales_rep_code_greater_or_equal = null, $sales_rep_code_is_null = null, $sales_rep_code_is_not_null = null, $sales_rep_code_like = null, $sales_rep_code_not_like = null, $sales_rep_code_contains = null, $sales_rep_code_not_contains = null, $sales_rep_code_starts_with = null, $sales_rep_code_not_starts_with = null, $sales_rep_code_ends_with = null, $sales_rep_code_not_ends_with = null, $sales_rep_code_in = null, $sales_rep_code_between = null, $sales_manager_code_not_equal = null, $sales_manager_code_less = null, $sales_manager_code_less_or_equal = null, $sales_manager_code_greater = null, $sales_manager_code_greater_or_equal = null, $sales_manager_code_is_null = null, $sales_manager_code_is_not_null = null, $sales_manager_code_like = null, $sales_manager_code_not_like = null, $sales_manager_code_contains = null, $sales_manager_code_not_contains = null, $sales_manager_code_starts_with = null, $sales_manager_code_not_starts_with = null, $sales_manager_code_ends_with = null, $sales_manager_code_not_ends_with = null, $sales_manager_code_in = null, $sales_manager_code_between = null, $list_id_not_equal = null, $list_id_less = null, $list_id_less_or_equal = null, $list_id_greater = null, $list_id_greater_or_equal = null, $list_id_is_null = null, $list_id_is_not_null = null, $list_id_like = null, $list_id_not_like = null, $list_id_contains = null, $list_id_not_contains = null, $list_id_starts_with = null, $list_id_not_starts_with = null, $list_id_ends_with = null, $list_id_not_ends_with = null, $list_id_in = null, $list_id_between = null, $list_date_not_equal = null, $list_date_less = null, $list_date_less_or_equal = null, $list_date_greater = null, $list_date_greater_or_equal = null, $list_date_is_null = null, $list_date_is_not_null = null, $list_date_like = null, $list_date_not_like = null, $list_date_contains = null, $list_date_not_contains = null, $list_date_starts_with = null, $list_date_not_starts_with = null, $list_date_ends_with = null, $list_date_not_ends_with = null, $list_date_in = null, $list_date_between = null, $is_remaining_call_not_equal = null, $is_remaining_call_less = null, $is_remaining_call_less_or_equal = null, $is_remaining_call_greater = null, $is_remaining_call_greater_or_equal = null, $is_remaining_call_is_null = null, $is_remaining_call_is_not_null = null, $is_remaining_call_like = null, $is_remaining_call_not_like = null, $is_remaining_call_contains = null, $is_remaining_call_not_contains = null, $is_remaining_call_starts_with = null, $is_remaining_call_not_starts_with = null, $is_remaining_call_ends_with = null, $is_remaining_call_not_ends_with = null, $is_remaining_call_in = null, $is_remaining_call_between = null, $is_callback_not_equal = null, $is_callback_less = null, $is_callback_less_or_equal = null, $is_callback_greater = null, $is_callback_greater_or_equal = null, $is_callback_is_null = null, $is_callback_is_not_null = null, $is_callback_like = null, $is_callback_not_like = null, $is_callback_contains = null, $is_callback_not_contains = null, $is_callback_starts_with = null, $is_callback_not_starts_with = null, $is_callback_ends_with = null, $is_callback_not_ends_with = null, $is_callback_in = null, $is_callback_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCallList';
        $request = $this->callListSearchRequest($include_inactive_lists, $only_include_lists_with_calls_remaining, $pager_skip, $pager_take, $sales_rep_code, $sales_manager_code, $list_id, $list_date, $is_remaining_call, $is_callback, $sales_rep_code_not_equal, $sales_rep_code_less, $sales_rep_code_less_or_equal, $sales_rep_code_greater, $sales_rep_code_greater_or_equal, $sales_rep_code_is_null, $sales_rep_code_is_not_null, $sales_rep_code_like, $sales_rep_code_not_like, $sales_rep_code_contains, $sales_rep_code_not_contains, $sales_rep_code_starts_with, $sales_rep_code_not_starts_with, $sales_rep_code_ends_with, $sales_rep_code_not_ends_with, $sales_rep_code_in, $sales_rep_code_between, $sales_manager_code_not_equal, $sales_manager_code_less, $sales_manager_code_less_or_equal, $sales_manager_code_greater, $sales_manager_code_greater_or_equal, $sales_manager_code_is_null, $sales_manager_code_is_not_null, $sales_manager_code_like, $sales_manager_code_not_like, $sales_manager_code_contains, $sales_manager_code_not_contains, $sales_manager_code_starts_with, $sales_manager_code_not_starts_with, $sales_manager_code_ends_with, $sales_manager_code_not_ends_with, $sales_manager_code_in, $sales_manager_code_between, $list_id_not_equal, $list_id_less, $list_id_less_or_equal, $list_id_greater, $list_id_greater_or_equal, $list_id_is_null, $list_id_is_not_null, $list_id_like, $list_id_not_like, $list_id_contains, $list_id_not_contains, $list_id_starts_with, $list_id_not_starts_with, $list_id_ends_with, $list_id_not_ends_with, $list_id_in, $list_id_between, $list_date_not_equal, $list_date_less, $list_date_less_or_equal, $list_date_greater, $list_date_greater_or_equal, $list_date_is_null, $list_date_is_not_null, $list_date_like, $list_date_not_like, $list_date_contains, $list_date_not_contains, $list_date_starts_with, $list_date_not_starts_with, $list_date_ends_with, $list_date_not_ends_with, $list_date_in, $list_date_between, $is_remaining_call_not_equal, $is_remaining_call_less, $is_remaining_call_less_or_equal, $is_remaining_call_greater, $is_remaining_call_greater_or_equal, $is_remaining_call_is_null, $is_remaining_call_is_not_null, $is_remaining_call_like, $is_remaining_call_not_like, $is_remaining_call_contains, $is_remaining_call_not_contains, $is_remaining_call_starts_with, $is_remaining_call_not_starts_with, $is_remaining_call_ends_with, $is_remaining_call_not_ends_with, $is_remaining_call_in, $is_remaining_call_between, $is_callback_not_equal, $is_callback_less, $is_callback_less_or_equal, $is_callback_greater, $is_callback_greater_or_equal, $is_callback_is_null, $is_callback_is_not_null, $is_callback_like, $is_callback_not_like, $is_callback_contains, $is_callback_not_contains, $is_callback_starts_with, $is_callback_not_starts_with, $is_callback_ends_with, $is_callback_not_ends_with, $is_callback_in, $is_callback_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListSearch'
     *
     * @param  bool $include_inactive_lists (optional)
     * @param  bool $only_include_lists_with_calls_remaining (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $sales_rep_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $sales_manager_code Filter on SLM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $list_id Filter on LIST-ID using &#39;Equal&#39; operator (optional)
     * @param  string $list_date Filter on LIST-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $is_remaining_call Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $is_callback Filter on YES-NO using &#39;Equal&#39; operator (optional)
     * @param  string $sales_rep_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_rep_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_rep_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_rep_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_rep_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_rep_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_rep_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_rep_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_rep_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_rep_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_rep_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_rep_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_rep_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_rep_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $sales_manager_code_not_equal Filter on SLM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $sales_manager_code_less Filter on SLM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $sales_manager_code_less_or_equal Filter on SLM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_greater Filter on SLM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $sales_manager_code_greater_or_equal Filter on SLM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $sales_manager_code_is_null Filter on SLM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $sales_manager_code_is_not_null Filter on SLM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $sales_manager_code_like Filter on SLM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $sales_manager_code_not_like Filter on SLM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $sales_manager_code_contains Filter on SLM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $sales_manager_code_not_contains Filter on SLM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $sales_manager_code_starts_with Filter on SLM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_starts_with Filter on SLM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $sales_manager_code_ends_with Filter on SLM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_not_ends_with Filter on SLM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $sales_manager_code_in Filter on SLM-NUM using &#39;In&#39; operator (optional)
     * @param  string $sales_manager_code_between Filter on SLM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $list_id_not_equal Filter on LIST-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_id_less Filter on LIST-ID using &#39;Less&#39; operator (optional)
     * @param  string $list_id_less_or_equal Filter on LIST-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_id_greater Filter on LIST-ID using &#39;Greater&#39; operator (optional)
     * @param  string $list_id_greater_or_equal Filter on LIST-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_id_is_null Filter on LIST-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $list_id_is_not_null Filter on LIST-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_id_like Filter on LIST-ID using &#39;Like&#39; operator (optional)
     * @param  string $list_id_not_like Filter on LIST-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $list_id_contains Filter on LIST-ID using &#39;Contains&#39; operator (optional)
     * @param  string $list_id_not_contains Filter on LIST-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $list_id_starts_with Filter on LIST-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_id_not_starts_with Filter on LIST-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_id_ends_with Filter on LIST-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_id_not_ends_with Filter on LIST-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_id_in Filter on LIST-ID using &#39;In&#39; operator (optional)
     * @param  string $list_id_between Filter on LIST-ID using &#39;Between&#39; operator (optional)
     * @param  string $list_date_not_equal Filter on LIST-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $list_date_less Filter on LIST-DTE using &#39;Less&#39; operator (optional)
     * @param  string $list_date_less_or_equal Filter on LIST-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $list_date_greater Filter on LIST-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $list_date_greater_or_equal Filter on LIST-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $list_date_is_null Filter on LIST-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $list_date_is_not_null Filter on LIST-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $list_date_like Filter on LIST-DTE using &#39;Like&#39; operator (optional)
     * @param  string $list_date_not_like Filter on LIST-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $list_date_contains Filter on LIST-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $list_date_not_contains Filter on LIST-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $list_date_starts_with Filter on LIST-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $list_date_not_starts_with Filter on LIST-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $list_date_ends_with Filter on LIST-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $list_date_not_ends_with Filter on LIST-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $list_date_in Filter on LIST-DTE using &#39;In&#39; operator (optional)
     * @param  string $list_date_between Filter on LIST-DTE using &#39;Between&#39; operator (optional)
     * @param  string $is_remaining_call_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_remaining_call_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_remaining_call_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_remaining_call_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_remaining_call_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_remaining_call_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_remaining_call_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_remaining_call_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_remaining_call_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_remaining_call_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_remaining_call_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_remaining_call_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_remaining_call_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_remaining_call_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     * @param  string $is_callback_not_equal Filter on YES-NO using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_callback_less Filter on YES-NO using &#39;Less&#39; operator (optional)
     * @param  string $is_callback_less_or_equal Filter on YES-NO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_callback_greater Filter on YES-NO using &#39;Greater&#39; operator (optional)
     * @param  string $is_callback_greater_or_equal Filter on YES-NO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_callback_is_null Filter on YES-NO using &#39;IsNull&#39; operator (optional)
     * @param  string $is_callback_is_not_null Filter on YES-NO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_callback_like Filter on YES-NO using &#39;Like&#39; operator (optional)
     * @param  string $is_callback_not_like Filter on YES-NO using &#39;NotLike&#39; operator (optional)
     * @param  string $is_callback_contains Filter on YES-NO using &#39;Contains&#39; operator (optional)
     * @param  string $is_callback_not_contains Filter on YES-NO using &#39;NotContains&#39; operator (optional)
     * @param  string $is_callback_starts_with Filter on YES-NO using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_callback_not_starts_with Filter on YES-NO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_callback_ends_with Filter on YES-NO using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_callback_not_ends_with Filter on YES-NO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_callback_in Filter on YES-NO using &#39;In&#39; operator (optional)
     * @param  string $is_callback_between Filter on YES-NO using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListSearchRequest($include_inactive_lists = null, $only_include_lists_with_calls_remaining = null, $pager_skip = null, $pager_take = null, $sales_rep_code = null, $sales_manager_code = null, $list_id = null, $list_date = null, $is_remaining_call = null, $is_callback = null, $sales_rep_code_not_equal = null, $sales_rep_code_less = null, $sales_rep_code_less_or_equal = null, $sales_rep_code_greater = null, $sales_rep_code_greater_or_equal = null, $sales_rep_code_is_null = null, $sales_rep_code_is_not_null = null, $sales_rep_code_like = null, $sales_rep_code_not_like = null, $sales_rep_code_contains = null, $sales_rep_code_not_contains = null, $sales_rep_code_starts_with = null, $sales_rep_code_not_starts_with = null, $sales_rep_code_ends_with = null, $sales_rep_code_not_ends_with = null, $sales_rep_code_in = null, $sales_rep_code_between = null, $sales_manager_code_not_equal = null, $sales_manager_code_less = null, $sales_manager_code_less_or_equal = null, $sales_manager_code_greater = null, $sales_manager_code_greater_or_equal = null, $sales_manager_code_is_null = null, $sales_manager_code_is_not_null = null, $sales_manager_code_like = null, $sales_manager_code_not_like = null, $sales_manager_code_contains = null, $sales_manager_code_not_contains = null, $sales_manager_code_starts_with = null, $sales_manager_code_not_starts_with = null, $sales_manager_code_ends_with = null, $sales_manager_code_not_ends_with = null, $sales_manager_code_in = null, $sales_manager_code_between = null, $list_id_not_equal = null, $list_id_less = null, $list_id_less_or_equal = null, $list_id_greater = null, $list_id_greater_or_equal = null, $list_id_is_null = null, $list_id_is_not_null = null, $list_id_like = null, $list_id_not_like = null, $list_id_contains = null, $list_id_not_contains = null, $list_id_starts_with = null, $list_id_not_starts_with = null, $list_id_ends_with = null, $list_id_not_ends_with = null, $list_id_in = null, $list_id_between = null, $list_date_not_equal = null, $list_date_less = null, $list_date_less_or_equal = null, $list_date_greater = null, $list_date_greater_or_equal = null, $list_date_is_null = null, $list_date_is_not_null = null, $list_date_like = null, $list_date_not_like = null, $list_date_contains = null, $list_date_not_contains = null, $list_date_starts_with = null, $list_date_not_starts_with = null, $list_date_ends_with = null, $list_date_not_ends_with = null, $list_date_in = null, $list_date_between = null, $is_remaining_call_not_equal = null, $is_remaining_call_less = null, $is_remaining_call_less_or_equal = null, $is_remaining_call_greater = null, $is_remaining_call_greater_or_equal = null, $is_remaining_call_is_null = null, $is_remaining_call_is_not_null = null, $is_remaining_call_like = null, $is_remaining_call_not_like = null, $is_remaining_call_contains = null, $is_remaining_call_not_contains = null, $is_remaining_call_starts_with = null, $is_remaining_call_not_starts_with = null, $is_remaining_call_ends_with = null, $is_remaining_call_not_ends_with = null, $is_remaining_call_in = null, $is_remaining_call_between = null, $is_callback_not_equal = null, $is_callback_less = null, $is_callback_less_or_equal = null, $is_callback_greater = null, $is_callback_greater_or_equal = null, $is_callback_is_null = null, $is_callback_is_not_null = null, $is_callback_like = null, $is_callback_not_like = null, $is_callback_contains = null, $is_callback_not_contains = null, $is_callback_starts_with = null, $is_callback_not_starts_with = null, $is_callback_ends_with = null, $is_callback_not_ends_with = null, $is_callback_in = null, $is_callback_between = null)
    {

        $resourcePath = '/call-lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_inactive_lists !== null) {
            $queryParams['includeInactiveLists'] = ObjectSerializer::toQueryValue($include_inactive_lists);
        }
        // query params
        if ($only_include_lists_with_calls_remaining !== null) {
            $queryParams['onlyIncludeListsWithCallsRemaining'] = ObjectSerializer::toQueryValue($only_include_lists_with_calls_remaining);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($sales_rep_code !== null) {
            $queryParams['SalesRepCode'] = ObjectSerializer::toQueryValue($sales_rep_code);
        }
        // query params
        if ($sales_manager_code !== null) {
            $queryParams['SalesManagerCode'] = ObjectSerializer::toQueryValue($sales_manager_code);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['ListId'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if ($list_date !== null) {
            $queryParams['ListDate'] = ObjectSerializer::toQueryValue($list_date);
        }
        // query params
        if ($is_remaining_call !== null) {
            $queryParams['IsRemainingCall'] = ObjectSerializer::toQueryValue($is_remaining_call);
        }
        // query params
        if ($is_callback !== null) {
            $queryParams['IsCallback'] = ObjectSerializer::toQueryValue($is_callback);
        }
        // query params
        if ($sales_rep_code_not_equal !== null) {
            $queryParams['SalesRepCode.NotEqual'] = ObjectSerializer::toQueryValue($sales_rep_code_not_equal);
        }
        // query params
        if ($sales_rep_code_less !== null) {
            $queryParams['SalesRepCode.Less'] = ObjectSerializer::toQueryValue($sales_rep_code_less);
        }
        // query params
        if ($sales_rep_code_less_or_equal !== null) {
            $queryParams['SalesRepCode.LessOrEqual'] = ObjectSerializer::toQueryValue($sales_rep_code_less_or_equal);
        }
        // query params
        if ($sales_rep_code_greater !== null) {
            $queryParams['SalesRepCode.Greater'] = ObjectSerializer::toQueryValue($sales_rep_code_greater);
        }
        // query params
        if ($sales_rep_code_greater_or_equal !== null) {
            $queryParams['SalesRepCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($sales_rep_code_greater_or_equal);
        }
        // query params
        if ($sales_rep_code_is_null !== null) {
            $queryParams['SalesRepCode.IsNull'] = ObjectSerializer::toQueryValue($sales_rep_code_is_null);
        }
        // query params
        if ($sales_rep_code_is_not_null !== null) {
            $queryParams['SalesRepCode.IsNotNull'] = ObjectSerializer::toQueryValue($sales_rep_code_is_not_null);
        }
        // query params
        if ($sales_rep_code_like !== null) {
            $queryParams['SalesRepCode.Like'] = ObjectSerializer::toQueryValue($sales_rep_code_like);
        }
        // query params
        if ($sales_rep_code_not_like !== null) {
            $queryParams['SalesRepCode.NotLike'] = ObjectSerializer::toQueryValue($sales_rep_code_not_like);
        }
        // query params
        if ($sales_rep_code_contains !== null) {
            $queryParams['SalesRepCode.Contains'] = ObjectSerializer::toQueryValue($sales_rep_code_contains);
        }
        // query params
        if ($sales_rep_code_not_contains !== null) {
            $queryParams['SalesRepCode.NotContains'] = ObjectSerializer::toQueryValue($sales_rep_code_not_contains);
        }
        // query params
        if ($sales_rep_code_starts_with !== null) {
            $queryParams['SalesRepCode.StartsWith'] = ObjectSerializer::toQueryValue($sales_rep_code_starts_with);
        }
        // query params
        if ($sales_rep_code_not_starts_with !== null) {
            $queryParams['SalesRepCode.NotStartsWith'] = ObjectSerializer::toQueryValue($sales_rep_code_not_starts_with);
        }
        // query params
        if ($sales_rep_code_ends_with !== null) {
            $queryParams['SalesRepCode.EndsWith'] = ObjectSerializer::toQueryValue($sales_rep_code_ends_with);
        }
        // query params
        if ($sales_rep_code_not_ends_with !== null) {
            $queryParams['SalesRepCode.NotEndsWith'] = ObjectSerializer::toQueryValue($sales_rep_code_not_ends_with);
        }
        // query params
        if ($sales_rep_code_in !== null) {
            $queryParams['SalesRepCode.In'] = ObjectSerializer::toQueryValue($sales_rep_code_in);
        }
        // query params
        if ($sales_rep_code_between !== null) {
            $queryParams['SalesRepCode.Between'] = ObjectSerializer::toQueryValue($sales_rep_code_between);
        }
        // query params
        if ($sales_manager_code_not_equal !== null) {
            $queryParams['SalesManagerCode.NotEqual'] = ObjectSerializer::toQueryValue($sales_manager_code_not_equal);
        }
        // query params
        if ($sales_manager_code_less !== null) {
            $queryParams['SalesManagerCode.Less'] = ObjectSerializer::toQueryValue($sales_manager_code_less);
        }
        // query params
        if ($sales_manager_code_less_or_equal !== null) {
            $queryParams['SalesManagerCode.LessOrEqual'] = ObjectSerializer::toQueryValue($sales_manager_code_less_or_equal);
        }
        // query params
        if ($sales_manager_code_greater !== null) {
            $queryParams['SalesManagerCode.Greater'] = ObjectSerializer::toQueryValue($sales_manager_code_greater);
        }
        // query params
        if ($sales_manager_code_greater_or_equal !== null) {
            $queryParams['SalesManagerCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($sales_manager_code_greater_or_equal);
        }
        // query params
        if ($sales_manager_code_is_null !== null) {
            $queryParams['SalesManagerCode.IsNull'] = ObjectSerializer::toQueryValue($sales_manager_code_is_null);
        }
        // query params
        if ($sales_manager_code_is_not_null !== null) {
            $queryParams['SalesManagerCode.IsNotNull'] = ObjectSerializer::toQueryValue($sales_manager_code_is_not_null);
        }
        // query params
        if ($sales_manager_code_like !== null) {
            $queryParams['SalesManagerCode.Like'] = ObjectSerializer::toQueryValue($sales_manager_code_like);
        }
        // query params
        if ($sales_manager_code_not_like !== null) {
            $queryParams['SalesManagerCode.NotLike'] = ObjectSerializer::toQueryValue($sales_manager_code_not_like);
        }
        // query params
        if ($sales_manager_code_contains !== null) {
            $queryParams['SalesManagerCode.Contains'] = ObjectSerializer::toQueryValue($sales_manager_code_contains);
        }
        // query params
        if ($sales_manager_code_not_contains !== null) {
            $queryParams['SalesManagerCode.NotContains'] = ObjectSerializer::toQueryValue($sales_manager_code_not_contains);
        }
        // query params
        if ($sales_manager_code_starts_with !== null) {
            $queryParams['SalesManagerCode.StartsWith'] = ObjectSerializer::toQueryValue($sales_manager_code_starts_with);
        }
        // query params
        if ($sales_manager_code_not_starts_with !== null) {
            $queryParams['SalesManagerCode.NotStartsWith'] = ObjectSerializer::toQueryValue($sales_manager_code_not_starts_with);
        }
        // query params
        if ($sales_manager_code_ends_with !== null) {
            $queryParams['SalesManagerCode.EndsWith'] = ObjectSerializer::toQueryValue($sales_manager_code_ends_with);
        }
        // query params
        if ($sales_manager_code_not_ends_with !== null) {
            $queryParams['SalesManagerCode.NotEndsWith'] = ObjectSerializer::toQueryValue($sales_manager_code_not_ends_with);
        }
        // query params
        if ($sales_manager_code_in !== null) {
            $queryParams['SalesManagerCode.In'] = ObjectSerializer::toQueryValue($sales_manager_code_in);
        }
        // query params
        if ($sales_manager_code_between !== null) {
            $queryParams['SalesManagerCode.Between'] = ObjectSerializer::toQueryValue($sales_manager_code_between);
        }
        // query params
        if ($list_id_not_equal !== null) {
            $queryParams['ListId.NotEqual'] = ObjectSerializer::toQueryValue($list_id_not_equal);
        }
        // query params
        if ($list_id_less !== null) {
            $queryParams['ListId.Less'] = ObjectSerializer::toQueryValue($list_id_less);
        }
        // query params
        if ($list_id_less_or_equal !== null) {
            $queryParams['ListId.LessOrEqual'] = ObjectSerializer::toQueryValue($list_id_less_or_equal);
        }
        // query params
        if ($list_id_greater !== null) {
            $queryParams['ListId.Greater'] = ObjectSerializer::toQueryValue($list_id_greater);
        }
        // query params
        if ($list_id_greater_or_equal !== null) {
            $queryParams['ListId.GreaterOrEqual'] = ObjectSerializer::toQueryValue($list_id_greater_or_equal);
        }
        // query params
        if ($list_id_is_null !== null) {
            $queryParams['ListId.IsNull'] = ObjectSerializer::toQueryValue($list_id_is_null);
        }
        // query params
        if ($list_id_is_not_null !== null) {
            $queryParams['ListId.IsNotNull'] = ObjectSerializer::toQueryValue($list_id_is_not_null);
        }
        // query params
        if ($list_id_like !== null) {
            $queryParams['ListId.Like'] = ObjectSerializer::toQueryValue($list_id_like);
        }
        // query params
        if ($list_id_not_like !== null) {
            $queryParams['ListId.NotLike'] = ObjectSerializer::toQueryValue($list_id_not_like);
        }
        // query params
        if ($list_id_contains !== null) {
            $queryParams['ListId.Contains'] = ObjectSerializer::toQueryValue($list_id_contains);
        }
        // query params
        if ($list_id_not_contains !== null) {
            $queryParams['ListId.NotContains'] = ObjectSerializer::toQueryValue($list_id_not_contains);
        }
        // query params
        if ($list_id_starts_with !== null) {
            $queryParams['ListId.StartsWith'] = ObjectSerializer::toQueryValue($list_id_starts_with);
        }
        // query params
        if ($list_id_not_starts_with !== null) {
            $queryParams['ListId.NotStartsWith'] = ObjectSerializer::toQueryValue($list_id_not_starts_with);
        }
        // query params
        if ($list_id_ends_with !== null) {
            $queryParams['ListId.EndsWith'] = ObjectSerializer::toQueryValue($list_id_ends_with);
        }
        // query params
        if ($list_id_not_ends_with !== null) {
            $queryParams['ListId.NotEndsWith'] = ObjectSerializer::toQueryValue($list_id_not_ends_with);
        }
        // query params
        if ($list_id_in !== null) {
            $queryParams['ListId.In'] = ObjectSerializer::toQueryValue($list_id_in);
        }
        // query params
        if ($list_id_between !== null) {
            $queryParams['ListId.Between'] = ObjectSerializer::toQueryValue($list_id_between);
        }
        // query params
        if ($list_date_not_equal !== null) {
            $queryParams['ListDate.NotEqual'] = ObjectSerializer::toQueryValue($list_date_not_equal);
        }
        // query params
        if ($list_date_less !== null) {
            $queryParams['ListDate.Less'] = ObjectSerializer::toQueryValue($list_date_less);
        }
        // query params
        if ($list_date_less_or_equal !== null) {
            $queryParams['ListDate.LessOrEqual'] = ObjectSerializer::toQueryValue($list_date_less_or_equal);
        }
        // query params
        if ($list_date_greater !== null) {
            $queryParams['ListDate.Greater'] = ObjectSerializer::toQueryValue($list_date_greater);
        }
        // query params
        if ($list_date_greater_or_equal !== null) {
            $queryParams['ListDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($list_date_greater_or_equal);
        }
        // query params
        if ($list_date_is_null !== null) {
            $queryParams['ListDate.IsNull'] = ObjectSerializer::toQueryValue($list_date_is_null);
        }
        // query params
        if ($list_date_is_not_null !== null) {
            $queryParams['ListDate.IsNotNull'] = ObjectSerializer::toQueryValue($list_date_is_not_null);
        }
        // query params
        if ($list_date_like !== null) {
            $queryParams['ListDate.Like'] = ObjectSerializer::toQueryValue($list_date_like);
        }
        // query params
        if ($list_date_not_like !== null) {
            $queryParams['ListDate.NotLike'] = ObjectSerializer::toQueryValue($list_date_not_like);
        }
        // query params
        if ($list_date_contains !== null) {
            $queryParams['ListDate.Contains'] = ObjectSerializer::toQueryValue($list_date_contains);
        }
        // query params
        if ($list_date_not_contains !== null) {
            $queryParams['ListDate.NotContains'] = ObjectSerializer::toQueryValue($list_date_not_contains);
        }
        // query params
        if ($list_date_starts_with !== null) {
            $queryParams['ListDate.StartsWith'] = ObjectSerializer::toQueryValue($list_date_starts_with);
        }
        // query params
        if ($list_date_not_starts_with !== null) {
            $queryParams['ListDate.NotStartsWith'] = ObjectSerializer::toQueryValue($list_date_not_starts_with);
        }
        // query params
        if ($list_date_ends_with !== null) {
            $queryParams['ListDate.EndsWith'] = ObjectSerializer::toQueryValue($list_date_ends_with);
        }
        // query params
        if ($list_date_not_ends_with !== null) {
            $queryParams['ListDate.NotEndsWith'] = ObjectSerializer::toQueryValue($list_date_not_ends_with);
        }
        // query params
        if ($list_date_in !== null) {
            $queryParams['ListDate.In'] = ObjectSerializer::toQueryValue($list_date_in);
        }
        // query params
        if ($list_date_between !== null) {
            $queryParams['ListDate.Between'] = ObjectSerializer::toQueryValue($list_date_between);
        }
        // query params
        if ($is_remaining_call_not_equal !== null) {
            $queryParams['IsRemainingCall.NotEqual'] = ObjectSerializer::toQueryValue($is_remaining_call_not_equal);
        }
        // query params
        if ($is_remaining_call_less !== null) {
            $queryParams['IsRemainingCall.Less'] = ObjectSerializer::toQueryValue($is_remaining_call_less);
        }
        // query params
        if ($is_remaining_call_less_or_equal !== null) {
            $queryParams['IsRemainingCall.LessOrEqual'] = ObjectSerializer::toQueryValue($is_remaining_call_less_or_equal);
        }
        // query params
        if ($is_remaining_call_greater !== null) {
            $queryParams['IsRemainingCall.Greater'] = ObjectSerializer::toQueryValue($is_remaining_call_greater);
        }
        // query params
        if ($is_remaining_call_greater_or_equal !== null) {
            $queryParams['IsRemainingCall.GreaterOrEqual'] = ObjectSerializer::toQueryValue($is_remaining_call_greater_or_equal);
        }
        // query params
        if ($is_remaining_call_is_null !== null) {
            $queryParams['IsRemainingCall.IsNull'] = ObjectSerializer::toQueryValue($is_remaining_call_is_null);
        }
        // query params
        if ($is_remaining_call_is_not_null !== null) {
            $queryParams['IsRemainingCall.IsNotNull'] = ObjectSerializer::toQueryValue($is_remaining_call_is_not_null);
        }
        // query params
        if ($is_remaining_call_like !== null) {
            $queryParams['IsRemainingCall.Like'] = ObjectSerializer::toQueryValue($is_remaining_call_like);
        }
        // query params
        if ($is_remaining_call_not_like !== null) {
            $queryParams['IsRemainingCall.NotLike'] = ObjectSerializer::toQueryValue($is_remaining_call_not_like);
        }
        // query params
        if ($is_remaining_call_contains !== null) {
            $queryParams['IsRemainingCall.Contains'] = ObjectSerializer::toQueryValue($is_remaining_call_contains);
        }
        // query params
        if ($is_remaining_call_not_contains !== null) {
            $queryParams['IsRemainingCall.NotContains'] = ObjectSerializer::toQueryValue($is_remaining_call_not_contains);
        }
        // query params
        if ($is_remaining_call_starts_with !== null) {
            $queryParams['IsRemainingCall.StartsWith'] = ObjectSerializer::toQueryValue($is_remaining_call_starts_with);
        }
        // query params
        if ($is_remaining_call_not_starts_with !== null) {
            $queryParams['IsRemainingCall.NotStartsWith'] = ObjectSerializer::toQueryValue($is_remaining_call_not_starts_with);
        }
        // query params
        if ($is_remaining_call_ends_with !== null) {
            $queryParams['IsRemainingCall.EndsWith'] = ObjectSerializer::toQueryValue($is_remaining_call_ends_with);
        }
        // query params
        if ($is_remaining_call_not_ends_with !== null) {
            $queryParams['IsRemainingCall.NotEndsWith'] = ObjectSerializer::toQueryValue($is_remaining_call_not_ends_with);
        }
        // query params
        if ($is_remaining_call_in !== null) {
            $queryParams['IsRemainingCall.In'] = ObjectSerializer::toQueryValue($is_remaining_call_in);
        }
        // query params
        if ($is_remaining_call_between !== null) {
            $queryParams['IsRemainingCall.Between'] = ObjectSerializer::toQueryValue($is_remaining_call_between);
        }
        // query params
        if ($is_callback_not_equal !== null) {
            $queryParams['IsCallback.NotEqual'] = ObjectSerializer::toQueryValue($is_callback_not_equal);
        }
        // query params
        if ($is_callback_less !== null) {
            $queryParams['IsCallback.Less'] = ObjectSerializer::toQueryValue($is_callback_less);
        }
        // query params
        if ($is_callback_less_or_equal !== null) {
            $queryParams['IsCallback.LessOrEqual'] = ObjectSerializer::toQueryValue($is_callback_less_or_equal);
        }
        // query params
        if ($is_callback_greater !== null) {
            $queryParams['IsCallback.Greater'] = ObjectSerializer::toQueryValue($is_callback_greater);
        }
        // query params
        if ($is_callback_greater_or_equal !== null) {
            $queryParams['IsCallback.GreaterOrEqual'] = ObjectSerializer::toQueryValue($is_callback_greater_or_equal);
        }
        // query params
        if ($is_callback_is_null !== null) {
            $queryParams['IsCallback.IsNull'] = ObjectSerializer::toQueryValue($is_callback_is_null);
        }
        // query params
        if ($is_callback_is_not_null !== null) {
            $queryParams['IsCallback.IsNotNull'] = ObjectSerializer::toQueryValue($is_callback_is_not_null);
        }
        // query params
        if ($is_callback_like !== null) {
            $queryParams['IsCallback.Like'] = ObjectSerializer::toQueryValue($is_callback_like);
        }
        // query params
        if ($is_callback_not_like !== null) {
            $queryParams['IsCallback.NotLike'] = ObjectSerializer::toQueryValue($is_callback_not_like);
        }
        // query params
        if ($is_callback_contains !== null) {
            $queryParams['IsCallback.Contains'] = ObjectSerializer::toQueryValue($is_callback_contains);
        }
        // query params
        if ($is_callback_not_contains !== null) {
            $queryParams['IsCallback.NotContains'] = ObjectSerializer::toQueryValue($is_callback_not_contains);
        }
        // query params
        if ($is_callback_starts_with !== null) {
            $queryParams['IsCallback.StartsWith'] = ObjectSerializer::toQueryValue($is_callback_starts_with);
        }
        // query params
        if ($is_callback_not_starts_with !== null) {
            $queryParams['IsCallback.NotStartsWith'] = ObjectSerializer::toQueryValue($is_callback_not_starts_with);
        }
        // query params
        if ($is_callback_ends_with !== null) {
            $queryParams['IsCallback.EndsWith'] = ObjectSerializer::toQueryValue($is_callback_ends_with);
        }
        // query params
        if ($is_callback_not_ends_with !== null) {
            $queryParams['IsCallback.NotEndsWith'] = ObjectSerializer::toQueryValue($is_callback_not_ends_with);
        }
        // query params
        if ($is_callback_in !== null) {
            $queryParams['IsCallback.In'] = ObjectSerializer::toQueryValue($is_callback_in);
        }
        // query params
        if ($is_callback_between !== null) {
            $queryParams['IsCallback.Between'] = ObjectSerializer::toQueryValue($is_callback_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callListUpdateCallListAssignment
     *
     * Updates assigned call totals for sales representatives
     *
     * @param  \Advantage\Client\Model\CallListAssignmentUpdateRequest $call_list_assignment_update_request call_list_assignment_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function callListUpdateCallListAssignment($call_list_assignment_update_request)
    {
        $this->callListUpdateCallListAssignmentWithHttpInfo($call_list_assignment_update_request);
    }

    /**
     * Operation callListUpdateCallListAssignmentWithHttpInfo
     *
     * Updates assigned call totals for sales representatives
     *
     * @param  \Advantage\Client\Model\CallListAssignmentUpdateRequest $call_list_assignment_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function callListUpdateCallListAssignmentWithHttpInfo($call_list_assignment_update_request)
    {
        $returnType = '';
        $request = $this->callListUpdateCallListAssignmentRequest($call_list_assignment_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation callListUpdateCallListAssignmentAsync
     *
     * Updates assigned call totals for sales representatives
     *
     * @param  \Advantage\Client\Model\CallListAssignmentUpdateRequest $call_list_assignment_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListUpdateCallListAssignmentAsync($call_list_assignment_update_request)
    {
        return $this->callListUpdateCallListAssignmentAsyncWithHttpInfo($call_list_assignment_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callListUpdateCallListAssignmentAsyncWithHttpInfo
     *
     * Updates assigned call totals for sales representatives
     *
     * @param  \Advantage\Client\Model\CallListAssignmentUpdateRequest $call_list_assignment_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callListUpdateCallListAssignmentAsyncWithHttpInfo($call_list_assignment_update_request)
    {
        $returnType = '';
        $request = $this->callListUpdateCallListAssignmentRequest($call_list_assignment_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callListUpdateCallListAssignment'
     *
     * @param  \Advantage\Client\Model\CallListAssignmentUpdateRequest $call_list_assignment_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callListUpdateCallListAssignmentRequest($call_list_assignment_update_request)
    {
        // verify the required parameter 'call_list_assignment_update_request' is set
        if ($call_list_assignment_update_request === null || (is_array($call_list_assignment_update_request) && count($call_list_assignment_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_list_assignment_update_request when calling callListUpdateCallListAssignment'
            );
        }

        $resourcePath = '/call-lists/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($call_list_assignment_update_request)) {
            $_tempBody = $call_list_assignment_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
