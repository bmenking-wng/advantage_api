<?php
/**
 * AgreementApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * AgreementApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgreementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation agreementCancel
     *
     * Finds and cancels the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\CancelAgreementRequest $cancel_agreement_request Agreement cancellation request information (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function agreementCancel($agreement_id, $cancel_agreement_request)
    {
        $this->agreementCancelWithHttpInfo($agreement_id, $cancel_agreement_request);
    }

    /**
     * Operation agreementCancelWithHttpInfo
     *
     * Finds and cancels the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\CancelAgreementRequest $cancel_agreement_request Agreement cancellation request information (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementCancelWithHttpInfo($agreement_id, $cancel_agreement_request)
    {
        $returnType = '';
        $request = $this->agreementCancelRequest($agreement_id, $cancel_agreement_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation agreementCancelAsync
     *
     * Finds and cancels the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\CancelAgreementRequest $cancel_agreement_request Agreement cancellation request information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementCancelAsync($agreement_id, $cancel_agreement_request)
    {
        return $this->agreementCancelAsyncWithHttpInfo($agreement_id, $cancel_agreement_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementCancelAsyncWithHttpInfo
     *
     * Finds and cancels the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\CancelAgreementRequest $cancel_agreement_request Agreement cancellation request information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementCancelAsyncWithHttpInfo($agreement_id, $cancel_agreement_request)
    {
        $returnType = '';
        $request = $this->agreementCancelRequest($agreement_id, $cancel_agreement_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementCancel'
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\CancelAgreementRequest $cancel_agreement_request Agreement cancellation request information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementCancelRequest($agreement_id, $cancel_agreement_request)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementCancel'
            );
        }
        // verify the required parameter 'cancel_agreement_request' is set
        if ($cancel_agreement_request === null || (is_array($cancel_agreement_request) && count($cancel_agreement_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_agreement_request when calling agreementCancel'
            );
        }

        $resourcePath = '/agreements/{agreementId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cancel_agreement_request)) {
            $_tempBody = $cancel_agreement_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementChangeAssociationMembershipLevel
     *
     * Finds and changes the level of an association membership agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AssociationMembershipChangeLevelRequest $request A AssociationMembershipChangeLevelRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\OrderResponse
     */
    public function agreementChangeAssociationMembershipLevel($agreement_id, $request)
    {
        list($response) = $this->agreementChangeAssociationMembershipLevelWithHttpInfo($agreement_id, $request);
        return $response;
    }

    /**
     * Operation agreementChangeAssociationMembershipLevelWithHttpInfo
     *
     * Finds and changes the level of an association membership agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AssociationMembershipChangeLevelRequest $request A AssociationMembershipChangeLevelRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\OrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementChangeAssociationMembershipLevelWithHttpInfo($agreement_id, $request)
    {
        $returnType = '\Advantage\Client\Model\OrderResponse';
        $request = $this->agreementChangeAssociationMembershipLevelRequest($agreement_id, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\OrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementChangeAssociationMembershipLevelAsync
     *
     * Finds and changes the level of an association membership agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AssociationMembershipChangeLevelRequest $request A AssociationMembershipChangeLevelRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementChangeAssociationMembershipLevelAsync($agreement_id, $request)
    {
        return $this->agreementChangeAssociationMembershipLevelAsyncWithHttpInfo($agreement_id, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementChangeAssociationMembershipLevelAsyncWithHttpInfo
     *
     * Finds and changes the level of an association membership agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AssociationMembershipChangeLevelRequest $request A AssociationMembershipChangeLevelRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementChangeAssociationMembershipLevelAsyncWithHttpInfo($agreement_id, $request)
    {
        $returnType = '\Advantage\Client\Model\OrderResponse';
        $request = $this->agreementChangeAssociationMembershipLevelRequest($agreement_id, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementChangeAssociationMembershipLevel'
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AssociationMembershipChangeLevelRequest $request A AssociationMembershipChangeLevelRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementChangeAssociationMembershipLevelRequest($agreement_id, $request)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementChangeAssociationMembershipLevel'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agreementChangeAssociationMembershipLevel'
            );
        }

        $resourcePath = '/agreements/{agreementId}/change-association-level';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementGet
     *
     * Finds and returns the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \DateTime $as_of_date Find agreement terms that would be active on this date. If unset, the latest term/version is found. (optional)
     * @param  int $agreement_term Agreement Term (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Agreement
     */
    public function agreementGet($agreement_id, $as_of_date = null, $agreement_term = null)
    {
        list($response) = $this->agreementGetWithHttpInfo($agreement_id, $as_of_date, $agreement_term);
        return $response;
    }

    /**
     * Operation agreementGetWithHttpInfo
     *
     * Finds and returns the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \DateTime $as_of_date Find agreement terms that would be active on this date. If unset, the latest term/version is found. (optional)
     * @param  int $agreement_term Agreement Term (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Agreement, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementGetWithHttpInfo($agreement_id, $as_of_date = null, $agreement_term = null)
    {
        $returnType = '\Advantage\Client\Model\Agreement';
        $request = $this->agreementGetRequest($agreement_id, $as_of_date, $agreement_term);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Agreement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementGetAsync
     *
     * Finds and returns the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \DateTime $as_of_date Find agreement terms that would be active on this date. If unset, the latest term/version is found. (optional)
     * @param  int $agreement_term Agreement Term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementGetAsync($agreement_id, $as_of_date = null, $agreement_term = null)
    {
        return $this->agreementGetAsyncWithHttpInfo($agreement_id, $as_of_date, $agreement_term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementGetAsyncWithHttpInfo
     *
     * Finds and returns the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \DateTime $as_of_date Find agreement terms that would be active on this date. If unset, the latest term/version is found. (optional)
     * @param  int $agreement_term Agreement Term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementGetAsyncWithHttpInfo($agreement_id, $as_of_date = null, $agreement_term = null)
    {
        $returnType = '\Advantage\Client\Model\Agreement';
        $request = $this->agreementGetRequest($agreement_id, $as_of_date, $agreement_term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementGet'
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \DateTime $as_of_date Find agreement terms that would be active on this date. If unset, the latest term/version is found. (optional)
     * @param  int $agreement_term Agreement Term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementGetRequest($agreement_id, $as_of_date = null, $agreement_term = null)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementGet'
            );
        }

        $resourcePath = '/agreements/{agreementId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($as_of_date !== null) {
            $queryParams['asOfDate'] = ObjectSerializer::toQueryValue($as_of_date);
        }
        // query params
        if ($agreement_term !== null) {
            $queryParams['agreementTerm'] = ObjectSerializer::toQueryValue($agreement_term);
        }

        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementGetCancelCreditAmounts
     *
     * Finds and calculates the amount of the credit that would be created if the agreement were cancelled.  If the {cutoffDate} or {cancelQuantity} are not provided,   then the default values will be used when calculating the cancellation credits.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  bool $cancel_future_terms Indicates whether to cancel all future terms (required)
     * @param  \DateTime $cutoff_date Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement (optional)
     * @param  int $cancel_quantity Quantity of access cancelled (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AgreementCancelCredit
     */
    public function agreementGetCancelCreditAmounts($agreement_id, $cancel_future_terms, $cutoff_date = null, $cancel_quantity = null)
    {
        list($response) = $this->agreementGetCancelCreditAmountsWithHttpInfo($agreement_id, $cancel_future_terms, $cutoff_date, $cancel_quantity);
        return $response;
    }

    /**
     * Operation agreementGetCancelCreditAmountsWithHttpInfo
     *
     * Finds and calculates the amount of the credit that would be created if the agreement were cancelled.  If the {cutoffDate} or {cancelQuantity} are not provided,   then the default values will be used when calculating the cancellation credits.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  bool $cancel_future_terms Indicates whether to cancel all future terms (required)
     * @param  \DateTime $cutoff_date Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement (optional)
     * @param  int $cancel_quantity Quantity of access cancelled (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AgreementCancelCredit, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementGetCancelCreditAmountsWithHttpInfo($agreement_id, $cancel_future_terms, $cutoff_date = null, $cancel_quantity = null)
    {
        $returnType = '\Advantage\Client\Model\AgreementCancelCredit';
        $request = $this->agreementGetCancelCreditAmountsRequest($agreement_id, $cancel_future_terms, $cutoff_date, $cancel_quantity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AgreementCancelCredit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementGetCancelCreditAmountsAsync
     *
     * Finds and calculates the amount of the credit that would be created if the agreement were cancelled.  If the {cutoffDate} or {cancelQuantity} are not provided,   then the default values will be used when calculating the cancellation credits.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  bool $cancel_future_terms Indicates whether to cancel all future terms (required)
     * @param  \DateTime $cutoff_date Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement (optional)
     * @param  int $cancel_quantity Quantity of access cancelled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementGetCancelCreditAmountsAsync($agreement_id, $cancel_future_terms, $cutoff_date = null, $cancel_quantity = null)
    {
        return $this->agreementGetCancelCreditAmountsAsyncWithHttpInfo($agreement_id, $cancel_future_terms, $cutoff_date, $cancel_quantity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementGetCancelCreditAmountsAsyncWithHttpInfo
     *
     * Finds and calculates the amount of the credit that would be created if the agreement were cancelled.  If the {cutoffDate} or {cancelQuantity} are not provided,   then the default values will be used when calculating the cancellation credits.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  bool $cancel_future_terms Indicates whether to cancel all future terms (required)
     * @param  \DateTime $cutoff_date Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement (optional)
     * @param  int $cancel_quantity Quantity of access cancelled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementGetCancelCreditAmountsAsyncWithHttpInfo($agreement_id, $cancel_future_terms, $cutoff_date = null, $cancel_quantity = null)
    {
        $returnType = '\Advantage\Client\Model\AgreementCancelCredit';
        $request = $this->agreementGetCancelCreditAmountsRequest($agreement_id, $cancel_future_terms, $cutoff_date, $cancel_quantity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementGetCancelCreditAmounts'
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  bool $cancel_future_terms Indicates whether to cancel all future terms (required)
     * @param  \DateTime $cutoff_date Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement (optional)
     * @param  int $cancel_quantity Quantity of access cancelled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementGetCancelCreditAmountsRequest($agreement_id, $cancel_future_terms, $cutoff_date = null, $cancel_quantity = null)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementGetCancelCreditAmounts'
            );
        }
        // verify the required parameter 'cancel_future_terms' is set
        if ($cancel_future_terms === null || (is_array($cancel_future_terms) && count($cancel_future_terms) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_future_terms when calling agreementGetCancelCreditAmounts'
            );
        }

        $resourcePath = '/agreements/{agreementId}/cancel-credits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cancel_future_terms !== null) {
            $queryParams['cancelFutureTerms'] = ObjectSerializer::toQueryValue($cancel_future_terms);
        }
        // query params
        if ($cutoff_date !== null) {
            $queryParams['cutoffDate'] = ObjectSerializer::toQueryValue($cutoff_date);
        }
        // query params
        if ($cancel_quantity !== null) {
            $queryParams['cancelQuantity'] = ObjectSerializer::toQueryValue($cancel_quantity);
        }

        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementRenew
     *
     * Finds and renews the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AgreementRenewalOptions $options Agreement renewal options (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\OrderResponse
     */
    public function agreementRenew($agreement_id, $options)
    {
        list($response) = $this->agreementRenewWithHttpInfo($agreement_id, $options);
        return $response;
    }

    /**
     * Operation agreementRenewWithHttpInfo
     *
     * Finds and renews the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AgreementRenewalOptions $options Agreement renewal options (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\OrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementRenewWithHttpInfo($agreement_id, $options)
    {
        $returnType = '\Advantage\Client\Model\OrderResponse';
        $request = $this->agreementRenewRequest($agreement_id, $options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\OrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementRenewAsync
     *
     * Finds and renews the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AgreementRenewalOptions $options Agreement renewal options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementRenewAsync($agreement_id, $options)
    {
        return $this->agreementRenewAsyncWithHttpInfo($agreement_id, $options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementRenewAsyncWithHttpInfo
     *
     * Finds and renews the specified agreement.
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AgreementRenewalOptions $options Agreement renewal options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementRenewAsyncWithHttpInfo($agreement_id, $options)
    {
        $returnType = '\Advantage\Client\Model\OrderResponse';
        $request = $this->agreementRenewRequest($agreement_id, $options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementRenew'
     *
     * @param  string $agreement_id Agreement ID (an Advantage generated 12-digit number used to identify agreements). (required)
     * @param  \Advantage\Client\Model\AgreementRenewalOptions $options Agreement renewal options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementRenewRequest($agreement_id, $options)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementRenew'
            );
        }
        // verify the required parameter 'options' is set
        if ($options === null || (is_array($options) && count($options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $options when calling agreementRenew'
            );
        }

        $resourcePath = '/agreements/{agreementId}/renew';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementReplaceParticipants
     *
     * Replace the list of participants for the agreement
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementParticipantIn[] $participants The replacement list of participants for the agreement (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function agreementReplaceParticipants($agreement_id, $participants)
    {
        $this->agreementReplaceParticipantsWithHttpInfo($agreement_id, $participants);
    }

    /**
     * Operation agreementReplaceParticipantsWithHttpInfo
     *
     * Replace the list of participants for the agreement
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementParticipantIn[] $participants The replacement list of participants for the agreement (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementReplaceParticipantsWithHttpInfo($agreement_id, $participants)
    {
        $returnType = '';
        $request = $this->agreementReplaceParticipantsRequest($agreement_id, $participants);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation agreementReplaceParticipantsAsync
     *
     * Replace the list of participants for the agreement
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementParticipantIn[] $participants The replacement list of participants for the agreement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementReplaceParticipantsAsync($agreement_id, $participants)
    {
        return $this->agreementReplaceParticipantsAsyncWithHttpInfo($agreement_id, $participants)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementReplaceParticipantsAsyncWithHttpInfo
     *
     * Replace the list of participants for the agreement
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementParticipantIn[] $participants The replacement list of participants for the agreement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementReplaceParticipantsAsyncWithHttpInfo($agreement_id, $participants)
    {
        $returnType = '';
        $request = $this->agreementReplaceParticipantsRequest($agreement_id, $participants);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementReplaceParticipants'
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementParticipantIn[] $participants The replacement list of participants for the agreement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementReplaceParticipantsRequest($agreement_id, $participants)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementReplaceParticipants'
            );
        }
        // verify the required parameter 'participants' is set
        if ($participants === null || (is_array($participants) && count($participants) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $participants when calling agreementReplaceParticipants'
            );
        }

        $resourcePath = '/agreements/{agreementId}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($participants)) {
            $_tempBody = $participants;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementSearch
     *
     * Returns all agreements having the specified customerNumber as the bill-to, order-by, or participating customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  bool $association_memberships_only when true, lists only agreements that are association memberships (optional)
     * @param  \DateTime $as_of_date Find agreement term that would be active on this date. (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $order_by_customer_number Filter on ORD-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $participant_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $access_service_code Filter on SRV-ID using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $order_by_customer_number_not_equal Filter on ORD-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_less Filter on ORD-CTM using &#39;Less&#39; operator (optional)
     * @param  string $order_by_customer_number_less_or_equal Filter on ORD-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_greater Filter on ORD-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $order_by_customer_number_greater_or_equal Filter on ORD-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_is_null Filter on ORD-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $order_by_customer_number_is_not_null Filter on ORD-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_by_customer_number_like Filter on ORD-CTM using &#39;Like&#39; operator (optional)
     * @param  string $order_by_customer_number_not_like Filter on ORD-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $order_by_customer_number_contains Filter on ORD-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $order_by_customer_number_not_contains Filter on ORD-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $order_by_customer_number_starts_with Filter on ORD-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_starts_with Filter on ORD-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_ends_with Filter on ORD-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_ends_with Filter on ORD-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_in Filter on ORD-CTM using &#39;In&#39; operator (optional)
     * @param  string $order_by_customer_number_between Filter on ORD-CTM using &#39;Between&#39; operator (optional)
     * @param  string $participant_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $participant_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $participant_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $participant_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $participant_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $participant_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $participant_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $participant_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $participant_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $participant_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $participant_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $access_service_code_not_equal Filter on SRV-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $access_service_code_less Filter on SRV-ID using &#39;Less&#39; operator (optional)
     * @param  string $access_service_code_less_or_equal Filter on SRV-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $access_service_code_greater Filter on SRV-ID using &#39;Greater&#39; operator (optional)
     * @param  string $access_service_code_greater_or_equal Filter on SRV-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $access_service_code_is_null Filter on SRV-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $access_service_code_is_not_null Filter on SRV-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $access_service_code_like Filter on SRV-ID using &#39;Like&#39; operator (optional)
     * @param  string $access_service_code_not_like Filter on SRV-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $access_service_code_contains Filter on SRV-ID using &#39;Contains&#39; operator (optional)
     * @param  string $access_service_code_not_contains Filter on SRV-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $access_service_code_starts_with Filter on SRV-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $access_service_code_not_starts_with Filter on SRV-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $access_service_code_ends_with Filter on SRV-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $access_service_code_not_ends_with Filter on SRV-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $access_service_code_in Filter on SRV-ID using &#39;In&#39; operator (optional)
     * @param  string $access_service_code_between Filter on SRV-ID using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultAgreement
     */
    public function agreementSearch($customer_number, $association_memberships_only = null, $as_of_date = null, $bill_to_customer_number = null, $order_by_customer_number = null, $participant_customer_number = null, $access_service_code = null, $billing_organization_code = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $order_by_customer_number_not_equal = null, $order_by_customer_number_less = null, $order_by_customer_number_less_or_equal = null, $order_by_customer_number_greater = null, $order_by_customer_number_greater_or_equal = null, $order_by_customer_number_is_null = null, $order_by_customer_number_is_not_null = null, $order_by_customer_number_like = null, $order_by_customer_number_not_like = null, $order_by_customer_number_contains = null, $order_by_customer_number_not_contains = null, $order_by_customer_number_starts_with = null, $order_by_customer_number_not_starts_with = null, $order_by_customer_number_ends_with = null, $order_by_customer_number_not_ends_with = null, $order_by_customer_number_in = null, $order_by_customer_number_between = null, $participant_customer_number_not_equal = null, $participant_customer_number_less = null, $participant_customer_number_less_or_equal = null, $participant_customer_number_greater = null, $participant_customer_number_greater_or_equal = null, $participant_customer_number_is_null = null, $participant_customer_number_is_not_null = null, $participant_customer_number_like = null, $participant_customer_number_not_like = null, $participant_customer_number_contains = null, $participant_customer_number_not_contains = null, $participant_customer_number_starts_with = null, $participant_customer_number_not_starts_with = null, $participant_customer_number_ends_with = null, $participant_customer_number_not_ends_with = null, $participant_customer_number_in = null, $participant_customer_number_between = null, $access_service_code_not_equal = null, $access_service_code_less = null, $access_service_code_less_or_equal = null, $access_service_code_greater = null, $access_service_code_greater_or_equal = null, $access_service_code_is_null = null, $access_service_code_is_not_null = null, $access_service_code_like = null, $access_service_code_not_like = null, $access_service_code_contains = null, $access_service_code_not_contains = null, $access_service_code_starts_with = null, $access_service_code_not_starts_with = null, $access_service_code_ends_with = null, $access_service_code_not_ends_with = null, $access_service_code_in = null, $access_service_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        list($response) = $this->agreementSearchWithHttpInfo($customer_number, $association_memberships_only, $as_of_date, $bill_to_customer_number, $order_by_customer_number, $participant_customer_number, $access_service_code, $billing_organization_code, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $order_by_customer_number_not_equal, $order_by_customer_number_less, $order_by_customer_number_less_or_equal, $order_by_customer_number_greater, $order_by_customer_number_greater_or_equal, $order_by_customer_number_is_null, $order_by_customer_number_is_not_null, $order_by_customer_number_like, $order_by_customer_number_not_like, $order_by_customer_number_contains, $order_by_customer_number_not_contains, $order_by_customer_number_starts_with, $order_by_customer_number_not_starts_with, $order_by_customer_number_ends_with, $order_by_customer_number_not_ends_with, $order_by_customer_number_in, $order_by_customer_number_between, $participant_customer_number_not_equal, $participant_customer_number_less, $participant_customer_number_less_or_equal, $participant_customer_number_greater, $participant_customer_number_greater_or_equal, $participant_customer_number_is_null, $participant_customer_number_is_not_null, $participant_customer_number_like, $participant_customer_number_not_like, $participant_customer_number_contains, $participant_customer_number_not_contains, $participant_customer_number_starts_with, $participant_customer_number_not_starts_with, $participant_customer_number_ends_with, $participant_customer_number_not_ends_with, $participant_customer_number_in, $participant_customer_number_between, $access_service_code_not_equal, $access_service_code_less, $access_service_code_less_or_equal, $access_service_code_greater, $access_service_code_greater_or_equal, $access_service_code_is_null, $access_service_code_is_not_null, $access_service_code_like, $access_service_code_not_like, $access_service_code_contains, $access_service_code_not_contains, $access_service_code_starts_with, $access_service_code_not_starts_with, $access_service_code_ends_with, $access_service_code_not_ends_with, $access_service_code_in, $access_service_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);
        return $response;
    }

    /**
     * Operation agreementSearchWithHttpInfo
     *
     * Returns all agreements having the specified customerNumber as the bill-to, order-by, or participating customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  bool $association_memberships_only when true, lists only agreements that are association memberships (optional)
     * @param  \DateTime $as_of_date Find agreement term that would be active on this date. (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $order_by_customer_number Filter on ORD-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $participant_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $access_service_code Filter on SRV-ID using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $order_by_customer_number_not_equal Filter on ORD-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_less Filter on ORD-CTM using &#39;Less&#39; operator (optional)
     * @param  string $order_by_customer_number_less_or_equal Filter on ORD-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_greater Filter on ORD-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $order_by_customer_number_greater_or_equal Filter on ORD-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_is_null Filter on ORD-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $order_by_customer_number_is_not_null Filter on ORD-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_by_customer_number_like Filter on ORD-CTM using &#39;Like&#39; operator (optional)
     * @param  string $order_by_customer_number_not_like Filter on ORD-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $order_by_customer_number_contains Filter on ORD-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $order_by_customer_number_not_contains Filter on ORD-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $order_by_customer_number_starts_with Filter on ORD-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_starts_with Filter on ORD-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_ends_with Filter on ORD-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_ends_with Filter on ORD-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_in Filter on ORD-CTM using &#39;In&#39; operator (optional)
     * @param  string $order_by_customer_number_between Filter on ORD-CTM using &#39;Between&#39; operator (optional)
     * @param  string $participant_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $participant_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $participant_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $participant_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $participant_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $participant_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $participant_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $participant_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $participant_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $participant_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $participant_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $access_service_code_not_equal Filter on SRV-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $access_service_code_less Filter on SRV-ID using &#39;Less&#39; operator (optional)
     * @param  string $access_service_code_less_or_equal Filter on SRV-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $access_service_code_greater Filter on SRV-ID using &#39;Greater&#39; operator (optional)
     * @param  string $access_service_code_greater_or_equal Filter on SRV-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $access_service_code_is_null Filter on SRV-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $access_service_code_is_not_null Filter on SRV-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $access_service_code_like Filter on SRV-ID using &#39;Like&#39; operator (optional)
     * @param  string $access_service_code_not_like Filter on SRV-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $access_service_code_contains Filter on SRV-ID using &#39;Contains&#39; operator (optional)
     * @param  string $access_service_code_not_contains Filter on SRV-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $access_service_code_starts_with Filter on SRV-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $access_service_code_not_starts_with Filter on SRV-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $access_service_code_ends_with Filter on SRV-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $access_service_code_not_ends_with Filter on SRV-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $access_service_code_in Filter on SRV-ID using &#39;In&#39; operator (optional)
     * @param  string $access_service_code_between Filter on SRV-ID using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultAgreement, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementSearchWithHttpInfo($customer_number, $association_memberships_only = null, $as_of_date = null, $bill_to_customer_number = null, $order_by_customer_number = null, $participant_customer_number = null, $access_service_code = null, $billing_organization_code = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $order_by_customer_number_not_equal = null, $order_by_customer_number_less = null, $order_by_customer_number_less_or_equal = null, $order_by_customer_number_greater = null, $order_by_customer_number_greater_or_equal = null, $order_by_customer_number_is_null = null, $order_by_customer_number_is_not_null = null, $order_by_customer_number_like = null, $order_by_customer_number_not_like = null, $order_by_customer_number_contains = null, $order_by_customer_number_not_contains = null, $order_by_customer_number_starts_with = null, $order_by_customer_number_not_starts_with = null, $order_by_customer_number_ends_with = null, $order_by_customer_number_not_ends_with = null, $order_by_customer_number_in = null, $order_by_customer_number_between = null, $participant_customer_number_not_equal = null, $participant_customer_number_less = null, $participant_customer_number_less_or_equal = null, $participant_customer_number_greater = null, $participant_customer_number_greater_or_equal = null, $participant_customer_number_is_null = null, $participant_customer_number_is_not_null = null, $participant_customer_number_like = null, $participant_customer_number_not_like = null, $participant_customer_number_contains = null, $participant_customer_number_not_contains = null, $participant_customer_number_starts_with = null, $participant_customer_number_not_starts_with = null, $participant_customer_number_ends_with = null, $participant_customer_number_not_ends_with = null, $participant_customer_number_in = null, $participant_customer_number_between = null, $access_service_code_not_equal = null, $access_service_code_less = null, $access_service_code_less_or_equal = null, $access_service_code_greater = null, $access_service_code_greater_or_equal = null, $access_service_code_is_null = null, $access_service_code_is_not_null = null, $access_service_code_like = null, $access_service_code_not_like = null, $access_service_code_contains = null, $access_service_code_not_contains = null, $access_service_code_starts_with = null, $access_service_code_not_starts_with = null, $access_service_code_ends_with = null, $access_service_code_not_ends_with = null, $access_service_code_in = null, $access_service_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultAgreement';
        $request = $this->agreementSearchRequest($customer_number, $association_memberships_only, $as_of_date, $bill_to_customer_number, $order_by_customer_number, $participant_customer_number, $access_service_code, $billing_organization_code, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $order_by_customer_number_not_equal, $order_by_customer_number_less, $order_by_customer_number_less_or_equal, $order_by_customer_number_greater, $order_by_customer_number_greater_or_equal, $order_by_customer_number_is_null, $order_by_customer_number_is_not_null, $order_by_customer_number_like, $order_by_customer_number_not_like, $order_by_customer_number_contains, $order_by_customer_number_not_contains, $order_by_customer_number_starts_with, $order_by_customer_number_not_starts_with, $order_by_customer_number_ends_with, $order_by_customer_number_not_ends_with, $order_by_customer_number_in, $order_by_customer_number_between, $participant_customer_number_not_equal, $participant_customer_number_less, $participant_customer_number_less_or_equal, $participant_customer_number_greater, $participant_customer_number_greater_or_equal, $participant_customer_number_is_null, $participant_customer_number_is_not_null, $participant_customer_number_like, $participant_customer_number_not_like, $participant_customer_number_contains, $participant_customer_number_not_contains, $participant_customer_number_starts_with, $participant_customer_number_not_starts_with, $participant_customer_number_ends_with, $participant_customer_number_not_ends_with, $participant_customer_number_in, $participant_customer_number_between, $access_service_code_not_equal, $access_service_code_less, $access_service_code_less_or_equal, $access_service_code_greater, $access_service_code_greater_or_equal, $access_service_code_is_null, $access_service_code_is_not_null, $access_service_code_like, $access_service_code_not_like, $access_service_code_contains, $access_service_code_not_contains, $access_service_code_starts_with, $access_service_code_not_starts_with, $access_service_code_ends_with, $access_service_code_not_ends_with, $access_service_code_in, $access_service_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultAgreement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementSearchAsync
     *
     * Returns all agreements having the specified customerNumber as the bill-to, order-by, or participating customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  bool $association_memberships_only when true, lists only agreements that are association memberships (optional)
     * @param  \DateTime $as_of_date Find agreement term that would be active on this date. (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $order_by_customer_number Filter on ORD-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $participant_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $access_service_code Filter on SRV-ID using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $order_by_customer_number_not_equal Filter on ORD-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_less Filter on ORD-CTM using &#39;Less&#39; operator (optional)
     * @param  string $order_by_customer_number_less_or_equal Filter on ORD-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_greater Filter on ORD-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $order_by_customer_number_greater_or_equal Filter on ORD-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_is_null Filter on ORD-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $order_by_customer_number_is_not_null Filter on ORD-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_by_customer_number_like Filter on ORD-CTM using &#39;Like&#39; operator (optional)
     * @param  string $order_by_customer_number_not_like Filter on ORD-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $order_by_customer_number_contains Filter on ORD-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $order_by_customer_number_not_contains Filter on ORD-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $order_by_customer_number_starts_with Filter on ORD-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_starts_with Filter on ORD-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_ends_with Filter on ORD-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_ends_with Filter on ORD-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_in Filter on ORD-CTM using &#39;In&#39; operator (optional)
     * @param  string $order_by_customer_number_between Filter on ORD-CTM using &#39;Between&#39; operator (optional)
     * @param  string $participant_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $participant_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $participant_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $participant_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $participant_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $participant_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $participant_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $participant_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $participant_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $participant_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $participant_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $access_service_code_not_equal Filter on SRV-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $access_service_code_less Filter on SRV-ID using &#39;Less&#39; operator (optional)
     * @param  string $access_service_code_less_or_equal Filter on SRV-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $access_service_code_greater Filter on SRV-ID using &#39;Greater&#39; operator (optional)
     * @param  string $access_service_code_greater_or_equal Filter on SRV-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $access_service_code_is_null Filter on SRV-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $access_service_code_is_not_null Filter on SRV-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $access_service_code_like Filter on SRV-ID using &#39;Like&#39; operator (optional)
     * @param  string $access_service_code_not_like Filter on SRV-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $access_service_code_contains Filter on SRV-ID using &#39;Contains&#39; operator (optional)
     * @param  string $access_service_code_not_contains Filter on SRV-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $access_service_code_starts_with Filter on SRV-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $access_service_code_not_starts_with Filter on SRV-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $access_service_code_ends_with Filter on SRV-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $access_service_code_not_ends_with Filter on SRV-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $access_service_code_in Filter on SRV-ID using &#39;In&#39; operator (optional)
     * @param  string $access_service_code_between Filter on SRV-ID using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementSearchAsync($customer_number, $association_memberships_only = null, $as_of_date = null, $bill_to_customer_number = null, $order_by_customer_number = null, $participant_customer_number = null, $access_service_code = null, $billing_organization_code = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $order_by_customer_number_not_equal = null, $order_by_customer_number_less = null, $order_by_customer_number_less_or_equal = null, $order_by_customer_number_greater = null, $order_by_customer_number_greater_or_equal = null, $order_by_customer_number_is_null = null, $order_by_customer_number_is_not_null = null, $order_by_customer_number_like = null, $order_by_customer_number_not_like = null, $order_by_customer_number_contains = null, $order_by_customer_number_not_contains = null, $order_by_customer_number_starts_with = null, $order_by_customer_number_not_starts_with = null, $order_by_customer_number_ends_with = null, $order_by_customer_number_not_ends_with = null, $order_by_customer_number_in = null, $order_by_customer_number_between = null, $participant_customer_number_not_equal = null, $participant_customer_number_less = null, $participant_customer_number_less_or_equal = null, $participant_customer_number_greater = null, $participant_customer_number_greater_or_equal = null, $participant_customer_number_is_null = null, $participant_customer_number_is_not_null = null, $participant_customer_number_like = null, $participant_customer_number_not_like = null, $participant_customer_number_contains = null, $participant_customer_number_not_contains = null, $participant_customer_number_starts_with = null, $participant_customer_number_not_starts_with = null, $participant_customer_number_ends_with = null, $participant_customer_number_not_ends_with = null, $participant_customer_number_in = null, $participant_customer_number_between = null, $access_service_code_not_equal = null, $access_service_code_less = null, $access_service_code_less_or_equal = null, $access_service_code_greater = null, $access_service_code_greater_or_equal = null, $access_service_code_is_null = null, $access_service_code_is_not_null = null, $access_service_code_like = null, $access_service_code_not_like = null, $access_service_code_contains = null, $access_service_code_not_contains = null, $access_service_code_starts_with = null, $access_service_code_not_starts_with = null, $access_service_code_ends_with = null, $access_service_code_not_ends_with = null, $access_service_code_in = null, $access_service_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        return $this->agreementSearchAsyncWithHttpInfo($customer_number, $association_memberships_only, $as_of_date, $bill_to_customer_number, $order_by_customer_number, $participant_customer_number, $access_service_code, $billing_organization_code, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $order_by_customer_number_not_equal, $order_by_customer_number_less, $order_by_customer_number_less_or_equal, $order_by_customer_number_greater, $order_by_customer_number_greater_or_equal, $order_by_customer_number_is_null, $order_by_customer_number_is_not_null, $order_by_customer_number_like, $order_by_customer_number_not_like, $order_by_customer_number_contains, $order_by_customer_number_not_contains, $order_by_customer_number_starts_with, $order_by_customer_number_not_starts_with, $order_by_customer_number_ends_with, $order_by_customer_number_not_ends_with, $order_by_customer_number_in, $order_by_customer_number_between, $participant_customer_number_not_equal, $participant_customer_number_less, $participant_customer_number_less_or_equal, $participant_customer_number_greater, $participant_customer_number_greater_or_equal, $participant_customer_number_is_null, $participant_customer_number_is_not_null, $participant_customer_number_like, $participant_customer_number_not_like, $participant_customer_number_contains, $participant_customer_number_not_contains, $participant_customer_number_starts_with, $participant_customer_number_not_starts_with, $participant_customer_number_ends_with, $participant_customer_number_not_ends_with, $participant_customer_number_in, $participant_customer_number_between, $access_service_code_not_equal, $access_service_code_less, $access_service_code_less_or_equal, $access_service_code_greater, $access_service_code_greater_or_equal, $access_service_code_is_null, $access_service_code_is_not_null, $access_service_code_like, $access_service_code_not_like, $access_service_code_contains, $access_service_code_not_contains, $access_service_code_starts_with, $access_service_code_not_starts_with, $access_service_code_ends_with, $access_service_code_not_ends_with, $access_service_code_in, $access_service_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementSearchAsyncWithHttpInfo
     *
     * Returns all agreements having the specified customerNumber as the bill-to, order-by, or participating customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  bool $association_memberships_only when true, lists only agreements that are association memberships (optional)
     * @param  \DateTime $as_of_date Find agreement term that would be active on this date. (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $order_by_customer_number Filter on ORD-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $participant_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $access_service_code Filter on SRV-ID using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $order_by_customer_number_not_equal Filter on ORD-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_less Filter on ORD-CTM using &#39;Less&#39; operator (optional)
     * @param  string $order_by_customer_number_less_or_equal Filter on ORD-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_greater Filter on ORD-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $order_by_customer_number_greater_or_equal Filter on ORD-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_is_null Filter on ORD-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $order_by_customer_number_is_not_null Filter on ORD-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_by_customer_number_like Filter on ORD-CTM using &#39;Like&#39; operator (optional)
     * @param  string $order_by_customer_number_not_like Filter on ORD-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $order_by_customer_number_contains Filter on ORD-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $order_by_customer_number_not_contains Filter on ORD-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $order_by_customer_number_starts_with Filter on ORD-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_starts_with Filter on ORD-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_ends_with Filter on ORD-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_ends_with Filter on ORD-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_in Filter on ORD-CTM using &#39;In&#39; operator (optional)
     * @param  string $order_by_customer_number_between Filter on ORD-CTM using &#39;Between&#39; operator (optional)
     * @param  string $participant_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $participant_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $participant_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $participant_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $participant_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $participant_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $participant_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $participant_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $participant_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $participant_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $participant_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $access_service_code_not_equal Filter on SRV-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $access_service_code_less Filter on SRV-ID using &#39;Less&#39; operator (optional)
     * @param  string $access_service_code_less_or_equal Filter on SRV-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $access_service_code_greater Filter on SRV-ID using &#39;Greater&#39; operator (optional)
     * @param  string $access_service_code_greater_or_equal Filter on SRV-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $access_service_code_is_null Filter on SRV-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $access_service_code_is_not_null Filter on SRV-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $access_service_code_like Filter on SRV-ID using &#39;Like&#39; operator (optional)
     * @param  string $access_service_code_not_like Filter on SRV-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $access_service_code_contains Filter on SRV-ID using &#39;Contains&#39; operator (optional)
     * @param  string $access_service_code_not_contains Filter on SRV-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $access_service_code_starts_with Filter on SRV-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $access_service_code_not_starts_with Filter on SRV-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $access_service_code_ends_with Filter on SRV-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $access_service_code_not_ends_with Filter on SRV-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $access_service_code_in Filter on SRV-ID using &#39;In&#39; operator (optional)
     * @param  string $access_service_code_between Filter on SRV-ID using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementSearchAsyncWithHttpInfo($customer_number, $association_memberships_only = null, $as_of_date = null, $bill_to_customer_number = null, $order_by_customer_number = null, $participant_customer_number = null, $access_service_code = null, $billing_organization_code = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $order_by_customer_number_not_equal = null, $order_by_customer_number_less = null, $order_by_customer_number_less_or_equal = null, $order_by_customer_number_greater = null, $order_by_customer_number_greater_or_equal = null, $order_by_customer_number_is_null = null, $order_by_customer_number_is_not_null = null, $order_by_customer_number_like = null, $order_by_customer_number_not_like = null, $order_by_customer_number_contains = null, $order_by_customer_number_not_contains = null, $order_by_customer_number_starts_with = null, $order_by_customer_number_not_starts_with = null, $order_by_customer_number_ends_with = null, $order_by_customer_number_not_ends_with = null, $order_by_customer_number_in = null, $order_by_customer_number_between = null, $participant_customer_number_not_equal = null, $participant_customer_number_less = null, $participant_customer_number_less_or_equal = null, $participant_customer_number_greater = null, $participant_customer_number_greater_or_equal = null, $participant_customer_number_is_null = null, $participant_customer_number_is_not_null = null, $participant_customer_number_like = null, $participant_customer_number_not_like = null, $participant_customer_number_contains = null, $participant_customer_number_not_contains = null, $participant_customer_number_starts_with = null, $participant_customer_number_not_starts_with = null, $participant_customer_number_ends_with = null, $participant_customer_number_not_ends_with = null, $participant_customer_number_in = null, $participant_customer_number_between = null, $access_service_code_not_equal = null, $access_service_code_less = null, $access_service_code_less_or_equal = null, $access_service_code_greater = null, $access_service_code_greater_or_equal = null, $access_service_code_is_null = null, $access_service_code_is_not_null = null, $access_service_code_like = null, $access_service_code_not_like = null, $access_service_code_contains = null, $access_service_code_not_contains = null, $access_service_code_starts_with = null, $access_service_code_not_starts_with = null, $access_service_code_ends_with = null, $access_service_code_not_ends_with = null, $access_service_code_in = null, $access_service_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultAgreement';
        $request = $this->agreementSearchRequest($customer_number, $association_memberships_only, $as_of_date, $bill_to_customer_number, $order_by_customer_number, $participant_customer_number, $access_service_code, $billing_organization_code, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $order_by_customer_number_not_equal, $order_by_customer_number_less, $order_by_customer_number_less_or_equal, $order_by_customer_number_greater, $order_by_customer_number_greater_or_equal, $order_by_customer_number_is_null, $order_by_customer_number_is_not_null, $order_by_customer_number_like, $order_by_customer_number_not_like, $order_by_customer_number_contains, $order_by_customer_number_not_contains, $order_by_customer_number_starts_with, $order_by_customer_number_not_starts_with, $order_by_customer_number_ends_with, $order_by_customer_number_not_ends_with, $order_by_customer_number_in, $order_by_customer_number_between, $participant_customer_number_not_equal, $participant_customer_number_less, $participant_customer_number_less_or_equal, $participant_customer_number_greater, $participant_customer_number_greater_or_equal, $participant_customer_number_is_null, $participant_customer_number_is_not_null, $participant_customer_number_like, $participant_customer_number_not_like, $participant_customer_number_contains, $participant_customer_number_not_contains, $participant_customer_number_starts_with, $participant_customer_number_not_starts_with, $participant_customer_number_ends_with, $participant_customer_number_not_ends_with, $participant_customer_number_in, $participant_customer_number_between, $access_service_code_not_equal, $access_service_code_less, $access_service_code_less_or_equal, $access_service_code_greater, $access_service_code_greater_or_equal, $access_service_code_is_null, $access_service_code_is_not_null, $access_service_code_like, $access_service_code_not_like, $access_service_code_contains, $access_service_code_not_contains, $access_service_code_starts_with, $access_service_code_not_starts_with, $access_service_code_ends_with, $access_service_code_not_ends_with, $access_service_code_in, $access_service_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementSearch'
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  bool $association_memberships_only when true, lists only agreements that are association memberships (optional)
     * @param  \DateTime $as_of_date Find agreement term that would be active on this date. (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $order_by_customer_number Filter on ORD-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $participant_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $access_service_code Filter on SRV-ID using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $order_by_customer_number_not_equal Filter on ORD-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_less Filter on ORD-CTM using &#39;Less&#39; operator (optional)
     * @param  string $order_by_customer_number_less_or_equal Filter on ORD-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_greater Filter on ORD-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $order_by_customer_number_greater_or_equal Filter on ORD-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_by_customer_number_is_null Filter on ORD-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $order_by_customer_number_is_not_null Filter on ORD-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_by_customer_number_like Filter on ORD-CTM using &#39;Like&#39; operator (optional)
     * @param  string $order_by_customer_number_not_like Filter on ORD-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $order_by_customer_number_contains Filter on ORD-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $order_by_customer_number_not_contains Filter on ORD-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $order_by_customer_number_starts_with Filter on ORD-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_starts_with Filter on ORD-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_ends_with Filter on ORD-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_not_ends_with Filter on ORD-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_by_customer_number_in Filter on ORD-CTM using &#39;In&#39; operator (optional)
     * @param  string $order_by_customer_number_between Filter on ORD-CTM using &#39;Between&#39; operator (optional)
     * @param  string $participant_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $participant_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $participant_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $participant_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $participant_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $participant_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $participant_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $participant_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $participant_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $participant_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $participant_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $participant_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $participant_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $participant_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $access_service_code_not_equal Filter on SRV-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $access_service_code_less Filter on SRV-ID using &#39;Less&#39; operator (optional)
     * @param  string $access_service_code_less_or_equal Filter on SRV-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $access_service_code_greater Filter on SRV-ID using &#39;Greater&#39; operator (optional)
     * @param  string $access_service_code_greater_or_equal Filter on SRV-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $access_service_code_is_null Filter on SRV-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $access_service_code_is_not_null Filter on SRV-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $access_service_code_like Filter on SRV-ID using &#39;Like&#39; operator (optional)
     * @param  string $access_service_code_not_like Filter on SRV-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $access_service_code_contains Filter on SRV-ID using &#39;Contains&#39; operator (optional)
     * @param  string $access_service_code_not_contains Filter on SRV-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $access_service_code_starts_with Filter on SRV-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $access_service_code_not_starts_with Filter on SRV-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $access_service_code_ends_with Filter on SRV-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $access_service_code_not_ends_with Filter on SRV-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $access_service_code_in Filter on SRV-ID using &#39;In&#39; operator (optional)
     * @param  string $access_service_code_between Filter on SRV-ID using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementSearchRequest($customer_number, $association_memberships_only = null, $as_of_date = null, $bill_to_customer_number = null, $order_by_customer_number = null, $participant_customer_number = null, $access_service_code = null, $billing_organization_code = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $order_by_customer_number_not_equal = null, $order_by_customer_number_less = null, $order_by_customer_number_less_or_equal = null, $order_by_customer_number_greater = null, $order_by_customer_number_greater_or_equal = null, $order_by_customer_number_is_null = null, $order_by_customer_number_is_not_null = null, $order_by_customer_number_like = null, $order_by_customer_number_not_like = null, $order_by_customer_number_contains = null, $order_by_customer_number_not_contains = null, $order_by_customer_number_starts_with = null, $order_by_customer_number_not_starts_with = null, $order_by_customer_number_ends_with = null, $order_by_customer_number_not_ends_with = null, $order_by_customer_number_in = null, $order_by_customer_number_between = null, $participant_customer_number_not_equal = null, $participant_customer_number_less = null, $participant_customer_number_less_or_equal = null, $participant_customer_number_greater = null, $participant_customer_number_greater_or_equal = null, $participant_customer_number_is_null = null, $participant_customer_number_is_not_null = null, $participant_customer_number_like = null, $participant_customer_number_not_like = null, $participant_customer_number_contains = null, $participant_customer_number_not_contains = null, $participant_customer_number_starts_with = null, $participant_customer_number_not_starts_with = null, $participant_customer_number_ends_with = null, $participant_customer_number_not_ends_with = null, $participant_customer_number_in = null, $participant_customer_number_between = null, $access_service_code_not_equal = null, $access_service_code_less = null, $access_service_code_less_or_equal = null, $access_service_code_greater = null, $access_service_code_greater_or_equal = null, $access_service_code_is_null = null, $access_service_code_is_not_null = null, $access_service_code_like = null, $access_service_code_not_like = null, $access_service_code_contains = null, $access_service_code_not_contains = null, $access_service_code_starts_with = null, $access_service_code_not_starts_with = null, $access_service_code_ends_with = null, $access_service_code_not_ends_with = null, $access_service_code_in = null, $access_service_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling agreementSearch'
            );
        }

        $resourcePath = '/agreements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customer_number !== null) {
            $queryParams['customerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($association_memberships_only !== null) {
            $queryParams['associationMembershipsOnly'] = ObjectSerializer::toQueryValue($association_memberships_only);
        }
        // query params
        if ($as_of_date !== null) {
            $queryParams['asOfDate'] = ObjectSerializer::toQueryValue($as_of_date);
        }
        // query params
        if ($bill_to_customer_number !== null) {
            $queryParams['BillToCustomerNumber'] = ObjectSerializer::toQueryValue($bill_to_customer_number);
        }
        // query params
        if ($order_by_customer_number !== null) {
            $queryParams['OrderByCustomerNumber'] = ObjectSerializer::toQueryValue($order_by_customer_number);
        }
        // query params
        if ($participant_customer_number !== null) {
            $queryParams['ParticipantCustomerNumber'] = ObjectSerializer::toQueryValue($participant_customer_number);
        }
        // query params
        if ($access_service_code !== null) {
            $queryParams['AccessServiceCode'] = ObjectSerializer::toQueryValue($access_service_code);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($bill_to_customer_number_not_equal !== null) {
            $queryParams['BillToCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_equal);
        }
        // query params
        if ($bill_to_customer_number_less !== null) {
            $queryParams['BillToCustomerNumber.Less'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less);
        }
        // query params
        if ($bill_to_customer_number_less_or_equal !== null) {
            $queryParams['BillToCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less_or_equal);
        }
        // query params
        if ($bill_to_customer_number_greater !== null) {
            $queryParams['BillToCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater);
        }
        // query params
        if ($bill_to_customer_number_greater_or_equal !== null) {
            $queryParams['BillToCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater_or_equal);
        }
        // query params
        if ($bill_to_customer_number_is_null !== null) {
            $queryParams['BillToCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_null);
        }
        // query params
        if ($bill_to_customer_number_is_not_null !== null) {
            $queryParams['BillToCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_not_null);
        }
        // query params
        if ($bill_to_customer_number_like !== null) {
            $queryParams['BillToCustomerNumber.Like'] = ObjectSerializer::toQueryValue($bill_to_customer_number_like);
        }
        // query params
        if ($bill_to_customer_number_not_like !== null) {
            $queryParams['BillToCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_like);
        }
        // query params
        if ($bill_to_customer_number_contains !== null) {
            $queryParams['BillToCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_contains);
        }
        // query params
        if ($bill_to_customer_number_not_contains !== null) {
            $queryParams['BillToCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_contains);
        }
        // query params
        if ($bill_to_customer_number_starts_with !== null) {
            $queryParams['BillToCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_starts_with);
        }
        // query params
        if ($bill_to_customer_number_not_starts_with !== null) {
            $queryParams['BillToCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_starts_with);
        }
        // query params
        if ($bill_to_customer_number_ends_with !== null) {
            $queryParams['BillToCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_ends_with);
        }
        // query params
        if ($bill_to_customer_number_not_ends_with !== null) {
            $queryParams['BillToCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_ends_with);
        }
        // query params
        if ($bill_to_customer_number_in !== null) {
            $queryParams['BillToCustomerNumber.In'] = ObjectSerializer::toQueryValue($bill_to_customer_number_in);
        }
        // query params
        if ($bill_to_customer_number_between !== null) {
            $queryParams['BillToCustomerNumber.Between'] = ObjectSerializer::toQueryValue($bill_to_customer_number_between);
        }
        // query params
        if ($order_by_customer_number_not_equal !== null) {
            $queryParams['OrderByCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($order_by_customer_number_not_equal);
        }
        // query params
        if ($order_by_customer_number_less !== null) {
            $queryParams['OrderByCustomerNumber.Less'] = ObjectSerializer::toQueryValue($order_by_customer_number_less);
        }
        // query params
        if ($order_by_customer_number_less_or_equal !== null) {
            $queryParams['OrderByCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($order_by_customer_number_less_or_equal);
        }
        // query params
        if ($order_by_customer_number_greater !== null) {
            $queryParams['OrderByCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($order_by_customer_number_greater);
        }
        // query params
        if ($order_by_customer_number_greater_or_equal !== null) {
            $queryParams['OrderByCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_by_customer_number_greater_or_equal);
        }
        // query params
        if ($order_by_customer_number_is_null !== null) {
            $queryParams['OrderByCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($order_by_customer_number_is_null);
        }
        // query params
        if ($order_by_customer_number_is_not_null !== null) {
            $queryParams['OrderByCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($order_by_customer_number_is_not_null);
        }
        // query params
        if ($order_by_customer_number_like !== null) {
            $queryParams['OrderByCustomerNumber.Like'] = ObjectSerializer::toQueryValue($order_by_customer_number_like);
        }
        // query params
        if ($order_by_customer_number_not_like !== null) {
            $queryParams['OrderByCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($order_by_customer_number_not_like);
        }
        // query params
        if ($order_by_customer_number_contains !== null) {
            $queryParams['OrderByCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($order_by_customer_number_contains);
        }
        // query params
        if ($order_by_customer_number_not_contains !== null) {
            $queryParams['OrderByCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($order_by_customer_number_not_contains);
        }
        // query params
        if ($order_by_customer_number_starts_with !== null) {
            $queryParams['OrderByCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($order_by_customer_number_starts_with);
        }
        // query params
        if ($order_by_customer_number_not_starts_with !== null) {
            $queryParams['OrderByCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($order_by_customer_number_not_starts_with);
        }
        // query params
        if ($order_by_customer_number_ends_with !== null) {
            $queryParams['OrderByCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($order_by_customer_number_ends_with);
        }
        // query params
        if ($order_by_customer_number_not_ends_with !== null) {
            $queryParams['OrderByCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($order_by_customer_number_not_ends_with);
        }
        // query params
        if ($order_by_customer_number_in !== null) {
            $queryParams['OrderByCustomerNumber.In'] = ObjectSerializer::toQueryValue($order_by_customer_number_in);
        }
        // query params
        if ($order_by_customer_number_between !== null) {
            $queryParams['OrderByCustomerNumber.Between'] = ObjectSerializer::toQueryValue($order_by_customer_number_between);
        }
        // query params
        if ($participant_customer_number_not_equal !== null) {
            $queryParams['ParticipantCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($participant_customer_number_not_equal);
        }
        // query params
        if ($participant_customer_number_less !== null) {
            $queryParams['ParticipantCustomerNumber.Less'] = ObjectSerializer::toQueryValue($participant_customer_number_less);
        }
        // query params
        if ($participant_customer_number_less_or_equal !== null) {
            $queryParams['ParticipantCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($participant_customer_number_less_or_equal);
        }
        // query params
        if ($participant_customer_number_greater !== null) {
            $queryParams['ParticipantCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($participant_customer_number_greater);
        }
        // query params
        if ($participant_customer_number_greater_or_equal !== null) {
            $queryParams['ParticipantCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($participant_customer_number_greater_or_equal);
        }
        // query params
        if ($participant_customer_number_is_null !== null) {
            $queryParams['ParticipantCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($participant_customer_number_is_null);
        }
        // query params
        if ($participant_customer_number_is_not_null !== null) {
            $queryParams['ParticipantCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($participant_customer_number_is_not_null);
        }
        // query params
        if ($participant_customer_number_like !== null) {
            $queryParams['ParticipantCustomerNumber.Like'] = ObjectSerializer::toQueryValue($participant_customer_number_like);
        }
        // query params
        if ($participant_customer_number_not_like !== null) {
            $queryParams['ParticipantCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($participant_customer_number_not_like);
        }
        // query params
        if ($participant_customer_number_contains !== null) {
            $queryParams['ParticipantCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($participant_customer_number_contains);
        }
        // query params
        if ($participant_customer_number_not_contains !== null) {
            $queryParams['ParticipantCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($participant_customer_number_not_contains);
        }
        // query params
        if ($participant_customer_number_starts_with !== null) {
            $queryParams['ParticipantCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($participant_customer_number_starts_with);
        }
        // query params
        if ($participant_customer_number_not_starts_with !== null) {
            $queryParams['ParticipantCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($participant_customer_number_not_starts_with);
        }
        // query params
        if ($participant_customer_number_ends_with !== null) {
            $queryParams['ParticipantCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($participant_customer_number_ends_with);
        }
        // query params
        if ($participant_customer_number_not_ends_with !== null) {
            $queryParams['ParticipantCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($participant_customer_number_not_ends_with);
        }
        // query params
        if ($participant_customer_number_in !== null) {
            $queryParams['ParticipantCustomerNumber.In'] = ObjectSerializer::toQueryValue($participant_customer_number_in);
        }
        // query params
        if ($participant_customer_number_between !== null) {
            $queryParams['ParticipantCustomerNumber.Between'] = ObjectSerializer::toQueryValue($participant_customer_number_between);
        }
        // query params
        if ($access_service_code_not_equal !== null) {
            $queryParams['AccessServiceCode.NotEqual'] = ObjectSerializer::toQueryValue($access_service_code_not_equal);
        }
        // query params
        if ($access_service_code_less !== null) {
            $queryParams['AccessServiceCode.Less'] = ObjectSerializer::toQueryValue($access_service_code_less);
        }
        // query params
        if ($access_service_code_less_or_equal !== null) {
            $queryParams['AccessServiceCode.LessOrEqual'] = ObjectSerializer::toQueryValue($access_service_code_less_or_equal);
        }
        // query params
        if ($access_service_code_greater !== null) {
            $queryParams['AccessServiceCode.Greater'] = ObjectSerializer::toQueryValue($access_service_code_greater);
        }
        // query params
        if ($access_service_code_greater_or_equal !== null) {
            $queryParams['AccessServiceCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($access_service_code_greater_or_equal);
        }
        // query params
        if ($access_service_code_is_null !== null) {
            $queryParams['AccessServiceCode.IsNull'] = ObjectSerializer::toQueryValue($access_service_code_is_null);
        }
        // query params
        if ($access_service_code_is_not_null !== null) {
            $queryParams['AccessServiceCode.IsNotNull'] = ObjectSerializer::toQueryValue($access_service_code_is_not_null);
        }
        // query params
        if ($access_service_code_like !== null) {
            $queryParams['AccessServiceCode.Like'] = ObjectSerializer::toQueryValue($access_service_code_like);
        }
        // query params
        if ($access_service_code_not_like !== null) {
            $queryParams['AccessServiceCode.NotLike'] = ObjectSerializer::toQueryValue($access_service_code_not_like);
        }
        // query params
        if ($access_service_code_contains !== null) {
            $queryParams['AccessServiceCode.Contains'] = ObjectSerializer::toQueryValue($access_service_code_contains);
        }
        // query params
        if ($access_service_code_not_contains !== null) {
            $queryParams['AccessServiceCode.NotContains'] = ObjectSerializer::toQueryValue($access_service_code_not_contains);
        }
        // query params
        if ($access_service_code_starts_with !== null) {
            $queryParams['AccessServiceCode.StartsWith'] = ObjectSerializer::toQueryValue($access_service_code_starts_with);
        }
        // query params
        if ($access_service_code_not_starts_with !== null) {
            $queryParams['AccessServiceCode.NotStartsWith'] = ObjectSerializer::toQueryValue($access_service_code_not_starts_with);
        }
        // query params
        if ($access_service_code_ends_with !== null) {
            $queryParams['AccessServiceCode.EndsWith'] = ObjectSerializer::toQueryValue($access_service_code_ends_with);
        }
        // query params
        if ($access_service_code_not_ends_with !== null) {
            $queryParams['AccessServiceCode.NotEndsWith'] = ObjectSerializer::toQueryValue($access_service_code_not_ends_with);
        }
        // query params
        if ($access_service_code_in !== null) {
            $queryParams['AccessServiceCode.In'] = ObjectSerializer::toQueryValue($access_service_code_in);
        }
        // query params
        if ($access_service_code_between !== null) {
            $queryParams['AccessServiceCode.Between'] = ObjectSerializer::toQueryValue($access_service_code_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agreementUpdate
     *
     * Update an existing agreement.
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementUpdateRequest $request A AgreementUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Agreement
     */
    public function agreementUpdate($agreement_id, $request)
    {
        list($response) = $this->agreementUpdateWithHttpInfo($agreement_id, $request);
        return $response;
    }

    /**
     * Operation agreementUpdateWithHttpInfo
     *
     * Update an existing agreement.
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementUpdateRequest $request A AgreementUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Agreement, HTTP status code, HTTP response headers (array of strings)
     */
    public function agreementUpdateWithHttpInfo($agreement_id, $request)
    {
        $returnType = '\Advantage\Client\Model\Agreement';
        $request = $this->agreementUpdateRequest($agreement_id, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Agreement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agreementUpdateAsync
     *
     * Update an existing agreement.
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementUpdateRequest $request A AgreementUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementUpdateAsync($agreement_id, $request)
    {
        return $this->agreementUpdateAsyncWithHttpInfo($agreement_id, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agreementUpdateAsyncWithHttpInfo
     *
     * Update an existing agreement.
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementUpdateRequest $request A AgreementUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agreementUpdateAsyncWithHttpInfo($agreement_id, $request)
    {
        $returnType = '\Advantage\Client\Model\Agreement';
        $request = $this->agreementUpdateRequest($agreement_id, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agreementUpdate'
     *
     * @param  string $agreement_id The ID of the agreement to update. (required)
     * @param  \Advantage\Client\Model\AgreementUpdateRequest $request A AgreementUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agreementUpdateRequest($agreement_id, $request)
    {
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling agreementUpdate'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agreementUpdate'
            );
        }

        $resourcePath = '/agreements/{agreementId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementId' . '}',
                ObjectSerializer::toPathValue($agreement_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
