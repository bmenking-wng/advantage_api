<?php
/**
 * CreditCardApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * CreditCardApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation creditCardAuthorize
     *
     * Creates a new authorization without creating an order or customer.
     *
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request CreditCardAuthorizationRequest containing customer and credit card info for the authorization (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CreditCardAuthorization
     */
    public function creditCardAuthorize($billing_organization, $currency_code, $request)
    {
        list($response) = $this->creditCardAuthorizeWithHttpInfo($billing_organization, $currency_code, $request);
        return $response;
    }

    /**
     * Operation creditCardAuthorizeWithHttpInfo
     *
     * Creates a new authorization without creating an order or customer.
     *
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request CreditCardAuthorizationRequest containing customer and credit card info for the authorization (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CreditCardAuthorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardAuthorizeWithHttpInfo($billing_organization, $currency_code, $request)
    {
        $returnType = '\Advantage\Client\Model\CreditCardAuthorization';
        $request = $this->creditCardAuthorizeRequest($billing_organization, $currency_code, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CreditCardAuthorization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardAuthorizeAsync
     *
     * Creates a new authorization without creating an order or customer.
     *
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request CreditCardAuthorizationRequest containing customer and credit card info for the authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardAuthorizeAsync($billing_organization, $currency_code, $request)
    {
        return $this->creditCardAuthorizeAsyncWithHttpInfo($billing_organization, $currency_code, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardAuthorizeAsyncWithHttpInfo
     *
     * Creates a new authorization without creating an order or customer.
     *
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request CreditCardAuthorizationRequest containing customer and credit card info for the authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardAuthorizeAsyncWithHttpInfo($billing_organization, $currency_code, $request)
    {
        $returnType = '\Advantage\Client\Model\CreditCardAuthorization';
        $request = $this->creditCardAuthorizeRequest($billing_organization, $currency_code, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardAuthorize'
     *
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request CreditCardAuthorizationRequest containing customer and credit card info for the authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardAuthorizeRequest($billing_organization, $currency_code, $request)
    {
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardAuthorize'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardAuthorize'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling creditCardAuthorize'
            );
        }

        $resourcePath = '/authorizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($billing_organization !== null) {
            $queryParams['billingOrganization'] = ObjectSerializer::toQueryValue($billing_organization);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardAuthorizeAndCreateCustomer
     *
     * Creates a new authorization without creating an order. If authorization is successful, Advantage automatically creates   a customer note and links it to the ARPCCT-M record for the authorization.
     *
     * @param  string $customer_number  (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request  (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CreditCardAuthorization
     */
    public function creditCardAuthorizeAndCreateCustomer($customer_number, $billing_organization, $currency_code, $request)
    {
        list($response) = $this->creditCardAuthorizeAndCreateCustomerWithHttpInfo($customer_number, $billing_organization, $currency_code, $request);
        return $response;
    }

    /**
     * Operation creditCardAuthorizeAndCreateCustomerWithHttpInfo
     *
     * Creates a new authorization without creating an order. If authorization is successful, Advantage automatically creates   a customer note and links it to the ARPCCT-M record for the authorization.
     *
     * @param  string $customer_number  (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request  (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CreditCardAuthorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardAuthorizeAndCreateCustomerWithHttpInfo($customer_number, $billing_organization, $currency_code, $request)
    {
        $returnType = '\Advantage\Client\Model\CreditCardAuthorization';
        $request = $this->creditCardAuthorizeAndCreateCustomerRequest($customer_number, $billing_organization, $currency_code, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CreditCardAuthorization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardAuthorizeAndCreateCustomerAsync
     *
     * Creates a new authorization without creating an order. If authorization is successful, Advantage automatically creates   a customer note and links it to the ARPCCT-M record for the authorization.
     *
     * @param  string $customer_number  (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardAuthorizeAndCreateCustomerAsync($customer_number, $billing_organization, $currency_code, $request)
    {
        return $this->creditCardAuthorizeAndCreateCustomerAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardAuthorizeAndCreateCustomerAsyncWithHttpInfo
     *
     * Creates a new authorization without creating an order. If authorization is successful, Advantage automatically creates   a customer note and links it to the ARPCCT-M record for the authorization.
     *
     * @param  string $customer_number  (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardAuthorizeAndCreateCustomerAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $request)
    {
        $returnType = '\Advantage\Client\Model\CreditCardAuthorization';
        $request = $this->creditCardAuthorizeAndCreateCustomerRequest($customer_number, $billing_organization, $currency_code, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardAuthorizeAndCreateCustomer'
     *
     * @param  string $customer_number  (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  \Advantage\Client\Model\CreditCardAuthorizationRequest $request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardAuthorizeAndCreateCustomerRequest($customer_number, $billing_organization, $currency_code, $request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardAuthorizeAndCreateCustomer'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardAuthorizeAndCreateCustomer'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardAuthorizeAndCreateCustomer'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling creditCardAuthorizeAndCreateCustomer'
            );
        }

        $resourcePath = '/pre-authorizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customer_number !== null) {
            $queryParams['customerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($billing_organization !== null) {
            $queryParams['billingOrganization'] = ObjectSerializer::toQueryValue($billing_organization);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardCreateOrUpdate
     *
     * Creates a new credit card payment method for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  \Advantage\Client\Model\CreditCardAddRequest $card An AddCreditCardRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedPaymentResponse
     */
    public function creditCardCreateOrUpdate($customer_number, $billing_organization, $currency_code, $card)
    {
        list($response) = $this->creditCardCreateOrUpdateWithHttpInfo($customer_number, $billing_organization, $currency_code, $card);
        return $response;
    }

    /**
     * Operation creditCardCreateOrUpdateWithHttpInfo
     *
     * Creates a new credit card payment method for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  \Advantage\Client\Model\CreditCardAddRequest $card An AddCreditCardRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardCreateOrUpdateWithHttpInfo($customer_number, $billing_organization, $currency_code, $card)
    {
        $returnType = '\Advantage\Client\Model\SavedPaymentResponse';
        $request = $this->creditCardCreateOrUpdateRequest($customer_number, $billing_organization, $currency_code, $card);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardCreateOrUpdateAsync
     *
     * Creates a new credit card payment method for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  \Advantage\Client\Model\CreditCardAddRequest $card An AddCreditCardRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardCreateOrUpdateAsync($customer_number, $billing_organization, $currency_code, $card)
    {
        return $this->creditCardCreateOrUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $card)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardCreateOrUpdateAsyncWithHttpInfo
     *
     * Creates a new credit card payment method for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  \Advantage\Client\Model\CreditCardAddRequest $card An AddCreditCardRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardCreateOrUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $card)
    {
        $returnType = '\Advantage\Client\Model\SavedPaymentResponse';
        $request = $this->creditCardCreateOrUpdateRequest($customer_number, $billing_organization, $currency_code, $card);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardCreateOrUpdate'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  \Advantage\Client\Model\CreditCardAddRequest $card An AddCreditCardRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardCreateOrUpdateRequest($customer_number, $billing_organization, $currency_code, $card)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardCreateOrUpdate'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardCreateOrUpdate'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardCreateOrUpdate'
            );
        }
        // verify the required parameter 'card' is set
        if ($card === null || (is_array($card) && count($card) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card when calling creditCardCreateOrUpdate'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($card)) {
            $_tempBody = $card;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGet
     *
     * Get a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedCreditCard
     */
    public function creditCardGet($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        list($response) = $this->creditCardGetWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation creditCardGetWithHttpInfo
     *
     * Get a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedCreditCard, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGetWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard';
        $request = $this->creditCardGetRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedCreditCard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGetAsync
     *
     * Get a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        return $this->creditCardGetAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGetAsyncWithHttpInfo
     *
     * Get a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard';
        $request = $this->creditCardGetRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGet'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGetRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardGet'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardGet'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardGet'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling creditCardGet'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGetEligibleUses
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved credit card.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved payment are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved credit card (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentMethodEligibleUses
     */
    public function creditCardGetEligibleUses($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        list($response) = $this->creditCardGetEligibleUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation creditCardGetEligibleUsesWithHttpInfo
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved credit card.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved payment are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved credit card (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentMethodEligibleUses, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGetEligibleUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodEligibleUses';
        $request = $this->creditCardGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentMethodEligibleUses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGetEligibleUsesAsync
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved credit card.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved payment are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved credit card (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetEligibleUsesAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        return $this->creditCardGetEligibleUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGetEligibleUsesAsyncWithHttpInfo
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved credit card.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved payment are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved credit card (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetEligibleUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodEligibleUses';
        $request = $this->creditCardGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGetEligibleUses'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved credit card (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardGetEligibleUses'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardGetEligibleUses'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardGetEligibleUses'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling creditCardGetEligibleUses'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}/eligible-uses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGetUses
     *
     * Gets the subscriptions, agreements and orders that currently use a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentMethodUses
     */
    public function creditCardGetUses($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        list($response) = $this->creditCardGetUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation creditCardGetUsesWithHttpInfo
     *
     * Gets the subscriptions, agreements and orders that currently use a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentMethodUses, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGetUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodUses';
        $request = $this->creditCardGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentMethodUses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGetUsesAsync
     *
     * Gets the subscriptions, agreements and orders that currently use a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetUsesAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        return $this->creditCardGetUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGetUsesAsyncWithHttpInfo
     *
     * Gets the subscriptions, agreements and orders that currently use a credit card.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodUses';
        $request = $this->creditCardGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGetUses'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardGetUses'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardGetUses'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardGetUses'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling creditCardGetUses'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}/uses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGetValidCardTypes
     *
     * Get a list of valid card types.
     *
     * @param  string $billing_organization The billing organization to filter by. (required)
     * @param  string $currency_code The currency code of the currency to filter by. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CreditCardPaymentMethod[]
     */
    public function creditCardGetValidCardTypes($billing_organization, $currency_code)
    {
        list($response) = $this->creditCardGetValidCardTypesWithHttpInfo($billing_organization, $currency_code);
        return $response;
    }

    /**
     * Operation creditCardGetValidCardTypesWithHttpInfo
     *
     * Get a list of valid card types.
     *
     * @param  string $billing_organization The billing organization to filter by. (required)
     * @param  string $currency_code The currency code of the currency to filter by. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CreditCardPaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGetValidCardTypesWithHttpInfo($billing_organization, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\CreditCardPaymentMethod[]';
        $request = $this->creditCardGetValidCardTypesRequest($billing_organization, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CreditCardPaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGetValidCardTypesAsync
     *
     * Get a list of valid card types.
     *
     * @param  string $billing_organization The billing organization to filter by. (required)
     * @param  string $currency_code The currency code of the currency to filter by. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetValidCardTypesAsync($billing_organization, $currency_code)
    {
        return $this->creditCardGetValidCardTypesAsyncWithHttpInfo($billing_organization, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGetValidCardTypesAsyncWithHttpInfo
     *
     * Get a list of valid card types.
     *
     * @param  string $billing_organization The billing organization to filter by. (required)
     * @param  string $currency_code The currency code of the currency to filter by. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetValidCardTypesAsyncWithHttpInfo($billing_organization, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\CreditCardPaymentMethod[]';
        $request = $this->creditCardGetValidCardTypesRequest($billing_organization, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGetValidCardTypes'
     *
     * @param  string $billing_organization The billing organization to filter by. (required)
     * @param  string $currency_code The currency code of the currency to filter by. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGetValidCardTypesRequest($billing_organization, $currency_code)
    {
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardGetValidCardTypes'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardGetValidCardTypes'
            );
        }

        $resourcePath = '/payment-methods/credit-cards/{billingOrganization}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGetValidPaymentCodesByPrefix
     *
     * Returns a list of valid pay codes for a specified credit card prefix
     *
     * @param  string $prefix Credit card prefix, up to four digits (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function creditCardGetValidPaymentCodesByPrefix($prefix)
    {
        list($response) = $this->creditCardGetValidPaymentCodesByPrefixWithHttpInfo($prefix);
        return $response;
    }

    /**
     * Operation creditCardGetValidPaymentCodesByPrefixWithHttpInfo
     *
     * Returns a list of valid pay codes for a specified credit card prefix
     *
     * @param  string $prefix Credit card prefix, up to four digits (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGetValidPaymentCodesByPrefixWithHttpInfo($prefix)
    {
        $returnType = 'string[]';
        $request = $this->creditCardGetValidPaymentCodesByPrefixRequest($prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGetValidPaymentCodesByPrefixAsync
     *
     * Returns a list of valid pay codes for a specified credit card prefix
     *
     * @param  string $prefix Credit card prefix, up to four digits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetValidPaymentCodesByPrefixAsync($prefix)
    {
        return $this->creditCardGetValidPaymentCodesByPrefixAsyncWithHttpInfo($prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGetValidPaymentCodesByPrefixAsyncWithHttpInfo
     *
     * Returns a list of valid pay codes for a specified credit card prefix
     *
     * @param  string $prefix Credit card prefix, up to four digits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGetValidPaymentCodesByPrefixAsyncWithHttpInfo($prefix)
    {
        $returnType = 'string[]';
        $request = $this->creditCardGetValidPaymentCodesByPrefixRequest($prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGetValidPaymentCodesByPrefix'
     *
     * @param  string $prefix Credit card prefix, up to four digits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGetValidPaymentCodesByPrefixRequest($prefix)
    {
        // verify the required parameter 'prefix' is set
        if ($prefix === null || (is_array($prefix) && count($prefix) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prefix when calling creditCardGetValidPaymentCodesByPrefix'
            );
        }

        $resourcePath = '/credit-cards/valid-payment-codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($prefix !== null) {
            $queryParams['prefix'] = ObjectSerializer::toQueryValue($prefix);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardGet_0
     *
     * Get all valid credit cards for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedCreditCard[]
     */
    public function creditCardGet_0($customer_number, $billing_organization, $currency_code)
    {
        list($response) = $this->creditCardGet_0WithHttpInfo($customer_number, $billing_organization, $currency_code);
        return $response;
    }

    /**
     * Operation creditCardGet_0WithHttpInfo
     *
     * Get all valid credit cards for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedCreditCard[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardGet_0WithHttpInfo($customer_number, $billing_organization, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->creditCardGet_0Request($customer_number, $billing_organization, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedCreditCard[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardGet_0Async
     *
     * Get all valid credit cards for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGet_0Async($customer_number, $billing_organization, $currency_code)
    {
        return $this->creditCardGet_0AsyncWithHttpInfo($customer_number, $billing_organization, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardGet_0AsyncWithHttpInfo
     *
     * Get all valid credit cards for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardGet_0AsyncWithHttpInfo($customer_number, $billing_organization, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->creditCardGet_0Request($customer_number, $billing_organization, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardGet_0'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardGet_0Request($customer_number, $billing_organization, $currency_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardGet_0'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardGet_0'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardGet_0'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditCardUpdate
     *
     * Updates an existing credit card.
     *
     * @param  string $customer_number The billing customer (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     * @param  \Advantage\Client\Model\CreditCardUpdateRequest $update_request A CreditCardUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedCreditCard
     */
    public function creditCardUpdate($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
    {
        list($response) = $this->creditCardUpdateWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request);
        return $response;
    }

    /**
     * Operation creditCardUpdateWithHttpInfo
     *
     * Updates an existing credit card.
     *
     * @param  string $customer_number The billing customer (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     * @param  \Advantage\Client\Model\CreditCardUpdateRequest $update_request A CreditCardUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedCreditCard, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditCardUpdateWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard';
        $request = $this->creditCardUpdateRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedCreditCard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditCardUpdateAsync
     *
     * Updates an existing credit card.
     *
     * @param  string $customer_number The billing customer (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     * @param  \Advantage\Client\Model\CreditCardUpdateRequest $update_request A CreditCardUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardUpdateAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
    {
        return $this->creditCardUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditCardUpdateAsyncWithHttpInfo
     *
     * Updates an existing credit card.
     *
     * @param  string $customer_number The billing customer (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     * @param  \Advantage\Client\Model\CreditCardUpdateRequest $update_request A CreditCardUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditCardUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard';
        $request = $this->creditCardUpdateRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditCardUpdate'
     *
     * @param  string $customer_number The billing customer (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     * @param  \Advantage\Client\Model\CreditCardUpdateRequest $update_request A CreditCardUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditCardUpdateRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id, $update_request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling creditCardUpdate'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling creditCardUpdate'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling creditCardUpdate'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling creditCardUpdate'
            );
        }
        // verify the required parameter 'update_request' is set
        if ($update_request === null || (is_array($update_request) && count($update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_request when calling creditCardUpdate'
            );
        }

        $resourcePath = '/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_request)) {
            $_tempBody = $update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
