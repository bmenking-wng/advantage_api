<?php
/**
 * UpsellApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * UpsellApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpsellApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation upsellGetByCart
     *
     * Get the upsell items for a shopping cart.
     *
     * @param  string $cart_id The shopping cart ID to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByCart($cart_id, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByCartWithHttpInfo($cart_id, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByCartWithHttpInfo
     *
     * Get the upsell items for a shopping cart.
     *
     * @param  string $cart_id The shopping cart ID to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByCartWithHttpInfo($cart_id, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByCartRequest($cart_id, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByCartAsync
     *
     * Get the upsell items for a shopping cart.
     *
     * @param  string $cart_id The shopping cart ID to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByCartAsync($cart_id, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByCartAsyncWithHttpInfo($cart_id, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByCartAsyncWithHttpInfo
     *
     * Get the upsell items for a shopping cart.
     *
     * @param  string $cart_id The shopping cart ID to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByCartAsyncWithHttpInfo($cart_id, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByCartRequest($cart_id, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByCart'
     *
     * @param  string $cart_id The shopping cart ID to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByCartRequest($cart_id, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cart_id when calling upsellGetByCart'
            );
        }

        $resourcePath = '/shopping-carts/{cartId}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($cart_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cartId' . '}',
                ObjectSerializer::toPathValue($cart_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsellGetByCustomer
     *
     * Get the upsell items for a given customer.
     *
     * @param  string $customer_number Find upsells triggered for this customer. (An Advantage customer number.) (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByCustomer($customer_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByCustomerWithHttpInfo($customer_number, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByCustomerWithHttpInfo
     *
     * Get the upsell items for a given customer.
     *
     * @param  string $customer_number Find upsells triggered for this customer. (An Advantage customer number.) (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByCustomerWithHttpInfo($customer_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByCustomerRequest($customer_number, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByCustomerAsync
     *
     * Get the upsell items for a given customer.
     *
     * @param  string $customer_number Find upsells triggered for this customer. (An Advantage customer number.) (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByCustomerAsync($customer_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByCustomerAsyncWithHttpInfo($customer_number, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByCustomerAsyncWithHttpInfo
     *
     * Get the upsell items for a given customer.
     *
     * @param  string $customer_number Find upsells triggered for this customer. (An Advantage customer number.) (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByCustomerAsyncWithHttpInfo($customer_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByCustomerRequest($customer_number, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByCustomer'
     *
     * @param  string $customer_number Find upsells triggered for this customer. (An Advantage customer number.) (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByCustomerRequest($customer_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling upsellGetByCustomer'
            );
        }

        $resourcePath = '/customers/{customerNumber}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsellGetByOrder
     *
     * Get the upsell items for an order.
     *
     * @param  string $order_number The order number of the order to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByOrder($order_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByOrderWithHttpInfo($order_number, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByOrderWithHttpInfo
     *
     * Get the upsell items for an order.
     *
     * @param  string $order_number The order number of the order to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByOrderWithHttpInfo($order_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByOrderRequest($order_number, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByOrderAsync
     *
     * Get the upsell items for an order.
     *
     * @param  string $order_number The order number of the order to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByOrderAsync($order_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByOrderAsyncWithHttpInfo($order_number, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByOrderAsyncWithHttpInfo
     *
     * Get the upsell items for an order.
     *
     * @param  string $order_number The order number of the order to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByOrderAsyncWithHttpInfo($order_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByOrderRequest($order_number, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByOrder'
     *
     * @param  string $order_number The order number of the order to use to return the upsell items. (required)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByOrderRequest($order_number, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling upsellGetByOrder'
            );
        }

        $resourcePath = '/orders/{orderNumber}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsellGetByProduct
     *
     * Get the upsell items for a product.  Optionally include upsells triggered by a specific promotion code as well.
     *
     * @param  string $item_number Find upsells triggered by this item. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional) (optional)
     * @param  string $filter_promotion_code Also search for upsells triggered by this promotion.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByProduct($item_number, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_promotion_code = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByProductWithHttpInfo($item_number, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_promotion_code, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByProductWithHttpInfo
     *
     * Get the upsell items for a product.  Optionally include upsells triggered by a specific promotion code as well.
     *
     * @param  string $item_number Find upsells triggered by this item. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional) (optional)
     * @param  string $filter_promotion_code Also search for upsells triggered by this promotion.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByProductWithHttpInfo($item_number, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_promotion_code = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByProductRequest($item_number, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_promotion_code, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByProductAsync
     *
     * Get the upsell items for a product.  Optionally include upsells triggered by a specific promotion code as well.
     *
     * @param  string $item_number Find upsells triggered by this item. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional) (optional)
     * @param  string $filter_promotion_code Also search for upsells triggered by this promotion.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByProductAsync($item_number, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_promotion_code = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByProductAsyncWithHttpInfo($item_number, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_promotion_code, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByProductAsyncWithHttpInfo
     *
     * Get the upsell items for a product.  Optionally include upsells triggered by a specific promotion code as well.
     *
     * @param  string $item_number Find upsells triggered by this item. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional) (optional)
     * @param  string $filter_promotion_code Also search for upsells triggered by this promotion.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByProductAsyncWithHttpInfo($item_number, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_promotion_code = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByProductRequest($item_number, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_promotion_code, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByProduct'
     *
     * @param  string $item_number Find upsells triggered by this item. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional) (optional)
     * @param  string $filter_promotion_code Also search for upsells triggered by this promotion.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByProductRequest($item_number, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_promotion_code = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling upsellGetByProduct'
            );
        }

        $resourcePath = '/products/{itemNumber}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_order_number !== null) {
            $queryParams['filter.orderNumber'] = ObjectSerializer::toQueryValue($filter_order_number);
        }
        // query params
        if ($filter_cart_number !== null) {
            $queryParams['filter.cartNumber'] = ObjectSerializer::toQueryValue($filter_cart_number);
        }
        // query params
        if ($filter_customer_number !== null) {
            $queryParams['filter.customerNumber'] = ObjectSerializer::toQueryValue($filter_customer_number);
        }
        // query params
        if ($filter_promotion_code !== null) {
            $queryParams['filter.promotionCode'] = ObjectSerializer::toQueryValue($filter_promotion_code);
        }
        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsellGetByPromotion
     *
     * Get the upsell items for a product.  Optionally include promotions triggered by a specific promotion code as well.
     *
     * @param  string $promotion_code Find upsells triggered by this promotion. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.) (optional)
     * @param  string $filter_item_number The product use for the \&quot;must purchase\&quot; check on the upsells.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByPromotion($promotion_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_item_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByPromotionWithHttpInfo($promotion_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_item_number, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByPromotionWithHttpInfo
     *
     * Get the upsell items for a product.  Optionally include promotions triggered by a specific promotion code as well.
     *
     * @param  string $promotion_code Find upsells triggered by this promotion. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.) (optional)
     * @param  string $filter_item_number The product use for the \&quot;must purchase\&quot; check on the upsells.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByPromotionWithHttpInfo($promotion_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_item_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByPromotionRequest($promotion_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_item_number, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByPromotionAsync
     *
     * Get the upsell items for a product.  Optionally include promotions triggered by a specific promotion code as well.
     *
     * @param  string $promotion_code Find upsells triggered by this promotion. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.) (optional)
     * @param  string $filter_item_number The product use for the \&quot;must purchase\&quot; check on the upsells.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByPromotionAsync($promotion_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_item_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByPromotionAsyncWithHttpInfo($promotion_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_item_number, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByPromotionAsyncWithHttpInfo
     *
     * Get the upsell items for a product.  Optionally include promotions triggered by a specific promotion code as well.
     *
     * @param  string $promotion_code Find upsells triggered by this promotion. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.) (optional)
     * @param  string $filter_item_number The product use for the \&quot;must purchase\&quot; check on the upsells.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByPromotionAsyncWithHttpInfo($promotion_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_item_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByPromotionRequest($promotion_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_item_number, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByPromotion'
     *
     * @param  string $promotion_code Find upsells triggered by this promotion. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.) (optional)
     * @param  string $filter_item_number The product use for the \&quot;must purchase\&quot; check on the upsells.  (Optional) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByPromotionRequest($promotion_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_item_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling upsellGetByPromotion'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_order_number !== null) {
            $queryParams['filter.orderNumber'] = ObjectSerializer::toQueryValue($filter_order_number);
        }
        // query params
        if ($filter_cart_number !== null) {
            $queryParams['filter.cartNumber'] = ObjectSerializer::toQueryValue($filter_cart_number);
        }
        // query params
        if ($filter_customer_number !== null) {
            $queryParams['filter.customerNumber'] = ObjectSerializer::toQueryValue($filter_customer_number);
        }
        // query params
        if ($filter_item_number !== null) {
            $queryParams['filter.itemNumber'] = ObjectSerializer::toQueryValue($filter_item_number);
        }
        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsellGetByPromotionChoice
     *
     * Get the upsell items for a promotion choice.
     *
     * @param  string $promotion_code The triggering promotion code. (required)
     * @param  string $item_number The triggering item number. (required)
     * @param  string $choice_code The triggering promotion choice. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUpsell
     */
    public function upsellGetByPromotionChoice($promotion_code, $item_number, $choice_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        list($response) = $this->upsellGetByPromotionChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_upsell_types, $filter_web_only);
        return $response;
    }

    /**
     * Operation upsellGetByPromotionChoiceWithHttpInfo
     *
     * Get the upsell items for a promotion choice.
     *
     * @param  string $promotion_code The triggering promotion code. (required)
     * @param  string $item_number The triggering item number. (required)
     * @param  string $choice_code The triggering promotion choice. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUpsell, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsellGetByPromotionChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByPromotionChoiceRequest($promotion_code, $item_number, $choice_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_upsell_types, $filter_web_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUpsell',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsellGetByPromotionChoiceAsync
     *
     * Get the upsell items for a promotion choice.
     *
     * @param  string $promotion_code The triggering promotion code. (required)
     * @param  string $item_number The triggering item number. (required)
     * @param  string $choice_code The triggering promotion choice. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByPromotionChoiceAsync($promotion_code, $item_number, $choice_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        return $this->upsellGetByPromotionChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_upsell_types, $filter_web_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsellGetByPromotionChoiceAsyncWithHttpInfo
     *
     * Get the upsell items for a promotion choice.
     *
     * @param  string $promotion_code The triggering promotion code. (required)
     * @param  string $item_number The triggering item number. (required)
     * @param  string $choice_code The triggering promotion choice. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsellGetByPromotionChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUpsell';
        $request = $this->upsellGetByPromotionChoiceRequest($promotion_code, $item_number, $choice_code, $filter_order_number, $filter_cart_number, $filter_customer_number, $filter_upsell_types, $filter_web_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsellGetByPromotionChoice'
     *
     * @param  string $promotion_code The triggering promotion code. (required)
     * @param  string $item_number The triggering item number. (required)
     * @param  string $choice_code The triggering promotion choice. (required)
     * @param  string $filter_order_number Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.) (optional)
     * @param  string $filter_cart_number Do not upsell items already included in the given shopping cart. (Optional.) (optional)
     * @param  string $filter_customer_number The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.) (optional)
     * @param  string $filter_upsell_types What types of upsell items should be returned? (optional)
     * @param  bool $filter_web_only Include only upsells marked as \&quot;web visible\&quot;?  (This is the default.) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsellGetByPromotionChoiceRequest($promotion_code, $item_number, $choice_code, $filter_order_number = null, $filter_cart_number = null, $filter_customer_number = null, $filter_upsell_types = null, $filter_web_only = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling upsellGetByPromotionChoice'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling upsellGetByPromotionChoice'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling upsellGetByPromotionChoice'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/upsells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_order_number !== null) {
            $queryParams['filter.orderNumber'] = ObjectSerializer::toQueryValue($filter_order_number);
        }
        // query params
        if ($filter_cart_number !== null) {
            $queryParams['filter.cartNumber'] = ObjectSerializer::toQueryValue($filter_cart_number);
        }
        // query params
        if ($filter_customer_number !== null) {
            $queryParams['filter.customerNumber'] = ObjectSerializer::toQueryValue($filter_customer_number);
        }
        // query params
        if ($filter_upsell_types !== null) {
            $queryParams['filter.upsellTypes'] = ObjectSerializer::toQueryValue($filter_upsell_types);
        }
        // query params
        if ($filter_web_only !== null) {
            $queryParams['filter.webOnly'] = ObjectSerializer::toQueryValue($filter_web_only);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
