<?php
/**
 * SubscriptionApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * SubscriptionApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation subscriptionBillSuspend
     *
     * Bill Suspend a subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscriptionBillSuspend($subscription_id)
    {
        $this->subscriptionBillSuspendWithHttpInfo($subscription_id);
    }

    /**
     * Operation subscriptionBillSuspendWithHttpInfo
     *
     * Bill Suspend a subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBillSuspendWithHttpInfo($subscription_id)
    {
        $returnType = '';
        $request = $this->subscriptionBillSuspendRequest($subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionBillSuspendAsync
     *
     * Bill Suspend a subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionBillSuspendAsync($subscription_id)
    {
        return $this->subscriptionBillSuspendAsyncWithHttpInfo($subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionBillSuspendAsyncWithHttpInfo
     *
     * Bill Suspend a subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionBillSuspendAsyncWithHttpInfo($subscription_id)
    {
        $returnType = '';
        $request = $this->subscriptionBillSuspendRequest($subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionBillSuspend'
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionBillSuspendRequest($subscription_id)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionBillSuspend'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}/bill-suspend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionCancel
     *
     * Cancel a subscription.
     *
     * @param  string $subscription_id The subscriptionId of the subscription to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelSubscriptionRequest $cancel_subscription_request A CancelSubscriptionRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscriptionCancel($subscription_id, $cancel_subscription_request)
    {
        $this->subscriptionCancelWithHttpInfo($subscription_id, $cancel_subscription_request);
    }

    /**
     * Operation subscriptionCancelWithHttpInfo
     *
     * Cancel a subscription.
     *
     * @param  string $subscription_id The subscriptionId of the subscription to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelSubscriptionRequest $cancel_subscription_request A CancelSubscriptionRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionCancelWithHttpInfo($subscription_id, $cancel_subscription_request)
    {
        $returnType = '';
        $request = $this->subscriptionCancelRequest($subscription_id, $cancel_subscription_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionCancelAsync
     *
     * Cancel a subscription.
     *
     * @param  string $subscription_id The subscriptionId of the subscription to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelSubscriptionRequest $cancel_subscription_request A CancelSubscriptionRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionCancelAsync($subscription_id, $cancel_subscription_request)
    {
        return $this->subscriptionCancelAsyncWithHttpInfo($subscription_id, $cancel_subscription_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionCancelAsyncWithHttpInfo
     *
     * Cancel a subscription.
     *
     * @param  string $subscription_id The subscriptionId of the subscription to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelSubscriptionRequest $cancel_subscription_request A CancelSubscriptionRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionCancelAsyncWithHttpInfo($subscription_id, $cancel_subscription_request)
    {
        $returnType = '';
        $request = $this->subscriptionCancelRequest($subscription_id, $cancel_subscription_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionCancel'
     *
     * @param  string $subscription_id The subscriptionId of the subscription to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelSubscriptionRequest $cancel_subscription_request A CancelSubscriptionRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionCancelRequest($subscription_id, $cancel_subscription_request)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionCancel'
            );
        }
        // verify the required parameter 'cancel_subscription_request' is set
        if ($cancel_subscription_request === null || (is_array($cancel_subscription_request) && count($cancel_subscription_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_subscription_request when calling subscriptionCancel'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cancel_subscription_request)) {
            $_tempBody = $cancel_subscription_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionGet
     *
     * Get a single subscription identified by subscriptionId.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Subscription
     */
    public function subscriptionGet($subscription_id)
    {
        list($response) = $this->subscriptionGetWithHttpInfo($subscription_id);
        return $response;
    }

    /**
     * Operation subscriptionGetWithHttpInfo
     *
     * Get a single subscription identified by subscriptionId.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionGetWithHttpInfo($subscription_id)
    {
        $returnType = '\Advantage\Client\Model\Subscription';
        $request = $this->subscriptionGetRequest($subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionGetAsync
     *
     * Get a single subscription identified by subscriptionId.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionGetAsync($subscription_id)
    {
        return $this->subscriptionGetAsyncWithHttpInfo($subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionGetAsyncWithHttpInfo
     *
     * Get a single subscription identified by subscriptionId.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionGetAsyncWithHttpInfo($subscription_id)
    {
        $returnType = '\Advantage\Client\Model\Subscription';
        $request = $this->subscriptionGetRequest($subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionGet'
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionGetRequest($subscription_id)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionGet'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionGetRelatedTerms
     *
     * Gets all related terms for the given subscription.  A related term can be all subscriptions that are   part of the same package plus their future terms, or a single subscription and its future terms.  For a package subscription, the subscriptions are returned in the order they were added.  For an individual subscription, the future terms are returned after the current term in term order.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultSubscription
     */
    public function subscriptionGetRelatedTerms($subscription_id)
    {
        list($response) = $this->subscriptionGetRelatedTermsWithHttpInfo($subscription_id);
        return $response;
    }

    /**
     * Operation subscriptionGetRelatedTermsWithHttpInfo
     *
     * Gets all related terms for the given subscription.  A related term can be all subscriptions that are   part of the same package plus their future terms, or a single subscription and its future terms.  For a package subscription, the subscriptions are returned in the order they were added.  For an individual subscription, the future terms are returned after the current term in term order.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionGetRelatedTermsWithHttpInfo($subscription_id)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscription';
        $request = $this->subscriptionGetRelatedTermsRequest($subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionGetRelatedTermsAsync
     *
     * Gets all related terms for the given subscription.  A related term can be all subscriptions that are   part of the same package plus their future terms, or a single subscription and its future terms.  For a package subscription, the subscriptions are returned in the order they were added.  For an individual subscription, the future terms are returned after the current term in term order.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionGetRelatedTermsAsync($subscription_id)
    {
        return $this->subscriptionGetRelatedTermsAsyncWithHttpInfo($subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionGetRelatedTermsAsyncWithHttpInfo
     *
     * Gets all related terms for the given subscription.  A related term can be all subscriptions that are   part of the same package plus their future terms, or a single subscription and its future terms.  For a package subscription, the subscriptions are returned in the order they were added.  For an individual subscription, the future terms are returned after the current term in term order.
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionGetRelatedTermsAsyncWithHttpInfo($subscription_id)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscription';
        $request = $this->subscriptionGetRelatedTermsRequest($subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionGetRelatedTerms'
     *
     * @param  string $subscription_id Subscription Id/Reference. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionGetRelatedTermsRequest($subscription_id)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionGetRelatedTerms'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}/related-terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionNonPayCancel
     *
     * Create non-pay cancel transaction for a subscription
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscriptionNonPayCancel($subscription_id)
    {
        $this->subscriptionNonPayCancelWithHttpInfo($subscription_id);
    }

    /**
     * Operation subscriptionNonPayCancelWithHttpInfo
     *
     * Create non-pay cancel transaction for a subscription
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionNonPayCancelWithHttpInfo($subscription_id)
    {
        $returnType = '';
        $request = $this->subscriptionNonPayCancelRequest($subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionNonPayCancelAsync
     *
     * Create non-pay cancel transaction for a subscription
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionNonPayCancelAsync($subscription_id)
    {
        return $this->subscriptionNonPayCancelAsyncWithHttpInfo($subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionNonPayCancelAsyncWithHttpInfo
     *
     * Create non-pay cancel transaction for a subscription
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionNonPayCancelAsyncWithHttpInfo($subscription_id)
    {
        $returnType = '';
        $request = $this->subscriptionNonPayCancelRequest($subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionNonPayCancel'
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionNonPayCancelRequest($subscription_id)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionNonPayCancel'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}/non-pay-cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionSearch
     *
     * Gets subscriptions matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /subscriptions?PublicationCode.CN=AB or /subscriptions?PublicationCode.EQ=ABC&amp;CustomerNumber.EQ=1
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $publication_code Filter on PUB-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $subscription_id Filter on SUB-REF using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on DNR-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $referred_by_customer_number Filter on REF-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $owning_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $circulation_status Filter on CRC-STS using &#39;Equal&#39; operator (optional)
     * @param  string $publication_code_not_equal Filter on PUB-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $publication_code_less Filter on PUB-CDE using &#39;Less&#39; operator (optional)
     * @param  string $publication_code_less_or_equal Filter on PUB-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $publication_code_greater Filter on PUB-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $publication_code_greater_or_equal Filter on PUB-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $publication_code_is_null Filter on PUB-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $publication_code_is_not_null Filter on PUB-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $publication_code_like Filter on PUB-CDE using &#39;Like&#39; operator (optional)
     * @param  string $publication_code_not_like Filter on PUB-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $publication_code_contains Filter on PUB-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $publication_code_not_contains Filter on PUB-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $publication_code_starts_with Filter on PUB-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $publication_code_not_starts_with Filter on PUB-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $publication_code_ends_with Filter on PUB-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $publication_code_not_ends_with Filter on PUB-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $publication_code_in Filter on PUB-CDE using &#39;In&#39; operator (optional)
     * @param  string $publication_code_between Filter on PUB-CDE using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $subscription_id_not_equal Filter on SUB-REF using &#39;NotEqual&#39; operator (optional)
     * @param  string $subscription_id_less Filter on SUB-REF using &#39;Less&#39; operator (optional)
     * @param  string $subscription_id_less_or_equal Filter on SUB-REF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $subscription_id_greater Filter on SUB-REF using &#39;Greater&#39; operator (optional)
     * @param  string $subscription_id_greater_or_equal Filter on SUB-REF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $subscription_id_is_null Filter on SUB-REF using &#39;IsNull&#39; operator (optional)
     * @param  string $subscription_id_is_not_null Filter on SUB-REF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $subscription_id_like Filter on SUB-REF using &#39;Like&#39; operator (optional)
     * @param  string $subscription_id_not_like Filter on SUB-REF using &#39;NotLike&#39; operator (optional)
     * @param  string $subscription_id_contains Filter on SUB-REF using &#39;Contains&#39; operator (optional)
     * @param  string $subscription_id_not_contains Filter on SUB-REF using &#39;NotContains&#39; operator (optional)
     * @param  string $subscription_id_starts_with Filter on SUB-REF using &#39;StartsWith&#39; operator (optional)
     * @param  string $subscription_id_not_starts_with Filter on SUB-REF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $subscription_id_ends_with Filter on SUB-REF using &#39;EndsWith&#39; operator (optional)
     * @param  string $subscription_id_not_ends_with Filter on SUB-REF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $subscription_id_in Filter on SUB-REF using &#39;In&#39; operator (optional)
     * @param  string $subscription_id_between Filter on SUB-REF using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on DNR-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on DNR-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on DNR-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on DNR-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on DNR-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on DNR-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on DNR-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on DNR-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on DNR-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on DNR-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on DNR-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on DNR-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on DNR-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on DNR-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on DNR-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on DNR-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on DNR-NBR using &#39;Between&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_equal Filter on REF-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_less Filter on REF-CTM using &#39;Less&#39; operator (optional)
     * @param  string $referred_by_customer_number_less_or_equal Filter on REF-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater Filter on REF-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater_or_equal Filter on REF-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_null Filter on REF-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_not_null Filter on REF-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_like Filter on REF-CTM using &#39;Like&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_like Filter on REF-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $referred_by_customer_number_contains Filter on REF-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_contains Filter on REF-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $referred_by_customer_number_starts_with Filter on REF-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_starts_with Filter on REF-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_ends_with Filter on REF-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_ends_with Filter on REF-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_in Filter on REF-CTM using &#39;In&#39; operator (optional)
     * @param  string $referred_by_customer_number_between Filter on REF-CTM using &#39;Between&#39; operator (optional)
     * @param  string $owning_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $owning_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $owning_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $owning_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $owning_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $owning_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $owning_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $owning_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $owning_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $owning_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $owning_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $circulation_status_not_equal Filter on CRC-STS using &#39;NotEqual&#39; operator (optional)
     * @param  string $circulation_status_less Filter on CRC-STS using &#39;Less&#39; operator (optional)
     * @param  string $circulation_status_less_or_equal Filter on CRC-STS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $circulation_status_greater Filter on CRC-STS using &#39;Greater&#39; operator (optional)
     * @param  string $circulation_status_greater_or_equal Filter on CRC-STS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $circulation_status_is_null Filter on CRC-STS using &#39;IsNull&#39; operator (optional)
     * @param  string $circulation_status_is_not_null Filter on CRC-STS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $circulation_status_like Filter on CRC-STS using &#39;Like&#39; operator (optional)
     * @param  string $circulation_status_not_like Filter on CRC-STS using &#39;NotLike&#39; operator (optional)
     * @param  string $circulation_status_contains Filter on CRC-STS using &#39;Contains&#39; operator (optional)
     * @param  string $circulation_status_not_contains Filter on CRC-STS using &#39;NotContains&#39; operator (optional)
     * @param  string $circulation_status_starts_with Filter on CRC-STS using &#39;StartsWith&#39; operator (optional)
     * @param  string $circulation_status_not_starts_with Filter on CRC-STS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $circulation_status_ends_with Filter on CRC-STS using &#39;EndsWith&#39; operator (optional)
     * @param  string $circulation_status_not_ends_with Filter on CRC-STS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $circulation_status_in Filter on CRC-STS using &#39;In&#39; operator (optional)
     * @param  string $circulation_status_between Filter on CRC-STS using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultSubscription
     */
    public function subscriptionSearch($pager_skip = null, $pager_take = null, $publication_code = null, $ship_to_customer_number = null, $subscription_id = null, $bill_to_customer_number = null, $referred_by_customer_number = null, $owning_organization_code = null, $circulation_status = null, $publication_code_not_equal = null, $publication_code_less = null, $publication_code_less_or_equal = null, $publication_code_greater = null, $publication_code_greater_or_equal = null, $publication_code_is_null = null, $publication_code_is_not_null = null, $publication_code_like = null, $publication_code_not_like = null, $publication_code_contains = null, $publication_code_not_contains = null, $publication_code_starts_with = null, $publication_code_not_starts_with = null, $publication_code_ends_with = null, $publication_code_not_ends_with = null, $publication_code_in = null, $publication_code_between = null, $ship_to_customer_number_not_equal = null, $ship_to_customer_number_less = null, $ship_to_customer_number_less_or_equal = null, $ship_to_customer_number_greater = null, $ship_to_customer_number_greater_or_equal = null, $ship_to_customer_number_is_null = null, $ship_to_customer_number_is_not_null = null, $ship_to_customer_number_like = null, $ship_to_customer_number_not_like = null, $ship_to_customer_number_contains = null, $ship_to_customer_number_not_contains = null, $ship_to_customer_number_starts_with = null, $ship_to_customer_number_not_starts_with = null, $ship_to_customer_number_ends_with = null, $ship_to_customer_number_not_ends_with = null, $ship_to_customer_number_in = null, $ship_to_customer_number_between = null, $subscription_id_not_equal = null, $subscription_id_less = null, $subscription_id_less_or_equal = null, $subscription_id_greater = null, $subscription_id_greater_or_equal = null, $subscription_id_is_null = null, $subscription_id_is_not_null = null, $subscription_id_like = null, $subscription_id_not_like = null, $subscription_id_contains = null, $subscription_id_not_contains = null, $subscription_id_starts_with = null, $subscription_id_not_starts_with = null, $subscription_id_ends_with = null, $subscription_id_not_ends_with = null, $subscription_id_in = null, $subscription_id_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $referred_by_customer_number_not_equal = null, $referred_by_customer_number_less = null, $referred_by_customer_number_less_or_equal = null, $referred_by_customer_number_greater = null, $referred_by_customer_number_greater_or_equal = null, $referred_by_customer_number_is_null = null, $referred_by_customer_number_is_not_null = null, $referred_by_customer_number_like = null, $referred_by_customer_number_not_like = null, $referred_by_customer_number_contains = null, $referred_by_customer_number_not_contains = null, $referred_by_customer_number_starts_with = null, $referred_by_customer_number_not_starts_with = null, $referred_by_customer_number_ends_with = null, $referred_by_customer_number_not_ends_with = null, $referred_by_customer_number_in = null, $referred_by_customer_number_between = null, $owning_organization_code_not_equal = null, $owning_organization_code_less = null, $owning_organization_code_less_or_equal = null, $owning_organization_code_greater = null, $owning_organization_code_greater_or_equal = null, $owning_organization_code_is_null = null, $owning_organization_code_is_not_null = null, $owning_organization_code_like = null, $owning_organization_code_not_like = null, $owning_organization_code_contains = null, $owning_organization_code_not_contains = null, $owning_organization_code_starts_with = null, $owning_organization_code_not_starts_with = null, $owning_organization_code_ends_with = null, $owning_organization_code_not_ends_with = null, $owning_organization_code_in = null, $owning_organization_code_between = null, $circulation_status_not_equal = null, $circulation_status_less = null, $circulation_status_less_or_equal = null, $circulation_status_greater = null, $circulation_status_greater_or_equal = null, $circulation_status_is_null = null, $circulation_status_is_not_null = null, $circulation_status_like = null, $circulation_status_not_like = null, $circulation_status_contains = null, $circulation_status_not_contains = null, $circulation_status_starts_with = null, $circulation_status_not_starts_with = null, $circulation_status_ends_with = null, $circulation_status_not_ends_with = null, $circulation_status_in = null, $circulation_status_between = null)
    {
        list($response) = $this->subscriptionSearchWithHttpInfo($pager_skip, $pager_take, $publication_code, $ship_to_customer_number, $subscription_id, $bill_to_customer_number, $referred_by_customer_number, $owning_organization_code, $circulation_status, $publication_code_not_equal, $publication_code_less, $publication_code_less_or_equal, $publication_code_greater, $publication_code_greater_or_equal, $publication_code_is_null, $publication_code_is_not_null, $publication_code_like, $publication_code_not_like, $publication_code_contains, $publication_code_not_contains, $publication_code_starts_with, $publication_code_not_starts_with, $publication_code_ends_with, $publication_code_not_ends_with, $publication_code_in, $publication_code_between, $ship_to_customer_number_not_equal, $ship_to_customer_number_less, $ship_to_customer_number_less_or_equal, $ship_to_customer_number_greater, $ship_to_customer_number_greater_or_equal, $ship_to_customer_number_is_null, $ship_to_customer_number_is_not_null, $ship_to_customer_number_like, $ship_to_customer_number_not_like, $ship_to_customer_number_contains, $ship_to_customer_number_not_contains, $ship_to_customer_number_starts_with, $ship_to_customer_number_not_starts_with, $ship_to_customer_number_ends_with, $ship_to_customer_number_not_ends_with, $ship_to_customer_number_in, $ship_to_customer_number_between, $subscription_id_not_equal, $subscription_id_less, $subscription_id_less_or_equal, $subscription_id_greater, $subscription_id_greater_or_equal, $subscription_id_is_null, $subscription_id_is_not_null, $subscription_id_like, $subscription_id_not_like, $subscription_id_contains, $subscription_id_not_contains, $subscription_id_starts_with, $subscription_id_not_starts_with, $subscription_id_ends_with, $subscription_id_not_ends_with, $subscription_id_in, $subscription_id_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $referred_by_customer_number_not_equal, $referred_by_customer_number_less, $referred_by_customer_number_less_or_equal, $referred_by_customer_number_greater, $referred_by_customer_number_greater_or_equal, $referred_by_customer_number_is_null, $referred_by_customer_number_is_not_null, $referred_by_customer_number_like, $referred_by_customer_number_not_like, $referred_by_customer_number_contains, $referred_by_customer_number_not_contains, $referred_by_customer_number_starts_with, $referred_by_customer_number_not_starts_with, $referred_by_customer_number_ends_with, $referred_by_customer_number_not_ends_with, $referred_by_customer_number_in, $referred_by_customer_number_between, $owning_organization_code_not_equal, $owning_organization_code_less, $owning_organization_code_less_or_equal, $owning_organization_code_greater, $owning_organization_code_greater_or_equal, $owning_organization_code_is_null, $owning_organization_code_is_not_null, $owning_organization_code_like, $owning_organization_code_not_like, $owning_organization_code_contains, $owning_organization_code_not_contains, $owning_organization_code_starts_with, $owning_organization_code_not_starts_with, $owning_organization_code_ends_with, $owning_organization_code_not_ends_with, $owning_organization_code_in, $owning_organization_code_between, $circulation_status_not_equal, $circulation_status_less, $circulation_status_less_or_equal, $circulation_status_greater, $circulation_status_greater_or_equal, $circulation_status_is_null, $circulation_status_is_not_null, $circulation_status_like, $circulation_status_not_like, $circulation_status_contains, $circulation_status_not_contains, $circulation_status_starts_with, $circulation_status_not_starts_with, $circulation_status_ends_with, $circulation_status_not_ends_with, $circulation_status_in, $circulation_status_between);
        return $response;
    }

    /**
     * Operation subscriptionSearchWithHttpInfo
     *
     * Gets subscriptions matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /subscriptions?PublicationCode.CN=AB or /subscriptions?PublicationCode.EQ=ABC&amp;CustomerNumber.EQ=1
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $publication_code Filter on PUB-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $subscription_id Filter on SUB-REF using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on DNR-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $referred_by_customer_number Filter on REF-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $owning_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $circulation_status Filter on CRC-STS using &#39;Equal&#39; operator (optional)
     * @param  string $publication_code_not_equal Filter on PUB-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $publication_code_less Filter on PUB-CDE using &#39;Less&#39; operator (optional)
     * @param  string $publication_code_less_or_equal Filter on PUB-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $publication_code_greater Filter on PUB-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $publication_code_greater_or_equal Filter on PUB-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $publication_code_is_null Filter on PUB-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $publication_code_is_not_null Filter on PUB-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $publication_code_like Filter on PUB-CDE using &#39;Like&#39; operator (optional)
     * @param  string $publication_code_not_like Filter on PUB-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $publication_code_contains Filter on PUB-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $publication_code_not_contains Filter on PUB-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $publication_code_starts_with Filter on PUB-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $publication_code_not_starts_with Filter on PUB-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $publication_code_ends_with Filter on PUB-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $publication_code_not_ends_with Filter on PUB-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $publication_code_in Filter on PUB-CDE using &#39;In&#39; operator (optional)
     * @param  string $publication_code_between Filter on PUB-CDE using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $subscription_id_not_equal Filter on SUB-REF using &#39;NotEqual&#39; operator (optional)
     * @param  string $subscription_id_less Filter on SUB-REF using &#39;Less&#39; operator (optional)
     * @param  string $subscription_id_less_or_equal Filter on SUB-REF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $subscription_id_greater Filter on SUB-REF using &#39;Greater&#39; operator (optional)
     * @param  string $subscription_id_greater_or_equal Filter on SUB-REF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $subscription_id_is_null Filter on SUB-REF using &#39;IsNull&#39; operator (optional)
     * @param  string $subscription_id_is_not_null Filter on SUB-REF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $subscription_id_like Filter on SUB-REF using &#39;Like&#39; operator (optional)
     * @param  string $subscription_id_not_like Filter on SUB-REF using &#39;NotLike&#39; operator (optional)
     * @param  string $subscription_id_contains Filter on SUB-REF using &#39;Contains&#39; operator (optional)
     * @param  string $subscription_id_not_contains Filter on SUB-REF using &#39;NotContains&#39; operator (optional)
     * @param  string $subscription_id_starts_with Filter on SUB-REF using &#39;StartsWith&#39; operator (optional)
     * @param  string $subscription_id_not_starts_with Filter on SUB-REF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $subscription_id_ends_with Filter on SUB-REF using &#39;EndsWith&#39; operator (optional)
     * @param  string $subscription_id_not_ends_with Filter on SUB-REF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $subscription_id_in Filter on SUB-REF using &#39;In&#39; operator (optional)
     * @param  string $subscription_id_between Filter on SUB-REF using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on DNR-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on DNR-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on DNR-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on DNR-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on DNR-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on DNR-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on DNR-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on DNR-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on DNR-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on DNR-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on DNR-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on DNR-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on DNR-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on DNR-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on DNR-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on DNR-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on DNR-NBR using &#39;Between&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_equal Filter on REF-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_less Filter on REF-CTM using &#39;Less&#39; operator (optional)
     * @param  string $referred_by_customer_number_less_or_equal Filter on REF-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater Filter on REF-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater_or_equal Filter on REF-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_null Filter on REF-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_not_null Filter on REF-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_like Filter on REF-CTM using &#39;Like&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_like Filter on REF-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $referred_by_customer_number_contains Filter on REF-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_contains Filter on REF-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $referred_by_customer_number_starts_with Filter on REF-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_starts_with Filter on REF-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_ends_with Filter on REF-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_ends_with Filter on REF-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_in Filter on REF-CTM using &#39;In&#39; operator (optional)
     * @param  string $referred_by_customer_number_between Filter on REF-CTM using &#39;Between&#39; operator (optional)
     * @param  string $owning_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $owning_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $owning_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $owning_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $owning_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $owning_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $owning_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $owning_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $owning_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $owning_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $owning_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $circulation_status_not_equal Filter on CRC-STS using &#39;NotEqual&#39; operator (optional)
     * @param  string $circulation_status_less Filter on CRC-STS using &#39;Less&#39; operator (optional)
     * @param  string $circulation_status_less_or_equal Filter on CRC-STS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $circulation_status_greater Filter on CRC-STS using &#39;Greater&#39; operator (optional)
     * @param  string $circulation_status_greater_or_equal Filter on CRC-STS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $circulation_status_is_null Filter on CRC-STS using &#39;IsNull&#39; operator (optional)
     * @param  string $circulation_status_is_not_null Filter on CRC-STS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $circulation_status_like Filter on CRC-STS using &#39;Like&#39; operator (optional)
     * @param  string $circulation_status_not_like Filter on CRC-STS using &#39;NotLike&#39; operator (optional)
     * @param  string $circulation_status_contains Filter on CRC-STS using &#39;Contains&#39; operator (optional)
     * @param  string $circulation_status_not_contains Filter on CRC-STS using &#39;NotContains&#39; operator (optional)
     * @param  string $circulation_status_starts_with Filter on CRC-STS using &#39;StartsWith&#39; operator (optional)
     * @param  string $circulation_status_not_starts_with Filter on CRC-STS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $circulation_status_ends_with Filter on CRC-STS using &#39;EndsWith&#39; operator (optional)
     * @param  string $circulation_status_not_ends_with Filter on CRC-STS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $circulation_status_in Filter on CRC-STS using &#39;In&#39; operator (optional)
     * @param  string $circulation_status_between Filter on CRC-STS using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionSearchWithHttpInfo($pager_skip = null, $pager_take = null, $publication_code = null, $ship_to_customer_number = null, $subscription_id = null, $bill_to_customer_number = null, $referred_by_customer_number = null, $owning_organization_code = null, $circulation_status = null, $publication_code_not_equal = null, $publication_code_less = null, $publication_code_less_or_equal = null, $publication_code_greater = null, $publication_code_greater_or_equal = null, $publication_code_is_null = null, $publication_code_is_not_null = null, $publication_code_like = null, $publication_code_not_like = null, $publication_code_contains = null, $publication_code_not_contains = null, $publication_code_starts_with = null, $publication_code_not_starts_with = null, $publication_code_ends_with = null, $publication_code_not_ends_with = null, $publication_code_in = null, $publication_code_between = null, $ship_to_customer_number_not_equal = null, $ship_to_customer_number_less = null, $ship_to_customer_number_less_or_equal = null, $ship_to_customer_number_greater = null, $ship_to_customer_number_greater_or_equal = null, $ship_to_customer_number_is_null = null, $ship_to_customer_number_is_not_null = null, $ship_to_customer_number_like = null, $ship_to_customer_number_not_like = null, $ship_to_customer_number_contains = null, $ship_to_customer_number_not_contains = null, $ship_to_customer_number_starts_with = null, $ship_to_customer_number_not_starts_with = null, $ship_to_customer_number_ends_with = null, $ship_to_customer_number_not_ends_with = null, $ship_to_customer_number_in = null, $ship_to_customer_number_between = null, $subscription_id_not_equal = null, $subscription_id_less = null, $subscription_id_less_or_equal = null, $subscription_id_greater = null, $subscription_id_greater_or_equal = null, $subscription_id_is_null = null, $subscription_id_is_not_null = null, $subscription_id_like = null, $subscription_id_not_like = null, $subscription_id_contains = null, $subscription_id_not_contains = null, $subscription_id_starts_with = null, $subscription_id_not_starts_with = null, $subscription_id_ends_with = null, $subscription_id_not_ends_with = null, $subscription_id_in = null, $subscription_id_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $referred_by_customer_number_not_equal = null, $referred_by_customer_number_less = null, $referred_by_customer_number_less_or_equal = null, $referred_by_customer_number_greater = null, $referred_by_customer_number_greater_or_equal = null, $referred_by_customer_number_is_null = null, $referred_by_customer_number_is_not_null = null, $referred_by_customer_number_like = null, $referred_by_customer_number_not_like = null, $referred_by_customer_number_contains = null, $referred_by_customer_number_not_contains = null, $referred_by_customer_number_starts_with = null, $referred_by_customer_number_not_starts_with = null, $referred_by_customer_number_ends_with = null, $referred_by_customer_number_not_ends_with = null, $referred_by_customer_number_in = null, $referred_by_customer_number_between = null, $owning_organization_code_not_equal = null, $owning_organization_code_less = null, $owning_organization_code_less_or_equal = null, $owning_organization_code_greater = null, $owning_organization_code_greater_or_equal = null, $owning_organization_code_is_null = null, $owning_organization_code_is_not_null = null, $owning_organization_code_like = null, $owning_organization_code_not_like = null, $owning_organization_code_contains = null, $owning_organization_code_not_contains = null, $owning_organization_code_starts_with = null, $owning_organization_code_not_starts_with = null, $owning_organization_code_ends_with = null, $owning_organization_code_not_ends_with = null, $owning_organization_code_in = null, $owning_organization_code_between = null, $circulation_status_not_equal = null, $circulation_status_less = null, $circulation_status_less_or_equal = null, $circulation_status_greater = null, $circulation_status_greater_or_equal = null, $circulation_status_is_null = null, $circulation_status_is_not_null = null, $circulation_status_like = null, $circulation_status_not_like = null, $circulation_status_contains = null, $circulation_status_not_contains = null, $circulation_status_starts_with = null, $circulation_status_not_starts_with = null, $circulation_status_ends_with = null, $circulation_status_not_ends_with = null, $circulation_status_in = null, $circulation_status_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscription';
        $request = $this->subscriptionSearchRequest($pager_skip, $pager_take, $publication_code, $ship_to_customer_number, $subscription_id, $bill_to_customer_number, $referred_by_customer_number, $owning_organization_code, $circulation_status, $publication_code_not_equal, $publication_code_less, $publication_code_less_or_equal, $publication_code_greater, $publication_code_greater_or_equal, $publication_code_is_null, $publication_code_is_not_null, $publication_code_like, $publication_code_not_like, $publication_code_contains, $publication_code_not_contains, $publication_code_starts_with, $publication_code_not_starts_with, $publication_code_ends_with, $publication_code_not_ends_with, $publication_code_in, $publication_code_between, $ship_to_customer_number_not_equal, $ship_to_customer_number_less, $ship_to_customer_number_less_or_equal, $ship_to_customer_number_greater, $ship_to_customer_number_greater_or_equal, $ship_to_customer_number_is_null, $ship_to_customer_number_is_not_null, $ship_to_customer_number_like, $ship_to_customer_number_not_like, $ship_to_customer_number_contains, $ship_to_customer_number_not_contains, $ship_to_customer_number_starts_with, $ship_to_customer_number_not_starts_with, $ship_to_customer_number_ends_with, $ship_to_customer_number_not_ends_with, $ship_to_customer_number_in, $ship_to_customer_number_between, $subscription_id_not_equal, $subscription_id_less, $subscription_id_less_or_equal, $subscription_id_greater, $subscription_id_greater_or_equal, $subscription_id_is_null, $subscription_id_is_not_null, $subscription_id_like, $subscription_id_not_like, $subscription_id_contains, $subscription_id_not_contains, $subscription_id_starts_with, $subscription_id_not_starts_with, $subscription_id_ends_with, $subscription_id_not_ends_with, $subscription_id_in, $subscription_id_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $referred_by_customer_number_not_equal, $referred_by_customer_number_less, $referred_by_customer_number_less_or_equal, $referred_by_customer_number_greater, $referred_by_customer_number_greater_or_equal, $referred_by_customer_number_is_null, $referred_by_customer_number_is_not_null, $referred_by_customer_number_like, $referred_by_customer_number_not_like, $referred_by_customer_number_contains, $referred_by_customer_number_not_contains, $referred_by_customer_number_starts_with, $referred_by_customer_number_not_starts_with, $referred_by_customer_number_ends_with, $referred_by_customer_number_not_ends_with, $referred_by_customer_number_in, $referred_by_customer_number_between, $owning_organization_code_not_equal, $owning_organization_code_less, $owning_organization_code_less_or_equal, $owning_organization_code_greater, $owning_organization_code_greater_or_equal, $owning_organization_code_is_null, $owning_organization_code_is_not_null, $owning_organization_code_like, $owning_organization_code_not_like, $owning_organization_code_contains, $owning_organization_code_not_contains, $owning_organization_code_starts_with, $owning_organization_code_not_starts_with, $owning_organization_code_ends_with, $owning_organization_code_not_ends_with, $owning_organization_code_in, $owning_organization_code_between, $circulation_status_not_equal, $circulation_status_less, $circulation_status_less_or_equal, $circulation_status_greater, $circulation_status_greater_or_equal, $circulation_status_is_null, $circulation_status_is_not_null, $circulation_status_like, $circulation_status_not_like, $circulation_status_contains, $circulation_status_not_contains, $circulation_status_starts_with, $circulation_status_not_starts_with, $circulation_status_ends_with, $circulation_status_not_ends_with, $circulation_status_in, $circulation_status_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionSearchAsync
     *
     * Gets subscriptions matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /subscriptions?PublicationCode.CN=AB or /subscriptions?PublicationCode.EQ=ABC&amp;CustomerNumber.EQ=1
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $publication_code Filter on PUB-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $subscription_id Filter on SUB-REF using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on DNR-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $referred_by_customer_number Filter on REF-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $owning_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $circulation_status Filter on CRC-STS using &#39;Equal&#39; operator (optional)
     * @param  string $publication_code_not_equal Filter on PUB-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $publication_code_less Filter on PUB-CDE using &#39;Less&#39; operator (optional)
     * @param  string $publication_code_less_or_equal Filter on PUB-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $publication_code_greater Filter on PUB-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $publication_code_greater_or_equal Filter on PUB-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $publication_code_is_null Filter on PUB-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $publication_code_is_not_null Filter on PUB-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $publication_code_like Filter on PUB-CDE using &#39;Like&#39; operator (optional)
     * @param  string $publication_code_not_like Filter on PUB-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $publication_code_contains Filter on PUB-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $publication_code_not_contains Filter on PUB-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $publication_code_starts_with Filter on PUB-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $publication_code_not_starts_with Filter on PUB-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $publication_code_ends_with Filter on PUB-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $publication_code_not_ends_with Filter on PUB-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $publication_code_in Filter on PUB-CDE using &#39;In&#39; operator (optional)
     * @param  string $publication_code_between Filter on PUB-CDE using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $subscription_id_not_equal Filter on SUB-REF using &#39;NotEqual&#39; operator (optional)
     * @param  string $subscription_id_less Filter on SUB-REF using &#39;Less&#39; operator (optional)
     * @param  string $subscription_id_less_or_equal Filter on SUB-REF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $subscription_id_greater Filter on SUB-REF using &#39;Greater&#39; operator (optional)
     * @param  string $subscription_id_greater_or_equal Filter on SUB-REF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $subscription_id_is_null Filter on SUB-REF using &#39;IsNull&#39; operator (optional)
     * @param  string $subscription_id_is_not_null Filter on SUB-REF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $subscription_id_like Filter on SUB-REF using &#39;Like&#39; operator (optional)
     * @param  string $subscription_id_not_like Filter on SUB-REF using &#39;NotLike&#39; operator (optional)
     * @param  string $subscription_id_contains Filter on SUB-REF using &#39;Contains&#39; operator (optional)
     * @param  string $subscription_id_not_contains Filter on SUB-REF using &#39;NotContains&#39; operator (optional)
     * @param  string $subscription_id_starts_with Filter on SUB-REF using &#39;StartsWith&#39; operator (optional)
     * @param  string $subscription_id_not_starts_with Filter on SUB-REF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $subscription_id_ends_with Filter on SUB-REF using &#39;EndsWith&#39; operator (optional)
     * @param  string $subscription_id_not_ends_with Filter on SUB-REF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $subscription_id_in Filter on SUB-REF using &#39;In&#39; operator (optional)
     * @param  string $subscription_id_between Filter on SUB-REF using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on DNR-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on DNR-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on DNR-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on DNR-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on DNR-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on DNR-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on DNR-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on DNR-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on DNR-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on DNR-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on DNR-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on DNR-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on DNR-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on DNR-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on DNR-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on DNR-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on DNR-NBR using &#39;Between&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_equal Filter on REF-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_less Filter on REF-CTM using &#39;Less&#39; operator (optional)
     * @param  string $referred_by_customer_number_less_or_equal Filter on REF-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater Filter on REF-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater_or_equal Filter on REF-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_null Filter on REF-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_not_null Filter on REF-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_like Filter on REF-CTM using &#39;Like&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_like Filter on REF-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $referred_by_customer_number_contains Filter on REF-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_contains Filter on REF-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $referred_by_customer_number_starts_with Filter on REF-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_starts_with Filter on REF-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_ends_with Filter on REF-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_ends_with Filter on REF-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_in Filter on REF-CTM using &#39;In&#39; operator (optional)
     * @param  string $referred_by_customer_number_between Filter on REF-CTM using &#39;Between&#39; operator (optional)
     * @param  string $owning_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $owning_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $owning_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $owning_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $owning_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $owning_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $owning_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $owning_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $owning_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $owning_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $owning_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $circulation_status_not_equal Filter on CRC-STS using &#39;NotEqual&#39; operator (optional)
     * @param  string $circulation_status_less Filter on CRC-STS using &#39;Less&#39; operator (optional)
     * @param  string $circulation_status_less_or_equal Filter on CRC-STS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $circulation_status_greater Filter on CRC-STS using &#39;Greater&#39; operator (optional)
     * @param  string $circulation_status_greater_or_equal Filter on CRC-STS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $circulation_status_is_null Filter on CRC-STS using &#39;IsNull&#39; operator (optional)
     * @param  string $circulation_status_is_not_null Filter on CRC-STS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $circulation_status_like Filter on CRC-STS using &#39;Like&#39; operator (optional)
     * @param  string $circulation_status_not_like Filter on CRC-STS using &#39;NotLike&#39; operator (optional)
     * @param  string $circulation_status_contains Filter on CRC-STS using &#39;Contains&#39; operator (optional)
     * @param  string $circulation_status_not_contains Filter on CRC-STS using &#39;NotContains&#39; operator (optional)
     * @param  string $circulation_status_starts_with Filter on CRC-STS using &#39;StartsWith&#39; operator (optional)
     * @param  string $circulation_status_not_starts_with Filter on CRC-STS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $circulation_status_ends_with Filter on CRC-STS using &#39;EndsWith&#39; operator (optional)
     * @param  string $circulation_status_not_ends_with Filter on CRC-STS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $circulation_status_in Filter on CRC-STS using &#39;In&#39; operator (optional)
     * @param  string $circulation_status_between Filter on CRC-STS using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionSearchAsync($pager_skip = null, $pager_take = null, $publication_code = null, $ship_to_customer_number = null, $subscription_id = null, $bill_to_customer_number = null, $referred_by_customer_number = null, $owning_organization_code = null, $circulation_status = null, $publication_code_not_equal = null, $publication_code_less = null, $publication_code_less_or_equal = null, $publication_code_greater = null, $publication_code_greater_or_equal = null, $publication_code_is_null = null, $publication_code_is_not_null = null, $publication_code_like = null, $publication_code_not_like = null, $publication_code_contains = null, $publication_code_not_contains = null, $publication_code_starts_with = null, $publication_code_not_starts_with = null, $publication_code_ends_with = null, $publication_code_not_ends_with = null, $publication_code_in = null, $publication_code_between = null, $ship_to_customer_number_not_equal = null, $ship_to_customer_number_less = null, $ship_to_customer_number_less_or_equal = null, $ship_to_customer_number_greater = null, $ship_to_customer_number_greater_or_equal = null, $ship_to_customer_number_is_null = null, $ship_to_customer_number_is_not_null = null, $ship_to_customer_number_like = null, $ship_to_customer_number_not_like = null, $ship_to_customer_number_contains = null, $ship_to_customer_number_not_contains = null, $ship_to_customer_number_starts_with = null, $ship_to_customer_number_not_starts_with = null, $ship_to_customer_number_ends_with = null, $ship_to_customer_number_not_ends_with = null, $ship_to_customer_number_in = null, $ship_to_customer_number_between = null, $subscription_id_not_equal = null, $subscription_id_less = null, $subscription_id_less_or_equal = null, $subscription_id_greater = null, $subscription_id_greater_or_equal = null, $subscription_id_is_null = null, $subscription_id_is_not_null = null, $subscription_id_like = null, $subscription_id_not_like = null, $subscription_id_contains = null, $subscription_id_not_contains = null, $subscription_id_starts_with = null, $subscription_id_not_starts_with = null, $subscription_id_ends_with = null, $subscription_id_not_ends_with = null, $subscription_id_in = null, $subscription_id_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $referred_by_customer_number_not_equal = null, $referred_by_customer_number_less = null, $referred_by_customer_number_less_or_equal = null, $referred_by_customer_number_greater = null, $referred_by_customer_number_greater_or_equal = null, $referred_by_customer_number_is_null = null, $referred_by_customer_number_is_not_null = null, $referred_by_customer_number_like = null, $referred_by_customer_number_not_like = null, $referred_by_customer_number_contains = null, $referred_by_customer_number_not_contains = null, $referred_by_customer_number_starts_with = null, $referred_by_customer_number_not_starts_with = null, $referred_by_customer_number_ends_with = null, $referred_by_customer_number_not_ends_with = null, $referred_by_customer_number_in = null, $referred_by_customer_number_between = null, $owning_organization_code_not_equal = null, $owning_organization_code_less = null, $owning_organization_code_less_or_equal = null, $owning_organization_code_greater = null, $owning_organization_code_greater_or_equal = null, $owning_organization_code_is_null = null, $owning_organization_code_is_not_null = null, $owning_organization_code_like = null, $owning_organization_code_not_like = null, $owning_organization_code_contains = null, $owning_organization_code_not_contains = null, $owning_organization_code_starts_with = null, $owning_organization_code_not_starts_with = null, $owning_organization_code_ends_with = null, $owning_organization_code_not_ends_with = null, $owning_organization_code_in = null, $owning_organization_code_between = null, $circulation_status_not_equal = null, $circulation_status_less = null, $circulation_status_less_or_equal = null, $circulation_status_greater = null, $circulation_status_greater_or_equal = null, $circulation_status_is_null = null, $circulation_status_is_not_null = null, $circulation_status_like = null, $circulation_status_not_like = null, $circulation_status_contains = null, $circulation_status_not_contains = null, $circulation_status_starts_with = null, $circulation_status_not_starts_with = null, $circulation_status_ends_with = null, $circulation_status_not_ends_with = null, $circulation_status_in = null, $circulation_status_between = null)
    {
        return $this->subscriptionSearchAsyncWithHttpInfo($pager_skip, $pager_take, $publication_code, $ship_to_customer_number, $subscription_id, $bill_to_customer_number, $referred_by_customer_number, $owning_organization_code, $circulation_status, $publication_code_not_equal, $publication_code_less, $publication_code_less_or_equal, $publication_code_greater, $publication_code_greater_or_equal, $publication_code_is_null, $publication_code_is_not_null, $publication_code_like, $publication_code_not_like, $publication_code_contains, $publication_code_not_contains, $publication_code_starts_with, $publication_code_not_starts_with, $publication_code_ends_with, $publication_code_not_ends_with, $publication_code_in, $publication_code_between, $ship_to_customer_number_not_equal, $ship_to_customer_number_less, $ship_to_customer_number_less_or_equal, $ship_to_customer_number_greater, $ship_to_customer_number_greater_or_equal, $ship_to_customer_number_is_null, $ship_to_customer_number_is_not_null, $ship_to_customer_number_like, $ship_to_customer_number_not_like, $ship_to_customer_number_contains, $ship_to_customer_number_not_contains, $ship_to_customer_number_starts_with, $ship_to_customer_number_not_starts_with, $ship_to_customer_number_ends_with, $ship_to_customer_number_not_ends_with, $ship_to_customer_number_in, $ship_to_customer_number_between, $subscription_id_not_equal, $subscription_id_less, $subscription_id_less_or_equal, $subscription_id_greater, $subscription_id_greater_or_equal, $subscription_id_is_null, $subscription_id_is_not_null, $subscription_id_like, $subscription_id_not_like, $subscription_id_contains, $subscription_id_not_contains, $subscription_id_starts_with, $subscription_id_not_starts_with, $subscription_id_ends_with, $subscription_id_not_ends_with, $subscription_id_in, $subscription_id_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $referred_by_customer_number_not_equal, $referred_by_customer_number_less, $referred_by_customer_number_less_or_equal, $referred_by_customer_number_greater, $referred_by_customer_number_greater_or_equal, $referred_by_customer_number_is_null, $referred_by_customer_number_is_not_null, $referred_by_customer_number_like, $referred_by_customer_number_not_like, $referred_by_customer_number_contains, $referred_by_customer_number_not_contains, $referred_by_customer_number_starts_with, $referred_by_customer_number_not_starts_with, $referred_by_customer_number_ends_with, $referred_by_customer_number_not_ends_with, $referred_by_customer_number_in, $referred_by_customer_number_between, $owning_organization_code_not_equal, $owning_organization_code_less, $owning_organization_code_less_or_equal, $owning_organization_code_greater, $owning_organization_code_greater_or_equal, $owning_organization_code_is_null, $owning_organization_code_is_not_null, $owning_organization_code_like, $owning_organization_code_not_like, $owning_organization_code_contains, $owning_organization_code_not_contains, $owning_organization_code_starts_with, $owning_organization_code_not_starts_with, $owning_organization_code_ends_with, $owning_organization_code_not_ends_with, $owning_organization_code_in, $owning_organization_code_between, $circulation_status_not_equal, $circulation_status_less, $circulation_status_less_or_equal, $circulation_status_greater, $circulation_status_greater_or_equal, $circulation_status_is_null, $circulation_status_is_not_null, $circulation_status_like, $circulation_status_not_like, $circulation_status_contains, $circulation_status_not_contains, $circulation_status_starts_with, $circulation_status_not_starts_with, $circulation_status_ends_with, $circulation_status_not_ends_with, $circulation_status_in, $circulation_status_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionSearchAsyncWithHttpInfo
     *
     * Gets subscriptions matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /subscriptions?PublicationCode.CN=AB or /subscriptions?PublicationCode.EQ=ABC&amp;CustomerNumber.EQ=1
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $publication_code Filter on PUB-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $subscription_id Filter on SUB-REF using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on DNR-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $referred_by_customer_number Filter on REF-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $owning_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $circulation_status Filter on CRC-STS using &#39;Equal&#39; operator (optional)
     * @param  string $publication_code_not_equal Filter on PUB-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $publication_code_less Filter on PUB-CDE using &#39;Less&#39; operator (optional)
     * @param  string $publication_code_less_or_equal Filter on PUB-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $publication_code_greater Filter on PUB-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $publication_code_greater_or_equal Filter on PUB-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $publication_code_is_null Filter on PUB-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $publication_code_is_not_null Filter on PUB-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $publication_code_like Filter on PUB-CDE using &#39;Like&#39; operator (optional)
     * @param  string $publication_code_not_like Filter on PUB-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $publication_code_contains Filter on PUB-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $publication_code_not_contains Filter on PUB-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $publication_code_starts_with Filter on PUB-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $publication_code_not_starts_with Filter on PUB-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $publication_code_ends_with Filter on PUB-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $publication_code_not_ends_with Filter on PUB-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $publication_code_in Filter on PUB-CDE using &#39;In&#39; operator (optional)
     * @param  string $publication_code_between Filter on PUB-CDE using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $subscription_id_not_equal Filter on SUB-REF using &#39;NotEqual&#39; operator (optional)
     * @param  string $subscription_id_less Filter on SUB-REF using &#39;Less&#39; operator (optional)
     * @param  string $subscription_id_less_or_equal Filter on SUB-REF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $subscription_id_greater Filter on SUB-REF using &#39;Greater&#39; operator (optional)
     * @param  string $subscription_id_greater_or_equal Filter on SUB-REF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $subscription_id_is_null Filter on SUB-REF using &#39;IsNull&#39; operator (optional)
     * @param  string $subscription_id_is_not_null Filter on SUB-REF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $subscription_id_like Filter on SUB-REF using &#39;Like&#39; operator (optional)
     * @param  string $subscription_id_not_like Filter on SUB-REF using &#39;NotLike&#39; operator (optional)
     * @param  string $subscription_id_contains Filter on SUB-REF using &#39;Contains&#39; operator (optional)
     * @param  string $subscription_id_not_contains Filter on SUB-REF using &#39;NotContains&#39; operator (optional)
     * @param  string $subscription_id_starts_with Filter on SUB-REF using &#39;StartsWith&#39; operator (optional)
     * @param  string $subscription_id_not_starts_with Filter on SUB-REF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $subscription_id_ends_with Filter on SUB-REF using &#39;EndsWith&#39; operator (optional)
     * @param  string $subscription_id_not_ends_with Filter on SUB-REF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $subscription_id_in Filter on SUB-REF using &#39;In&#39; operator (optional)
     * @param  string $subscription_id_between Filter on SUB-REF using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on DNR-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on DNR-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on DNR-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on DNR-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on DNR-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on DNR-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on DNR-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on DNR-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on DNR-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on DNR-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on DNR-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on DNR-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on DNR-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on DNR-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on DNR-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on DNR-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on DNR-NBR using &#39;Between&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_equal Filter on REF-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_less Filter on REF-CTM using &#39;Less&#39; operator (optional)
     * @param  string $referred_by_customer_number_less_or_equal Filter on REF-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater Filter on REF-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater_or_equal Filter on REF-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_null Filter on REF-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_not_null Filter on REF-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_like Filter on REF-CTM using &#39;Like&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_like Filter on REF-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $referred_by_customer_number_contains Filter on REF-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_contains Filter on REF-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $referred_by_customer_number_starts_with Filter on REF-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_starts_with Filter on REF-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_ends_with Filter on REF-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_ends_with Filter on REF-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_in Filter on REF-CTM using &#39;In&#39; operator (optional)
     * @param  string $referred_by_customer_number_between Filter on REF-CTM using &#39;Between&#39; operator (optional)
     * @param  string $owning_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $owning_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $owning_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $owning_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $owning_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $owning_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $owning_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $owning_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $owning_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $owning_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $owning_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $circulation_status_not_equal Filter on CRC-STS using &#39;NotEqual&#39; operator (optional)
     * @param  string $circulation_status_less Filter on CRC-STS using &#39;Less&#39; operator (optional)
     * @param  string $circulation_status_less_or_equal Filter on CRC-STS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $circulation_status_greater Filter on CRC-STS using &#39;Greater&#39; operator (optional)
     * @param  string $circulation_status_greater_or_equal Filter on CRC-STS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $circulation_status_is_null Filter on CRC-STS using &#39;IsNull&#39; operator (optional)
     * @param  string $circulation_status_is_not_null Filter on CRC-STS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $circulation_status_like Filter on CRC-STS using &#39;Like&#39; operator (optional)
     * @param  string $circulation_status_not_like Filter on CRC-STS using &#39;NotLike&#39; operator (optional)
     * @param  string $circulation_status_contains Filter on CRC-STS using &#39;Contains&#39; operator (optional)
     * @param  string $circulation_status_not_contains Filter on CRC-STS using &#39;NotContains&#39; operator (optional)
     * @param  string $circulation_status_starts_with Filter on CRC-STS using &#39;StartsWith&#39; operator (optional)
     * @param  string $circulation_status_not_starts_with Filter on CRC-STS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $circulation_status_ends_with Filter on CRC-STS using &#39;EndsWith&#39; operator (optional)
     * @param  string $circulation_status_not_ends_with Filter on CRC-STS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $circulation_status_in Filter on CRC-STS using &#39;In&#39; operator (optional)
     * @param  string $circulation_status_between Filter on CRC-STS using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionSearchAsyncWithHttpInfo($pager_skip = null, $pager_take = null, $publication_code = null, $ship_to_customer_number = null, $subscription_id = null, $bill_to_customer_number = null, $referred_by_customer_number = null, $owning_organization_code = null, $circulation_status = null, $publication_code_not_equal = null, $publication_code_less = null, $publication_code_less_or_equal = null, $publication_code_greater = null, $publication_code_greater_or_equal = null, $publication_code_is_null = null, $publication_code_is_not_null = null, $publication_code_like = null, $publication_code_not_like = null, $publication_code_contains = null, $publication_code_not_contains = null, $publication_code_starts_with = null, $publication_code_not_starts_with = null, $publication_code_ends_with = null, $publication_code_not_ends_with = null, $publication_code_in = null, $publication_code_between = null, $ship_to_customer_number_not_equal = null, $ship_to_customer_number_less = null, $ship_to_customer_number_less_or_equal = null, $ship_to_customer_number_greater = null, $ship_to_customer_number_greater_or_equal = null, $ship_to_customer_number_is_null = null, $ship_to_customer_number_is_not_null = null, $ship_to_customer_number_like = null, $ship_to_customer_number_not_like = null, $ship_to_customer_number_contains = null, $ship_to_customer_number_not_contains = null, $ship_to_customer_number_starts_with = null, $ship_to_customer_number_not_starts_with = null, $ship_to_customer_number_ends_with = null, $ship_to_customer_number_not_ends_with = null, $ship_to_customer_number_in = null, $ship_to_customer_number_between = null, $subscription_id_not_equal = null, $subscription_id_less = null, $subscription_id_less_or_equal = null, $subscription_id_greater = null, $subscription_id_greater_or_equal = null, $subscription_id_is_null = null, $subscription_id_is_not_null = null, $subscription_id_like = null, $subscription_id_not_like = null, $subscription_id_contains = null, $subscription_id_not_contains = null, $subscription_id_starts_with = null, $subscription_id_not_starts_with = null, $subscription_id_ends_with = null, $subscription_id_not_ends_with = null, $subscription_id_in = null, $subscription_id_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $referred_by_customer_number_not_equal = null, $referred_by_customer_number_less = null, $referred_by_customer_number_less_or_equal = null, $referred_by_customer_number_greater = null, $referred_by_customer_number_greater_or_equal = null, $referred_by_customer_number_is_null = null, $referred_by_customer_number_is_not_null = null, $referred_by_customer_number_like = null, $referred_by_customer_number_not_like = null, $referred_by_customer_number_contains = null, $referred_by_customer_number_not_contains = null, $referred_by_customer_number_starts_with = null, $referred_by_customer_number_not_starts_with = null, $referred_by_customer_number_ends_with = null, $referred_by_customer_number_not_ends_with = null, $referred_by_customer_number_in = null, $referred_by_customer_number_between = null, $owning_organization_code_not_equal = null, $owning_organization_code_less = null, $owning_organization_code_less_or_equal = null, $owning_organization_code_greater = null, $owning_organization_code_greater_or_equal = null, $owning_organization_code_is_null = null, $owning_organization_code_is_not_null = null, $owning_organization_code_like = null, $owning_organization_code_not_like = null, $owning_organization_code_contains = null, $owning_organization_code_not_contains = null, $owning_organization_code_starts_with = null, $owning_organization_code_not_starts_with = null, $owning_organization_code_ends_with = null, $owning_organization_code_not_ends_with = null, $owning_organization_code_in = null, $owning_organization_code_between = null, $circulation_status_not_equal = null, $circulation_status_less = null, $circulation_status_less_or_equal = null, $circulation_status_greater = null, $circulation_status_greater_or_equal = null, $circulation_status_is_null = null, $circulation_status_is_not_null = null, $circulation_status_like = null, $circulation_status_not_like = null, $circulation_status_contains = null, $circulation_status_not_contains = null, $circulation_status_starts_with = null, $circulation_status_not_starts_with = null, $circulation_status_ends_with = null, $circulation_status_not_ends_with = null, $circulation_status_in = null, $circulation_status_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscription';
        $request = $this->subscriptionSearchRequest($pager_skip, $pager_take, $publication_code, $ship_to_customer_number, $subscription_id, $bill_to_customer_number, $referred_by_customer_number, $owning_organization_code, $circulation_status, $publication_code_not_equal, $publication_code_less, $publication_code_less_or_equal, $publication_code_greater, $publication_code_greater_or_equal, $publication_code_is_null, $publication_code_is_not_null, $publication_code_like, $publication_code_not_like, $publication_code_contains, $publication_code_not_contains, $publication_code_starts_with, $publication_code_not_starts_with, $publication_code_ends_with, $publication_code_not_ends_with, $publication_code_in, $publication_code_between, $ship_to_customer_number_not_equal, $ship_to_customer_number_less, $ship_to_customer_number_less_or_equal, $ship_to_customer_number_greater, $ship_to_customer_number_greater_or_equal, $ship_to_customer_number_is_null, $ship_to_customer_number_is_not_null, $ship_to_customer_number_like, $ship_to_customer_number_not_like, $ship_to_customer_number_contains, $ship_to_customer_number_not_contains, $ship_to_customer_number_starts_with, $ship_to_customer_number_not_starts_with, $ship_to_customer_number_ends_with, $ship_to_customer_number_not_ends_with, $ship_to_customer_number_in, $ship_to_customer_number_between, $subscription_id_not_equal, $subscription_id_less, $subscription_id_less_or_equal, $subscription_id_greater, $subscription_id_greater_or_equal, $subscription_id_is_null, $subscription_id_is_not_null, $subscription_id_like, $subscription_id_not_like, $subscription_id_contains, $subscription_id_not_contains, $subscription_id_starts_with, $subscription_id_not_starts_with, $subscription_id_ends_with, $subscription_id_not_ends_with, $subscription_id_in, $subscription_id_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $referred_by_customer_number_not_equal, $referred_by_customer_number_less, $referred_by_customer_number_less_or_equal, $referred_by_customer_number_greater, $referred_by_customer_number_greater_or_equal, $referred_by_customer_number_is_null, $referred_by_customer_number_is_not_null, $referred_by_customer_number_like, $referred_by_customer_number_not_like, $referred_by_customer_number_contains, $referred_by_customer_number_not_contains, $referred_by_customer_number_starts_with, $referred_by_customer_number_not_starts_with, $referred_by_customer_number_ends_with, $referred_by_customer_number_not_ends_with, $referred_by_customer_number_in, $referred_by_customer_number_between, $owning_organization_code_not_equal, $owning_organization_code_less, $owning_organization_code_less_or_equal, $owning_organization_code_greater, $owning_organization_code_greater_or_equal, $owning_organization_code_is_null, $owning_organization_code_is_not_null, $owning_organization_code_like, $owning_organization_code_not_like, $owning_organization_code_contains, $owning_organization_code_not_contains, $owning_organization_code_starts_with, $owning_organization_code_not_starts_with, $owning_organization_code_ends_with, $owning_organization_code_not_ends_with, $owning_organization_code_in, $owning_organization_code_between, $circulation_status_not_equal, $circulation_status_less, $circulation_status_less_or_equal, $circulation_status_greater, $circulation_status_greater_or_equal, $circulation_status_is_null, $circulation_status_is_not_null, $circulation_status_like, $circulation_status_not_like, $circulation_status_contains, $circulation_status_not_contains, $circulation_status_starts_with, $circulation_status_not_starts_with, $circulation_status_ends_with, $circulation_status_not_ends_with, $circulation_status_in, $circulation_status_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionSearch'
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $publication_code Filter on PUB-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $subscription_id Filter on SUB-REF using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on DNR-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $referred_by_customer_number Filter on REF-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $owning_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $circulation_status Filter on CRC-STS using &#39;Equal&#39; operator (optional)
     * @param  string $publication_code_not_equal Filter on PUB-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $publication_code_less Filter on PUB-CDE using &#39;Less&#39; operator (optional)
     * @param  string $publication_code_less_or_equal Filter on PUB-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $publication_code_greater Filter on PUB-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $publication_code_greater_or_equal Filter on PUB-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $publication_code_is_null Filter on PUB-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $publication_code_is_not_null Filter on PUB-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $publication_code_like Filter on PUB-CDE using &#39;Like&#39; operator (optional)
     * @param  string $publication_code_not_like Filter on PUB-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $publication_code_contains Filter on PUB-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $publication_code_not_contains Filter on PUB-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $publication_code_starts_with Filter on PUB-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $publication_code_not_starts_with Filter on PUB-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $publication_code_ends_with Filter on PUB-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $publication_code_not_ends_with Filter on PUB-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $publication_code_in Filter on PUB-CDE using &#39;In&#39; operator (optional)
     * @param  string $publication_code_between Filter on PUB-CDE using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $subscription_id_not_equal Filter on SUB-REF using &#39;NotEqual&#39; operator (optional)
     * @param  string $subscription_id_less Filter on SUB-REF using &#39;Less&#39; operator (optional)
     * @param  string $subscription_id_less_or_equal Filter on SUB-REF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $subscription_id_greater Filter on SUB-REF using &#39;Greater&#39; operator (optional)
     * @param  string $subscription_id_greater_or_equal Filter on SUB-REF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $subscription_id_is_null Filter on SUB-REF using &#39;IsNull&#39; operator (optional)
     * @param  string $subscription_id_is_not_null Filter on SUB-REF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $subscription_id_like Filter on SUB-REF using &#39;Like&#39; operator (optional)
     * @param  string $subscription_id_not_like Filter on SUB-REF using &#39;NotLike&#39; operator (optional)
     * @param  string $subscription_id_contains Filter on SUB-REF using &#39;Contains&#39; operator (optional)
     * @param  string $subscription_id_not_contains Filter on SUB-REF using &#39;NotContains&#39; operator (optional)
     * @param  string $subscription_id_starts_with Filter on SUB-REF using &#39;StartsWith&#39; operator (optional)
     * @param  string $subscription_id_not_starts_with Filter on SUB-REF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $subscription_id_ends_with Filter on SUB-REF using &#39;EndsWith&#39; operator (optional)
     * @param  string $subscription_id_not_ends_with Filter on SUB-REF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $subscription_id_in Filter on SUB-REF using &#39;In&#39; operator (optional)
     * @param  string $subscription_id_between Filter on SUB-REF using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on DNR-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on DNR-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on DNR-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on DNR-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on DNR-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on DNR-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on DNR-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on DNR-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on DNR-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on DNR-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on DNR-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on DNR-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on DNR-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on DNR-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on DNR-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on DNR-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on DNR-NBR using &#39;Between&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_equal Filter on REF-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_less Filter on REF-CTM using &#39;Less&#39; operator (optional)
     * @param  string $referred_by_customer_number_less_or_equal Filter on REF-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater Filter on REF-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $referred_by_customer_number_greater_or_equal Filter on REF-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_null Filter on REF-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_is_not_null Filter on REF-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $referred_by_customer_number_like Filter on REF-CTM using &#39;Like&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_like Filter on REF-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $referred_by_customer_number_contains Filter on REF-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_contains Filter on REF-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $referred_by_customer_number_starts_with Filter on REF-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_starts_with Filter on REF-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_ends_with Filter on REF-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_not_ends_with Filter on REF-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $referred_by_customer_number_in Filter on REF-CTM using &#39;In&#39; operator (optional)
     * @param  string $referred_by_customer_number_between Filter on REF-CTM using &#39;Between&#39; operator (optional)
     * @param  string $owning_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $owning_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $owning_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $owning_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $owning_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $owning_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $owning_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $owning_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $owning_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $owning_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $owning_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $owning_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $owning_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $owning_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $circulation_status_not_equal Filter on CRC-STS using &#39;NotEqual&#39; operator (optional)
     * @param  string $circulation_status_less Filter on CRC-STS using &#39;Less&#39; operator (optional)
     * @param  string $circulation_status_less_or_equal Filter on CRC-STS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $circulation_status_greater Filter on CRC-STS using &#39;Greater&#39; operator (optional)
     * @param  string $circulation_status_greater_or_equal Filter on CRC-STS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $circulation_status_is_null Filter on CRC-STS using &#39;IsNull&#39; operator (optional)
     * @param  string $circulation_status_is_not_null Filter on CRC-STS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $circulation_status_like Filter on CRC-STS using &#39;Like&#39; operator (optional)
     * @param  string $circulation_status_not_like Filter on CRC-STS using &#39;NotLike&#39; operator (optional)
     * @param  string $circulation_status_contains Filter on CRC-STS using &#39;Contains&#39; operator (optional)
     * @param  string $circulation_status_not_contains Filter on CRC-STS using &#39;NotContains&#39; operator (optional)
     * @param  string $circulation_status_starts_with Filter on CRC-STS using &#39;StartsWith&#39; operator (optional)
     * @param  string $circulation_status_not_starts_with Filter on CRC-STS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $circulation_status_ends_with Filter on CRC-STS using &#39;EndsWith&#39; operator (optional)
     * @param  string $circulation_status_not_ends_with Filter on CRC-STS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $circulation_status_in Filter on CRC-STS using &#39;In&#39; operator (optional)
     * @param  string $circulation_status_between Filter on CRC-STS using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionSearchRequest($pager_skip = null, $pager_take = null, $publication_code = null, $ship_to_customer_number = null, $subscription_id = null, $bill_to_customer_number = null, $referred_by_customer_number = null, $owning_organization_code = null, $circulation_status = null, $publication_code_not_equal = null, $publication_code_less = null, $publication_code_less_or_equal = null, $publication_code_greater = null, $publication_code_greater_or_equal = null, $publication_code_is_null = null, $publication_code_is_not_null = null, $publication_code_like = null, $publication_code_not_like = null, $publication_code_contains = null, $publication_code_not_contains = null, $publication_code_starts_with = null, $publication_code_not_starts_with = null, $publication_code_ends_with = null, $publication_code_not_ends_with = null, $publication_code_in = null, $publication_code_between = null, $ship_to_customer_number_not_equal = null, $ship_to_customer_number_less = null, $ship_to_customer_number_less_or_equal = null, $ship_to_customer_number_greater = null, $ship_to_customer_number_greater_or_equal = null, $ship_to_customer_number_is_null = null, $ship_to_customer_number_is_not_null = null, $ship_to_customer_number_like = null, $ship_to_customer_number_not_like = null, $ship_to_customer_number_contains = null, $ship_to_customer_number_not_contains = null, $ship_to_customer_number_starts_with = null, $ship_to_customer_number_not_starts_with = null, $ship_to_customer_number_ends_with = null, $ship_to_customer_number_not_ends_with = null, $ship_to_customer_number_in = null, $ship_to_customer_number_between = null, $subscription_id_not_equal = null, $subscription_id_less = null, $subscription_id_less_or_equal = null, $subscription_id_greater = null, $subscription_id_greater_or_equal = null, $subscription_id_is_null = null, $subscription_id_is_not_null = null, $subscription_id_like = null, $subscription_id_not_like = null, $subscription_id_contains = null, $subscription_id_not_contains = null, $subscription_id_starts_with = null, $subscription_id_not_starts_with = null, $subscription_id_ends_with = null, $subscription_id_not_ends_with = null, $subscription_id_in = null, $subscription_id_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $referred_by_customer_number_not_equal = null, $referred_by_customer_number_less = null, $referred_by_customer_number_less_or_equal = null, $referred_by_customer_number_greater = null, $referred_by_customer_number_greater_or_equal = null, $referred_by_customer_number_is_null = null, $referred_by_customer_number_is_not_null = null, $referred_by_customer_number_like = null, $referred_by_customer_number_not_like = null, $referred_by_customer_number_contains = null, $referred_by_customer_number_not_contains = null, $referred_by_customer_number_starts_with = null, $referred_by_customer_number_not_starts_with = null, $referred_by_customer_number_ends_with = null, $referred_by_customer_number_not_ends_with = null, $referred_by_customer_number_in = null, $referred_by_customer_number_between = null, $owning_organization_code_not_equal = null, $owning_organization_code_less = null, $owning_organization_code_less_or_equal = null, $owning_organization_code_greater = null, $owning_organization_code_greater_or_equal = null, $owning_organization_code_is_null = null, $owning_organization_code_is_not_null = null, $owning_organization_code_like = null, $owning_organization_code_not_like = null, $owning_organization_code_contains = null, $owning_organization_code_not_contains = null, $owning_organization_code_starts_with = null, $owning_organization_code_not_starts_with = null, $owning_organization_code_ends_with = null, $owning_organization_code_not_ends_with = null, $owning_organization_code_in = null, $owning_organization_code_between = null, $circulation_status_not_equal = null, $circulation_status_less = null, $circulation_status_less_or_equal = null, $circulation_status_greater = null, $circulation_status_greater_or_equal = null, $circulation_status_is_null = null, $circulation_status_is_not_null = null, $circulation_status_like = null, $circulation_status_not_like = null, $circulation_status_contains = null, $circulation_status_not_contains = null, $circulation_status_starts_with = null, $circulation_status_not_starts_with = null, $circulation_status_ends_with = null, $circulation_status_not_ends_with = null, $circulation_status_in = null, $circulation_status_between = null)
    {

        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($publication_code !== null) {
            $queryParams['PublicationCode'] = ObjectSerializer::toQueryValue($publication_code);
        }
        // query params
        if ($ship_to_customer_number !== null) {
            $queryParams['ShipToCustomerNumber'] = ObjectSerializer::toQueryValue($ship_to_customer_number);
        }
        // query params
        if ($subscription_id !== null) {
            $queryParams['SubscriptionId'] = ObjectSerializer::toQueryValue($subscription_id);
        }
        // query params
        if ($bill_to_customer_number !== null) {
            $queryParams['BillToCustomerNumber'] = ObjectSerializer::toQueryValue($bill_to_customer_number);
        }
        // query params
        if ($referred_by_customer_number !== null) {
            $queryParams['ReferredByCustomerNumber'] = ObjectSerializer::toQueryValue($referred_by_customer_number);
        }
        // query params
        if ($owning_organization_code !== null) {
            $queryParams['OwningOrganizationCode'] = ObjectSerializer::toQueryValue($owning_organization_code);
        }
        // query params
        if ($circulation_status !== null) {
            $queryParams['CirculationStatus'] = ObjectSerializer::toQueryValue($circulation_status);
        }
        // query params
        if ($publication_code_not_equal !== null) {
            $queryParams['PublicationCode.NotEqual'] = ObjectSerializer::toQueryValue($publication_code_not_equal);
        }
        // query params
        if ($publication_code_less !== null) {
            $queryParams['PublicationCode.Less'] = ObjectSerializer::toQueryValue($publication_code_less);
        }
        // query params
        if ($publication_code_less_or_equal !== null) {
            $queryParams['PublicationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($publication_code_less_or_equal);
        }
        // query params
        if ($publication_code_greater !== null) {
            $queryParams['PublicationCode.Greater'] = ObjectSerializer::toQueryValue($publication_code_greater);
        }
        // query params
        if ($publication_code_greater_or_equal !== null) {
            $queryParams['PublicationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($publication_code_greater_or_equal);
        }
        // query params
        if ($publication_code_is_null !== null) {
            $queryParams['PublicationCode.IsNull'] = ObjectSerializer::toQueryValue($publication_code_is_null);
        }
        // query params
        if ($publication_code_is_not_null !== null) {
            $queryParams['PublicationCode.IsNotNull'] = ObjectSerializer::toQueryValue($publication_code_is_not_null);
        }
        // query params
        if ($publication_code_like !== null) {
            $queryParams['PublicationCode.Like'] = ObjectSerializer::toQueryValue($publication_code_like);
        }
        // query params
        if ($publication_code_not_like !== null) {
            $queryParams['PublicationCode.NotLike'] = ObjectSerializer::toQueryValue($publication_code_not_like);
        }
        // query params
        if ($publication_code_contains !== null) {
            $queryParams['PublicationCode.Contains'] = ObjectSerializer::toQueryValue($publication_code_contains);
        }
        // query params
        if ($publication_code_not_contains !== null) {
            $queryParams['PublicationCode.NotContains'] = ObjectSerializer::toQueryValue($publication_code_not_contains);
        }
        // query params
        if ($publication_code_starts_with !== null) {
            $queryParams['PublicationCode.StartsWith'] = ObjectSerializer::toQueryValue($publication_code_starts_with);
        }
        // query params
        if ($publication_code_not_starts_with !== null) {
            $queryParams['PublicationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($publication_code_not_starts_with);
        }
        // query params
        if ($publication_code_ends_with !== null) {
            $queryParams['PublicationCode.EndsWith'] = ObjectSerializer::toQueryValue($publication_code_ends_with);
        }
        // query params
        if ($publication_code_not_ends_with !== null) {
            $queryParams['PublicationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($publication_code_not_ends_with);
        }
        // query params
        if ($publication_code_in !== null) {
            $queryParams['PublicationCode.In'] = ObjectSerializer::toQueryValue($publication_code_in);
        }
        // query params
        if ($publication_code_between !== null) {
            $queryParams['PublicationCode.Between'] = ObjectSerializer::toQueryValue($publication_code_between);
        }
        // query params
        if ($ship_to_customer_number_not_equal !== null) {
            $queryParams['ShipToCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_number_not_equal);
        }
        // query params
        if ($ship_to_customer_number_less !== null) {
            $queryParams['ShipToCustomerNumber.Less'] = ObjectSerializer::toQueryValue($ship_to_customer_number_less);
        }
        // query params
        if ($ship_to_customer_number_less_or_equal !== null) {
            $queryParams['ShipToCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_number_less_or_equal);
        }
        // query params
        if ($ship_to_customer_number_greater !== null) {
            $queryParams['ShipToCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($ship_to_customer_number_greater);
        }
        // query params
        if ($ship_to_customer_number_greater_or_equal !== null) {
            $queryParams['ShipToCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_number_greater_or_equal);
        }
        // query params
        if ($ship_to_customer_number_is_null !== null) {
            $queryParams['ShipToCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($ship_to_customer_number_is_null);
        }
        // query params
        if ($ship_to_customer_number_is_not_null !== null) {
            $queryParams['ShipToCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($ship_to_customer_number_is_not_null);
        }
        // query params
        if ($ship_to_customer_number_like !== null) {
            $queryParams['ShipToCustomerNumber.Like'] = ObjectSerializer::toQueryValue($ship_to_customer_number_like);
        }
        // query params
        if ($ship_to_customer_number_not_like !== null) {
            $queryParams['ShipToCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($ship_to_customer_number_not_like);
        }
        // query params
        if ($ship_to_customer_number_contains !== null) {
            $queryParams['ShipToCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($ship_to_customer_number_contains);
        }
        // query params
        if ($ship_to_customer_number_not_contains !== null) {
            $queryParams['ShipToCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($ship_to_customer_number_not_contains);
        }
        // query params
        if ($ship_to_customer_number_starts_with !== null) {
            $queryParams['ShipToCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_number_starts_with);
        }
        // query params
        if ($ship_to_customer_number_not_starts_with !== null) {
            $queryParams['ShipToCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_number_not_starts_with);
        }
        // query params
        if ($ship_to_customer_number_ends_with !== null) {
            $queryParams['ShipToCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_number_ends_with);
        }
        // query params
        if ($ship_to_customer_number_not_ends_with !== null) {
            $queryParams['ShipToCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_number_not_ends_with);
        }
        // query params
        if ($ship_to_customer_number_in !== null) {
            $queryParams['ShipToCustomerNumber.In'] = ObjectSerializer::toQueryValue($ship_to_customer_number_in);
        }
        // query params
        if ($ship_to_customer_number_between !== null) {
            $queryParams['ShipToCustomerNumber.Between'] = ObjectSerializer::toQueryValue($ship_to_customer_number_between);
        }
        // query params
        if ($subscription_id_not_equal !== null) {
            $queryParams['SubscriptionId.NotEqual'] = ObjectSerializer::toQueryValue($subscription_id_not_equal);
        }
        // query params
        if ($subscription_id_less !== null) {
            $queryParams['SubscriptionId.Less'] = ObjectSerializer::toQueryValue($subscription_id_less);
        }
        // query params
        if ($subscription_id_less_or_equal !== null) {
            $queryParams['SubscriptionId.LessOrEqual'] = ObjectSerializer::toQueryValue($subscription_id_less_or_equal);
        }
        // query params
        if ($subscription_id_greater !== null) {
            $queryParams['SubscriptionId.Greater'] = ObjectSerializer::toQueryValue($subscription_id_greater);
        }
        // query params
        if ($subscription_id_greater_or_equal !== null) {
            $queryParams['SubscriptionId.GreaterOrEqual'] = ObjectSerializer::toQueryValue($subscription_id_greater_or_equal);
        }
        // query params
        if ($subscription_id_is_null !== null) {
            $queryParams['SubscriptionId.IsNull'] = ObjectSerializer::toQueryValue($subscription_id_is_null);
        }
        // query params
        if ($subscription_id_is_not_null !== null) {
            $queryParams['SubscriptionId.IsNotNull'] = ObjectSerializer::toQueryValue($subscription_id_is_not_null);
        }
        // query params
        if ($subscription_id_like !== null) {
            $queryParams['SubscriptionId.Like'] = ObjectSerializer::toQueryValue($subscription_id_like);
        }
        // query params
        if ($subscription_id_not_like !== null) {
            $queryParams['SubscriptionId.NotLike'] = ObjectSerializer::toQueryValue($subscription_id_not_like);
        }
        // query params
        if ($subscription_id_contains !== null) {
            $queryParams['SubscriptionId.Contains'] = ObjectSerializer::toQueryValue($subscription_id_contains);
        }
        // query params
        if ($subscription_id_not_contains !== null) {
            $queryParams['SubscriptionId.NotContains'] = ObjectSerializer::toQueryValue($subscription_id_not_contains);
        }
        // query params
        if ($subscription_id_starts_with !== null) {
            $queryParams['SubscriptionId.StartsWith'] = ObjectSerializer::toQueryValue($subscription_id_starts_with);
        }
        // query params
        if ($subscription_id_not_starts_with !== null) {
            $queryParams['SubscriptionId.NotStartsWith'] = ObjectSerializer::toQueryValue($subscription_id_not_starts_with);
        }
        // query params
        if ($subscription_id_ends_with !== null) {
            $queryParams['SubscriptionId.EndsWith'] = ObjectSerializer::toQueryValue($subscription_id_ends_with);
        }
        // query params
        if ($subscription_id_not_ends_with !== null) {
            $queryParams['SubscriptionId.NotEndsWith'] = ObjectSerializer::toQueryValue($subscription_id_not_ends_with);
        }
        // query params
        if ($subscription_id_in !== null) {
            $queryParams['SubscriptionId.In'] = ObjectSerializer::toQueryValue($subscription_id_in);
        }
        // query params
        if ($subscription_id_between !== null) {
            $queryParams['SubscriptionId.Between'] = ObjectSerializer::toQueryValue($subscription_id_between);
        }
        // query params
        if ($bill_to_customer_number_not_equal !== null) {
            $queryParams['BillToCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_equal);
        }
        // query params
        if ($bill_to_customer_number_less !== null) {
            $queryParams['BillToCustomerNumber.Less'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less);
        }
        // query params
        if ($bill_to_customer_number_less_or_equal !== null) {
            $queryParams['BillToCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less_or_equal);
        }
        // query params
        if ($bill_to_customer_number_greater !== null) {
            $queryParams['BillToCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater);
        }
        // query params
        if ($bill_to_customer_number_greater_or_equal !== null) {
            $queryParams['BillToCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater_or_equal);
        }
        // query params
        if ($bill_to_customer_number_is_null !== null) {
            $queryParams['BillToCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_null);
        }
        // query params
        if ($bill_to_customer_number_is_not_null !== null) {
            $queryParams['BillToCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_not_null);
        }
        // query params
        if ($bill_to_customer_number_like !== null) {
            $queryParams['BillToCustomerNumber.Like'] = ObjectSerializer::toQueryValue($bill_to_customer_number_like);
        }
        // query params
        if ($bill_to_customer_number_not_like !== null) {
            $queryParams['BillToCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_like);
        }
        // query params
        if ($bill_to_customer_number_contains !== null) {
            $queryParams['BillToCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_contains);
        }
        // query params
        if ($bill_to_customer_number_not_contains !== null) {
            $queryParams['BillToCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_contains);
        }
        // query params
        if ($bill_to_customer_number_starts_with !== null) {
            $queryParams['BillToCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_starts_with);
        }
        // query params
        if ($bill_to_customer_number_not_starts_with !== null) {
            $queryParams['BillToCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_starts_with);
        }
        // query params
        if ($bill_to_customer_number_ends_with !== null) {
            $queryParams['BillToCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_ends_with);
        }
        // query params
        if ($bill_to_customer_number_not_ends_with !== null) {
            $queryParams['BillToCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_ends_with);
        }
        // query params
        if ($bill_to_customer_number_in !== null) {
            $queryParams['BillToCustomerNumber.In'] = ObjectSerializer::toQueryValue($bill_to_customer_number_in);
        }
        // query params
        if ($bill_to_customer_number_between !== null) {
            $queryParams['BillToCustomerNumber.Between'] = ObjectSerializer::toQueryValue($bill_to_customer_number_between);
        }
        // query params
        if ($referred_by_customer_number_not_equal !== null) {
            $queryParams['ReferredByCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($referred_by_customer_number_not_equal);
        }
        // query params
        if ($referred_by_customer_number_less !== null) {
            $queryParams['ReferredByCustomerNumber.Less'] = ObjectSerializer::toQueryValue($referred_by_customer_number_less);
        }
        // query params
        if ($referred_by_customer_number_less_or_equal !== null) {
            $queryParams['ReferredByCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($referred_by_customer_number_less_or_equal);
        }
        // query params
        if ($referred_by_customer_number_greater !== null) {
            $queryParams['ReferredByCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($referred_by_customer_number_greater);
        }
        // query params
        if ($referred_by_customer_number_greater_or_equal !== null) {
            $queryParams['ReferredByCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($referred_by_customer_number_greater_or_equal);
        }
        // query params
        if ($referred_by_customer_number_is_null !== null) {
            $queryParams['ReferredByCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($referred_by_customer_number_is_null);
        }
        // query params
        if ($referred_by_customer_number_is_not_null !== null) {
            $queryParams['ReferredByCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($referred_by_customer_number_is_not_null);
        }
        // query params
        if ($referred_by_customer_number_like !== null) {
            $queryParams['ReferredByCustomerNumber.Like'] = ObjectSerializer::toQueryValue($referred_by_customer_number_like);
        }
        // query params
        if ($referred_by_customer_number_not_like !== null) {
            $queryParams['ReferredByCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($referred_by_customer_number_not_like);
        }
        // query params
        if ($referred_by_customer_number_contains !== null) {
            $queryParams['ReferredByCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($referred_by_customer_number_contains);
        }
        // query params
        if ($referred_by_customer_number_not_contains !== null) {
            $queryParams['ReferredByCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($referred_by_customer_number_not_contains);
        }
        // query params
        if ($referred_by_customer_number_starts_with !== null) {
            $queryParams['ReferredByCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($referred_by_customer_number_starts_with);
        }
        // query params
        if ($referred_by_customer_number_not_starts_with !== null) {
            $queryParams['ReferredByCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($referred_by_customer_number_not_starts_with);
        }
        // query params
        if ($referred_by_customer_number_ends_with !== null) {
            $queryParams['ReferredByCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($referred_by_customer_number_ends_with);
        }
        // query params
        if ($referred_by_customer_number_not_ends_with !== null) {
            $queryParams['ReferredByCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($referred_by_customer_number_not_ends_with);
        }
        // query params
        if ($referred_by_customer_number_in !== null) {
            $queryParams['ReferredByCustomerNumber.In'] = ObjectSerializer::toQueryValue($referred_by_customer_number_in);
        }
        // query params
        if ($referred_by_customer_number_between !== null) {
            $queryParams['ReferredByCustomerNumber.Between'] = ObjectSerializer::toQueryValue($referred_by_customer_number_between);
        }
        // query params
        if ($owning_organization_code_not_equal !== null) {
            $queryParams['OwningOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($owning_organization_code_not_equal);
        }
        // query params
        if ($owning_organization_code_less !== null) {
            $queryParams['OwningOrganizationCode.Less'] = ObjectSerializer::toQueryValue($owning_organization_code_less);
        }
        // query params
        if ($owning_organization_code_less_or_equal !== null) {
            $queryParams['OwningOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($owning_organization_code_less_or_equal);
        }
        // query params
        if ($owning_organization_code_greater !== null) {
            $queryParams['OwningOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($owning_organization_code_greater);
        }
        // query params
        if ($owning_organization_code_greater_or_equal !== null) {
            $queryParams['OwningOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($owning_organization_code_greater_or_equal);
        }
        // query params
        if ($owning_organization_code_is_null !== null) {
            $queryParams['OwningOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($owning_organization_code_is_null);
        }
        // query params
        if ($owning_organization_code_is_not_null !== null) {
            $queryParams['OwningOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($owning_organization_code_is_not_null);
        }
        // query params
        if ($owning_organization_code_like !== null) {
            $queryParams['OwningOrganizationCode.Like'] = ObjectSerializer::toQueryValue($owning_organization_code_like);
        }
        // query params
        if ($owning_organization_code_not_like !== null) {
            $queryParams['OwningOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($owning_organization_code_not_like);
        }
        // query params
        if ($owning_organization_code_contains !== null) {
            $queryParams['OwningOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($owning_organization_code_contains);
        }
        // query params
        if ($owning_organization_code_not_contains !== null) {
            $queryParams['OwningOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($owning_organization_code_not_contains);
        }
        // query params
        if ($owning_organization_code_starts_with !== null) {
            $queryParams['OwningOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($owning_organization_code_starts_with);
        }
        // query params
        if ($owning_organization_code_not_starts_with !== null) {
            $queryParams['OwningOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($owning_organization_code_not_starts_with);
        }
        // query params
        if ($owning_organization_code_ends_with !== null) {
            $queryParams['OwningOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($owning_organization_code_ends_with);
        }
        // query params
        if ($owning_organization_code_not_ends_with !== null) {
            $queryParams['OwningOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($owning_organization_code_not_ends_with);
        }
        // query params
        if ($owning_organization_code_in !== null) {
            $queryParams['OwningOrganizationCode.In'] = ObjectSerializer::toQueryValue($owning_organization_code_in);
        }
        // query params
        if ($owning_organization_code_between !== null) {
            $queryParams['OwningOrganizationCode.Between'] = ObjectSerializer::toQueryValue($owning_organization_code_between);
        }
        // query params
        if ($circulation_status_not_equal !== null) {
            $queryParams['CirculationStatus.NotEqual'] = ObjectSerializer::toQueryValue($circulation_status_not_equal);
        }
        // query params
        if ($circulation_status_less !== null) {
            $queryParams['CirculationStatus.Less'] = ObjectSerializer::toQueryValue($circulation_status_less);
        }
        // query params
        if ($circulation_status_less_or_equal !== null) {
            $queryParams['CirculationStatus.LessOrEqual'] = ObjectSerializer::toQueryValue($circulation_status_less_or_equal);
        }
        // query params
        if ($circulation_status_greater !== null) {
            $queryParams['CirculationStatus.Greater'] = ObjectSerializer::toQueryValue($circulation_status_greater);
        }
        // query params
        if ($circulation_status_greater_or_equal !== null) {
            $queryParams['CirculationStatus.GreaterOrEqual'] = ObjectSerializer::toQueryValue($circulation_status_greater_or_equal);
        }
        // query params
        if ($circulation_status_is_null !== null) {
            $queryParams['CirculationStatus.IsNull'] = ObjectSerializer::toQueryValue($circulation_status_is_null);
        }
        // query params
        if ($circulation_status_is_not_null !== null) {
            $queryParams['CirculationStatus.IsNotNull'] = ObjectSerializer::toQueryValue($circulation_status_is_not_null);
        }
        // query params
        if ($circulation_status_like !== null) {
            $queryParams['CirculationStatus.Like'] = ObjectSerializer::toQueryValue($circulation_status_like);
        }
        // query params
        if ($circulation_status_not_like !== null) {
            $queryParams['CirculationStatus.NotLike'] = ObjectSerializer::toQueryValue($circulation_status_not_like);
        }
        // query params
        if ($circulation_status_contains !== null) {
            $queryParams['CirculationStatus.Contains'] = ObjectSerializer::toQueryValue($circulation_status_contains);
        }
        // query params
        if ($circulation_status_not_contains !== null) {
            $queryParams['CirculationStatus.NotContains'] = ObjectSerializer::toQueryValue($circulation_status_not_contains);
        }
        // query params
        if ($circulation_status_starts_with !== null) {
            $queryParams['CirculationStatus.StartsWith'] = ObjectSerializer::toQueryValue($circulation_status_starts_with);
        }
        // query params
        if ($circulation_status_not_starts_with !== null) {
            $queryParams['CirculationStatus.NotStartsWith'] = ObjectSerializer::toQueryValue($circulation_status_not_starts_with);
        }
        // query params
        if ($circulation_status_ends_with !== null) {
            $queryParams['CirculationStatus.EndsWith'] = ObjectSerializer::toQueryValue($circulation_status_ends_with);
        }
        // query params
        if ($circulation_status_not_ends_with !== null) {
            $queryParams['CirculationStatus.NotEndsWith'] = ObjectSerializer::toQueryValue($circulation_status_not_ends_with);
        }
        // query params
        if ($circulation_status_in !== null) {
            $queryParams['CirculationStatus.In'] = ObjectSerializer::toQueryValue($circulation_status_in);
        }
        // query params
        if ($circulation_status_between !== null) {
            $queryParams['CirculationStatus.Between'] = ObjectSerializer::toQueryValue($circulation_status_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionSuspend
     *
     * Suspend a subscription. This can be for a specified start and end issue, or a more generic \"begin at   the next issue, open-ended\" if you leave the start and end date blank in the request.
     *
     * @param  string $subscription_id The subscription ID of the subscription to suspend. (required)
     * @param  \Advantage\Client\Model\SubscriptionSuspendRequest $subscription_suspend_request A SubscriptionSuspendRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscriptionSuspend($subscription_id, $subscription_suspend_request)
    {
        $this->subscriptionSuspendWithHttpInfo($subscription_id, $subscription_suspend_request);
    }

    /**
     * Operation subscriptionSuspendWithHttpInfo
     *
     * Suspend a subscription. This can be for a specified start and end issue, or a more generic \"begin at   the next issue, open-ended\" if you leave the start and end date blank in the request.
     *
     * @param  string $subscription_id The subscription ID of the subscription to suspend. (required)
     * @param  \Advantage\Client\Model\SubscriptionSuspendRequest $subscription_suspend_request A SubscriptionSuspendRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionSuspendWithHttpInfo($subscription_id, $subscription_suspend_request)
    {
        $returnType = '';
        $request = $this->subscriptionSuspendRequest($subscription_id, $subscription_suspend_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionSuspendAsync
     *
     * Suspend a subscription. This can be for a specified start and end issue, or a more generic \"begin at   the next issue, open-ended\" if you leave the start and end date blank in the request.
     *
     * @param  string $subscription_id The subscription ID of the subscription to suspend. (required)
     * @param  \Advantage\Client\Model\SubscriptionSuspendRequest $subscription_suspend_request A SubscriptionSuspendRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionSuspendAsync($subscription_id, $subscription_suspend_request)
    {
        return $this->subscriptionSuspendAsyncWithHttpInfo($subscription_id, $subscription_suspend_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionSuspendAsyncWithHttpInfo
     *
     * Suspend a subscription. This can be for a specified start and end issue, or a more generic \"begin at   the next issue, open-ended\" if you leave the start and end date blank in the request.
     *
     * @param  string $subscription_id The subscription ID of the subscription to suspend. (required)
     * @param  \Advantage\Client\Model\SubscriptionSuspendRequest $subscription_suspend_request A SubscriptionSuspendRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionSuspendAsyncWithHttpInfo($subscription_id, $subscription_suspend_request)
    {
        $returnType = '';
        $request = $this->subscriptionSuspendRequest($subscription_id, $subscription_suspend_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionSuspend'
     *
     * @param  string $subscription_id The subscription ID of the subscription to suspend. (required)
     * @param  \Advantage\Client\Model\SubscriptionSuspendRequest $subscription_suspend_request A SubscriptionSuspendRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionSuspendRequest($subscription_id, $subscription_suspend_request)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionSuspend'
            );
        }
        // verify the required parameter 'subscription_suspend_request' is set
        if ($subscription_suspend_request === null || (is_array($subscription_suspend_request) && count($subscription_suspend_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_suspend_request when calling subscriptionSuspend'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}/suspend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($subscription_suspend_request)) {
            $_tempBody = $subscription_suspend_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscriptionUpdate
     *
     * Update an existing subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     * @param  \Advantage\Client\Model\SubscriptionUpdateRequest $subscription_update_request A SubscriptionUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscriptionUpdate($subscription_id, $subscription_update_request)
    {
        $this->subscriptionUpdateWithHttpInfo($subscription_id, $subscription_update_request);
    }

    /**
     * Operation subscriptionUpdateWithHttpInfo
     *
     * Update an existing subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     * @param  \Advantage\Client\Model\SubscriptionUpdateRequest $subscription_update_request A SubscriptionUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionUpdateWithHttpInfo($subscription_id, $subscription_update_request)
    {
        $returnType = '';
        $request = $this->subscriptionUpdateRequest($subscription_id, $subscription_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscriptionUpdateAsync
     *
     * Update an existing subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     * @param  \Advantage\Client\Model\SubscriptionUpdateRequest $subscription_update_request A SubscriptionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionUpdateAsync($subscription_id, $subscription_update_request)
    {
        return $this->subscriptionUpdateAsyncWithHttpInfo($subscription_id, $subscription_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscriptionUpdateAsyncWithHttpInfo
     *
     * Update an existing subscription.
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     * @param  \Advantage\Client\Model\SubscriptionUpdateRequest $subscription_update_request A SubscriptionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscriptionUpdateAsyncWithHttpInfo($subscription_id, $subscription_update_request)
    {
        $returnType = '';
        $request = $this->subscriptionUpdateRequest($subscription_id, $subscription_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscriptionUpdate'
     *
     * @param  string $subscription_id The subscription ID of the subscription to update. (required)
     * @param  \Advantage\Client\Model\SubscriptionUpdateRequest $subscription_update_request A SubscriptionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscriptionUpdateRequest($subscription_id, $subscription_update_request)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling subscriptionUpdate'
            );
        }
        // verify the required parameter 'subscription_update_request' is set
        if ($subscription_update_request === null || (is_array($subscription_update_request) && count($subscription_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_update_request when calling subscriptionUpdate'
            );
        }

        $resourcePath = '/subscriptions/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($subscription_update_request)) {
            $_tempBody = $subscription_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
