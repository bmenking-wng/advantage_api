<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderAddCoupons
     *
     * Add coupons to an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderAddCoupons($order_number, $coupon_request)
    {
        $this->orderAddCouponsWithHttpInfo($order_number, $coupon_request);
    }

    /**
     * Operation orderAddCouponsWithHttpInfo
     *
     * Add coupons to an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAddCouponsWithHttpInfo($order_number, $coupon_request)
    {
        $returnType = '';
        $request = $this->orderAddCouponsRequest($order_number, $coupon_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderAddCouponsAsync
     *
     * Add coupons to an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddCouponsAsync($order_number, $coupon_request)
    {
        return $this->orderAddCouponsAsyncWithHttpInfo($order_number, $coupon_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAddCouponsAsyncWithHttpInfo
     *
     * Add coupons to an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddCouponsAsyncWithHttpInfo($order_number, $coupon_request)
    {
        $returnType = '';
        $request = $this->orderAddCouponsRequest($order_number, $coupon_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAddCoupons'
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderAddCouponsRequest($order_number, $coupon_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderAddCoupons'
            );
        }
        // verify the required parameter 'coupon_request' is set
        if ($coupon_request === null || (is_array($coupon_request) && count($coupon_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_request when calling orderAddCoupons'
            );
        }

        $resourcePath = '/orders/{orderNumber}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coupon_request)) {
            $_tempBody = $coupon_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderAddPayments
     *
     * Add payments to an order.  Credit cards payments may be authorized immediately depending on your  system settings.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request The payments to apply to the order. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderAddPayments($order_number, $payment_request)
    {
        $this->orderAddPaymentsWithHttpInfo($order_number, $payment_request);
    }

    /**
     * Operation orderAddPaymentsWithHttpInfo
     *
     * Add payments to an order.  Credit cards payments may be authorized immediately depending on your  system settings.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request The payments to apply to the order. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAddPaymentsWithHttpInfo($order_number, $payment_request)
    {
        $returnType = '';
        $request = $this->orderAddPaymentsRequest($order_number, $payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderAddPaymentsAsync
     *
     * Add payments to an order.  Credit cards payments may be authorized immediately depending on your  system settings.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request The payments to apply to the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddPaymentsAsync($order_number, $payment_request)
    {
        return $this->orderAddPaymentsAsyncWithHttpInfo($order_number, $payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAddPaymentsAsyncWithHttpInfo
     *
     * Add payments to an order.  Credit cards payments may be authorized immediately depending on your  system settings.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request The payments to apply to the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddPaymentsAsyncWithHttpInfo($order_number, $payment_request)
    {
        $returnType = '';
        $request = $this->orderAddPaymentsRequest($order_number, $payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAddPayments'
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request The payments to apply to the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderAddPaymentsRequest($order_number, $payment_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderAddPayments'
            );
        }
        // verify the required parameter 'payment_request' is set
        if ($payment_request === null || (is_array($payment_request) && count($payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request when calling orderAddPayments'
            );
        }

        $resourcePath = '/orders/{orderNumber}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCommit
     *
     * Commit an order and payment. Committing the order commits the inventory and  releases the order for fulfillment.  Any access agreements on the order will  be released if the control group auto-release setting is set to release  at order completion.
     *
     * @param  string $order_number The Advantage order number of the order to commit. (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request A PaymentRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderCommit($order_number, $payment_request)
    {
        $this->orderCommitWithHttpInfo($order_number, $payment_request);
    }

    /**
     * Operation orderCommitWithHttpInfo
     *
     * Commit an order and payment. Committing the order commits the inventory and  releases the order for fulfillment.  Any access agreements on the order will  be released if the control group auto-release setting is set to release  at order completion.
     *
     * @param  string $order_number The Advantage order number of the order to commit. (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request A PaymentRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCommitWithHttpInfo($order_number, $payment_request)
    {
        $returnType = '';
        $request = $this->orderCommitRequest($order_number, $payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderCommitAsync
     *
     * Commit an order and payment. Committing the order commits the inventory and  releases the order for fulfillment.  Any access agreements on the order will  be released if the control group auto-release setting is set to release  at order completion.
     *
     * @param  string $order_number The Advantage order number of the order to commit. (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request A PaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCommitAsync($order_number, $payment_request)
    {
        return $this->orderCommitAsyncWithHttpInfo($order_number, $payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCommitAsyncWithHttpInfo
     *
     * Commit an order and payment. Committing the order commits the inventory and  releases the order for fulfillment.  Any access agreements on the order will  be released if the control group auto-release setting is set to release  at order completion.
     *
     * @param  string $order_number The Advantage order number of the order to commit. (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request A PaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCommitAsyncWithHttpInfo($order_number, $payment_request)
    {
        $returnType = '';
        $request = $this->orderCommitRequest($order_number, $payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCommit'
     *
     * @param  string $order_number The Advantage order number of the order to commit. (required)
     * @param  \Advantage\Client\Model\PaymentRequest $payment_request A PaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCommitRequest($order_number, $payment_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderCommit'
            );
        }
        // verify the required parameter 'payment_request' is set
        if ($payment_request === null || (is_array($payment_request) && count($payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request when calling orderCommit'
            );
        }

        $resourcePath = '/orders/{orderNumber}/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCreate
     *
     * Create a new order. This method takes the incoming order create request object and uses it to create a new   Advantage order. The new Advantage order has a new order line created for each OrderLineIn object   contained in the order create request object.
     *
     * @param  \Advantage\Client\Model\OrderCreateRequest $order_create_request An OrderCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Order
     */
    public function orderCreate($order_create_request)
    {
        list($response) = $this->orderCreateWithHttpInfo($order_create_request);
        return $response;
    }

    /**
     * Operation orderCreateWithHttpInfo
     *
     * Create a new order. This method takes the incoming order create request object and uses it to create a new   Advantage order. The new Advantage order has a new order line created for each OrderLineIn object   contained in the order create request object.
     *
     * @param  \Advantage\Client\Model\OrderCreateRequest $order_create_request An OrderCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreateWithHttpInfo($order_create_request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderCreateRequest($order_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreateAsync
     *
     * Create a new order. This method takes the incoming order create request object and uses it to create a new   Advantage order. The new Advantage order has a new order line created for each OrderLineIn object   contained in the order create request object.
     *
     * @param  \Advantage\Client\Model\OrderCreateRequest $order_create_request An OrderCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsync($order_create_request)
    {
        return $this->orderCreateAsyncWithHttpInfo($order_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreateAsyncWithHttpInfo
     *
     * Create a new order. This method takes the incoming order create request object and uses it to create a new   Advantage order. The new Advantage order has a new order line created for each OrderLineIn object   contained in the order create request object.
     *
     * @param  \Advantage\Client\Model\OrderCreateRequest $order_create_request An OrderCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsyncWithHttpInfo($order_create_request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderCreateRequest($order_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreate'
     *
     * @param  \Advantage\Client\Model\OrderCreateRequest $order_create_request An OrderCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCreateRequest($order_create_request)
    {
        // verify the required parameter 'order_create_request' is set
        if ($order_create_request === null || (is_array($order_create_request) && count($order_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_create_request when calling orderCreate'
            );
        }

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($order_create_request)) {
            $_tempBody = $order_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCreateAppliedReturnOrder
     *
     * @param  string $apply_to_order_number apply_to_order_number (required)
     * @param  \Advantage\Client\Model\AppliedReturnOrderCreateRequest $request request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Order
     */
    public function orderCreateAppliedReturnOrder($apply_to_order_number, $request)
    {
        list($response) = $this->orderCreateAppliedReturnOrderWithHttpInfo($apply_to_order_number, $request);
        return $response;
    }

    /**
     * Operation orderCreateAppliedReturnOrderWithHttpInfo
     *
     * @param  string $apply_to_order_number (required)
     * @param  \Advantage\Client\Model\AppliedReturnOrderCreateRequest $request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreateAppliedReturnOrderWithHttpInfo($apply_to_order_number, $request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderCreateAppliedReturnOrderRequest($apply_to_order_number, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreateAppliedReturnOrderAsync
     *
     * 
     *
     * @param  string $apply_to_order_number (required)
     * @param  \Advantage\Client\Model\AppliedReturnOrderCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAppliedReturnOrderAsync($apply_to_order_number, $request)
    {
        return $this->orderCreateAppliedReturnOrderAsyncWithHttpInfo($apply_to_order_number, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreateAppliedReturnOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $apply_to_order_number (required)
     * @param  \Advantage\Client\Model\AppliedReturnOrderCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAppliedReturnOrderAsyncWithHttpInfo($apply_to_order_number, $request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderCreateAppliedReturnOrderRequest($apply_to_order_number, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreateAppliedReturnOrder'
     *
     * @param  string $apply_to_order_number (required)
     * @param  \Advantage\Client\Model\AppliedReturnOrderCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCreateAppliedReturnOrderRequest($apply_to_order_number, $request)
    {
        // verify the required parameter 'apply_to_order_number' is set
        if ($apply_to_order_number === null || (is_array($apply_to_order_number) && count($apply_to_order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apply_to_order_number when calling orderCreateAppliedReturnOrder'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling orderCreateAppliedReturnOrder'
            );
        }

        $resourcePath = '/orders/{applyToOrderNumber}/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($apply_to_order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'applyToOrderNumber' . '}',
                ObjectSerializer::toPathValue($apply_to_order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCreateOrderTracking
     *
     * Create a shipment tracking record for an order
     *
     * @param  string $order_number An Advantage Order Number to create an order tracking record (required)
     * @param  \Advantage\Client\Model\OrderTrackingCreateRequest $order_tracking_create_request Information needed to create order tracking record (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderCreateOrderTracking($order_number, $order_tracking_create_request)
    {
        $this->orderCreateOrderTrackingWithHttpInfo($order_number, $order_tracking_create_request);
    }

    /**
     * Operation orderCreateOrderTrackingWithHttpInfo
     *
     * Create a shipment tracking record for an order
     *
     * @param  string $order_number An Advantage Order Number to create an order tracking record (required)
     * @param  \Advantage\Client\Model\OrderTrackingCreateRequest $order_tracking_create_request Information needed to create order tracking record (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreateOrderTrackingWithHttpInfo($order_number, $order_tracking_create_request)
    {
        $returnType = '';
        $request = $this->orderCreateOrderTrackingRequest($order_number, $order_tracking_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreateOrderTrackingAsync
     *
     * Create a shipment tracking record for an order
     *
     * @param  string $order_number An Advantage Order Number to create an order tracking record (required)
     * @param  \Advantage\Client\Model\OrderTrackingCreateRequest $order_tracking_create_request Information needed to create order tracking record (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateOrderTrackingAsync($order_number, $order_tracking_create_request)
    {
        return $this->orderCreateOrderTrackingAsyncWithHttpInfo($order_number, $order_tracking_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreateOrderTrackingAsyncWithHttpInfo
     *
     * Create a shipment tracking record for an order
     *
     * @param  string $order_number An Advantage Order Number to create an order tracking record (required)
     * @param  \Advantage\Client\Model\OrderTrackingCreateRequest $order_tracking_create_request Information needed to create order tracking record (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateOrderTrackingAsyncWithHttpInfo($order_number, $order_tracking_create_request)
    {
        $returnType = '';
        $request = $this->orderCreateOrderTrackingRequest($order_number, $order_tracking_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreateOrderTracking'
     *
     * @param  string $order_number An Advantage Order Number to create an order tracking record (required)
     * @param  \Advantage\Client\Model\OrderTrackingCreateRequest $order_tracking_create_request Information needed to create order tracking record (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCreateOrderTrackingRequest($order_number, $order_tracking_create_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderCreateOrderTracking'
            );
        }
        // verify the required parameter 'order_tracking_create_request' is set
        if ($order_tracking_create_request === null || (is_array($order_tracking_create_request) && count($order_tracking_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_tracking_create_request when calling orderCreateOrderTracking'
            );
        }

        $resourcePath = '/orders/{orderNumber}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($order_tracking_create_request)) {
            $_tempBody = $order_tracking_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderDeleteCommittedOrder
     *
     * Deletes a committed order.
     *
     * @param  string $order_number Order number of committed order to delete (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderDeleteCommittedOrder($order_number)
    {
        $this->orderDeleteCommittedOrderWithHttpInfo($order_number);
    }

    /**
     * Operation orderDeleteCommittedOrderWithHttpInfo
     *
     * Deletes a committed order.
     *
     * @param  string $order_number Order number of committed order to delete (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderDeleteCommittedOrderWithHttpInfo($order_number)
    {
        $returnType = '';
        $request = $this->orderDeleteCommittedOrderRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderDeleteCommittedOrderAsync
     *
     * Deletes a committed order.
     *
     * @param  string $order_number Order number of committed order to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeleteCommittedOrderAsync($order_number)
    {
        return $this->orderDeleteCommittedOrderAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderDeleteCommittedOrderAsyncWithHttpInfo
     *
     * Deletes a committed order.
     *
     * @param  string $order_number Order number of committed order to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeleteCommittedOrderAsyncWithHttpInfo($order_number)
    {
        $returnType = '';
        $request = $this->orderDeleteCommittedOrderRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderDeleteCommittedOrder'
     *
     * @param  string $order_number Order number of committed order to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderDeleteCommittedOrderRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderDeleteCommittedOrder'
            );
        }

        $resourcePath = '/orders/{orderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderDeleteCommittedOrderLine
     *
     * Deletes a committed order line.
     *
     * @param  string $order_number Order number of committed order line to delete (required)
     * @param  string $line_number Order line number of committed order line to delete (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderDeleteCommittedOrderLine($order_number, $line_number)
    {
        $this->orderDeleteCommittedOrderLineWithHttpInfo($order_number, $line_number);
    }

    /**
     * Operation orderDeleteCommittedOrderLineWithHttpInfo
     *
     * Deletes a committed order line.
     *
     * @param  string $order_number Order number of committed order line to delete (required)
     * @param  string $line_number Order line number of committed order line to delete (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderDeleteCommittedOrderLineWithHttpInfo($order_number, $line_number)
    {
        $returnType = '';
        $request = $this->orderDeleteCommittedOrderLineRequest($order_number, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderDeleteCommittedOrderLineAsync
     *
     * Deletes a committed order line.
     *
     * @param  string $order_number Order number of committed order line to delete (required)
     * @param  string $line_number Order line number of committed order line to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeleteCommittedOrderLineAsync($order_number, $line_number)
    {
        return $this->orderDeleteCommittedOrderLineAsyncWithHttpInfo($order_number, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderDeleteCommittedOrderLineAsyncWithHttpInfo
     *
     * Deletes a committed order line.
     *
     * @param  string $order_number Order number of committed order line to delete (required)
     * @param  string $line_number Order line number of committed order line to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeleteCommittedOrderLineAsyncWithHttpInfo($order_number, $line_number)
    {
        $returnType = '';
        $request = $this->orderDeleteCommittedOrderLineRequest($order_number, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderDeleteCommittedOrderLine'
     *
     * @param  string $order_number Order number of committed order line to delete (required)
     * @param  string $line_number Order line number of committed order line to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderDeleteCommittedOrderLineRequest($order_number, $line_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderDeleteCommittedOrderLine'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling orderDeleteCommittedOrderLine'
            );
        }

        $resourcePath = '/orders/{orderNumber}/lines/{lineNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderDeletePendingByCustomer
     *
     * Delete all uncommitted orders for a given bill-to customer and order source.
     *
     * @param  string $customer_number An Advantage customer number. Only orders with this customer number as the bill-to will be purged. (required)
     * @param  string $order_source_code If non-blank, purges only orders with a matching order source. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderDeletePendingByCustomer($customer_number, $order_source_code = null)
    {
        $this->orderDeletePendingByCustomerWithHttpInfo($customer_number, $order_source_code);
    }

    /**
     * Operation orderDeletePendingByCustomerWithHttpInfo
     *
     * Delete all uncommitted orders for a given bill-to customer and order source.
     *
     * @param  string $customer_number An Advantage customer number. Only orders with this customer number as the bill-to will be purged. (required)
     * @param  string $order_source_code If non-blank, purges only orders with a matching order source. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderDeletePendingByCustomerWithHttpInfo($customer_number, $order_source_code = null)
    {
        $returnType = '';
        $request = $this->orderDeletePendingByCustomerRequest($customer_number, $order_source_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderDeletePendingByCustomerAsync
     *
     * Delete all uncommitted orders for a given bill-to customer and order source.
     *
     * @param  string $customer_number An Advantage customer number. Only orders with this customer number as the bill-to will be purged. (required)
     * @param  string $order_source_code If non-blank, purges only orders with a matching order source. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeletePendingByCustomerAsync($customer_number, $order_source_code = null)
    {
        return $this->orderDeletePendingByCustomerAsyncWithHttpInfo($customer_number, $order_source_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderDeletePendingByCustomerAsyncWithHttpInfo
     *
     * Delete all uncommitted orders for a given bill-to customer and order source.
     *
     * @param  string $customer_number An Advantage customer number. Only orders with this customer number as the bill-to will be purged. (required)
     * @param  string $order_source_code If non-blank, purges only orders with a matching order source. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeletePendingByCustomerAsyncWithHttpInfo($customer_number, $order_source_code = null)
    {
        $returnType = '';
        $request = $this->orderDeletePendingByCustomerRequest($customer_number, $order_source_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderDeletePendingByCustomer'
     *
     * @param  string $customer_number An Advantage customer number. Only orders with this customer number as the bill-to will be purged. (required)
     * @param  string $order_source_code If non-blank, purges only orders with a matching order source. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderDeletePendingByCustomerRequest($customer_number, $order_source_code = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling orderDeletePendingByCustomer'
            );
        }

        $resourcePath = '/customers/{customerNumber}/orders/pending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_source_code !== null) {
            $queryParams['orderSourceCode'] = ObjectSerializer::toQueryValue($order_source_code);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGet
     *
     * Get an order's information given the order number and   a few options specified about how you'd like that order information.
     *
     * @param  string $order_number An Advantage order number. (required)
     * @param  string $settings_display_amount What type of amount to display for the order. (optional)
     * @param  bool $settings_include_details Include order lines in the response?  The default is true. (optional)
     * @param  bool $settings_include_package_components Include order lines for package components in the response? The default is true.  Note that this setting applies only if IncludeDetails is true. (optional)
     * @param  bool $settings_include_inserts Include order lines for order inserts in the response?  The default is true. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Order
     */
    public function orderGet($order_number, $settings_display_amount = null, $settings_include_details = null, $settings_include_package_components = null, $settings_include_inserts = null)
    {
        list($response) = $this->orderGetWithHttpInfo($order_number, $settings_display_amount, $settings_include_details, $settings_include_package_components, $settings_include_inserts);
        return $response;
    }

    /**
     * Operation orderGetWithHttpInfo
     *
     * Get an order's information given the order number and   a few options specified about how you'd like that order information.
     *
     * @param  string $order_number An Advantage order number. (required)
     * @param  string $settings_display_amount What type of amount to display for the order. (optional)
     * @param  bool $settings_include_details Include order lines in the response?  The default is true. (optional)
     * @param  bool $settings_include_package_components Include order lines for package components in the response? The default is true.  Note that this setting applies only if IncludeDetails is true. (optional)
     * @param  bool $settings_include_inserts Include order lines for order inserts in the response?  The default is true. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetWithHttpInfo($order_number, $settings_display_amount = null, $settings_include_details = null, $settings_include_package_components = null, $settings_include_inserts = null)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderGetRequest($order_number, $settings_display_amount, $settings_include_details, $settings_include_package_components, $settings_include_inserts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetAsync
     *
     * Get an order's information given the order number and   a few options specified about how you'd like that order information.
     *
     * @param  string $order_number An Advantage order number. (required)
     * @param  string $settings_display_amount What type of amount to display for the order. (optional)
     * @param  bool $settings_include_details Include order lines in the response?  The default is true. (optional)
     * @param  bool $settings_include_package_components Include order lines for package components in the response? The default is true.  Note that this setting applies only if IncludeDetails is true. (optional)
     * @param  bool $settings_include_inserts Include order lines for order inserts in the response?  The default is true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetAsync($order_number, $settings_display_amount = null, $settings_include_details = null, $settings_include_package_components = null, $settings_include_inserts = null)
    {
        return $this->orderGetAsyncWithHttpInfo($order_number, $settings_display_amount, $settings_include_details, $settings_include_package_components, $settings_include_inserts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetAsyncWithHttpInfo
     *
     * Get an order's information given the order number and   a few options specified about how you'd like that order information.
     *
     * @param  string $order_number An Advantage order number. (required)
     * @param  string $settings_display_amount What type of amount to display for the order. (optional)
     * @param  bool $settings_include_details Include order lines in the response?  The default is true. (optional)
     * @param  bool $settings_include_package_components Include order lines for package components in the response? The default is true.  Note that this setting applies only if IncludeDetails is true. (optional)
     * @param  bool $settings_include_inserts Include order lines for order inserts in the response?  The default is true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetAsyncWithHttpInfo($order_number, $settings_display_amount = null, $settings_include_details = null, $settings_include_package_components = null, $settings_include_inserts = null)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderGetRequest($order_number, $settings_display_amount, $settings_include_details, $settings_include_package_components, $settings_include_inserts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGet'
     *
     * @param  string $order_number An Advantage order number. (required)
     * @param  string $settings_display_amount What type of amount to display for the order. (optional)
     * @param  bool $settings_include_details Include order lines in the response?  The default is true. (optional)
     * @param  bool $settings_include_package_components Include order lines for package components in the response? The default is true.  Note that this setting applies only if IncludeDetails is true. (optional)
     * @param  bool $settings_include_inserts Include order lines for order inserts in the response?  The default is true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetRequest($order_number, $settings_display_amount = null, $settings_include_details = null, $settings_include_package_components = null, $settings_include_inserts = null)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGet'
            );
        }

        $resourcePath = '/orders/{orderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($settings_display_amount !== null) {
            $queryParams['settings.displayAmount'] = ObjectSerializer::toQueryValue($settings_display_amount);
        }
        // query params
        if ($settings_include_details !== null) {
            $queryParams['settings.includeDetails'] = ObjectSerializer::toQueryValue($settings_include_details);
        }
        // query params
        if ($settings_include_package_components !== null) {
            $queryParams['settings.includePackageComponents'] = ObjectSerializer::toQueryValue($settings_include_package_components);
        }
        // query params
        if ($settings_include_inserts !== null) {
            $queryParams['settings.includeInserts'] = ObjectSerializer::toQueryValue($settings_include_inserts);
        }

        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetDefaultCurrency
     *
     * Gets default currency for adding an order line
     *
     * @param  string $request_bill_to_customer_number The bill-to customer for the order. (optional)
     * @param  string $request_promotion_code The promotion code (sometimes referred to as key code). (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\DefaultCurrencyResponse
     */
    public function orderGetDefaultCurrency($request_bill_to_customer_number = null, $request_promotion_code = null)
    {
        list($response) = $this->orderGetDefaultCurrencyWithHttpInfo($request_bill_to_customer_number, $request_promotion_code);
        return $response;
    }

    /**
     * Operation orderGetDefaultCurrencyWithHttpInfo
     *
     * Gets default currency for adding an order line
     *
     * @param  string $request_bill_to_customer_number The bill-to customer for the order. (optional)
     * @param  string $request_promotion_code The promotion code (sometimes referred to as key code). (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\DefaultCurrencyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetDefaultCurrencyWithHttpInfo($request_bill_to_customer_number = null, $request_promotion_code = null)
    {
        $returnType = '\Advantage\Client\Model\DefaultCurrencyResponse';
        $request = $this->orderGetDefaultCurrencyRequest($request_bill_to_customer_number, $request_promotion_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\DefaultCurrencyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetDefaultCurrencyAsync
     *
     * Gets default currency for adding an order line
     *
     * @param  string $request_bill_to_customer_number The bill-to customer for the order. (optional)
     * @param  string $request_promotion_code The promotion code (sometimes referred to as key code). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetDefaultCurrencyAsync($request_bill_to_customer_number = null, $request_promotion_code = null)
    {
        return $this->orderGetDefaultCurrencyAsyncWithHttpInfo($request_bill_to_customer_number, $request_promotion_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetDefaultCurrencyAsyncWithHttpInfo
     *
     * Gets default currency for adding an order line
     *
     * @param  string $request_bill_to_customer_number The bill-to customer for the order. (optional)
     * @param  string $request_promotion_code The promotion code (sometimes referred to as key code). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetDefaultCurrencyAsyncWithHttpInfo($request_bill_to_customer_number = null, $request_promotion_code = null)
    {
        $returnType = '\Advantage\Client\Model\DefaultCurrencyResponse';
        $request = $this->orderGetDefaultCurrencyRequest($request_bill_to_customer_number, $request_promotion_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetDefaultCurrency'
     *
     * @param  string $request_bill_to_customer_number The bill-to customer for the order. (optional)
     * @param  string $request_promotion_code The promotion code (sometimes referred to as key code). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetDefaultCurrencyRequest($request_bill_to_customer_number = null, $request_promotion_code = null)
    {

        $resourcePath = '/orders/default-currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_bill_to_customer_number !== null) {
            $queryParams['request.billToCustomerNumber'] = ObjectSerializer::toQueryValue($request_bill_to_customer_number);
        }
        // query params
        if ($request_promotion_code !== null) {
            $queryParams['request.promotionCode'] = ObjectSerializer::toQueryValue($request_promotion_code);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetOrderLineDefaults
     *
     * Gets default values for adding an order line
     *
     * @param  string $order_line_bill_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_bill_to_address_code Address code (optional)
     * @param  string $order_line_ship_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_ship_to_address_code Address code (optional)
     * @param  string $order_line_item_number The item number, identifying which access agreement is being ordered (Publication Code for Subscription   Items). (optional)
     * @param  string $order_line_currency_code The order currency (optional)
     * @param  string $order_line_promotion_code The promotion code (sometimes referred to as key code). (optional)
     * @param  string $order_line_promotion_choice_code The promotion choice, indicating a set of default settings for an order line. (optional)
     * @param  bool $order_line_get_default_subscription_email If true, response will include default subscription email, if one exists (optional)
     * @param  bool $order_line_get_default_agreement_email If true, response will include default agreement email, if one exists (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\OrderLineDefaults
     */
    public function orderGetOrderLineDefaults($order_line_bill_to_customer_number = null, $order_line_bill_to_address_code = null, $order_line_ship_to_customer_number = null, $order_line_ship_to_address_code = null, $order_line_item_number = null, $order_line_currency_code = null, $order_line_promotion_code = null, $order_line_promotion_choice_code = null, $order_line_get_default_subscription_email = null, $order_line_get_default_agreement_email = null)
    {
        list($response) = $this->orderGetOrderLineDefaultsWithHttpInfo($order_line_bill_to_customer_number, $order_line_bill_to_address_code, $order_line_ship_to_customer_number, $order_line_ship_to_address_code, $order_line_item_number, $order_line_currency_code, $order_line_promotion_code, $order_line_promotion_choice_code, $order_line_get_default_subscription_email, $order_line_get_default_agreement_email);
        return $response;
    }

    /**
     * Operation orderGetOrderLineDefaultsWithHttpInfo
     *
     * Gets default values for adding an order line
     *
     * @param  string $order_line_bill_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_bill_to_address_code Address code (optional)
     * @param  string $order_line_ship_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_ship_to_address_code Address code (optional)
     * @param  string $order_line_item_number The item number, identifying which access agreement is being ordered (Publication Code for Subscription   Items). (optional)
     * @param  string $order_line_currency_code The order currency (optional)
     * @param  string $order_line_promotion_code The promotion code (sometimes referred to as key code). (optional)
     * @param  string $order_line_promotion_choice_code The promotion choice, indicating a set of default settings for an order line. (optional)
     * @param  bool $order_line_get_default_subscription_email If true, response will include default subscription email, if one exists (optional)
     * @param  bool $order_line_get_default_agreement_email If true, response will include default agreement email, if one exists (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\OrderLineDefaults, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetOrderLineDefaultsWithHttpInfo($order_line_bill_to_customer_number = null, $order_line_bill_to_address_code = null, $order_line_ship_to_customer_number = null, $order_line_ship_to_address_code = null, $order_line_item_number = null, $order_line_currency_code = null, $order_line_promotion_code = null, $order_line_promotion_choice_code = null, $order_line_get_default_subscription_email = null, $order_line_get_default_agreement_email = null)
    {
        $returnType = '\Advantage\Client\Model\OrderLineDefaults';
        $request = $this->orderGetOrderLineDefaultsRequest($order_line_bill_to_customer_number, $order_line_bill_to_address_code, $order_line_ship_to_customer_number, $order_line_ship_to_address_code, $order_line_item_number, $order_line_currency_code, $order_line_promotion_code, $order_line_promotion_choice_code, $order_line_get_default_subscription_email, $order_line_get_default_agreement_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\OrderLineDefaults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetOrderLineDefaultsAsync
     *
     * Gets default values for adding an order line
     *
     * @param  string $order_line_bill_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_bill_to_address_code Address code (optional)
     * @param  string $order_line_ship_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_ship_to_address_code Address code (optional)
     * @param  string $order_line_item_number The item number, identifying which access agreement is being ordered (Publication Code for Subscription   Items). (optional)
     * @param  string $order_line_currency_code The order currency (optional)
     * @param  string $order_line_promotion_code The promotion code (sometimes referred to as key code). (optional)
     * @param  string $order_line_promotion_choice_code The promotion choice, indicating a set of default settings for an order line. (optional)
     * @param  bool $order_line_get_default_subscription_email If true, response will include default subscription email, if one exists (optional)
     * @param  bool $order_line_get_default_agreement_email If true, response will include default agreement email, if one exists (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetOrderLineDefaultsAsync($order_line_bill_to_customer_number = null, $order_line_bill_to_address_code = null, $order_line_ship_to_customer_number = null, $order_line_ship_to_address_code = null, $order_line_item_number = null, $order_line_currency_code = null, $order_line_promotion_code = null, $order_line_promotion_choice_code = null, $order_line_get_default_subscription_email = null, $order_line_get_default_agreement_email = null)
    {
        return $this->orderGetOrderLineDefaultsAsyncWithHttpInfo($order_line_bill_to_customer_number, $order_line_bill_to_address_code, $order_line_ship_to_customer_number, $order_line_ship_to_address_code, $order_line_item_number, $order_line_currency_code, $order_line_promotion_code, $order_line_promotion_choice_code, $order_line_get_default_subscription_email, $order_line_get_default_agreement_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetOrderLineDefaultsAsyncWithHttpInfo
     *
     * Gets default values for adding an order line
     *
     * @param  string $order_line_bill_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_bill_to_address_code Address code (optional)
     * @param  string $order_line_ship_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_ship_to_address_code Address code (optional)
     * @param  string $order_line_item_number The item number, identifying which access agreement is being ordered (Publication Code for Subscription   Items). (optional)
     * @param  string $order_line_currency_code The order currency (optional)
     * @param  string $order_line_promotion_code The promotion code (sometimes referred to as key code). (optional)
     * @param  string $order_line_promotion_choice_code The promotion choice, indicating a set of default settings for an order line. (optional)
     * @param  bool $order_line_get_default_subscription_email If true, response will include default subscription email, if one exists (optional)
     * @param  bool $order_line_get_default_agreement_email If true, response will include default agreement email, if one exists (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetOrderLineDefaultsAsyncWithHttpInfo($order_line_bill_to_customer_number = null, $order_line_bill_to_address_code = null, $order_line_ship_to_customer_number = null, $order_line_ship_to_address_code = null, $order_line_item_number = null, $order_line_currency_code = null, $order_line_promotion_code = null, $order_line_promotion_choice_code = null, $order_line_get_default_subscription_email = null, $order_line_get_default_agreement_email = null)
    {
        $returnType = '\Advantage\Client\Model\OrderLineDefaults';
        $request = $this->orderGetOrderLineDefaultsRequest($order_line_bill_to_customer_number, $order_line_bill_to_address_code, $order_line_ship_to_customer_number, $order_line_ship_to_address_code, $order_line_item_number, $order_line_currency_code, $order_line_promotion_code, $order_line_promotion_choice_code, $order_line_get_default_subscription_email, $order_line_get_default_agreement_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetOrderLineDefaults'
     *
     * @param  string $order_line_bill_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_bill_to_address_code Address code (optional)
     * @param  string $order_line_ship_to_customer_number The customer&#39;s Advantage customer number. (optional)
     * @param  string $order_line_ship_to_address_code Address code (optional)
     * @param  string $order_line_item_number The item number, identifying which access agreement is being ordered (Publication Code for Subscription   Items). (optional)
     * @param  string $order_line_currency_code The order currency (optional)
     * @param  string $order_line_promotion_code The promotion code (sometimes referred to as key code). (optional)
     * @param  string $order_line_promotion_choice_code The promotion choice, indicating a set of default settings for an order line. (optional)
     * @param  bool $order_line_get_default_subscription_email If true, response will include default subscription email, if one exists (optional)
     * @param  bool $order_line_get_default_agreement_email If true, response will include default agreement email, if one exists (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetOrderLineDefaultsRequest($order_line_bill_to_customer_number = null, $order_line_bill_to_address_code = null, $order_line_ship_to_customer_number = null, $order_line_ship_to_address_code = null, $order_line_item_number = null, $order_line_currency_code = null, $order_line_promotion_code = null, $order_line_promotion_choice_code = null, $order_line_get_default_subscription_email = null, $order_line_get_default_agreement_email = null)
    {

        $resourcePath = '/orders/order-line-defaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_line_bill_to_customer_number !== null) {
            $queryParams['orderLine.billTo.customerNumber'] = ObjectSerializer::toQueryValue($order_line_bill_to_customer_number);
        }
        // query params
        if ($order_line_bill_to_address_code !== null) {
            $queryParams['orderLine.billTo.addressCode'] = ObjectSerializer::toQueryValue($order_line_bill_to_address_code);
        }
        // query params
        if ($order_line_ship_to_customer_number !== null) {
            $queryParams['orderLine.shipTo.customerNumber'] = ObjectSerializer::toQueryValue($order_line_ship_to_customer_number);
        }
        // query params
        if ($order_line_ship_to_address_code !== null) {
            $queryParams['orderLine.shipTo.addressCode'] = ObjectSerializer::toQueryValue($order_line_ship_to_address_code);
        }
        // query params
        if ($order_line_item_number !== null) {
            $queryParams['orderLine.itemNumber'] = ObjectSerializer::toQueryValue($order_line_item_number);
        }
        // query params
        if ($order_line_currency_code !== null) {
            $queryParams['orderLine.currencyCode'] = ObjectSerializer::toQueryValue($order_line_currency_code);
        }
        // query params
        if ($order_line_promotion_code !== null) {
            $queryParams['orderLine.promotionCode'] = ObjectSerializer::toQueryValue($order_line_promotion_code);
        }
        // query params
        if ($order_line_promotion_choice_code !== null) {
            $queryParams['orderLine.promotionChoiceCode'] = ObjectSerializer::toQueryValue($order_line_promotion_choice_code);
        }
        // query params
        if ($order_line_get_default_subscription_email !== null) {
            $queryParams['orderLine.getDefaultSubscriptionEmail'] = ObjectSerializer::toQueryValue($order_line_get_default_subscription_email);
        }
        // query params
        if ($order_line_get_default_agreement_email !== null) {
            $queryParams['orderLine.getDefaultAgreementEmail'] = ObjectSerializer::toQueryValue($order_line_get_default_agreement_email);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetPaymentDefaults
     *
     * Gets default values for entering a payment for this given order.  Assumes the order has already been submitted (though not necessarily committed).
     *
     * @param  string[] $order_numbers Order number that is being paid (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentDefaults
     */
    public function orderGetPaymentDefaults($order_numbers)
    {
        list($response) = $this->orderGetPaymentDefaultsWithHttpInfo($order_numbers);
        return $response;
    }

    /**
     * Operation orderGetPaymentDefaultsWithHttpInfo
     *
     * Gets default values for entering a payment for this given order.  Assumes the order has already been submitted (though not necessarily committed).
     *
     * @param  string[] $order_numbers Order number that is being paid (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentDefaults, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetPaymentDefaultsWithHttpInfo($order_numbers)
    {
        $returnType = '\Advantage\Client\Model\PaymentDefaults';
        $request = $this->orderGetPaymentDefaultsRequest($order_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentDefaults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetPaymentDefaultsAsync
     *
     * Gets default values for entering a payment for this given order.  Assumes the order has already been submitted (though not necessarily committed).
     *
     * @param  string[] $order_numbers Order number that is being paid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetPaymentDefaultsAsync($order_numbers)
    {
        return $this->orderGetPaymentDefaultsAsyncWithHttpInfo($order_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetPaymentDefaultsAsyncWithHttpInfo
     *
     * Gets default values for entering a payment for this given order.  Assumes the order has already been submitted (though not necessarily committed).
     *
     * @param  string[] $order_numbers Order number that is being paid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetPaymentDefaultsAsyncWithHttpInfo($order_numbers)
    {
        $returnType = '\Advantage\Client\Model\PaymentDefaults';
        $request = $this->orderGetPaymentDefaultsRequest($order_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetPaymentDefaults'
     *
     * @param  string[] $order_numbers Order number that is being paid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetPaymentDefaultsRequest($order_numbers)
    {
        // verify the required parameter 'order_numbers' is set
        if ($order_numbers === null || (is_array($order_numbers) && count($order_numbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_numbers when calling orderGetPaymentDefaults'
            );
        }

        $resourcePath = '/orders/payment-defaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($order_numbers)) {
            $queryParams['orderNumbers'] = $order_numbers;
        } else
        if ($order_numbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($order_numbers);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetPendingPremiums
     *
     * Gets a list of pending premium items on this order.
     *
     * @param  string $order_number Order number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultPendingPremium
     */
    public function orderGetPendingPremiums($order_number)
    {
        list($response) = $this->orderGetPendingPremiumsWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation orderGetPendingPremiumsWithHttpInfo
     *
     * Gets a list of pending premium items on this order.
     *
     * @param  string $order_number Order number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultPendingPremium, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetPendingPremiumsWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPendingPremium';
        $request = $this->orderGetPendingPremiumsRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultPendingPremium',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetPendingPremiumsAsync
     *
     * Gets a list of pending premium items on this order.
     *
     * @param  string $order_number Order number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetPendingPremiumsAsync($order_number)
    {
        return $this->orderGetPendingPremiumsAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetPendingPremiumsAsyncWithHttpInfo
     *
     * Gets a list of pending premium items on this order.
     *
     * @param  string $order_number Order number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetPendingPremiumsAsyncWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPendingPremium';
        $request = $this->orderGetPendingPremiumsRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetPendingPremiums'
     *
     * @param  string $order_number Order number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetPendingPremiumsRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetPendingPremiums'
            );
        }

        $resourcePath = '/orders/{orderNumber}/pending-premiums';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetShippingChoices
     *
     * Get a list of valid shipping options for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the shipping options. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ShippingChoice[]
     */
    public function orderGetShippingChoices($order_number)
    {
        list($response) = $this->orderGetShippingChoicesWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation orderGetShippingChoicesWithHttpInfo
     *
     * Get a list of valid shipping options for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the shipping options. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ShippingChoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetShippingChoicesWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\ShippingChoice[]';
        $request = $this->orderGetShippingChoicesRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ShippingChoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetShippingChoicesAsync
     *
     * Get a list of valid shipping options for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the shipping options. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetShippingChoicesAsync($order_number)
    {
        return $this->orderGetShippingChoicesAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetShippingChoicesAsyncWithHttpInfo
     *
     * Get a list of valid shipping options for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the shipping options. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetShippingChoicesAsyncWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\ShippingChoice[]';
        $request = $this->orderGetShippingChoicesRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetShippingChoices'
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the shipping options. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetShippingChoicesRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetShippingChoices'
            );
        }

        $resourcePath = '/orders/{orderNumber}/shipping-choices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetValidCardTypes
     *
     * Get a list of valid card types for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the valid card types. (required)
     * @param  bool $web_enabled_only Only retrieve web enabled credit cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CreditCardPaymentMethod[]
     */
    public function orderGetValidCardTypes($order_number, $web_enabled_only = null)
    {
        list($response) = $this->orderGetValidCardTypesWithHttpInfo($order_number, $web_enabled_only);
        return $response;
    }

    /**
     * Operation orderGetValidCardTypesWithHttpInfo
     *
     * Get a list of valid card types for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the valid card types. (required)
     * @param  bool $web_enabled_only Only retrieve web enabled credit cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CreditCardPaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetValidCardTypesWithHttpInfo($order_number, $web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\CreditCardPaymentMethod[]';
        $request = $this->orderGetValidCardTypesRequest($order_number, $web_enabled_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CreditCardPaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetValidCardTypesAsync
     *
     * Get a list of valid card types for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the valid card types. (required)
     * @param  bool $web_enabled_only Only retrieve web enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidCardTypesAsync($order_number, $web_enabled_only = null)
    {
        return $this->orderGetValidCardTypesAsyncWithHttpInfo($order_number, $web_enabled_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetValidCardTypesAsyncWithHttpInfo
     *
     * Get a list of valid card types for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the valid card types. (required)
     * @param  bool $web_enabled_only Only retrieve web enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidCardTypesAsyncWithHttpInfo($order_number, $web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\CreditCardPaymentMethod[]';
        $request = $this->orderGetValidCardTypesRequest($order_number, $web_enabled_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetValidCardTypes'
     *
     * @param  string $order_number The Advantage order number of the order to use to pull the valid card types. (required)
     * @param  bool $web_enabled_only Only retrieve web enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetValidCardTypesRequest($order_number, $web_enabled_only = null)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetValidCardTypes'
            );
        }

        $resourcePath = '/orders/{orderNumber}/valid-payment-methods/credit-cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($web_enabled_only !== null) {
            $queryParams['webEnabledOnly'] = ObjectSerializer::toQueryValue($web_enabled_only);
        }

        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetValidCardsForOrder
     *
     * Get the valid credit cards for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to determine the valid credit cards. (required)
     * @param  bool $web_enabled_only If true, return only web-enabled cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedCreditCard[]
     */
    public function orderGetValidCardsForOrder($order_number, $web_enabled_only = null)
    {
        list($response) = $this->orderGetValidCardsForOrderWithHttpInfo($order_number, $web_enabled_only);
        return $response;
    }

    /**
     * Operation orderGetValidCardsForOrderWithHttpInfo
     *
     * Get the valid credit cards for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to determine the valid credit cards. (required)
     * @param  bool $web_enabled_only If true, return only web-enabled cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedCreditCard[], HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetValidCardsForOrderWithHttpInfo($order_number, $web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->orderGetValidCardsForOrderRequest($order_number, $web_enabled_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedCreditCard[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetValidCardsForOrderAsync
     *
     * Get the valid credit cards for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to determine the valid credit cards. (required)
     * @param  bool $web_enabled_only If true, return only web-enabled cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidCardsForOrderAsync($order_number, $web_enabled_only = null)
    {
        return $this->orderGetValidCardsForOrderAsyncWithHttpInfo($order_number, $web_enabled_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetValidCardsForOrderAsyncWithHttpInfo
     *
     * Get the valid credit cards for a given order.
     *
     * @param  string $order_number The Advantage order number of the order to use to determine the valid credit cards. (required)
     * @param  bool $web_enabled_only If true, return only web-enabled cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidCardsForOrderAsyncWithHttpInfo($order_number, $web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->orderGetValidCardsForOrderRequest($order_number, $web_enabled_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetValidCardsForOrder'
     *
     * @param  string $order_number The Advantage order number of the order to use to determine the valid credit cards. (required)
     * @param  bool $web_enabled_only If true, return only web-enabled cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetValidCardsForOrderRequest($order_number, $web_enabled_only = null)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetValidCardsForOrder'
            );
        }

        $resourcePath = '/orders/{orderNumber}/valid-payment-methods/saved-credit-cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($web_enabled_only !== null) {
            $queryParams['webEnabledOnly'] = ObjectSerializer::toQueryValue($web_enabled_only);
        }

        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetValidDirectDebitTypes
     *
     * Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for   a more filtered result.
     *
     * @param  string $order_number The Advantage order number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\DirectDebitPaymentMethod[]
     */
    public function orderGetValidDirectDebitTypes($order_number)
    {
        list($response) = $this->orderGetValidDirectDebitTypesWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation orderGetValidDirectDebitTypesWithHttpInfo
     *
     * Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for   a more filtered result.
     *
     * @param  string $order_number The Advantage order number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\DirectDebitPaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetValidDirectDebitTypesWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\DirectDebitPaymentMethod[]';
        $request = $this->orderGetValidDirectDebitTypesRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\DirectDebitPaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetValidDirectDebitTypesAsync
     *
     * Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for   a more filtered result.
     *
     * @param  string $order_number The Advantage order number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidDirectDebitTypesAsync($order_number)
    {
        return $this->orderGetValidDirectDebitTypesAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetValidDirectDebitTypesAsyncWithHttpInfo
     *
     * Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for   a more filtered result.
     *
     * @param  string $order_number The Advantage order number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidDirectDebitTypesAsyncWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\DirectDebitPaymentMethod[]';
        $request = $this->orderGetValidDirectDebitTypesRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetValidDirectDebitTypes'
     *
     * @param  string $order_number The Advantage order number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetValidDirectDebitTypesRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetValidDirectDebitTypes'
            );
        }

        $resourcePath = '/orders/{orderNumber}/valid-payment-methods/direct-debits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetValidGiftCertificatesForOrder
     *
     * @param  string $order_number order_number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\GiftCertificate[]
     */
    public function orderGetValidGiftCertificatesForOrder($order_number)
    {
        list($response) = $this->orderGetValidGiftCertificatesForOrderWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation orderGetValidGiftCertificatesForOrderWithHttpInfo
     *
     * @param  string $order_number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\GiftCertificate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetValidGiftCertificatesForOrderWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\GiftCertificate[]';
        $request = $this->orderGetValidGiftCertificatesForOrderRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\GiftCertificate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetValidGiftCertificatesForOrderAsync
     *
     * 
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidGiftCertificatesForOrderAsync($order_number)
    {
        return $this->orderGetValidGiftCertificatesForOrderAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetValidGiftCertificatesForOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetValidGiftCertificatesForOrderAsyncWithHttpInfo($order_number)
    {
        $returnType = '\Advantage\Client\Model\GiftCertificate[]';
        $request = $this->orderGetValidGiftCertificatesForOrderRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetValidGiftCertificatesForOrder'
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetValidGiftCertificatesForOrderRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderGetValidGiftCertificatesForOrder'
            );
        }

        $resourcePath = '/orders/{orderNumber}/valid-payment-methods/saved-gift-certificates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPost
     *
     * Post an activated web order.
     *
     * @param  string $order_number The Advantage order number of the order to post. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderPost($order_number)
    {
        $this->orderPostWithHttpInfo($order_number);
    }

    /**
     * Operation orderPostWithHttpInfo
     *
     * Post an activated web order.
     *
     * @param  string $order_number The Advantage order number of the order to post. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPostWithHttpInfo($order_number)
    {
        $returnType = '';
        $request = $this->orderPostRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderPostAsync
     *
     * Post an activated web order.
     *
     * @param  string $order_number The Advantage order number of the order to post. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPostAsync($order_number)
    {
        return $this->orderPostAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPostAsyncWithHttpInfo
     *
     * Post an activated web order.
     *
     * @param  string $order_number The Advantage order number of the order to post. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPostAsyncWithHttpInfo($order_number)
    {
        $returnType = '';
        $request = $this->orderPostRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPost'
     *
     * @param  string $order_number The Advantage order number of the order to post. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderPostRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderPost'
            );
        }

        $resourcePath = '/orders/{orderNumber}/post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPutCoupons
     *
     * Replace coupons for an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderPutCoupons($order_number, $coupon_request)
    {
        $this->orderPutCouponsWithHttpInfo($order_number, $coupon_request);
    }

    /**
     * Operation orderPutCouponsWithHttpInfo
     *
     * Replace coupons for an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPutCouponsWithHttpInfo($order_number, $coupon_request)
    {
        $returnType = '';
        $request = $this->orderPutCouponsRequest($order_number, $coupon_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderPutCouponsAsync
     *
     * Replace coupons for an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPutCouponsAsync($order_number, $coupon_request)
    {
        return $this->orderPutCouponsAsyncWithHttpInfo($order_number, $coupon_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPutCouponsAsyncWithHttpInfo
     *
     * Replace coupons for an order.
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPutCouponsAsyncWithHttpInfo($order_number, $coupon_request)
    {
        $returnType = '';
        $request = $this->orderPutCouponsRequest($order_number, $coupon_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPutCoupons'
     *
     * @param  string $order_number The order number (required)
     * @param  \Advantage\Client\Model\CouponRequest $coupon_request The coupons to add to the order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderPutCouponsRequest($order_number, $coupon_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderPutCoupons'
            );
        }
        // verify the required parameter 'coupon_request' is set
        if ($coupon_request === null || (is_array($coupon_request) && count($coupon_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_request when calling orderPutCoupons'
            );
        }

        $resourcePath = '/orders/{orderNumber}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coupon_request)) {
            $_tempBody = $coupon_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderRemovePayment
     *
     * Removes the specified payments from the specified order.
     *
     * @param  string $order_number Order number (required)
     * @param  string $credit_voucher_number Voucher number of the credit to remove (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderRemovePayment($order_number, $credit_voucher_number)
    {
        $this->orderRemovePaymentWithHttpInfo($order_number, $credit_voucher_number);
    }

    /**
     * Operation orderRemovePaymentWithHttpInfo
     *
     * Removes the specified payments from the specified order.
     *
     * @param  string $order_number Order number (required)
     * @param  string $credit_voucher_number Voucher number of the credit to remove (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderRemovePaymentWithHttpInfo($order_number, $credit_voucher_number)
    {
        $returnType = '';
        $request = $this->orderRemovePaymentRequest($order_number, $credit_voucher_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderRemovePaymentAsync
     *
     * Removes the specified payments from the specified order.
     *
     * @param  string $order_number Order number (required)
     * @param  string $credit_voucher_number Voucher number of the credit to remove (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderRemovePaymentAsync($order_number, $credit_voucher_number)
    {
        return $this->orderRemovePaymentAsyncWithHttpInfo($order_number, $credit_voucher_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderRemovePaymentAsyncWithHttpInfo
     *
     * Removes the specified payments from the specified order.
     *
     * @param  string $order_number Order number (required)
     * @param  string $credit_voucher_number Voucher number of the credit to remove (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderRemovePaymentAsyncWithHttpInfo($order_number, $credit_voucher_number)
    {
        $returnType = '';
        $request = $this->orderRemovePaymentRequest($order_number, $credit_voucher_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderRemovePayment'
     *
     * @param  string $order_number Order number (required)
     * @param  string $credit_voucher_number Voucher number of the credit to remove (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderRemovePaymentRequest($order_number, $credit_voucher_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderRemovePayment'
            );
        }
        // verify the required parameter 'credit_voucher_number' is set
        if ($credit_voucher_number === null || (is_array($credit_voucher_number) && count($credit_voucher_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_voucher_number when calling orderRemovePayment'
            );
        }

        $resourcePath = '/orders/{orderNumber}/payments/{creditVoucherNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($credit_voucher_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditVoucherNumber' . '}',
                ObjectSerializer::toPathValue($credit_voucher_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderSetPendingPremiumItemNumber
     *
     * Sets the item number on a premium set item. This method is not applicable for premium items.
     *
     * @param  string $order_number Order number (required)
     * @param  \Advantage\Client\Model\PendingPremiumUpdateRequest[] $pending_premium_update_requests The information needed to find a premium set item and update the item number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderSetPendingPremiumItemNumber($order_number, $pending_premium_update_requests)
    {
        $this->orderSetPendingPremiumItemNumberWithHttpInfo($order_number, $pending_premium_update_requests);
    }

    /**
     * Operation orderSetPendingPremiumItemNumberWithHttpInfo
     *
     * Sets the item number on a premium set item. This method is not applicable for premium items.
     *
     * @param  string $order_number Order number (required)
     * @param  \Advantage\Client\Model\PendingPremiumUpdateRequest[] $pending_premium_update_requests The information needed to find a premium set item and update the item number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderSetPendingPremiumItemNumberWithHttpInfo($order_number, $pending_premium_update_requests)
    {
        $returnType = '';
        $request = $this->orderSetPendingPremiumItemNumberRequest($order_number, $pending_premium_update_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderSetPendingPremiumItemNumberAsync
     *
     * Sets the item number on a premium set item. This method is not applicable for premium items.
     *
     * @param  string $order_number Order number (required)
     * @param  \Advantage\Client\Model\PendingPremiumUpdateRequest[] $pending_premium_update_requests The information needed to find a premium set item and update the item number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderSetPendingPremiumItemNumberAsync($order_number, $pending_premium_update_requests)
    {
        return $this->orderSetPendingPremiumItemNumberAsyncWithHttpInfo($order_number, $pending_premium_update_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderSetPendingPremiumItemNumberAsyncWithHttpInfo
     *
     * Sets the item number on a premium set item. This method is not applicable for premium items.
     *
     * @param  string $order_number Order number (required)
     * @param  \Advantage\Client\Model\PendingPremiumUpdateRequest[] $pending_premium_update_requests The information needed to find a premium set item and update the item number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderSetPendingPremiumItemNumberAsyncWithHttpInfo($order_number, $pending_premium_update_requests)
    {
        $returnType = '';
        $request = $this->orderSetPendingPremiumItemNumberRequest($order_number, $pending_premium_update_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderSetPendingPremiumItemNumber'
     *
     * @param  string $order_number Order number (required)
     * @param  \Advantage\Client\Model\PendingPremiumUpdateRequest[] $pending_premium_update_requests The information needed to find a premium set item and update the item number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderSetPendingPremiumItemNumberRequest($order_number, $pending_premium_update_requests)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderSetPendingPremiumItemNumber'
            );
        }
        // verify the required parameter 'pending_premium_update_requests' is set
        if ($pending_premium_update_requests === null || (is_array($pending_premium_update_requests) && count($pending_premium_update_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pending_premium_update_requests when calling orderSetPendingPremiumItemNumber'
            );
        }

        $resourcePath = '/orders/{orderNumber}/pending-premiums';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($pending_premium_update_requests)) {
            $_tempBody = $pending_premium_update_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUpdate
     *
     * Update an existing order.
     *
     * @param  string $order_number The Advantage order number of the order to update. (required)
     * @param  \Advantage\Client\Model\OrderUpdateRequest $order_update_request An OrderUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Order
     */
    public function orderUpdate($order_number, $order_update_request)
    {
        list($response) = $this->orderUpdateWithHttpInfo($order_number, $order_update_request);
        return $response;
    }

    /**
     * Operation orderUpdateWithHttpInfo
     *
     * Update an existing order.
     *
     * @param  string $order_number The Advantage order number of the order to update. (required)
     * @param  \Advantage\Client\Model\OrderUpdateRequest $order_update_request An OrderUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUpdateWithHttpInfo($order_number, $order_update_request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderUpdateRequest($order_number, $order_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUpdateAsync
     *
     * Update an existing order.
     *
     * @param  string $order_number The Advantage order number of the order to update. (required)
     * @param  \Advantage\Client\Model\OrderUpdateRequest $order_update_request An OrderUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsync($order_number, $order_update_request)
    {
        return $this->orderUpdateAsyncWithHttpInfo($order_number, $order_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUpdateAsyncWithHttpInfo
     *
     * Update an existing order.
     *
     * @param  string $order_number The Advantage order number of the order to update. (required)
     * @param  \Advantage\Client\Model\OrderUpdateRequest $order_update_request An OrderUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsyncWithHttpInfo($order_number, $order_update_request)
    {
        $returnType = '\Advantage\Client\Model\Order';
        $request = $this->orderUpdateRequest($order_number, $order_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUpdate'
     *
     * @param  string $order_number The Advantage order number of the order to update. (required)
     * @param  \Advantage\Client\Model\OrderUpdateRequest $order_update_request An OrderUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderUpdateRequest($order_number, $order_update_request)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling orderUpdate'
            );
        }
        // verify the required parameter 'order_update_request' is set
        if ($order_update_request === null || (is_array($order_update_request) && count($order_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_update_request when calling orderUpdate'
            );
        }

        $resourcePath = '/orders/{orderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($order_update_request)) {
            $_tempBody = $order_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
