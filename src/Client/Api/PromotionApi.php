<?php
/**
 * PromotionApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * PromotionApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation promotionCreate
     *
     * Create a new promotion.
     *
     * @param  \Advantage\Client\Model\PromotionCreateRequest $promotion_create_request A PromotionCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function promotionCreate($promotion_create_request)
    {
        $this->promotionCreateWithHttpInfo($promotion_create_request);
    }

    /**
     * Operation promotionCreateWithHttpInfo
     *
     * Create a new promotion.
     *
     * @param  \Advantage\Client\Model\PromotionCreateRequest $promotion_create_request A PromotionCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionCreateWithHttpInfo($promotion_create_request)
    {
        $returnType = '';
        $request = $this->promotionCreateRequest($promotion_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation promotionCreateAsync
     *
     * Create a new promotion.
     *
     * @param  \Advantage\Client\Model\PromotionCreateRequest $promotion_create_request A PromotionCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionCreateAsync($promotion_create_request)
    {
        return $this->promotionCreateAsyncWithHttpInfo($promotion_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionCreateAsyncWithHttpInfo
     *
     * Create a new promotion.
     *
     * @param  \Advantage\Client\Model\PromotionCreateRequest $promotion_create_request A PromotionCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionCreateAsyncWithHttpInfo($promotion_create_request)
    {
        $returnType = '';
        $request = $this->promotionCreateRequest($promotion_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionCreate'
     *
     * @param  \Advantage\Client\Model\PromotionCreateRequest $promotion_create_request A PromotionCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionCreateRequest($promotion_create_request)
    {
        // verify the required parameter 'promotion_create_request' is set
        if ($promotion_create_request === null || (is_array($promotion_create_request) && count($promotion_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_create_request when calling promotionCreate'
            );
        }

        $resourcePath = '/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($promotion_create_request)) {
            $_tempBody = $promotion_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionGet
     *
     * Get an existing promotion.
     *
     * @param  string $promotion_code The promotion code of the desired promotion. (required)
     * @param  string $currency_code The optional currency for the promotion, the default is used if none provided.  This is used to determine which promotion items are returned and the available credit card and direct debit types. (optional)
     * @param  string $billing_organization The billing organization, used to determine the valid direct debit types for the promotion.  If none is provided, no direct debit types will be populated. (optional)
     * @param  bool $is_promotion_only True to return only promotion level information. (optional)
     * @param  bool $web_enabled_credit_cards_only If true, ValidCards will only list web-enabled credit cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Promotion
     */
    public function promotionGet($promotion_code, $currency_code = null, $billing_organization = null, $is_promotion_only = null, $web_enabled_credit_cards_only = null)
    {
        list($response) = $this->promotionGetWithHttpInfo($promotion_code, $currency_code, $billing_organization, $is_promotion_only, $web_enabled_credit_cards_only);
        return $response;
    }

    /**
     * Operation promotionGetWithHttpInfo
     *
     * Get an existing promotion.
     *
     * @param  string $promotion_code The promotion code of the desired promotion. (required)
     * @param  string $currency_code The optional currency for the promotion, the default is used if none provided.  This is used to determine which promotion items are returned and the available credit card and direct debit types. (optional)
     * @param  string $billing_organization The billing organization, used to determine the valid direct debit types for the promotion.  If none is provided, no direct debit types will be populated. (optional)
     * @param  bool $is_promotion_only True to return only promotion level information. (optional)
     * @param  bool $web_enabled_credit_cards_only If true, ValidCards will only list web-enabled credit cards (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Promotion, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionGetWithHttpInfo($promotion_code, $currency_code = null, $billing_organization = null, $is_promotion_only = null, $web_enabled_credit_cards_only = null)
    {
        $returnType = '\Advantage\Client\Model\Promotion';
        $request = $this->promotionGetRequest($promotion_code, $currency_code, $billing_organization, $is_promotion_only, $web_enabled_credit_cards_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Promotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionGetAsync
     *
     * Get an existing promotion.
     *
     * @param  string $promotion_code The promotion code of the desired promotion. (required)
     * @param  string $currency_code The optional currency for the promotion, the default is used if none provided.  This is used to determine which promotion items are returned and the available credit card and direct debit types. (optional)
     * @param  string $billing_organization The billing organization, used to determine the valid direct debit types for the promotion.  If none is provided, no direct debit types will be populated. (optional)
     * @param  bool $is_promotion_only True to return only promotion level information. (optional)
     * @param  bool $web_enabled_credit_cards_only If true, ValidCards will only list web-enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionGetAsync($promotion_code, $currency_code = null, $billing_organization = null, $is_promotion_only = null, $web_enabled_credit_cards_only = null)
    {
        return $this->promotionGetAsyncWithHttpInfo($promotion_code, $currency_code, $billing_organization, $is_promotion_only, $web_enabled_credit_cards_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionGetAsyncWithHttpInfo
     *
     * Get an existing promotion.
     *
     * @param  string $promotion_code The promotion code of the desired promotion. (required)
     * @param  string $currency_code The optional currency for the promotion, the default is used if none provided.  This is used to determine which promotion items are returned and the available credit card and direct debit types. (optional)
     * @param  string $billing_organization The billing organization, used to determine the valid direct debit types for the promotion.  If none is provided, no direct debit types will be populated. (optional)
     * @param  bool $is_promotion_only True to return only promotion level information. (optional)
     * @param  bool $web_enabled_credit_cards_only If true, ValidCards will only list web-enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionGetAsyncWithHttpInfo($promotion_code, $currency_code = null, $billing_organization = null, $is_promotion_only = null, $web_enabled_credit_cards_only = null)
    {
        $returnType = '\Advantage\Client\Model\Promotion';
        $request = $this->promotionGetRequest($promotion_code, $currency_code, $billing_organization, $is_promotion_only, $web_enabled_credit_cards_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionGet'
     *
     * @param  string $promotion_code The promotion code of the desired promotion. (required)
     * @param  string $currency_code The optional currency for the promotion, the default is used if none provided.  This is used to determine which promotion items are returned and the available credit card and direct debit types. (optional)
     * @param  string $billing_organization The billing organization, used to determine the valid direct debit types for the promotion.  If none is provided, no direct debit types will be populated. (optional)
     * @param  bool $is_promotion_only True to return only promotion level information. (optional)
     * @param  bool $web_enabled_credit_cards_only If true, ValidCards will only list web-enabled credit cards (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionGetRequest($promotion_code, $currency_code = null, $billing_organization = null, $is_promotion_only = null, $web_enabled_credit_cards_only = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionGet'
            );
        }

        $resourcePath = '/promotions/{promotionCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }
        // query params
        if ($billing_organization !== null) {
            $queryParams['billingOrganization'] = ObjectSerializer::toQueryValue($billing_organization);
        }
        // query params
        if ($is_promotion_only !== null) {
            $queryParams['isPromotionOnly'] = ObjectSerializer::toQueryValue($is_promotion_only);
        }
        // query params
        if ($web_enabled_credit_cards_only !== null) {
            $queryParams['webEnabledCreditCardsOnly'] = ObjectSerializer::toQueryValue($web_enabled_credit_cards_only);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionGetPromotionSource
     *
     * Get a promotion source.  The promotion source is identified by the first character of the promotion code.  Clients are recommended to create promotion codes using this first character in a way that is meaningful  (examples: A=Agency, D=Direct Mail, R=Renewal).  Many CIR reports provide analysis by this first position of the promotion code.
     *
     * @param  string $promotion_source The promotion source. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PromotionSource
     */
    public function promotionGetPromotionSource($promotion_source)
    {
        list($response) = $this->promotionGetPromotionSourceWithHttpInfo($promotion_source);
        return $response;
    }

    /**
     * Operation promotionGetPromotionSourceWithHttpInfo
     *
     * Get a promotion source.  The promotion source is identified by the first character of the promotion code.  Clients are recommended to create promotion codes using this first character in a way that is meaningful  (examples: A=Agency, D=Direct Mail, R=Renewal).  Many CIR reports provide analysis by this first position of the promotion code.
     *
     * @param  string $promotion_source The promotion source. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PromotionSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionGetPromotionSourceWithHttpInfo($promotion_source)
    {
        $returnType = '\Advantage\Client\Model\PromotionSource';
        $request = $this->promotionGetPromotionSourceRequest($promotion_source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PromotionSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionGetPromotionSourceAsync
     *
     * Get a promotion source.  The promotion source is identified by the first character of the promotion code.  Clients are recommended to create promotion codes using this first character in a way that is meaningful  (examples: A=Agency, D=Direct Mail, R=Renewal).  Many CIR reports provide analysis by this first position of the promotion code.
     *
     * @param  string $promotion_source The promotion source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionGetPromotionSourceAsync($promotion_source)
    {
        return $this->promotionGetPromotionSourceAsyncWithHttpInfo($promotion_source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionGetPromotionSourceAsyncWithHttpInfo
     *
     * Get a promotion source.  The promotion source is identified by the first character of the promotion code.  Clients are recommended to create promotion codes using this first character in a way that is meaningful  (examples: A=Agency, D=Direct Mail, R=Renewal).  Many CIR reports provide analysis by this first position of the promotion code.
     *
     * @param  string $promotion_source The promotion source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionGetPromotionSourceAsyncWithHttpInfo($promotion_source)
    {
        $returnType = '\Advantage\Client\Model\PromotionSource';
        $request = $this->promotionGetPromotionSourceRequest($promotion_source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionGetPromotionSource'
     *
     * @param  string $promotion_source The promotion source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionGetPromotionSourceRequest($promotion_source)
    {
        // verify the required parameter 'promotion_source' is set
        if ($promotion_source === null || (is_array($promotion_source) && count($promotion_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_source when calling promotionGetPromotionSource'
            );
        }

        $resourcePath = '/promotion-sources/{promotionSource}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_source !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionSource' . '}',
                ObjectSerializer::toPathValue($promotion_source),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionSearch
     *
     * Get summary information for promotions matching a search argument.
     *
     * @param  string $search_text The search argument for filtering the available promotions. Accepts &#39;*&#39; as a wild-card. (optional)
     * @param  bool $include_active_only If true, search results will only include active promotions (optional)
     * @param  \DateTime $valid_as_of If set, returns only promotions valid as of the specified date (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultWithCountPromotionSummary
     */
    public function promotionSearch($search_text = null, $include_active_only = null, $valid_as_of = null, $pager_skip = null, $pager_take = null, $promotion_code = null, $item_number = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null)
    {
        list($response) = $this->promotionSearchWithHttpInfo($search_text, $include_active_only, $valid_as_of, $pager_skip, $pager_take, $promotion_code, $item_number, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between);
        return $response;
    }

    /**
     * Operation promotionSearchWithHttpInfo
     *
     * Get summary information for promotions matching a search argument.
     *
     * @param  string $search_text The search argument for filtering the available promotions. Accepts &#39;*&#39; as a wild-card. (optional)
     * @param  bool $include_active_only If true, search results will only include active promotions (optional)
     * @param  \DateTime $valid_as_of If set, returns only promotions valid as of the specified date (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultWithCountPromotionSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionSearchWithHttpInfo($search_text = null, $include_active_only = null, $valid_as_of = null, $pager_skip = null, $pager_take = null, $promotion_code = null, $item_number = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountPromotionSummary';
        $request = $this->promotionSearchRequest($search_text, $include_active_only, $valid_as_of, $pager_skip, $pager_take, $promotion_code, $item_number, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultWithCountPromotionSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionSearchAsync
     *
     * Get summary information for promotions matching a search argument.
     *
     * @param  string $search_text The search argument for filtering the available promotions. Accepts &#39;*&#39; as a wild-card. (optional)
     * @param  bool $include_active_only If true, search results will only include active promotions (optional)
     * @param  \DateTime $valid_as_of If set, returns only promotions valid as of the specified date (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionSearchAsync($search_text = null, $include_active_only = null, $valid_as_of = null, $pager_skip = null, $pager_take = null, $promotion_code = null, $item_number = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null)
    {
        return $this->promotionSearchAsyncWithHttpInfo($search_text, $include_active_only, $valid_as_of, $pager_skip, $pager_take, $promotion_code, $item_number, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionSearchAsyncWithHttpInfo
     *
     * Get summary information for promotions matching a search argument.
     *
     * @param  string $search_text The search argument for filtering the available promotions. Accepts &#39;*&#39; as a wild-card. (optional)
     * @param  bool $include_active_only If true, search results will only include active promotions (optional)
     * @param  \DateTime $valid_as_of If set, returns only promotions valid as of the specified date (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionSearchAsyncWithHttpInfo($search_text = null, $include_active_only = null, $valid_as_of = null, $pager_skip = null, $pager_take = null, $promotion_code = null, $item_number = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountPromotionSummary';
        $request = $this->promotionSearchRequest($search_text, $include_active_only, $valid_as_of, $pager_skip, $pager_take, $promotion_code, $item_number, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionSearch'
     *
     * @param  string $search_text The search argument for filtering the available promotions. Accepts &#39;*&#39; as a wild-card. (optional)
     * @param  bool $include_active_only If true, search results will only include active promotions (optional)
     * @param  \DateTime $valid_as_of If set, returns only promotions valid as of the specified date (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionSearchRequest($search_text = null, $include_active_only = null, $valid_as_of = null, $pager_skip = null, $pager_take = null, $promotion_code = null, $item_number = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null)
    {

        $resourcePath = '/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_text !== null) {
            $queryParams['searchText'] = ObjectSerializer::toQueryValue($search_text);
        }
        // query params
        if ($include_active_only !== null) {
            $queryParams['includeActiveOnly'] = ObjectSerializer::toQueryValue($include_active_only);
        }
        // query params
        if ($valid_as_of !== null) {
            $queryParams['validAsOf'] = ObjectSerializer::toQueryValue($valid_as_of);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($promotion_code !== null) {
            $queryParams['PromotionCode'] = ObjectSerializer::toQueryValue($promotion_code);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['ItemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($promotion_code_not_equal !== null) {
            $queryParams['PromotionCode.NotEqual'] = ObjectSerializer::toQueryValue($promotion_code_not_equal);
        }
        // query params
        if ($promotion_code_less !== null) {
            $queryParams['PromotionCode.Less'] = ObjectSerializer::toQueryValue($promotion_code_less);
        }
        // query params
        if ($promotion_code_less_or_equal !== null) {
            $queryParams['PromotionCode.LessOrEqual'] = ObjectSerializer::toQueryValue($promotion_code_less_or_equal);
        }
        // query params
        if ($promotion_code_greater !== null) {
            $queryParams['PromotionCode.Greater'] = ObjectSerializer::toQueryValue($promotion_code_greater);
        }
        // query params
        if ($promotion_code_greater_or_equal !== null) {
            $queryParams['PromotionCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promotion_code_greater_or_equal);
        }
        // query params
        if ($promotion_code_is_null !== null) {
            $queryParams['PromotionCode.IsNull'] = ObjectSerializer::toQueryValue($promotion_code_is_null);
        }
        // query params
        if ($promotion_code_is_not_null !== null) {
            $queryParams['PromotionCode.IsNotNull'] = ObjectSerializer::toQueryValue($promotion_code_is_not_null);
        }
        // query params
        if ($promotion_code_like !== null) {
            $queryParams['PromotionCode.Like'] = ObjectSerializer::toQueryValue($promotion_code_like);
        }
        // query params
        if ($promotion_code_not_like !== null) {
            $queryParams['PromotionCode.NotLike'] = ObjectSerializer::toQueryValue($promotion_code_not_like);
        }
        // query params
        if ($promotion_code_contains !== null) {
            $queryParams['PromotionCode.Contains'] = ObjectSerializer::toQueryValue($promotion_code_contains);
        }
        // query params
        if ($promotion_code_not_contains !== null) {
            $queryParams['PromotionCode.NotContains'] = ObjectSerializer::toQueryValue($promotion_code_not_contains);
        }
        // query params
        if ($promotion_code_starts_with !== null) {
            $queryParams['PromotionCode.StartsWith'] = ObjectSerializer::toQueryValue($promotion_code_starts_with);
        }
        // query params
        if ($promotion_code_not_starts_with !== null) {
            $queryParams['PromotionCode.NotStartsWith'] = ObjectSerializer::toQueryValue($promotion_code_not_starts_with);
        }
        // query params
        if ($promotion_code_ends_with !== null) {
            $queryParams['PromotionCode.EndsWith'] = ObjectSerializer::toQueryValue($promotion_code_ends_with);
        }
        // query params
        if ($promotion_code_not_ends_with !== null) {
            $queryParams['PromotionCode.NotEndsWith'] = ObjectSerializer::toQueryValue($promotion_code_not_ends_with);
        }
        // query params
        if ($promotion_code_in !== null) {
            $queryParams['PromotionCode.In'] = ObjectSerializer::toQueryValue($promotion_code_in);
        }
        // query params
        if ($promotion_code_between !== null) {
            $queryParams['PromotionCode.Between'] = ObjectSerializer::toQueryValue($promotion_code_between);
        }
        // query params
        if ($item_number_not_equal !== null) {
            $queryParams['ItemNumber.NotEqual'] = ObjectSerializer::toQueryValue($item_number_not_equal);
        }
        // query params
        if ($item_number_less !== null) {
            $queryParams['ItemNumber.Less'] = ObjectSerializer::toQueryValue($item_number_less);
        }
        // query params
        if ($item_number_less_or_equal !== null) {
            $queryParams['ItemNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($item_number_less_or_equal);
        }
        // query params
        if ($item_number_greater !== null) {
            $queryParams['ItemNumber.Greater'] = ObjectSerializer::toQueryValue($item_number_greater);
        }
        // query params
        if ($item_number_greater_or_equal !== null) {
            $queryParams['ItemNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($item_number_greater_or_equal);
        }
        // query params
        if ($item_number_is_null !== null) {
            $queryParams['ItemNumber.IsNull'] = ObjectSerializer::toQueryValue($item_number_is_null);
        }
        // query params
        if ($item_number_is_not_null !== null) {
            $queryParams['ItemNumber.IsNotNull'] = ObjectSerializer::toQueryValue($item_number_is_not_null);
        }
        // query params
        if ($item_number_like !== null) {
            $queryParams['ItemNumber.Like'] = ObjectSerializer::toQueryValue($item_number_like);
        }
        // query params
        if ($item_number_not_like !== null) {
            $queryParams['ItemNumber.NotLike'] = ObjectSerializer::toQueryValue($item_number_not_like);
        }
        // query params
        if ($item_number_contains !== null) {
            $queryParams['ItemNumber.Contains'] = ObjectSerializer::toQueryValue($item_number_contains);
        }
        // query params
        if ($item_number_not_contains !== null) {
            $queryParams['ItemNumber.NotContains'] = ObjectSerializer::toQueryValue($item_number_not_contains);
        }
        // query params
        if ($item_number_starts_with !== null) {
            $queryParams['ItemNumber.StartsWith'] = ObjectSerializer::toQueryValue($item_number_starts_with);
        }
        // query params
        if ($item_number_not_starts_with !== null) {
            $queryParams['ItemNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($item_number_not_starts_with);
        }
        // query params
        if ($item_number_ends_with !== null) {
            $queryParams['ItemNumber.EndsWith'] = ObjectSerializer::toQueryValue($item_number_ends_with);
        }
        // query params
        if ($item_number_not_ends_with !== null) {
            $queryParams['ItemNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($item_number_not_ends_with);
        }
        // query params
        if ($item_number_in !== null) {
            $queryParams['ItemNumber.In'] = ObjectSerializer::toQueryValue($item_number_in);
        }
        // query params
        if ($item_number_between !== null) {
            $queryParams['ItemNumber.Between'] = ObjectSerializer::toQueryValue($item_number_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionUpdate
     *
     * Update an existing promotion.
     *
     * @param  string $promotion_code  (required)
     * @param  \Advantage\Client\Model\PromotionUpdateRequest $promotion_update_request A PromotionUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function promotionUpdate($promotion_code, $promotion_update_request)
    {
        $this->promotionUpdateWithHttpInfo($promotion_code, $promotion_update_request);
    }

    /**
     * Operation promotionUpdateWithHttpInfo
     *
     * Update an existing promotion.
     *
     * @param  string $promotion_code  (required)
     * @param  \Advantage\Client\Model\PromotionUpdateRequest $promotion_update_request A PromotionUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionUpdateWithHttpInfo($promotion_code, $promotion_update_request)
    {
        $returnType = '';
        $request = $this->promotionUpdateRequest($promotion_code, $promotion_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation promotionUpdateAsync
     *
     * Update an existing promotion.
     *
     * @param  string $promotion_code  (required)
     * @param  \Advantage\Client\Model\PromotionUpdateRequest $promotion_update_request A PromotionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionUpdateAsync($promotion_code, $promotion_update_request)
    {
        return $this->promotionUpdateAsyncWithHttpInfo($promotion_code, $promotion_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionUpdateAsyncWithHttpInfo
     *
     * Update an existing promotion.
     *
     * @param  string $promotion_code  (required)
     * @param  \Advantage\Client\Model\PromotionUpdateRequest $promotion_update_request A PromotionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionUpdateAsyncWithHttpInfo($promotion_code, $promotion_update_request)
    {
        $returnType = '';
        $request = $this->promotionUpdateRequest($promotion_code, $promotion_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionUpdate'
     *
     * @param  string $promotion_code  (required)
     * @param  \Advantage\Client\Model\PromotionUpdateRequest $promotion_update_request A PromotionUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionUpdateRequest($promotion_code, $promotion_update_request)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionUpdate'
            );
        }
        // verify the required parameter 'promotion_update_request' is set
        if ($promotion_update_request === null || (is_array($promotion_update_request) && count($promotion_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_update_request when calling promotionUpdate'
            );
        }

        $resourcePath = '/promotions/{promotionCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($promotion_update_request)) {
            $_tempBody = $promotion_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
