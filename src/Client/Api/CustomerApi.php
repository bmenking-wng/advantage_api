<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerActivate
     *
     * Create a login and attach it to an already existing customer.
     *
     * @param  string $customer_number The Advantage customer number to create the login for. (required)
     * @param  \Advantage\Client\Model\ActivateAccountRequest $activate_account_request An ActivateAccountRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AccountCreateResponse
     */
    public function customerActivate($customer_number, $activate_account_request)
    {
        list($response) = $this->customerActivateWithHttpInfo($customer_number, $activate_account_request);
        return $response;
    }

    /**
     * Operation customerActivateWithHttpInfo
     *
     * Create a login and attach it to an already existing customer.
     *
     * @param  string $customer_number The Advantage customer number to create the login for. (required)
     * @param  \Advantage\Client\Model\ActivateAccountRequest $activate_account_request An ActivateAccountRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AccountCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerActivateWithHttpInfo($customer_number, $activate_account_request)
    {
        $returnType = '\Advantage\Client\Model\AccountCreateResponse';
        $request = $this->customerActivateRequest($customer_number, $activate_account_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AccountCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerActivateAsync
     *
     * Create a login and attach it to an already existing customer.
     *
     * @param  string $customer_number The Advantage customer number to create the login for. (required)
     * @param  \Advantage\Client\Model\ActivateAccountRequest $activate_account_request An ActivateAccountRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerActivateAsync($customer_number, $activate_account_request)
    {
        return $this->customerActivateAsyncWithHttpInfo($customer_number, $activate_account_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerActivateAsyncWithHttpInfo
     *
     * Create a login and attach it to an already existing customer.
     *
     * @param  string $customer_number The Advantage customer number to create the login for. (required)
     * @param  \Advantage\Client\Model\ActivateAccountRequest $activate_account_request An ActivateAccountRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerActivateAsyncWithHttpInfo($customer_number, $activate_account_request)
    {
        $returnType = '\Advantage\Client\Model\AccountCreateResponse';
        $request = $this->customerActivateRequest($customer_number, $activate_account_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerActivate'
     *
     * @param  string $customer_number The Advantage customer number to create the login for. (required)
     * @param  \Advantage\Client\Model\ActivateAccountRequest $activate_account_request An ActivateAccountRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerActivateRequest($customer_number, $activate_account_request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerActivate'
            );
        }
        // verify the required parameter 'activate_account_request' is set
        if ($activate_account_request === null || (is_array($activate_account_request) && count($activate_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activate_account_request when calling customerActivate'
            );
        }

        $resourcePath = '/customers/{customerNumber}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($activate_account_request)) {
            $_tempBody = $activate_account_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerAddOrUpdateCustomerEmails
     *
     * Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.  If it does exist, is updated with the information provided. The email address value must be provided in each element  in the list. The email Id will be ignored if not provided.  Values in the list which are null will not be updated. On a new record, IsEmailValid will default to true.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerEmailUpdateRequest[] $customer_email_updates A list of customer email update requests. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customerAddOrUpdateCustomerEmails($customer_number, $customer_email_updates)
    {
        $this->customerAddOrUpdateCustomerEmailsWithHttpInfo($customer_number, $customer_email_updates);
    }

    /**
     * Operation customerAddOrUpdateCustomerEmailsWithHttpInfo
     *
     * Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.  If it does exist, is updated with the information provided. The email address value must be provided in each element  in the list. The email Id will be ignored if not provided.  Values in the list which are null will not be updated. On a new record, IsEmailValid will default to true.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerEmailUpdateRequest[] $customer_email_updates A list of customer email update requests. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerAddOrUpdateCustomerEmailsWithHttpInfo($customer_number, $customer_email_updates)
    {
        $returnType = '';
        $request = $this->customerAddOrUpdateCustomerEmailsRequest($customer_number, $customer_email_updates);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customerAddOrUpdateCustomerEmailsAsync
     *
     * Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.  If it does exist, is updated with the information provided. The email address value must be provided in each element  in the list. The email Id will be ignored if not provided.  Values in the list which are null will not be updated. On a new record, IsEmailValid will default to true.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerEmailUpdateRequest[] $customer_email_updates A list of customer email update requests. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerAddOrUpdateCustomerEmailsAsync($customer_number, $customer_email_updates)
    {
        return $this->customerAddOrUpdateCustomerEmailsAsyncWithHttpInfo($customer_number, $customer_email_updates)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerAddOrUpdateCustomerEmailsAsyncWithHttpInfo
     *
     * Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.  If it does exist, is updated with the information provided. The email address value must be provided in each element  in the list. The email Id will be ignored if not provided.  Values in the list which are null will not be updated. On a new record, IsEmailValid will default to true.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerEmailUpdateRequest[] $customer_email_updates A list of customer email update requests. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerAddOrUpdateCustomerEmailsAsyncWithHttpInfo($customer_number, $customer_email_updates)
    {
        $returnType = '';
        $request = $this->customerAddOrUpdateCustomerEmailsRequest($customer_number, $customer_email_updates);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerAddOrUpdateCustomerEmails'
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerEmailUpdateRequest[] $customer_email_updates A list of customer email update requests. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerAddOrUpdateCustomerEmailsRequest($customer_number, $customer_email_updates)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerAddOrUpdateCustomerEmails'
            );
        }
        // verify the required parameter 'customer_email_updates' is set
        if ($customer_email_updates === null || (is_array($customer_email_updates) && count($customer_email_updates) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_email_updates when calling customerAddOrUpdateCustomerEmails'
            );
        }

        $resourcePath = '/customers/{customerNumber}/Emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_email_updates)) {
            $_tempBody = $customer_email_updates;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreate
     *
     * Creates a new customer and optionally assigns a username/password to register the customer  on a website.  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.  By default, a search is made to see if this customer would be considered a duplicate.  If an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)  then a new customer is NOT created.  Instead, the existing customer number is returned.  Examine the address code in the response to see which address code was used.  The address code may  not be the same as the requested address code if a duplicate customer was found.
     *
     * @param  \Advantage\Client\Model\AccountCreateRequest $account_create_request An AccountCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AccountCreateResponse
     */
    public function customerCreate($account_create_request)
    {
        list($response) = $this->customerCreateWithHttpInfo($account_create_request);
        return $response;
    }

    /**
     * Operation customerCreateWithHttpInfo
     *
     * Creates a new customer and optionally assigns a username/password to register the customer  on a website.  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.  By default, a search is made to see if this customer would be considered a duplicate.  If an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)  then a new customer is NOT created.  Instead, the existing customer number is returned.  Examine the address code in the response to see which address code was used.  The address code may  not be the same as the requested address code if a duplicate customer was found.
     *
     * @param  \Advantage\Client\Model\AccountCreateRequest $account_create_request An AccountCreateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AccountCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreateWithHttpInfo($account_create_request)
    {
        $returnType = '\Advantage\Client\Model\AccountCreateResponse';
        $request = $this->customerCreateRequest($account_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AccountCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreateAsync
     *
     * Creates a new customer and optionally assigns a username/password to register the customer  on a website.  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.  By default, a search is made to see if this customer would be considered a duplicate.  If an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)  then a new customer is NOT created.  Instead, the existing customer number is returned.  Examine the address code in the response to see which address code was used.  The address code may  not be the same as the requested address code if a duplicate customer was found.
     *
     * @param  \Advantage\Client\Model\AccountCreateRequest $account_create_request An AccountCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateAsync($account_create_request)
    {
        return $this->customerCreateAsyncWithHttpInfo($account_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreateAsyncWithHttpInfo
     *
     * Creates a new customer and optionally assigns a username/password to register the customer  on a website.  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.  By default, a search is made to see if this customer would be considered a duplicate.  If an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)  then a new customer is NOT created.  Instead, the existing customer number is returned.  Examine the address code in the response to see which address code was used.  The address code may  not be the same as the requested address code if a duplicate customer was found.
     *
     * @param  \Advantage\Client\Model\AccountCreateRequest $account_create_request An AccountCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateAsyncWithHttpInfo($account_create_request)
    {
        $returnType = '\Advantage\Client\Model\AccountCreateResponse';
        $request = $this->customerCreateRequest($account_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreate'
     *
     * @param  \Advantage\Client\Model\AccountCreateRequest $account_create_request An AccountCreateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreateRequest($account_create_request)
    {
        // verify the required parameter 'account_create_request' is set
        if ($account_create_request === null || (is_array($account_create_request) && count($account_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_create_request when calling customerCreate'
            );
        }

        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($account_create_request)) {
            $_tempBody = $account_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreateRelationship
     *
     * Creates a new customer relationship in Advantage
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     * @param  \Advantage\Client\Model\CustomerRelationshipCreateRequest $create_request A CustomerRelationshipCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customerCreateRelationship($customer_number, $create_request)
    {
        $this->customerCreateRelationshipWithHttpInfo($customer_number, $create_request);
    }

    /**
     * Operation customerCreateRelationshipWithHttpInfo
     *
     * Creates a new customer relationship in Advantage
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     * @param  \Advantage\Client\Model\CustomerRelationshipCreateRequest $create_request A CustomerRelationshipCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreateRelationshipWithHttpInfo($customer_number, $create_request)
    {
        $returnType = '';
        $request = $this->customerCreateRelationshipRequest($customer_number, $create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreateRelationshipAsync
     *
     * Creates a new customer relationship in Advantage
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     * @param  \Advantage\Client\Model\CustomerRelationshipCreateRequest $create_request A CustomerRelationshipCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateRelationshipAsync($customer_number, $create_request)
    {
        return $this->customerCreateRelationshipAsyncWithHttpInfo($customer_number, $create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreateRelationshipAsyncWithHttpInfo
     *
     * Creates a new customer relationship in Advantage
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     * @param  \Advantage\Client\Model\CustomerRelationshipCreateRequest $create_request A CustomerRelationshipCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateRelationshipAsyncWithHttpInfo($customer_number, $create_request)
    {
        $returnType = '';
        $request = $this->customerCreateRelationshipRequest($customer_number, $create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreateRelationship'
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     * @param  \Advantage\Client\Model\CustomerRelationshipCreateRequest $create_request A CustomerRelationshipCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreateRelationshipRequest($customer_number, $create_request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerCreateRelationship'
            );
        }
        // verify the required parameter 'create_request' is set
        if ($create_request === null || (is_array($create_request) && count($create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_request when calling customerCreateRelationship'
            );
        }

        $resourcePath = '/customers/{customerNumber}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_request)) {
            $_tempBody = $create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGet
     *
     * Gets customer and address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Customer
     */
    public function customerGet($customer_number, $include_all_addresses = null, $include_credit_summary = null)
    {
        list($response) = $this->customerGetWithHttpInfo($customer_number, $include_all_addresses, $include_credit_summary);
        return $response;
    }

    /**
     * Operation customerGetWithHttpInfo
     *
     * Gets customer and address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetWithHttpInfo($customer_number, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\Customer';
        $request = $this->customerGetRequest($customer_number, $include_all_addresses, $include_credit_summary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAsync
     *
     * Gets customer and address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAsync($customer_number, $include_all_addresses = null, $include_credit_summary = null)
    {
        return $this->customerGetAsyncWithHttpInfo($customer_number, $include_all_addresses, $include_credit_summary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAsyncWithHttpInfo
     *
     * Gets customer and address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAsyncWithHttpInfo($customer_number, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\Customer';
        $request = $this->customerGetRequest($customer_number, $include_all_addresses, $include_credit_summary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGet'
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetRequest($customer_number, $include_all_addresses = null, $include_credit_summary = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGet'
            );
        }

        $resourcePath = '/customers/{customerNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_all_addresses !== null) {
            $queryParams['includeAllAddresses'] = ObjectSerializer::toQueryValue($include_all_addresses);
        }
        // query params
        if ($include_credit_summary !== null) {
            $queryParams['includeCreditSummary'] = ObjectSerializer::toQueryValue($include_credit_summary);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAccountBalance
     *
     * Get the account balance for the given customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency in which to present the balance. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AccountBalance
     */
    public function customerGetAccountBalance($customer_number, $currency_code = null)
    {
        list($response) = $this->customerGetAccountBalanceWithHttpInfo($customer_number, $currency_code);
        return $response;
    }

    /**
     * Operation customerGetAccountBalanceWithHttpInfo
     *
     * Get the account balance for the given customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency in which to present the balance. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAccountBalanceWithHttpInfo($customer_number, $currency_code = null)
    {
        $returnType = '\Advantage\Client\Model\AccountBalance';
        $request = $this->customerGetAccountBalanceRequest($customer_number, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAccountBalanceAsync
     *
     * Get the account balance for the given customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency in which to present the balance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAccountBalanceAsync($customer_number, $currency_code = null)
    {
        return $this->customerGetAccountBalanceAsyncWithHttpInfo($customer_number, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAccountBalanceAsyncWithHttpInfo
     *
     * Get the account balance for the given customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency in which to present the balance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAccountBalanceAsyncWithHttpInfo($customer_number, $currency_code = null)
    {
        $returnType = '\Advantage\Client\Model\AccountBalance';
        $request = $this->customerGetAccountBalanceRequest($customer_number, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAccountBalance'
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency in which to present the balance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAccountBalanceRequest($customer_number, $currency_code = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAccountBalance'
            );
        }

        $resourcePath = '/customers/{customerNumber}/account-balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetActivity
     *
     * Gets all activity for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the activity to find. (required)
     * @param  string[] $selected_fields Indicates which properties of the model should be populated.              Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.              If null, all properties in the model will be populated. (required)
     * @param  object[] $pager_order_by_fields Enumeration of order by columns (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $system_name Filter on ITM-SYS using &#39;Equal&#39; operator (optional)
     * @param  string $original_order_number Filter on ORG-ORD using &#39;Equal&#39; operator (optional)
     * @param  string $system_name_not_equal Filter on ITM-SYS using &#39;NotEqual&#39; operator (optional)
     * @param  string $system_name_less Filter on ITM-SYS using &#39;Less&#39; operator (optional)
     * @param  string $system_name_less_or_equal Filter on ITM-SYS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $system_name_greater Filter on ITM-SYS using &#39;Greater&#39; operator (optional)
     * @param  string $system_name_greater_or_equal Filter on ITM-SYS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $system_name_is_null Filter on ITM-SYS using &#39;IsNull&#39; operator (optional)
     * @param  string $system_name_is_not_null Filter on ITM-SYS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $system_name_like Filter on ITM-SYS using &#39;Like&#39; operator (optional)
     * @param  string $system_name_not_like Filter on ITM-SYS using &#39;NotLike&#39; operator (optional)
     * @param  string $system_name_contains Filter on ITM-SYS using &#39;Contains&#39; operator (optional)
     * @param  string $system_name_not_contains Filter on ITM-SYS using &#39;NotContains&#39; operator (optional)
     * @param  string $system_name_starts_with Filter on ITM-SYS using &#39;StartsWith&#39; operator (optional)
     * @param  string $system_name_not_starts_with Filter on ITM-SYS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $system_name_ends_with Filter on ITM-SYS using &#39;EndsWith&#39; operator (optional)
     * @param  string $system_name_not_ends_with Filter on ITM-SYS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $system_name_in Filter on ITM-SYS using &#39;In&#39; operator (optional)
     * @param  string $system_name_between Filter on ITM-SYS using &#39;Between&#39; operator (optional)
     * @param  string $original_order_number_not_equal Filter on ORG-ORD using &#39;NotEqual&#39; operator (optional)
     * @param  string $original_order_number_less Filter on ORG-ORD using &#39;Less&#39; operator (optional)
     * @param  string $original_order_number_less_or_equal Filter on ORG-ORD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $original_order_number_greater Filter on ORG-ORD using &#39;Greater&#39; operator (optional)
     * @param  string $original_order_number_greater_or_equal Filter on ORG-ORD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $original_order_number_is_null Filter on ORG-ORD using &#39;IsNull&#39; operator (optional)
     * @param  string $original_order_number_is_not_null Filter on ORG-ORD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $original_order_number_like Filter on ORG-ORD using &#39;Like&#39; operator (optional)
     * @param  string $original_order_number_not_like Filter on ORG-ORD using &#39;NotLike&#39; operator (optional)
     * @param  string $original_order_number_contains Filter on ORG-ORD using &#39;Contains&#39; operator (optional)
     * @param  string $original_order_number_not_contains Filter on ORG-ORD using &#39;NotContains&#39; operator (optional)
     * @param  string $original_order_number_starts_with Filter on ORG-ORD using &#39;StartsWith&#39; operator (optional)
     * @param  string $original_order_number_not_starts_with Filter on ORG-ORD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $original_order_number_ends_with Filter on ORG-ORD using &#39;EndsWith&#39; operator (optional)
     * @param  string $original_order_number_not_ends_with Filter on ORG-ORD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $original_order_number_in Filter on ORG-ORD using &#39;In&#39; operator (optional)
     * @param  string $original_order_number_between Filter on ORG-ORD using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultWithCountCustomerActivity
     */
    public function customerGetActivity($customer_number, $selected_fields, $pager_order_by_fields = null, $pager_skip = null, $pager_take = null, $system_name = null, $original_order_number = null, $system_name_not_equal = null, $system_name_less = null, $system_name_less_or_equal = null, $system_name_greater = null, $system_name_greater_or_equal = null, $system_name_is_null = null, $system_name_is_not_null = null, $system_name_like = null, $system_name_not_like = null, $system_name_contains = null, $system_name_not_contains = null, $system_name_starts_with = null, $system_name_not_starts_with = null, $system_name_ends_with = null, $system_name_not_ends_with = null, $system_name_in = null, $system_name_between = null, $original_order_number_not_equal = null, $original_order_number_less = null, $original_order_number_less_or_equal = null, $original_order_number_greater = null, $original_order_number_greater_or_equal = null, $original_order_number_is_null = null, $original_order_number_is_not_null = null, $original_order_number_like = null, $original_order_number_not_like = null, $original_order_number_contains = null, $original_order_number_not_contains = null, $original_order_number_starts_with = null, $original_order_number_not_starts_with = null, $original_order_number_ends_with = null, $original_order_number_not_ends_with = null, $original_order_number_in = null, $original_order_number_between = null)
    {
        list($response) = $this->customerGetActivityWithHttpInfo($customer_number, $selected_fields, $pager_order_by_fields, $pager_skip, $pager_take, $system_name, $original_order_number, $system_name_not_equal, $system_name_less, $system_name_less_or_equal, $system_name_greater, $system_name_greater_or_equal, $system_name_is_null, $system_name_is_not_null, $system_name_like, $system_name_not_like, $system_name_contains, $system_name_not_contains, $system_name_starts_with, $system_name_not_starts_with, $system_name_ends_with, $system_name_not_ends_with, $system_name_in, $system_name_between, $original_order_number_not_equal, $original_order_number_less, $original_order_number_less_or_equal, $original_order_number_greater, $original_order_number_greater_or_equal, $original_order_number_is_null, $original_order_number_is_not_null, $original_order_number_like, $original_order_number_not_like, $original_order_number_contains, $original_order_number_not_contains, $original_order_number_starts_with, $original_order_number_not_starts_with, $original_order_number_ends_with, $original_order_number_not_ends_with, $original_order_number_in, $original_order_number_between);
        return $response;
    }

    /**
     * Operation customerGetActivityWithHttpInfo
     *
     * Gets all activity for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the activity to find. (required)
     * @param  string[] $selected_fields Indicates which properties of the model should be populated.              Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.              If null, all properties in the model will be populated. (required)
     * @param  object[] $pager_order_by_fields Enumeration of order by columns (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $system_name Filter on ITM-SYS using &#39;Equal&#39; operator (optional)
     * @param  string $original_order_number Filter on ORG-ORD using &#39;Equal&#39; operator (optional)
     * @param  string $system_name_not_equal Filter on ITM-SYS using &#39;NotEqual&#39; operator (optional)
     * @param  string $system_name_less Filter on ITM-SYS using &#39;Less&#39; operator (optional)
     * @param  string $system_name_less_or_equal Filter on ITM-SYS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $system_name_greater Filter on ITM-SYS using &#39;Greater&#39; operator (optional)
     * @param  string $system_name_greater_or_equal Filter on ITM-SYS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $system_name_is_null Filter on ITM-SYS using &#39;IsNull&#39; operator (optional)
     * @param  string $system_name_is_not_null Filter on ITM-SYS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $system_name_like Filter on ITM-SYS using &#39;Like&#39; operator (optional)
     * @param  string $system_name_not_like Filter on ITM-SYS using &#39;NotLike&#39; operator (optional)
     * @param  string $system_name_contains Filter on ITM-SYS using &#39;Contains&#39; operator (optional)
     * @param  string $system_name_not_contains Filter on ITM-SYS using &#39;NotContains&#39; operator (optional)
     * @param  string $system_name_starts_with Filter on ITM-SYS using &#39;StartsWith&#39; operator (optional)
     * @param  string $system_name_not_starts_with Filter on ITM-SYS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $system_name_ends_with Filter on ITM-SYS using &#39;EndsWith&#39; operator (optional)
     * @param  string $system_name_not_ends_with Filter on ITM-SYS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $system_name_in Filter on ITM-SYS using &#39;In&#39; operator (optional)
     * @param  string $system_name_between Filter on ITM-SYS using &#39;Between&#39; operator (optional)
     * @param  string $original_order_number_not_equal Filter on ORG-ORD using &#39;NotEqual&#39; operator (optional)
     * @param  string $original_order_number_less Filter on ORG-ORD using &#39;Less&#39; operator (optional)
     * @param  string $original_order_number_less_or_equal Filter on ORG-ORD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $original_order_number_greater Filter on ORG-ORD using &#39;Greater&#39; operator (optional)
     * @param  string $original_order_number_greater_or_equal Filter on ORG-ORD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $original_order_number_is_null Filter on ORG-ORD using &#39;IsNull&#39; operator (optional)
     * @param  string $original_order_number_is_not_null Filter on ORG-ORD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $original_order_number_like Filter on ORG-ORD using &#39;Like&#39; operator (optional)
     * @param  string $original_order_number_not_like Filter on ORG-ORD using &#39;NotLike&#39; operator (optional)
     * @param  string $original_order_number_contains Filter on ORG-ORD using &#39;Contains&#39; operator (optional)
     * @param  string $original_order_number_not_contains Filter on ORG-ORD using &#39;NotContains&#39; operator (optional)
     * @param  string $original_order_number_starts_with Filter on ORG-ORD using &#39;StartsWith&#39; operator (optional)
     * @param  string $original_order_number_not_starts_with Filter on ORG-ORD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $original_order_number_ends_with Filter on ORG-ORD using &#39;EndsWith&#39; operator (optional)
     * @param  string $original_order_number_not_ends_with Filter on ORG-ORD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $original_order_number_in Filter on ORG-ORD using &#39;In&#39; operator (optional)
     * @param  string $original_order_number_between Filter on ORG-ORD using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultWithCountCustomerActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetActivityWithHttpInfo($customer_number, $selected_fields, $pager_order_by_fields = null, $pager_skip = null, $pager_take = null, $system_name = null, $original_order_number = null, $system_name_not_equal = null, $system_name_less = null, $system_name_less_or_equal = null, $system_name_greater = null, $system_name_greater_or_equal = null, $system_name_is_null = null, $system_name_is_not_null = null, $system_name_like = null, $system_name_not_like = null, $system_name_contains = null, $system_name_not_contains = null, $system_name_starts_with = null, $system_name_not_starts_with = null, $system_name_ends_with = null, $system_name_not_ends_with = null, $system_name_in = null, $system_name_between = null, $original_order_number_not_equal = null, $original_order_number_less = null, $original_order_number_less_or_equal = null, $original_order_number_greater = null, $original_order_number_greater_or_equal = null, $original_order_number_is_null = null, $original_order_number_is_not_null = null, $original_order_number_like = null, $original_order_number_not_like = null, $original_order_number_contains = null, $original_order_number_not_contains = null, $original_order_number_starts_with = null, $original_order_number_not_starts_with = null, $original_order_number_ends_with = null, $original_order_number_not_ends_with = null, $original_order_number_in = null, $original_order_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountCustomerActivity';
        $request = $this->customerGetActivityRequest($customer_number, $selected_fields, $pager_order_by_fields, $pager_skip, $pager_take, $system_name, $original_order_number, $system_name_not_equal, $system_name_less, $system_name_less_or_equal, $system_name_greater, $system_name_greater_or_equal, $system_name_is_null, $system_name_is_not_null, $system_name_like, $system_name_not_like, $system_name_contains, $system_name_not_contains, $system_name_starts_with, $system_name_not_starts_with, $system_name_ends_with, $system_name_not_ends_with, $system_name_in, $system_name_between, $original_order_number_not_equal, $original_order_number_less, $original_order_number_less_or_equal, $original_order_number_greater, $original_order_number_greater_or_equal, $original_order_number_is_null, $original_order_number_is_not_null, $original_order_number_like, $original_order_number_not_like, $original_order_number_contains, $original_order_number_not_contains, $original_order_number_starts_with, $original_order_number_not_starts_with, $original_order_number_ends_with, $original_order_number_not_ends_with, $original_order_number_in, $original_order_number_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultWithCountCustomerActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetActivityAsync
     *
     * Gets all activity for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the activity to find. (required)
     * @param  string[] $selected_fields Indicates which properties of the model should be populated.              Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.              If null, all properties in the model will be populated. (required)
     * @param  object[] $pager_order_by_fields Enumeration of order by columns (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $system_name Filter on ITM-SYS using &#39;Equal&#39; operator (optional)
     * @param  string $original_order_number Filter on ORG-ORD using &#39;Equal&#39; operator (optional)
     * @param  string $system_name_not_equal Filter on ITM-SYS using &#39;NotEqual&#39; operator (optional)
     * @param  string $system_name_less Filter on ITM-SYS using &#39;Less&#39; operator (optional)
     * @param  string $system_name_less_or_equal Filter on ITM-SYS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $system_name_greater Filter on ITM-SYS using &#39;Greater&#39; operator (optional)
     * @param  string $system_name_greater_or_equal Filter on ITM-SYS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $system_name_is_null Filter on ITM-SYS using &#39;IsNull&#39; operator (optional)
     * @param  string $system_name_is_not_null Filter on ITM-SYS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $system_name_like Filter on ITM-SYS using &#39;Like&#39; operator (optional)
     * @param  string $system_name_not_like Filter on ITM-SYS using &#39;NotLike&#39; operator (optional)
     * @param  string $system_name_contains Filter on ITM-SYS using &#39;Contains&#39; operator (optional)
     * @param  string $system_name_not_contains Filter on ITM-SYS using &#39;NotContains&#39; operator (optional)
     * @param  string $system_name_starts_with Filter on ITM-SYS using &#39;StartsWith&#39; operator (optional)
     * @param  string $system_name_not_starts_with Filter on ITM-SYS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $system_name_ends_with Filter on ITM-SYS using &#39;EndsWith&#39; operator (optional)
     * @param  string $system_name_not_ends_with Filter on ITM-SYS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $system_name_in Filter on ITM-SYS using &#39;In&#39; operator (optional)
     * @param  string $system_name_between Filter on ITM-SYS using &#39;Between&#39; operator (optional)
     * @param  string $original_order_number_not_equal Filter on ORG-ORD using &#39;NotEqual&#39; operator (optional)
     * @param  string $original_order_number_less Filter on ORG-ORD using &#39;Less&#39; operator (optional)
     * @param  string $original_order_number_less_or_equal Filter on ORG-ORD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $original_order_number_greater Filter on ORG-ORD using &#39;Greater&#39; operator (optional)
     * @param  string $original_order_number_greater_or_equal Filter on ORG-ORD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $original_order_number_is_null Filter on ORG-ORD using &#39;IsNull&#39; operator (optional)
     * @param  string $original_order_number_is_not_null Filter on ORG-ORD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $original_order_number_like Filter on ORG-ORD using &#39;Like&#39; operator (optional)
     * @param  string $original_order_number_not_like Filter on ORG-ORD using &#39;NotLike&#39; operator (optional)
     * @param  string $original_order_number_contains Filter on ORG-ORD using &#39;Contains&#39; operator (optional)
     * @param  string $original_order_number_not_contains Filter on ORG-ORD using &#39;NotContains&#39; operator (optional)
     * @param  string $original_order_number_starts_with Filter on ORG-ORD using &#39;StartsWith&#39; operator (optional)
     * @param  string $original_order_number_not_starts_with Filter on ORG-ORD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $original_order_number_ends_with Filter on ORG-ORD using &#39;EndsWith&#39; operator (optional)
     * @param  string $original_order_number_not_ends_with Filter on ORG-ORD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $original_order_number_in Filter on ORG-ORD using &#39;In&#39; operator (optional)
     * @param  string $original_order_number_between Filter on ORG-ORD using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetActivityAsync($customer_number, $selected_fields, $pager_order_by_fields = null, $pager_skip = null, $pager_take = null, $system_name = null, $original_order_number = null, $system_name_not_equal = null, $system_name_less = null, $system_name_less_or_equal = null, $system_name_greater = null, $system_name_greater_or_equal = null, $system_name_is_null = null, $system_name_is_not_null = null, $system_name_like = null, $system_name_not_like = null, $system_name_contains = null, $system_name_not_contains = null, $system_name_starts_with = null, $system_name_not_starts_with = null, $system_name_ends_with = null, $system_name_not_ends_with = null, $system_name_in = null, $system_name_between = null, $original_order_number_not_equal = null, $original_order_number_less = null, $original_order_number_less_or_equal = null, $original_order_number_greater = null, $original_order_number_greater_or_equal = null, $original_order_number_is_null = null, $original_order_number_is_not_null = null, $original_order_number_like = null, $original_order_number_not_like = null, $original_order_number_contains = null, $original_order_number_not_contains = null, $original_order_number_starts_with = null, $original_order_number_not_starts_with = null, $original_order_number_ends_with = null, $original_order_number_not_ends_with = null, $original_order_number_in = null, $original_order_number_between = null)
    {
        return $this->customerGetActivityAsyncWithHttpInfo($customer_number, $selected_fields, $pager_order_by_fields, $pager_skip, $pager_take, $system_name, $original_order_number, $system_name_not_equal, $system_name_less, $system_name_less_or_equal, $system_name_greater, $system_name_greater_or_equal, $system_name_is_null, $system_name_is_not_null, $system_name_like, $system_name_not_like, $system_name_contains, $system_name_not_contains, $system_name_starts_with, $system_name_not_starts_with, $system_name_ends_with, $system_name_not_ends_with, $system_name_in, $system_name_between, $original_order_number_not_equal, $original_order_number_less, $original_order_number_less_or_equal, $original_order_number_greater, $original_order_number_greater_or_equal, $original_order_number_is_null, $original_order_number_is_not_null, $original_order_number_like, $original_order_number_not_like, $original_order_number_contains, $original_order_number_not_contains, $original_order_number_starts_with, $original_order_number_not_starts_with, $original_order_number_ends_with, $original_order_number_not_ends_with, $original_order_number_in, $original_order_number_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetActivityAsyncWithHttpInfo
     *
     * Gets all activity for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the activity to find. (required)
     * @param  string[] $selected_fields Indicates which properties of the model should be populated.              Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.              If null, all properties in the model will be populated. (required)
     * @param  object[] $pager_order_by_fields Enumeration of order by columns (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $system_name Filter on ITM-SYS using &#39;Equal&#39; operator (optional)
     * @param  string $original_order_number Filter on ORG-ORD using &#39;Equal&#39; operator (optional)
     * @param  string $system_name_not_equal Filter on ITM-SYS using &#39;NotEqual&#39; operator (optional)
     * @param  string $system_name_less Filter on ITM-SYS using &#39;Less&#39; operator (optional)
     * @param  string $system_name_less_or_equal Filter on ITM-SYS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $system_name_greater Filter on ITM-SYS using &#39;Greater&#39; operator (optional)
     * @param  string $system_name_greater_or_equal Filter on ITM-SYS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $system_name_is_null Filter on ITM-SYS using &#39;IsNull&#39; operator (optional)
     * @param  string $system_name_is_not_null Filter on ITM-SYS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $system_name_like Filter on ITM-SYS using &#39;Like&#39; operator (optional)
     * @param  string $system_name_not_like Filter on ITM-SYS using &#39;NotLike&#39; operator (optional)
     * @param  string $system_name_contains Filter on ITM-SYS using &#39;Contains&#39; operator (optional)
     * @param  string $system_name_not_contains Filter on ITM-SYS using &#39;NotContains&#39; operator (optional)
     * @param  string $system_name_starts_with Filter on ITM-SYS using &#39;StartsWith&#39; operator (optional)
     * @param  string $system_name_not_starts_with Filter on ITM-SYS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $system_name_ends_with Filter on ITM-SYS using &#39;EndsWith&#39; operator (optional)
     * @param  string $system_name_not_ends_with Filter on ITM-SYS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $system_name_in Filter on ITM-SYS using &#39;In&#39; operator (optional)
     * @param  string $system_name_between Filter on ITM-SYS using &#39;Between&#39; operator (optional)
     * @param  string $original_order_number_not_equal Filter on ORG-ORD using &#39;NotEqual&#39; operator (optional)
     * @param  string $original_order_number_less Filter on ORG-ORD using &#39;Less&#39; operator (optional)
     * @param  string $original_order_number_less_or_equal Filter on ORG-ORD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $original_order_number_greater Filter on ORG-ORD using &#39;Greater&#39; operator (optional)
     * @param  string $original_order_number_greater_or_equal Filter on ORG-ORD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $original_order_number_is_null Filter on ORG-ORD using &#39;IsNull&#39; operator (optional)
     * @param  string $original_order_number_is_not_null Filter on ORG-ORD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $original_order_number_like Filter on ORG-ORD using &#39;Like&#39; operator (optional)
     * @param  string $original_order_number_not_like Filter on ORG-ORD using &#39;NotLike&#39; operator (optional)
     * @param  string $original_order_number_contains Filter on ORG-ORD using &#39;Contains&#39; operator (optional)
     * @param  string $original_order_number_not_contains Filter on ORG-ORD using &#39;NotContains&#39; operator (optional)
     * @param  string $original_order_number_starts_with Filter on ORG-ORD using &#39;StartsWith&#39; operator (optional)
     * @param  string $original_order_number_not_starts_with Filter on ORG-ORD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $original_order_number_ends_with Filter on ORG-ORD using &#39;EndsWith&#39; operator (optional)
     * @param  string $original_order_number_not_ends_with Filter on ORG-ORD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $original_order_number_in Filter on ORG-ORD using &#39;In&#39; operator (optional)
     * @param  string $original_order_number_between Filter on ORG-ORD using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetActivityAsyncWithHttpInfo($customer_number, $selected_fields, $pager_order_by_fields = null, $pager_skip = null, $pager_take = null, $system_name = null, $original_order_number = null, $system_name_not_equal = null, $system_name_less = null, $system_name_less_or_equal = null, $system_name_greater = null, $system_name_greater_or_equal = null, $system_name_is_null = null, $system_name_is_not_null = null, $system_name_like = null, $system_name_not_like = null, $system_name_contains = null, $system_name_not_contains = null, $system_name_starts_with = null, $system_name_not_starts_with = null, $system_name_ends_with = null, $system_name_not_ends_with = null, $system_name_in = null, $system_name_between = null, $original_order_number_not_equal = null, $original_order_number_less = null, $original_order_number_less_or_equal = null, $original_order_number_greater = null, $original_order_number_greater_or_equal = null, $original_order_number_is_null = null, $original_order_number_is_not_null = null, $original_order_number_like = null, $original_order_number_not_like = null, $original_order_number_contains = null, $original_order_number_not_contains = null, $original_order_number_starts_with = null, $original_order_number_not_starts_with = null, $original_order_number_ends_with = null, $original_order_number_not_ends_with = null, $original_order_number_in = null, $original_order_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountCustomerActivity';
        $request = $this->customerGetActivityRequest($customer_number, $selected_fields, $pager_order_by_fields, $pager_skip, $pager_take, $system_name, $original_order_number, $system_name_not_equal, $system_name_less, $system_name_less_or_equal, $system_name_greater, $system_name_greater_or_equal, $system_name_is_null, $system_name_is_not_null, $system_name_like, $system_name_not_like, $system_name_contains, $system_name_not_contains, $system_name_starts_with, $system_name_not_starts_with, $system_name_ends_with, $system_name_not_ends_with, $system_name_in, $system_name_between, $original_order_number_not_equal, $original_order_number_less, $original_order_number_less_or_equal, $original_order_number_greater, $original_order_number_greater_or_equal, $original_order_number_is_null, $original_order_number_is_not_null, $original_order_number_like, $original_order_number_not_like, $original_order_number_contains, $original_order_number_not_contains, $original_order_number_starts_with, $original_order_number_not_starts_with, $original_order_number_ends_with, $original_order_number_not_ends_with, $original_order_number_in, $original_order_number_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetActivity'
     *
     * @param  string $customer_number The Advantage customer number of the activity to find. (required)
     * @param  string[] $selected_fields Indicates which properties of the model should be populated.              Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.              If null, all properties in the model will be populated. (required)
     * @param  object[] $pager_order_by_fields Enumeration of order by columns (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $system_name Filter on ITM-SYS using &#39;Equal&#39; operator (optional)
     * @param  string $original_order_number Filter on ORG-ORD using &#39;Equal&#39; operator (optional)
     * @param  string $system_name_not_equal Filter on ITM-SYS using &#39;NotEqual&#39; operator (optional)
     * @param  string $system_name_less Filter on ITM-SYS using &#39;Less&#39; operator (optional)
     * @param  string $system_name_less_or_equal Filter on ITM-SYS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $system_name_greater Filter on ITM-SYS using &#39;Greater&#39; operator (optional)
     * @param  string $system_name_greater_or_equal Filter on ITM-SYS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $system_name_is_null Filter on ITM-SYS using &#39;IsNull&#39; operator (optional)
     * @param  string $system_name_is_not_null Filter on ITM-SYS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $system_name_like Filter on ITM-SYS using &#39;Like&#39; operator (optional)
     * @param  string $system_name_not_like Filter on ITM-SYS using &#39;NotLike&#39; operator (optional)
     * @param  string $system_name_contains Filter on ITM-SYS using &#39;Contains&#39; operator (optional)
     * @param  string $system_name_not_contains Filter on ITM-SYS using &#39;NotContains&#39; operator (optional)
     * @param  string $system_name_starts_with Filter on ITM-SYS using &#39;StartsWith&#39; operator (optional)
     * @param  string $system_name_not_starts_with Filter on ITM-SYS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $system_name_ends_with Filter on ITM-SYS using &#39;EndsWith&#39; operator (optional)
     * @param  string $system_name_not_ends_with Filter on ITM-SYS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $system_name_in Filter on ITM-SYS using &#39;In&#39; operator (optional)
     * @param  string $system_name_between Filter on ITM-SYS using &#39;Between&#39; operator (optional)
     * @param  string $original_order_number_not_equal Filter on ORG-ORD using &#39;NotEqual&#39; operator (optional)
     * @param  string $original_order_number_less Filter on ORG-ORD using &#39;Less&#39; operator (optional)
     * @param  string $original_order_number_less_or_equal Filter on ORG-ORD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $original_order_number_greater Filter on ORG-ORD using &#39;Greater&#39; operator (optional)
     * @param  string $original_order_number_greater_or_equal Filter on ORG-ORD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $original_order_number_is_null Filter on ORG-ORD using &#39;IsNull&#39; operator (optional)
     * @param  string $original_order_number_is_not_null Filter on ORG-ORD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $original_order_number_like Filter on ORG-ORD using &#39;Like&#39; operator (optional)
     * @param  string $original_order_number_not_like Filter on ORG-ORD using &#39;NotLike&#39; operator (optional)
     * @param  string $original_order_number_contains Filter on ORG-ORD using &#39;Contains&#39; operator (optional)
     * @param  string $original_order_number_not_contains Filter on ORG-ORD using &#39;NotContains&#39; operator (optional)
     * @param  string $original_order_number_starts_with Filter on ORG-ORD using &#39;StartsWith&#39; operator (optional)
     * @param  string $original_order_number_not_starts_with Filter on ORG-ORD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $original_order_number_ends_with Filter on ORG-ORD using &#39;EndsWith&#39; operator (optional)
     * @param  string $original_order_number_not_ends_with Filter on ORG-ORD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $original_order_number_in Filter on ORG-ORD using &#39;In&#39; operator (optional)
     * @param  string $original_order_number_between Filter on ORG-ORD using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetActivityRequest($customer_number, $selected_fields, $pager_order_by_fields = null, $pager_skip = null, $pager_take = null, $system_name = null, $original_order_number = null, $system_name_not_equal = null, $system_name_less = null, $system_name_less_or_equal = null, $system_name_greater = null, $system_name_greater_or_equal = null, $system_name_is_null = null, $system_name_is_not_null = null, $system_name_like = null, $system_name_not_like = null, $system_name_contains = null, $system_name_not_contains = null, $system_name_starts_with = null, $system_name_not_starts_with = null, $system_name_ends_with = null, $system_name_not_ends_with = null, $system_name_in = null, $system_name_between = null, $original_order_number_not_equal = null, $original_order_number_less = null, $original_order_number_less_or_equal = null, $original_order_number_greater = null, $original_order_number_greater_or_equal = null, $original_order_number_is_null = null, $original_order_number_is_not_null = null, $original_order_number_like = null, $original_order_number_not_like = null, $original_order_number_contains = null, $original_order_number_not_contains = null, $original_order_number_starts_with = null, $original_order_number_not_starts_with = null, $original_order_number_ends_with = null, $original_order_number_not_ends_with = null, $original_order_number_in = null, $original_order_number_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetActivity'
            );
        }
        // verify the required parameter 'selected_fields' is set
        if ($selected_fields === null || (is_array($selected_fields) && count($selected_fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selected_fields when calling customerGetActivity'
            );
        }

        $resourcePath = '/customers/{customerNumber}/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($selected_fields)) {
            $queryParams['selectedFields'] = $selected_fields;
        } else
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = ObjectSerializer::toQueryValue($selected_fields);
        }
        // query params
        if (is_array($pager_order_by_fields)) {
            $queryParams['pager.orderByFields'] = $pager_order_by_fields;
        } else
        if ($pager_order_by_fields !== null) {
            $queryParams['pager.orderByFields'] = ObjectSerializer::toQueryValue($pager_order_by_fields);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($system_name !== null) {
            $queryParams['SystemName'] = ObjectSerializer::toQueryValue($system_name);
        }
        // query params
        if ($original_order_number !== null) {
            $queryParams['OriginalOrderNumber'] = ObjectSerializer::toQueryValue($original_order_number);
        }
        // query params
        if ($system_name_not_equal !== null) {
            $queryParams['SystemName.NotEqual'] = ObjectSerializer::toQueryValue($system_name_not_equal);
        }
        // query params
        if ($system_name_less !== null) {
            $queryParams['SystemName.Less'] = ObjectSerializer::toQueryValue($system_name_less);
        }
        // query params
        if ($system_name_less_or_equal !== null) {
            $queryParams['SystemName.LessOrEqual'] = ObjectSerializer::toQueryValue($system_name_less_or_equal);
        }
        // query params
        if ($system_name_greater !== null) {
            $queryParams['SystemName.Greater'] = ObjectSerializer::toQueryValue($system_name_greater);
        }
        // query params
        if ($system_name_greater_or_equal !== null) {
            $queryParams['SystemName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($system_name_greater_or_equal);
        }
        // query params
        if ($system_name_is_null !== null) {
            $queryParams['SystemName.IsNull'] = ObjectSerializer::toQueryValue($system_name_is_null);
        }
        // query params
        if ($system_name_is_not_null !== null) {
            $queryParams['SystemName.IsNotNull'] = ObjectSerializer::toQueryValue($system_name_is_not_null);
        }
        // query params
        if ($system_name_like !== null) {
            $queryParams['SystemName.Like'] = ObjectSerializer::toQueryValue($system_name_like);
        }
        // query params
        if ($system_name_not_like !== null) {
            $queryParams['SystemName.NotLike'] = ObjectSerializer::toQueryValue($system_name_not_like);
        }
        // query params
        if ($system_name_contains !== null) {
            $queryParams['SystemName.Contains'] = ObjectSerializer::toQueryValue($system_name_contains);
        }
        // query params
        if ($system_name_not_contains !== null) {
            $queryParams['SystemName.NotContains'] = ObjectSerializer::toQueryValue($system_name_not_contains);
        }
        // query params
        if ($system_name_starts_with !== null) {
            $queryParams['SystemName.StartsWith'] = ObjectSerializer::toQueryValue($system_name_starts_with);
        }
        // query params
        if ($system_name_not_starts_with !== null) {
            $queryParams['SystemName.NotStartsWith'] = ObjectSerializer::toQueryValue($system_name_not_starts_with);
        }
        // query params
        if ($system_name_ends_with !== null) {
            $queryParams['SystemName.EndsWith'] = ObjectSerializer::toQueryValue($system_name_ends_with);
        }
        // query params
        if ($system_name_not_ends_with !== null) {
            $queryParams['SystemName.NotEndsWith'] = ObjectSerializer::toQueryValue($system_name_not_ends_with);
        }
        // query params
        if ($system_name_in !== null) {
            $queryParams['SystemName.In'] = ObjectSerializer::toQueryValue($system_name_in);
        }
        // query params
        if ($system_name_between !== null) {
            $queryParams['SystemName.Between'] = ObjectSerializer::toQueryValue($system_name_between);
        }
        // query params
        if ($original_order_number_not_equal !== null) {
            $queryParams['OriginalOrderNumber.NotEqual'] = ObjectSerializer::toQueryValue($original_order_number_not_equal);
        }
        // query params
        if ($original_order_number_less !== null) {
            $queryParams['OriginalOrderNumber.Less'] = ObjectSerializer::toQueryValue($original_order_number_less);
        }
        // query params
        if ($original_order_number_less_or_equal !== null) {
            $queryParams['OriginalOrderNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($original_order_number_less_or_equal);
        }
        // query params
        if ($original_order_number_greater !== null) {
            $queryParams['OriginalOrderNumber.Greater'] = ObjectSerializer::toQueryValue($original_order_number_greater);
        }
        // query params
        if ($original_order_number_greater_or_equal !== null) {
            $queryParams['OriginalOrderNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($original_order_number_greater_or_equal);
        }
        // query params
        if ($original_order_number_is_null !== null) {
            $queryParams['OriginalOrderNumber.IsNull'] = ObjectSerializer::toQueryValue($original_order_number_is_null);
        }
        // query params
        if ($original_order_number_is_not_null !== null) {
            $queryParams['OriginalOrderNumber.IsNotNull'] = ObjectSerializer::toQueryValue($original_order_number_is_not_null);
        }
        // query params
        if ($original_order_number_like !== null) {
            $queryParams['OriginalOrderNumber.Like'] = ObjectSerializer::toQueryValue($original_order_number_like);
        }
        // query params
        if ($original_order_number_not_like !== null) {
            $queryParams['OriginalOrderNumber.NotLike'] = ObjectSerializer::toQueryValue($original_order_number_not_like);
        }
        // query params
        if ($original_order_number_contains !== null) {
            $queryParams['OriginalOrderNumber.Contains'] = ObjectSerializer::toQueryValue($original_order_number_contains);
        }
        // query params
        if ($original_order_number_not_contains !== null) {
            $queryParams['OriginalOrderNumber.NotContains'] = ObjectSerializer::toQueryValue($original_order_number_not_contains);
        }
        // query params
        if ($original_order_number_starts_with !== null) {
            $queryParams['OriginalOrderNumber.StartsWith'] = ObjectSerializer::toQueryValue($original_order_number_starts_with);
        }
        // query params
        if ($original_order_number_not_starts_with !== null) {
            $queryParams['OriginalOrderNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($original_order_number_not_starts_with);
        }
        // query params
        if ($original_order_number_ends_with !== null) {
            $queryParams['OriginalOrderNumber.EndsWith'] = ObjectSerializer::toQueryValue($original_order_number_ends_with);
        }
        // query params
        if ($original_order_number_not_ends_with !== null) {
            $queryParams['OriginalOrderNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($original_order_number_not_ends_with);
        }
        // query params
        if ($original_order_number_in !== null) {
            $queryParams['OriginalOrderNumber.In'] = ObjectSerializer::toQueryValue($original_order_number_in);
        }
        // query params
        if ($original_order_number_between !== null) {
            $queryParams['OriginalOrderNumber.Between'] = ObjectSerializer::toQueryValue($original_order_number_between);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAddress
     *
     * Find and return addresses for a given customer number and address code.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  string $address_code The address code of the address to return. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAddress
     */
    public function customerGetAddress($customer_number, $address_code)
    {
        list($response) = $this->customerGetAddressWithHttpInfo($customer_number, $address_code);
        return $response;
    }

    /**
     * Operation customerGetAddressWithHttpInfo
     *
     * Find and return addresses for a given customer number and address code.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  string $address_code The address code of the address to return. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAddressWithHttpInfo($customer_number, $address_code)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerGetAddressRequest($customer_number, $address_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAddressAsync
     *
     * Find and return addresses for a given customer number and address code.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  string $address_code The address code of the address to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAddressAsync($customer_number, $address_code)
    {
        return $this->customerGetAddressAsyncWithHttpInfo($customer_number, $address_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAddressAsyncWithHttpInfo
     *
     * Find and return addresses for a given customer number and address code.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  string $address_code The address code of the address to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAddressAsyncWithHttpInfo($customer_number, $address_code)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerGetAddressRequest($customer_number, $address_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAddress'
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     * @param  string $address_code The address code of the address to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAddressRequest($customer_number, $address_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAddress'
            );
        }
        // verify the required parameter 'address_code' is set
        if ($address_code === null || (is_array($address_code) && count($address_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_code when calling customerGetAddress'
            );
        }

        $resourcePath = '/customers/{customerNumber}/addresses/{addressCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($address_code !== null) {
            $resourcePath = str_replace(
                '{' . 'addressCode' . '}',
                ObjectSerializer::toPathValue($address_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAddresses
     *
     * Gets all of the addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the addresses to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAddress[]
     */
    public function customerGetAddresses($customer_number)
    {
        list($response) = $this->customerGetAddressesWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetAddressesWithHttpInfo
     *
     * Gets all of the addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the addresses to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAddressesWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress[]';
        $request = $this->customerGetAddressesRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAddressesAsync
     *
     * Gets all of the addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAddressesAsync($customer_number)
    {
        return $this->customerGetAddressesAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAddressesAsyncWithHttpInfo
     *
     * Gets all of the addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAddressesAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress[]';
        $request = $this->customerGetAddressesRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAddresses'
     *
     * @param  string $customer_number The Advantage customer number of the addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAddressesRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAddresses'
            );
        }

        $resourcePath = '/customers/{customerNumber}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAvailableCreditAmount
     *
     * Gets the amount of credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency to filter by (required)
     * @param  string[] $organization_code Organization to filter by. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AccountBalance
     */
    public function customerGetAvailableCreditAmount($customer_number, $currency_code, $organization_code = null)
    {
        list($response) = $this->customerGetAvailableCreditAmountWithHttpInfo($customer_number, $currency_code, $organization_code);
        return $response;
    }

    /**
     * Operation customerGetAvailableCreditAmountWithHttpInfo
     *
     * Gets the amount of credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency to filter by (required)
     * @param  string[] $organization_code Organization to filter by. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAvailableCreditAmountWithHttpInfo($customer_number, $currency_code, $organization_code = null)
    {
        $returnType = '\Advantage\Client\Model\AccountBalance';
        $request = $this->customerGetAvailableCreditAmountRequest($customer_number, $currency_code, $organization_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAvailableCreditAmountAsync
     *
     * Gets the amount of credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency to filter by (required)
     * @param  string[] $organization_code Organization to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAvailableCreditAmountAsync($customer_number, $currency_code, $organization_code = null)
    {
        return $this->customerGetAvailableCreditAmountAsyncWithHttpInfo($customer_number, $currency_code, $organization_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAvailableCreditAmountAsyncWithHttpInfo
     *
     * Gets the amount of credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency to filter by (required)
     * @param  string[] $organization_code Organization to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAvailableCreditAmountAsyncWithHttpInfo($customer_number, $currency_code, $organization_code = null)
    {
        $returnType = '\Advantage\Client\Model\AccountBalance';
        $request = $this->customerGetAvailableCreditAmountRequest($customer_number, $currency_code, $organization_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAvailableCreditAmount'
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $currency_code The currency code of the currency to filter by (required)
     * @param  string[] $organization_code Organization to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAvailableCreditAmountRequest($customer_number, $currency_code, $organization_code = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAvailableCreditAmount'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling customerGetAvailableCreditAmount'
            );
        }

        $resourcePath = '/customers/{customerNumber}/available-credits/{currencyCode}/total';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($organization_code)) {
            $queryParams['organizationCode'] = $organization_code;
        } else
        if ($organization_code !== null) {
            $queryParams['organizationCode'] = ObjectSerializer::toQueryValue($organization_code);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetByBankAccount
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $bank_id The bank ID (routing number) (required)
     * @param  string $account_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to direct debit payments using the given direct debit payment code (DDP-CDE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCustomer
     */
    public function customerGetByBankAccount($bank_id, $account_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        list($response) = $this->customerGetByBankAccountWithHttpInfo($bank_id, $account_number, $payment_method_code, $include_all_addresses, $include_credit_summary);
        return $response;
    }

    /**
     * Operation customerGetByBankAccountWithHttpInfo
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $bank_id The bank ID (routing number) (required)
     * @param  string $account_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to direct debit payments using the given direct debit payment code (DDP-CDE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetByBankAccountWithHttpInfo($bank_id, $account_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerGetByBankAccountRequest($bank_id, $account_number, $payment_method_code, $include_all_addresses, $include_credit_summary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetByBankAccountAsync
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $bank_id The bank ID (routing number) (required)
     * @param  string $account_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to direct debit payments using the given direct debit payment code (DDP-CDE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetByBankAccountAsync($bank_id, $account_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        return $this->customerGetByBankAccountAsyncWithHttpInfo($bank_id, $account_number, $payment_method_code, $include_all_addresses, $include_credit_summary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetByBankAccountAsyncWithHttpInfo
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $bank_id The bank ID (routing number) (required)
     * @param  string $account_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to direct debit payments using the given direct debit payment code (DDP-CDE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetByBankAccountAsyncWithHttpInfo($bank_id, $account_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerGetByBankAccountRequest($bank_id, $account_number, $payment_method_code, $include_all_addresses, $include_credit_summary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetByBankAccount'
     *
     * @param  string $bank_id The bank ID (routing number) (required)
     * @param  string $account_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to direct debit payments using the given direct debit payment code (DDP-CDE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetByBankAccountRequest($bank_id, $account_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        // verify the required parameter 'bank_id' is set
        if ($bank_id === null || (is_array($bank_id) && count($bank_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_id when calling customerGetByBankAccount'
            );
        }
        // verify the required parameter 'account_number' is set
        if ($account_number === null || (is_array($account_number) && count($account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_number when calling customerGetByBankAccount'
            );
        }
        // verify the required parameter 'payment_method_code' is set
        if ($payment_method_code === null || (is_array($payment_method_code) && count($payment_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_code when calling customerGetByBankAccount'
            );
        }

        $resourcePath = '/customers/by-bank-account/{bankId}/{accountNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($payment_method_code !== null) {
            $queryParams['paymentMethodCode'] = ObjectSerializer::toQueryValue($payment_method_code);
        }
        // query params
        if ($include_all_addresses !== null) {
            $queryParams['includeAllAddresses'] = ObjectSerializer::toQueryValue($include_all_addresses);
        }
        // query params
        if ($include_credit_summary !== null) {
            $queryParams['includeCreditSummary'] = ObjectSerializer::toQueryValue($include_credit_summary);
        }

        // path params
        if ($bank_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankId' . '}',
                ObjectSerializer::toPathValue($bank_id),
                $resourcePath
            );
        }
        // path params
        if ($account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNumber' . '}',
                ObjectSerializer::toPathValue($account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetByCreditCard
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $card_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to the given card type (PAY-CODE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCustomer
     */
    public function customerGetByCreditCard($card_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        list($response) = $this->customerGetByCreditCardWithHttpInfo($card_number, $payment_method_code, $include_all_addresses, $include_credit_summary);
        return $response;
    }

    /**
     * Operation customerGetByCreditCardWithHttpInfo
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $card_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to the given card type (PAY-CODE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetByCreditCardWithHttpInfo($card_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerGetByCreditCardRequest($card_number, $payment_method_code, $include_all_addresses, $include_credit_summary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetByCreditCardAsync
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $card_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to the given card type (PAY-CODE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetByCreditCardAsync($card_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        return $this->customerGetByCreditCardAsyncWithHttpInfo($card_number, $payment_method_code, $include_all_addresses, $include_credit_summary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetByCreditCardAsyncWithHttpInfo
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change.
     *
     * @param  string $card_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to the given card type (PAY-CODE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetByCreditCardAsyncWithHttpInfo($card_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerGetByCreditCardRequest($card_number, $payment_method_code, $include_all_addresses, $include_credit_summary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetByCreditCard'
     *
     * @param  string $card_number The account number at the given bank (required)
     * @param  string $payment_method_code Limit search to the given card type (PAY-CODE). (required)
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the customer&#39;s default address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetByCreditCardRequest($card_number, $payment_method_code, $include_all_addresses = null, $include_credit_summary = null)
    {
        // verify the required parameter 'card_number' is set
        if ($card_number === null || (is_array($card_number) && count($card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_number when calling customerGetByCreditCard'
            );
        }
        // verify the required parameter 'payment_method_code' is set
        if ($payment_method_code === null || (is_array($payment_method_code) && count($payment_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_code when calling customerGetByCreditCard'
            );
        }

        $resourcePath = '/customers/by-credit-card/{cardNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($payment_method_code !== null) {
            $queryParams['paymentMethodCode'] = ObjectSerializer::toQueryValue($payment_method_code);
        }
        // query params
        if ($include_all_addresses !== null) {
            $queryParams['includeAllAddresses'] = ObjectSerializer::toQueryValue($include_all_addresses);
        }
        // query params
        if ($include_credit_summary !== null) {
            $queryParams['includeCreditSummary'] = ObjectSerializer::toQueryValue($include_credit_summary);
        }

        // path params
        if ($card_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cardNumber' . '}',
                ObjectSerializer::toPathValue($card_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerActivityAr
     *
     * Gets all A/R tied to a specific customer activity.
     *
     * @param  string $system_module System module for the given customer activity (required)
     * @param  string $activity_id Activity Id (required)
     * @param  int $activity_term Activity Term (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerActivityAr[]
     */
    public function customerGetCustomerActivityAr($system_module, $activity_id, $activity_term)
    {
        list($response) = $this->customerGetCustomerActivityArWithHttpInfo($system_module, $activity_id, $activity_term);
        return $response;
    }

    /**
     * Operation customerGetCustomerActivityArWithHttpInfo
     *
     * Gets all A/R tied to a specific customer activity.
     *
     * @param  string $system_module System module for the given customer activity (required)
     * @param  string $activity_id Activity Id (required)
     * @param  int $activity_term Activity Term (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerActivityAr[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerActivityArWithHttpInfo($system_module, $activity_id, $activity_term)
    {
        $returnType = '\Advantage\Client\Model\CustomerActivityAr[]';
        $request = $this->customerGetCustomerActivityArRequest($system_module, $activity_id, $activity_term);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerActivityAr[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerActivityArAsync
     *
     * Gets all A/R tied to a specific customer activity.
     *
     * @param  string $system_module System module for the given customer activity (required)
     * @param  string $activity_id Activity Id (required)
     * @param  int $activity_term Activity Term (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerActivityArAsync($system_module, $activity_id, $activity_term)
    {
        return $this->customerGetCustomerActivityArAsyncWithHttpInfo($system_module, $activity_id, $activity_term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerActivityArAsyncWithHttpInfo
     *
     * Gets all A/R tied to a specific customer activity.
     *
     * @param  string $system_module System module for the given customer activity (required)
     * @param  string $activity_id Activity Id (required)
     * @param  int $activity_term Activity Term (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerActivityArAsyncWithHttpInfo($system_module, $activity_id, $activity_term)
    {
        $returnType = '\Advantage\Client\Model\CustomerActivityAr[]';
        $request = $this->customerGetCustomerActivityArRequest($system_module, $activity_id, $activity_term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerActivityAr'
     *
     * @param  string $system_module System module for the given customer activity (required)
     * @param  string $activity_id Activity Id (required)
     * @param  int $activity_term Activity Term (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerActivityArRequest($system_module, $activity_id, $activity_term)
    {
        // verify the required parameter 'system_module' is set
        if ($system_module === null || (is_array($system_module) && count($system_module) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_module when calling customerGetCustomerActivityAr'
            );
        }
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null || (is_array($activity_id) && count($activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_id when calling customerGetCustomerActivityAr'
            );
        }
        // verify the required parameter 'activity_term' is set
        if ($activity_term === null || (is_array($activity_term) && count($activity_term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_term when calling customerGetCustomerActivityAr'
            );
        }

        $resourcePath = '/customers/activity/{systemModule}/{activityId}/{activityTerm}/accountsReceivable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($system_module !== null) {
            $resourcePath = str_replace(
                '{' . 'systemModule' . '}',
                ObjectSerializer::toPathValue($system_module),
                $resourcePath
            );
        }
        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'activityId' . '}',
                ObjectSerializer::toPathValue($activity_id),
                $resourcePath
            );
        }
        // path params
        if ($activity_term !== null) {
            $resourcePath = str_replace(
                '{' . 'activityTerm' . '}',
                ObjectSerializer::toPathValue($activity_term),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerCalls
     *
     * Gets list of calls for the given customer
     *
     * @param  string $customer_number Customer number (required)
     * @param  bool $include_separate_list_callbacks True to include separate list callbacks (optional)
     * @param  bool $include_completed_calls True if completed calls are selected,  False if completed calls are not selected (optional)
     * @param  bool $include_contacted True to include calls where the customer has  been contacted at least once (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Call[]
     */
    public function customerGetCustomerCalls($customer_number, $include_separate_list_callbacks = null, $include_completed_calls = null, $include_contacted = null)
    {
        list($response) = $this->customerGetCustomerCallsWithHttpInfo($customer_number, $include_separate_list_callbacks, $include_completed_calls, $include_contacted);
        return $response;
    }

    /**
     * Operation customerGetCustomerCallsWithHttpInfo
     *
     * Gets list of calls for the given customer
     *
     * @param  string $customer_number Customer number (required)
     * @param  bool $include_separate_list_callbacks True to include separate list callbacks (optional)
     * @param  bool $include_completed_calls True if completed calls are selected,  False if completed calls are not selected (optional)
     * @param  bool $include_contacted True to include calls where the customer has  been contacted at least once (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Call[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerCallsWithHttpInfo($customer_number, $include_separate_list_callbacks = null, $include_completed_calls = null, $include_contacted = null)
    {
        $returnType = '\Advantage\Client\Model\Call[]';
        $request = $this->customerGetCustomerCallsRequest($customer_number, $include_separate_list_callbacks, $include_completed_calls, $include_contacted);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Call[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerCallsAsync
     *
     * Gets list of calls for the given customer
     *
     * @param  string $customer_number Customer number (required)
     * @param  bool $include_separate_list_callbacks True to include separate list callbacks (optional)
     * @param  bool $include_completed_calls True if completed calls are selected,  False if completed calls are not selected (optional)
     * @param  bool $include_contacted True to include calls where the customer has  been contacted at least once (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerCallsAsync($customer_number, $include_separate_list_callbacks = null, $include_completed_calls = null, $include_contacted = null)
    {
        return $this->customerGetCustomerCallsAsyncWithHttpInfo($customer_number, $include_separate_list_callbacks, $include_completed_calls, $include_contacted)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerCallsAsyncWithHttpInfo
     *
     * Gets list of calls for the given customer
     *
     * @param  string $customer_number Customer number (required)
     * @param  bool $include_separate_list_callbacks True to include separate list callbacks (optional)
     * @param  bool $include_completed_calls True if completed calls are selected,  False if completed calls are not selected (optional)
     * @param  bool $include_contacted True to include calls where the customer has  been contacted at least once (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerCallsAsyncWithHttpInfo($customer_number, $include_separate_list_callbacks = null, $include_completed_calls = null, $include_contacted = null)
    {
        $returnType = '\Advantage\Client\Model\Call[]';
        $request = $this->customerGetCustomerCallsRequest($customer_number, $include_separate_list_callbacks, $include_completed_calls, $include_contacted);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerCalls'
     *
     * @param  string $customer_number Customer number (required)
     * @param  bool $include_separate_list_callbacks True to include separate list callbacks (optional)
     * @param  bool $include_completed_calls True if completed calls are selected,  False if completed calls are not selected (optional)
     * @param  bool $include_contacted True to include calls where the customer has  been contacted at least once (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerCallsRequest($customer_number, $include_separate_list_callbacks = null, $include_completed_calls = null, $include_contacted = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetCustomerCalls'
            );
        }

        $resourcePath = '/customers/{customerNumber}/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_separate_list_callbacks !== null) {
            $queryParams['includeSeparateListCallbacks'] = ObjectSerializer::toQueryValue($include_separate_list_callbacks);
        }
        // query params
        if ($include_completed_calls !== null) {
            $queryParams['includeCompletedCalls'] = ObjectSerializer::toQueryValue($include_completed_calls);
        }
        // query params
        if ($include_contacted !== null) {
            $queryParams['includeContacted'] = ObjectSerializer::toQueryValue($include_contacted);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerDefaults
     *
     * Get customer defaults by customer type.
     *
     * @param  string $customer_type_code The customer type (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerDefaults
     */
    public function customerGetCustomerDefaults($customer_type_code)
    {
        list($response) = $this->customerGetCustomerDefaultsWithHttpInfo($customer_type_code);
        return $response;
    }

    /**
     * Operation customerGetCustomerDefaultsWithHttpInfo
     *
     * Get customer defaults by customer type.
     *
     * @param  string $customer_type_code The customer type (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerDefaults, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerDefaultsWithHttpInfo($customer_type_code)
    {
        $returnType = '\Advantage\Client\Model\CustomerDefaults';
        $request = $this->customerGetCustomerDefaultsRequest($customer_type_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerDefaults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerDefaultsAsync
     *
     * Get customer defaults by customer type.
     *
     * @param  string $customer_type_code The customer type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerDefaultsAsync($customer_type_code)
    {
        return $this->customerGetCustomerDefaultsAsyncWithHttpInfo($customer_type_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerDefaultsAsyncWithHttpInfo
     *
     * Get customer defaults by customer type.
     *
     * @param  string $customer_type_code The customer type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerDefaultsAsyncWithHttpInfo($customer_type_code)
    {
        $returnType = '\Advantage\Client\Model\CustomerDefaults';
        $request = $this->customerGetCustomerDefaultsRequest($customer_type_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerDefaults'
     *
     * @param  string $customer_type_code The customer type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerDefaultsRequest($customer_type_code)
    {
        // verify the required parameter 'customer_type_code' is set
        if ($customer_type_code === null || (is_array($customer_type_code) && count($customer_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_type_code when calling customerGetCustomerDefaults'
            );
        }

        $resourcePath = '/customer-types/{customerTypeCode}/defaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'customerTypeCode' . '}',
                ObjectSerializer::toPathValue($customer_type_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetDefaultAddress
     *
     * Find and return default address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAddress
     */
    public function customerGetDefaultAddress($customer_number)
    {
        list($response) = $this->customerGetDefaultAddressWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetDefaultAddressWithHttpInfo
     *
     * Find and return default address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetDefaultAddressWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerGetDefaultAddressRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetDefaultAddressAsync
     *
     * Find and return default address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetDefaultAddressAsync($customer_number)
    {
        return $this->customerGetDefaultAddressAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetDefaultAddressAsyncWithHttpInfo
     *
     * Find and return default address information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetDefaultAddressAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerGetDefaultAddressRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetDefaultAddress'
     *
     * @param  string $customer_number The Advantage customer number of the address to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetDefaultAddressRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetDefaultAddress'
            );
        }

        $resourcePath = '/customers/{customerNumber}/addresses/customer-default';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetEmails
     *
     * Gets all of the email addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the email addresses to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerEmail[]
     */
    public function customerGetEmails($customer_number)
    {
        list($response) = $this->customerGetEmailsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetEmailsWithHttpInfo
     *
     * Gets all of the email addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the email addresses to find. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerEmail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetEmailsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerEmail[]';
        $request = $this->customerGetEmailsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerEmail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetEmailsAsync
     *
     * Gets all of the email addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the email addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetEmailsAsync($customer_number)
    {
        return $this->customerGetEmailsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetEmailsAsyncWithHttpInfo
     *
     * Gets all of the email addresses for a given customer.
     *
     * @param  string $customer_number The Advantage customer number of the email addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetEmailsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerEmail[]';
        $request = $this->customerGetEmailsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetEmails'
     *
     * @param  string $customer_number The Advantage customer number of the email addresses to find. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetEmailsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetEmails'
            );
        }

        $resourcePath = '/customers/{customerNumber}/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetPendingPremiums
     *
     * Get a list of pending premium items for this customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultPendingPremium
     */
    public function customerGetPendingPremiums($customer_number)
    {
        list($response) = $this->customerGetPendingPremiumsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetPendingPremiumsWithHttpInfo
     *
     * Get a list of pending premium items for this customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultPendingPremium, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetPendingPremiumsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPendingPremium';
        $request = $this->customerGetPendingPremiumsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultPendingPremium',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetPendingPremiumsAsync
     *
     * Get a list of pending premium items for this customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetPendingPremiumsAsync($customer_number)
    {
        return $this->customerGetPendingPremiumsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetPendingPremiumsAsyncWithHttpInfo
     *
     * Get a list of pending premium items for this customer.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetPendingPremiumsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPendingPremium';
        $request = $this->customerGetPendingPremiumsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetPendingPremiums'
     *
     * @param  string $customer_number The Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetPendingPremiumsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetPendingPremiums'
            );
        }

        $resourcePath = '/customers/{customerNumber}/pending-premiums';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetRelationships
     *
     * Get a list of relationships for this customer.
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerRelationship[]
     */
    public function customerGetRelationships($customer_number)
    {
        list($response) = $this->customerGetRelationshipsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetRelationshipsWithHttpInfo
     *
     * Get a list of relationships for this customer.
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerRelationship[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetRelationshipsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerRelationship[]';
        $request = $this->customerGetRelationshipsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerRelationship[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetRelationshipsAsync
     *
     * Get a list of relationships for this customer.
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetRelationshipsAsync($customer_number)
    {
        return $this->customerGetRelationshipsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetRelationshipsAsyncWithHttpInfo
     *
     * Get a list of relationships for this customer.
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetRelationshipsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerRelationship[]';
        $request = $this->customerGetRelationshipsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetRelationships'
     *
     * @param  string $customer_number The \&quot;Related-From\&quot; Advantage customer number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetRelationshipsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetRelationships'
            );
        }

        $resourcePath = '/customers/{customerNumber}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetSavedCreditCards
     *
     * Get a list of saved credit cards for this customer.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $filter_promotion_code Promotion Code (optional)
     * @param  string $filter_currency_code Currency Code (optional)
     * @param  string $filter_billing_organization_code Billing Organization (optional)
     * @param  bool $filter_web_enabled_only True to limit credit cards to those that are setup to be \&quot;web enabled\&quot; (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedCreditCard[]
     */
    public function customerGetSavedCreditCards($customer_number, $filter_promotion_code = null, $filter_currency_code = null, $filter_billing_organization_code = null, $filter_web_enabled_only = null)
    {
        list($response) = $this->customerGetSavedCreditCardsWithHttpInfo($customer_number, $filter_promotion_code, $filter_currency_code, $filter_billing_organization_code, $filter_web_enabled_only);
        return $response;
    }

    /**
     * Operation customerGetSavedCreditCardsWithHttpInfo
     *
     * Get a list of saved credit cards for this customer.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $filter_promotion_code Promotion Code (optional)
     * @param  string $filter_currency_code Currency Code (optional)
     * @param  string $filter_billing_organization_code Billing Organization (optional)
     * @param  bool $filter_web_enabled_only True to limit credit cards to those that are setup to be \&quot;web enabled\&quot; (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedCreditCard[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetSavedCreditCardsWithHttpInfo($customer_number, $filter_promotion_code = null, $filter_currency_code = null, $filter_billing_organization_code = null, $filter_web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->customerGetSavedCreditCardsRequest($customer_number, $filter_promotion_code, $filter_currency_code, $filter_billing_organization_code, $filter_web_enabled_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedCreditCard[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetSavedCreditCardsAsync
     *
     * Get a list of saved credit cards for this customer.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $filter_promotion_code Promotion Code (optional)
     * @param  string $filter_currency_code Currency Code (optional)
     * @param  string $filter_billing_organization_code Billing Organization (optional)
     * @param  bool $filter_web_enabled_only True to limit credit cards to those that are setup to be \&quot;web enabled\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSavedCreditCardsAsync($customer_number, $filter_promotion_code = null, $filter_currency_code = null, $filter_billing_organization_code = null, $filter_web_enabled_only = null)
    {
        return $this->customerGetSavedCreditCardsAsyncWithHttpInfo($customer_number, $filter_promotion_code, $filter_currency_code, $filter_billing_organization_code, $filter_web_enabled_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetSavedCreditCardsAsyncWithHttpInfo
     *
     * Get a list of saved credit cards for this customer.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $filter_promotion_code Promotion Code (optional)
     * @param  string $filter_currency_code Currency Code (optional)
     * @param  string $filter_billing_organization_code Billing Organization (optional)
     * @param  bool $filter_web_enabled_only True to limit credit cards to those that are setup to be \&quot;web enabled\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSavedCreditCardsAsyncWithHttpInfo($customer_number, $filter_promotion_code = null, $filter_currency_code = null, $filter_billing_organization_code = null, $filter_web_enabled_only = null)
    {
        $returnType = '\Advantage\Client\Model\SavedCreditCard[]';
        $request = $this->customerGetSavedCreditCardsRequest($customer_number, $filter_promotion_code, $filter_currency_code, $filter_billing_organization_code, $filter_web_enabled_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetSavedCreditCards'
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  string $filter_promotion_code Promotion Code (optional)
     * @param  string $filter_currency_code Currency Code (optional)
     * @param  string $filter_billing_organization_code Billing Organization (optional)
     * @param  bool $filter_web_enabled_only True to limit credit cards to those that are setup to be \&quot;web enabled\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetSavedCreditCardsRequest($customer_number, $filter_promotion_code = null, $filter_currency_code = null, $filter_billing_organization_code = null, $filter_web_enabled_only = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetSavedCreditCards'
            );
        }

        $resourcePath = '/customers/{customerNumber}/saved-payment-methods/credit-cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_promotion_code !== null) {
            $queryParams['filter.promotionCode'] = ObjectSerializer::toQueryValue($filter_promotion_code);
        }
        // query params
        if ($filter_currency_code !== null) {
            $queryParams['filter.currencyCode'] = ObjectSerializer::toQueryValue($filter_currency_code);
        }
        // query params
        if ($filter_billing_organization_code !== null) {
            $queryParams['filter.billingOrganizationCode'] = ObjectSerializer::toQueryValue($filter_billing_organization_code);
        }
        // query params
        if ($filter_web_enabled_only !== null) {
            $queryParams['filter.webEnabledOnly'] = ObjectSerializer::toQueryValue($filter_web_enabled_only);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetSavedPayments
     *
     * Get saved payments for the given customer
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $filter_billing_organization The Billing Organization of the saved payment to filter results by (optional)
     * @param  string $filter_billing_currency The Billing Currency of the saved payment to filter results by (optional)
     * @param  string $filter_promotion_code The billing Promotion Code of the saved payment to filter results by (optional)
     * @param  string $filter_call_list_id The Call List Id used to get an alternative billing organization (optional)
     * @param  \DateTime $filter_call_list_date The Call List Date used to get an alternative billing organization (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultSavedPayment
     */
    public function customerGetSavedPayments($customer_number, $filter_billing_organization = null, $filter_billing_currency = null, $filter_promotion_code = null, $filter_call_list_id = null, $filter_call_list_date = null)
    {
        list($response) = $this->customerGetSavedPaymentsWithHttpInfo($customer_number, $filter_billing_organization, $filter_billing_currency, $filter_promotion_code, $filter_call_list_id, $filter_call_list_date);
        return $response;
    }

    /**
     * Operation customerGetSavedPaymentsWithHttpInfo
     *
     * Get saved payments for the given customer
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $filter_billing_organization The Billing Organization of the saved payment to filter results by (optional)
     * @param  string $filter_billing_currency The Billing Currency of the saved payment to filter results by (optional)
     * @param  string $filter_promotion_code The billing Promotion Code of the saved payment to filter results by (optional)
     * @param  string $filter_call_list_id The Call List Id used to get an alternative billing organization (optional)
     * @param  \DateTime $filter_call_list_date The Call List Date used to get an alternative billing organization (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultSavedPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetSavedPaymentsWithHttpInfo($customer_number, $filter_billing_organization = null, $filter_billing_currency = null, $filter_promotion_code = null, $filter_call_list_id = null, $filter_call_list_date = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSavedPayment';
        $request = $this->customerGetSavedPaymentsRequest($customer_number, $filter_billing_organization, $filter_billing_currency, $filter_promotion_code, $filter_call_list_id, $filter_call_list_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultSavedPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetSavedPaymentsAsync
     *
     * Get saved payments for the given customer
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $filter_billing_organization The Billing Organization of the saved payment to filter results by (optional)
     * @param  string $filter_billing_currency The Billing Currency of the saved payment to filter results by (optional)
     * @param  string $filter_promotion_code The billing Promotion Code of the saved payment to filter results by (optional)
     * @param  string $filter_call_list_id The Call List Id used to get an alternative billing organization (optional)
     * @param  \DateTime $filter_call_list_date The Call List Date used to get an alternative billing organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSavedPaymentsAsync($customer_number, $filter_billing_organization = null, $filter_billing_currency = null, $filter_promotion_code = null, $filter_call_list_id = null, $filter_call_list_date = null)
    {
        return $this->customerGetSavedPaymentsAsyncWithHttpInfo($customer_number, $filter_billing_organization, $filter_billing_currency, $filter_promotion_code, $filter_call_list_id, $filter_call_list_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetSavedPaymentsAsyncWithHttpInfo
     *
     * Get saved payments for the given customer
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $filter_billing_organization The Billing Organization of the saved payment to filter results by (optional)
     * @param  string $filter_billing_currency The Billing Currency of the saved payment to filter results by (optional)
     * @param  string $filter_promotion_code The billing Promotion Code of the saved payment to filter results by (optional)
     * @param  string $filter_call_list_id The Call List Id used to get an alternative billing organization (optional)
     * @param  \DateTime $filter_call_list_date The Call List Date used to get an alternative billing organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSavedPaymentsAsyncWithHttpInfo($customer_number, $filter_billing_organization = null, $filter_billing_currency = null, $filter_promotion_code = null, $filter_call_list_id = null, $filter_call_list_date = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSavedPayment';
        $request = $this->customerGetSavedPaymentsRequest($customer_number, $filter_billing_organization, $filter_billing_currency, $filter_promotion_code, $filter_call_list_id, $filter_call_list_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetSavedPayments'
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $filter_billing_organization The Billing Organization of the saved payment to filter results by (optional)
     * @param  string $filter_billing_currency The Billing Currency of the saved payment to filter results by (optional)
     * @param  string $filter_promotion_code The billing Promotion Code of the saved payment to filter results by (optional)
     * @param  string $filter_call_list_id The Call List Id used to get an alternative billing organization (optional)
     * @param  \DateTime $filter_call_list_date The Call List Date used to get an alternative billing organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetSavedPaymentsRequest($customer_number, $filter_billing_organization = null, $filter_billing_currency = null, $filter_promotion_code = null, $filter_call_list_id = null, $filter_call_list_date = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetSavedPayments'
            );
        }

        $resourcePath = '/customers/{customerNumber}/saved-payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_billing_organization !== null) {
            $queryParams['filter.billingOrganization'] = ObjectSerializer::toQueryValue($filter_billing_organization);
        }
        // query params
        if ($filter_billing_currency !== null) {
            $queryParams['filter.billingCurrency'] = ObjectSerializer::toQueryValue($filter_billing_currency);
        }
        // query params
        if ($filter_promotion_code !== null) {
            $queryParams['filter.promotionCode'] = ObjectSerializer::toQueryValue($filter_promotion_code);
        }
        // query params
        if ($filter_call_list_id !== null) {
            $queryParams['filter.callListId'] = ObjectSerializer::toQueryValue($filter_call_list_id);
        }
        // query params
        if ($filter_call_list_date !== null) {
            $queryParams['filter.callListDate'] = ObjectSerializer::toQueryValue($filter_call_list_date);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetUnpaidDebits
     *
     * Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.  This includes debits that have unposted credit applications for the remaining balance.
     *
     * @param  string $customer_number Customer number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Receivable[]
     */
    public function customerGetUnpaidDebits($customer_number)
    {
        list($response) = $this->customerGetUnpaidDebitsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetUnpaidDebitsWithHttpInfo
     *
     * Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.  This includes debits that have unposted credit applications for the remaining balance.
     *
     * @param  string $customer_number Customer number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Receivable[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetUnpaidDebitsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\Receivable[]';
        $request = $this->customerGetUnpaidDebitsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Receivable[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetUnpaidDebitsAsync
     *
     * Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.  This includes debits that have unposted credit applications for the remaining balance.
     *
     * @param  string $customer_number Customer number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUnpaidDebitsAsync($customer_number)
    {
        return $this->customerGetUnpaidDebitsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetUnpaidDebitsAsyncWithHttpInfo
     *
     * Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.  This includes debits that have unposted credit applications for the remaining balance.
     *
     * @param  string $customer_number Customer number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUnpaidDebitsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\Receivable[]';
        $request = $this->customerGetUnpaidDebitsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetUnpaidDebits'
     *
     * @param  string $customer_number Customer number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetUnpaidDebitsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetUnpaidDebits'
            );
        }

        $resourcePath = '/customers/{customerNumber}/unpaid-invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetUsers
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUser
     */
    public function customerGetUsers($customer_number)
    {
        list($response) = $this->customerGetUsersWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation customerGetUsersWithHttpInfo
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetUsersWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUser';
        $request = $this->customerGetUsersRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetUsersAsync
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUsersAsync($customer_number)
    {
        return $this->customerGetUsersAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetUsersAsyncWithHttpInfo
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUsersAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUser';
        $request = $this->customerGetUsersRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetUsers'
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetUsersRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetUsers'
            );
        }

        $resourcePath = '/customers/{customerNumber}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetUsers_0
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     * @param  string $authentication_group_code Find users within this authentication group. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultUser
     */
    public function customerGetUsers_0($customer_number, $authentication_group_code)
    {
        list($response) = $this->customerGetUsers_0WithHttpInfo($customer_number, $authentication_group_code);
        return $response;
    }

    /**
     * Operation customerGetUsers_0WithHttpInfo
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     * @param  string $authentication_group_code Find users within this authentication group. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetUsers_0WithHttpInfo($customer_number, $authentication_group_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUser';
        $request = $this->customerGetUsers_0Request($customer_number, $authentication_group_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetUsers_0Async
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     * @param  string $authentication_group_code Find users within this authentication group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUsers_0Async($customer_number, $authentication_group_code)
    {
        return $this->customerGetUsers_0AsyncWithHttpInfo($customer_number, $authentication_group_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetUsers_0AsyncWithHttpInfo
     *
     * Gets all users for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     * @param  string $authentication_group_code Find users within this authentication group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetUsers_0AsyncWithHttpInfo($customer_number, $authentication_group_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultUser';
        $request = $this->customerGetUsers_0Request($customer_number, $authentication_group_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetUsers_0'
     *
     * @param  string $customer_number The Advantage customer number of the customer. (required)
     * @param  string $authentication_group_code Find users within this authentication group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetUsers_0Request($customer_number, $authentication_group_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetUsers_0'
            );
        }
        // verify the required parameter 'authentication_group_code' is set
        if ($authentication_group_code === null || (is_array($authentication_group_code) && count($authentication_group_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group_code when calling customerGetUsers_0'
            );
        }

        $resourcePath = '/customers/{customerNumber}/users/{authenticationGroupCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($authentication_group_code !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroupCode' . '}',
                ObjectSerializer::toPathValue($authentication_group_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearch
     *
     * Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the matched address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     * @param  bool $propagate_phone_number If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2               and PhoneNumber3, if no comparisons for those fields have been specified. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCustomer
     */
    public function customerSearch($include_all_addresses = null, $include_credit_summary = null, $propagate_phone_number = null, $pager_skip = null, $pager_take = null, $customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        list($response) = $this->customerSearchWithHttpInfo($include_all_addresses, $include_credit_summary, $propagate_phone_number, $pager_skip, $pager_take, $customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);
        return $response;
    }

    /**
     * Operation customerSearchWithHttpInfo
     *
     * Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the matched address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     * @param  bool $propagate_phone_number If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2               and PhoneNumber3, if no comparisons for those fields have been specified. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchWithHttpInfo($include_all_addresses = null, $include_credit_summary = null, $propagate_phone_number = null, $pager_skip = null, $pager_take = null, $customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerSearchRequest($include_all_addresses, $include_credit_summary, $propagate_phone_number, $pager_skip, $pager_take, $customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchAsync
     *
     * Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the matched address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     * @param  bool $propagate_phone_number If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2               and PhoneNumber3, if no comparisons for those fields have been specified. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAsync($include_all_addresses = null, $include_credit_summary = null, $propagate_phone_number = null, $pager_skip = null, $pager_take = null, $customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        return $this->customerSearchAsyncWithHttpInfo($include_all_addresses, $include_credit_summary, $propagate_phone_number, $pager_skip, $pager_take, $customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerSearchAsyncWithHttpInfo
     *
     * Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the matched address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     * @param  bool $propagate_phone_number If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2               and PhoneNumber3, if no comparisons for those fields have been specified. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAsyncWithHttpInfo($include_all_addresses = null, $include_credit_summary = null, $propagate_phone_number = null, $pager_skip = null, $pager_take = null, $customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomer';
        $request = $this->customerSearchRequest($include_all_addresses, $include_credit_summary, $propagate_phone_number, $pager_skip, $pager_take, $customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerSearch'
     *
     * @param  bool $include_all_addresses Include all customer addresses in the response or just the matched address? (optional)
     * @param  bool $include_credit_summary Include the customer&#39;s credit summary in the response. (optional)
     * @param  bool $propagate_phone_number If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2               and PhoneNumber3, if no comparisons for those fields have been specified. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchRequest($include_all_addresses = null, $include_credit_summary = null, $propagate_phone_number = null, $pager_skip = null, $pager_take = null, $customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {

        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_all_addresses !== null) {
            $queryParams['includeAllAddresses'] = ObjectSerializer::toQueryValue($include_all_addresses);
        }
        // query params
        if ($include_credit_summary !== null) {
            $queryParams['includeCreditSummary'] = ObjectSerializer::toQueryValue($include_credit_summary);
        }
        // query params
        if ($propagate_phone_number !== null) {
            $queryParams['propagatePhoneNumber'] = ObjectSerializer::toQueryValue($propagate_phone_number);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($customer_number !== null) {
            $queryParams['CustomerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($full_name !== null) {
            $queryParams['FullName'] = ObjectSerializer::toQueryValue($full_name);
        }
        // query params
        if ($email_address !== null) {
            $queryParams['EmailAddress'] = ObjectSerializer::toQueryValue($email_address);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['PhoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($phone_number2 !== null) {
            $queryParams['PhoneNumber2'] = ObjectSerializer::toQueryValue($phone_number2);
        }
        // query params
        if ($phone_number3 !== null) {
            $queryParams['PhoneNumber3'] = ObjectSerializer::toQueryValue($phone_number3);
        }
        // query params
        if ($street1 !== null) {
            $queryParams['Street1'] = ObjectSerializer::toQueryValue($street1);
        }
        // query params
        if ($street2 !== null) {
            $queryParams['Street2'] = ObjectSerializer::toQueryValue($street2);
        }
        // query params
        if ($street3 !== null) {
            $queryParams['Street3'] = ObjectSerializer::toQueryValue($street3);
        }
        // query params
        if ($city !== null) {
            $queryParams['City'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['State'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['CountryCode'] = ObjectSerializer::toQueryValue($country_code);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['PostalCode'] = ObjectSerializer::toQueryValue($postal_code);
        }
        // query params
        if ($fax_number !== null) {
            $queryParams['FaxNumber'] = ObjectSerializer::toQueryValue($fax_number);
        }
        // query params
        if ($company !== null) {
            $queryParams['Company'] = ObjectSerializer::toQueryValue($company);
        }
        // query params
        if ($customer_type !== null) {
            $queryParams['CustomerType'] = ObjectSerializer::toQueryValue($customer_type);
        }
        // query params
        if ($promote_flag !== null) {
            $queryParams['PromoteFlag'] = ObjectSerializer::toQueryValue($promote_flag);
        }
        // query params
        if ($promote_by_partners !== null) {
            $queryParams['PromoteByPartners'] = ObjectSerializer::toQueryValue($promote_by_partners);
        }
        // query params
        if ($promote_by_phone !== null) {
            $queryParams['PromoteByPhone'] = ObjectSerializer::toQueryValue($promote_by_phone);
        }
        // query params
        if ($promote_by_fax !== null) {
            $queryParams['PromoteByFax'] = ObjectSerializer::toQueryValue($promote_by_fax);
        }
        // query params
        if ($promote_by_email !== null) {
            $queryParams['PromoteByEmail'] = ObjectSerializer::toQueryValue($promote_by_email);
        }
        // query params
        if ($promote_by_mail !== null) {
            $queryParams['PromoteByMail'] = ObjectSerializer::toQueryValue($promote_by_mail);
        }
        // query params
        if ($promote_by_sms !== null) {
            $queryParams['PromoteBySms'] = ObjectSerializer::toQueryValue($promote_by_sms);
        }
        // query params
        if ($promote_by_phone1 !== null) {
            $queryParams['PromoteByPhone1'] = ObjectSerializer::toQueryValue($promote_by_phone1);
        }
        // query params
        if ($promote_by_phone2 !== null) {
            $queryParams['PromoteByPhone2'] = ObjectSerializer::toQueryValue($promote_by_phone2);
        }
        // query params
        if ($promote_by_phone3 !== null) {
            $queryParams['PromoteByPhone3'] = ObjectSerializer::toQueryValue($promote_by_phone3);
        }
        // query params
        if ($title !== null) {
            $queryParams['Title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['FirstName'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($middle_initial !== null) {
            $queryParams['MiddleInitial'] = ObjectSerializer::toQueryValue($middle_initial);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['LastName'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($suffix !== null) {
            $queryParams['Suffix'] = ObjectSerializer::toQueryValue($suffix);
        }
        // query params
        if ($job_title !== null) {
            $queryParams['JobTitle'] = ObjectSerializer::toQueryValue($job_title);
        }
        // query params
        if ($job_position_code !== null) {
            $queryParams['JobPositionCode'] = ObjectSerializer::toQueryValue($job_position_code);
        }
        // query params
        if ($communication_preference !== null) {
            $queryParams['CommunicationPreference'] = ObjectSerializer::toQueryValue($communication_preference);
        }
        // query params
        if ($source_promotion !== null) {
            $queryParams['SourcePromotion'] = ObjectSerializer::toQueryValue($source_promotion);
        }
        // query params
        if ($address_code !== null) {
            $queryParams['AddressCode'] = ObjectSerializer::toQueryValue($address_code);
        }
        // query params
        if ($default_currency !== null) {
            $queryParams['DefaultCurrency'] = ObjectSerializer::toQueryValue($default_currency);
        }
        // query params
        if ($department !== null) {
            $queryParams['Department'] = ObjectSerializer::toQueryValue($department);
        }
        // query params
        if ($county !== null) {
            $queryParams['County'] = ObjectSerializer::toQueryValue($county);
        }
        // query params
        if ($pin_code !== null) {
            $queryParams['PinCode'] = ObjectSerializer::toQueryValue($pin_code);
        }
        // query params
        if ($social_security_number !== null) {
            $queryParams['SocialSecurityNumber'] = ObjectSerializer::toQueryValue($social_security_number);
        }
        // query params
        if ($street_name !== null) {
            $queryParams['StreetName'] = ObjectSerializer::toQueryValue($street_name);
        }
        // query params
        if ($street_type !== null) {
            $queryParams['StreetType'] = ObjectSerializer::toQueryValue($street_type);
        }
        // query params
        if ($last_updated_on !== null) {
            $queryParams['LastUpdatedOn'] = ObjectSerializer::toQueryValue($last_updated_on);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['ItemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($last_name_soundex !== null) {
            $queryParams['LastNameSoundex'] = ObjectSerializer::toQueryValue($last_name_soundex);
        }
        // query params
        if ($company_name_soundex !== null) {
            $queryParams['CompanyNameSoundex'] = ObjectSerializer::toQueryValue($company_name_soundex);
        }
        // query params
        if ($customer_number_not_equal !== null) {
            $queryParams['CustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($customer_number_not_equal);
        }
        // query params
        if ($customer_number_less !== null) {
            $queryParams['CustomerNumber.Less'] = ObjectSerializer::toQueryValue($customer_number_less);
        }
        // query params
        if ($customer_number_less_or_equal !== null) {
            $queryParams['CustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_number_less_or_equal);
        }
        // query params
        if ($customer_number_greater !== null) {
            $queryParams['CustomerNumber.Greater'] = ObjectSerializer::toQueryValue($customer_number_greater);
        }
        // query params
        if ($customer_number_greater_or_equal !== null) {
            $queryParams['CustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_number_greater_or_equal);
        }
        // query params
        if ($customer_number_is_null !== null) {
            $queryParams['CustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($customer_number_is_null);
        }
        // query params
        if ($customer_number_is_not_null !== null) {
            $queryParams['CustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($customer_number_is_not_null);
        }
        // query params
        if ($customer_number_like !== null) {
            $queryParams['CustomerNumber.Like'] = ObjectSerializer::toQueryValue($customer_number_like);
        }
        // query params
        if ($customer_number_not_like !== null) {
            $queryParams['CustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($customer_number_not_like);
        }
        // query params
        if ($customer_number_contains !== null) {
            $queryParams['CustomerNumber.Contains'] = ObjectSerializer::toQueryValue($customer_number_contains);
        }
        // query params
        if ($customer_number_not_contains !== null) {
            $queryParams['CustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($customer_number_not_contains);
        }
        // query params
        if ($customer_number_starts_with !== null) {
            $queryParams['CustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($customer_number_starts_with);
        }
        // query params
        if ($customer_number_not_starts_with !== null) {
            $queryParams['CustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_number_not_starts_with);
        }
        // query params
        if ($customer_number_ends_with !== null) {
            $queryParams['CustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($customer_number_ends_with);
        }
        // query params
        if ($customer_number_not_ends_with !== null) {
            $queryParams['CustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_number_not_ends_with);
        }
        // query params
        if ($customer_number_in !== null) {
            $queryParams['CustomerNumber.In'] = ObjectSerializer::toQueryValue($customer_number_in);
        }
        // query params
        if ($customer_number_between !== null) {
            $queryParams['CustomerNumber.Between'] = ObjectSerializer::toQueryValue($customer_number_between);
        }
        // query params
        if ($full_name_not_equal !== null) {
            $queryParams['FullName.NotEqual'] = ObjectSerializer::toQueryValue($full_name_not_equal);
        }
        // query params
        if ($full_name_less !== null) {
            $queryParams['FullName.Less'] = ObjectSerializer::toQueryValue($full_name_less);
        }
        // query params
        if ($full_name_less_or_equal !== null) {
            $queryParams['FullName.LessOrEqual'] = ObjectSerializer::toQueryValue($full_name_less_or_equal);
        }
        // query params
        if ($full_name_greater !== null) {
            $queryParams['FullName.Greater'] = ObjectSerializer::toQueryValue($full_name_greater);
        }
        // query params
        if ($full_name_greater_or_equal !== null) {
            $queryParams['FullName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($full_name_greater_or_equal);
        }
        // query params
        if ($full_name_is_null !== null) {
            $queryParams['FullName.IsNull'] = ObjectSerializer::toQueryValue($full_name_is_null);
        }
        // query params
        if ($full_name_is_not_null !== null) {
            $queryParams['FullName.IsNotNull'] = ObjectSerializer::toQueryValue($full_name_is_not_null);
        }
        // query params
        if ($full_name_like !== null) {
            $queryParams['FullName.Like'] = ObjectSerializer::toQueryValue($full_name_like);
        }
        // query params
        if ($full_name_not_like !== null) {
            $queryParams['FullName.NotLike'] = ObjectSerializer::toQueryValue($full_name_not_like);
        }
        // query params
        if ($full_name_contains !== null) {
            $queryParams['FullName.Contains'] = ObjectSerializer::toQueryValue($full_name_contains);
        }
        // query params
        if ($full_name_not_contains !== null) {
            $queryParams['FullName.NotContains'] = ObjectSerializer::toQueryValue($full_name_not_contains);
        }
        // query params
        if ($full_name_starts_with !== null) {
            $queryParams['FullName.StartsWith'] = ObjectSerializer::toQueryValue($full_name_starts_with);
        }
        // query params
        if ($full_name_not_starts_with !== null) {
            $queryParams['FullName.NotStartsWith'] = ObjectSerializer::toQueryValue($full_name_not_starts_with);
        }
        // query params
        if ($full_name_ends_with !== null) {
            $queryParams['FullName.EndsWith'] = ObjectSerializer::toQueryValue($full_name_ends_with);
        }
        // query params
        if ($full_name_not_ends_with !== null) {
            $queryParams['FullName.NotEndsWith'] = ObjectSerializer::toQueryValue($full_name_not_ends_with);
        }
        // query params
        if ($full_name_in !== null) {
            $queryParams['FullName.In'] = ObjectSerializer::toQueryValue($full_name_in);
        }
        // query params
        if ($full_name_between !== null) {
            $queryParams['FullName.Between'] = ObjectSerializer::toQueryValue($full_name_between);
        }
        // query params
        if ($email_address_not_equal !== null) {
            $queryParams['EmailAddress.NotEqual'] = ObjectSerializer::toQueryValue($email_address_not_equal);
        }
        // query params
        if ($email_address_less !== null) {
            $queryParams['EmailAddress.Less'] = ObjectSerializer::toQueryValue($email_address_less);
        }
        // query params
        if ($email_address_less_or_equal !== null) {
            $queryParams['EmailAddress.LessOrEqual'] = ObjectSerializer::toQueryValue($email_address_less_or_equal);
        }
        // query params
        if ($email_address_greater !== null) {
            $queryParams['EmailAddress.Greater'] = ObjectSerializer::toQueryValue($email_address_greater);
        }
        // query params
        if ($email_address_greater_or_equal !== null) {
            $queryParams['EmailAddress.GreaterOrEqual'] = ObjectSerializer::toQueryValue($email_address_greater_or_equal);
        }
        // query params
        if ($email_address_is_null !== null) {
            $queryParams['EmailAddress.IsNull'] = ObjectSerializer::toQueryValue($email_address_is_null);
        }
        // query params
        if ($email_address_is_not_null !== null) {
            $queryParams['EmailAddress.IsNotNull'] = ObjectSerializer::toQueryValue($email_address_is_not_null);
        }
        // query params
        if ($email_address_like !== null) {
            $queryParams['EmailAddress.Like'] = ObjectSerializer::toQueryValue($email_address_like);
        }
        // query params
        if ($email_address_not_like !== null) {
            $queryParams['EmailAddress.NotLike'] = ObjectSerializer::toQueryValue($email_address_not_like);
        }
        // query params
        if ($email_address_contains !== null) {
            $queryParams['EmailAddress.Contains'] = ObjectSerializer::toQueryValue($email_address_contains);
        }
        // query params
        if ($email_address_not_contains !== null) {
            $queryParams['EmailAddress.NotContains'] = ObjectSerializer::toQueryValue($email_address_not_contains);
        }
        // query params
        if ($email_address_starts_with !== null) {
            $queryParams['EmailAddress.StartsWith'] = ObjectSerializer::toQueryValue($email_address_starts_with);
        }
        // query params
        if ($email_address_not_starts_with !== null) {
            $queryParams['EmailAddress.NotStartsWith'] = ObjectSerializer::toQueryValue($email_address_not_starts_with);
        }
        // query params
        if ($email_address_ends_with !== null) {
            $queryParams['EmailAddress.EndsWith'] = ObjectSerializer::toQueryValue($email_address_ends_with);
        }
        // query params
        if ($email_address_not_ends_with !== null) {
            $queryParams['EmailAddress.NotEndsWith'] = ObjectSerializer::toQueryValue($email_address_not_ends_with);
        }
        // query params
        if ($email_address_in !== null) {
            $queryParams['EmailAddress.In'] = ObjectSerializer::toQueryValue($email_address_in);
        }
        // query params
        if ($email_address_between !== null) {
            $queryParams['EmailAddress.Between'] = ObjectSerializer::toQueryValue($email_address_between);
        }
        // query params
        if ($phone_number_not_equal !== null) {
            $queryParams['PhoneNumber.NotEqual'] = ObjectSerializer::toQueryValue($phone_number_not_equal);
        }
        // query params
        if ($phone_number_less !== null) {
            $queryParams['PhoneNumber.Less'] = ObjectSerializer::toQueryValue($phone_number_less);
        }
        // query params
        if ($phone_number_less_or_equal !== null) {
            $queryParams['PhoneNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number_less_or_equal);
        }
        // query params
        if ($phone_number_greater !== null) {
            $queryParams['PhoneNumber.Greater'] = ObjectSerializer::toQueryValue($phone_number_greater);
        }
        // query params
        if ($phone_number_greater_or_equal !== null) {
            $queryParams['PhoneNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number_greater_or_equal);
        }
        // query params
        if ($phone_number_is_null !== null) {
            $queryParams['PhoneNumber.IsNull'] = ObjectSerializer::toQueryValue($phone_number_is_null);
        }
        // query params
        if ($phone_number_is_not_null !== null) {
            $queryParams['PhoneNumber.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number_is_not_null);
        }
        // query params
        if ($phone_number_like !== null) {
            $queryParams['PhoneNumber.Like'] = ObjectSerializer::toQueryValue($phone_number_like);
        }
        // query params
        if ($phone_number_not_like !== null) {
            $queryParams['PhoneNumber.NotLike'] = ObjectSerializer::toQueryValue($phone_number_not_like);
        }
        // query params
        if ($phone_number_contains !== null) {
            $queryParams['PhoneNumber.Contains'] = ObjectSerializer::toQueryValue($phone_number_contains);
        }
        // query params
        if ($phone_number_not_contains !== null) {
            $queryParams['PhoneNumber.NotContains'] = ObjectSerializer::toQueryValue($phone_number_not_contains);
        }
        // query params
        if ($phone_number_starts_with !== null) {
            $queryParams['PhoneNumber.StartsWith'] = ObjectSerializer::toQueryValue($phone_number_starts_with);
        }
        // query params
        if ($phone_number_not_starts_with !== null) {
            $queryParams['PhoneNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number_not_starts_with);
        }
        // query params
        if ($phone_number_ends_with !== null) {
            $queryParams['PhoneNumber.EndsWith'] = ObjectSerializer::toQueryValue($phone_number_ends_with);
        }
        // query params
        if ($phone_number_not_ends_with !== null) {
            $queryParams['PhoneNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number_not_ends_with);
        }
        // query params
        if ($phone_number_in !== null) {
            $queryParams['PhoneNumber.In'] = ObjectSerializer::toQueryValue($phone_number_in);
        }
        // query params
        if ($phone_number_between !== null) {
            $queryParams['PhoneNumber.Between'] = ObjectSerializer::toQueryValue($phone_number_between);
        }
        // query params
        if ($phone_number2_not_equal !== null) {
            $queryParams['PhoneNumber2.NotEqual'] = ObjectSerializer::toQueryValue($phone_number2_not_equal);
        }
        // query params
        if ($phone_number2_less !== null) {
            $queryParams['PhoneNumber2.Less'] = ObjectSerializer::toQueryValue($phone_number2_less);
        }
        // query params
        if ($phone_number2_less_or_equal !== null) {
            $queryParams['PhoneNumber2.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number2_less_or_equal);
        }
        // query params
        if ($phone_number2_greater !== null) {
            $queryParams['PhoneNumber2.Greater'] = ObjectSerializer::toQueryValue($phone_number2_greater);
        }
        // query params
        if ($phone_number2_greater_or_equal !== null) {
            $queryParams['PhoneNumber2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number2_greater_or_equal);
        }
        // query params
        if ($phone_number2_is_null !== null) {
            $queryParams['PhoneNumber2.IsNull'] = ObjectSerializer::toQueryValue($phone_number2_is_null);
        }
        // query params
        if ($phone_number2_is_not_null !== null) {
            $queryParams['PhoneNumber2.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number2_is_not_null);
        }
        // query params
        if ($phone_number2_like !== null) {
            $queryParams['PhoneNumber2.Like'] = ObjectSerializer::toQueryValue($phone_number2_like);
        }
        // query params
        if ($phone_number2_not_like !== null) {
            $queryParams['PhoneNumber2.NotLike'] = ObjectSerializer::toQueryValue($phone_number2_not_like);
        }
        // query params
        if ($phone_number2_contains !== null) {
            $queryParams['PhoneNumber2.Contains'] = ObjectSerializer::toQueryValue($phone_number2_contains);
        }
        // query params
        if ($phone_number2_not_contains !== null) {
            $queryParams['PhoneNumber2.NotContains'] = ObjectSerializer::toQueryValue($phone_number2_not_contains);
        }
        // query params
        if ($phone_number2_starts_with !== null) {
            $queryParams['PhoneNumber2.StartsWith'] = ObjectSerializer::toQueryValue($phone_number2_starts_with);
        }
        // query params
        if ($phone_number2_not_starts_with !== null) {
            $queryParams['PhoneNumber2.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number2_not_starts_with);
        }
        // query params
        if ($phone_number2_ends_with !== null) {
            $queryParams['PhoneNumber2.EndsWith'] = ObjectSerializer::toQueryValue($phone_number2_ends_with);
        }
        // query params
        if ($phone_number2_not_ends_with !== null) {
            $queryParams['PhoneNumber2.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number2_not_ends_with);
        }
        // query params
        if ($phone_number2_in !== null) {
            $queryParams['PhoneNumber2.In'] = ObjectSerializer::toQueryValue($phone_number2_in);
        }
        // query params
        if ($phone_number2_between !== null) {
            $queryParams['PhoneNumber2.Between'] = ObjectSerializer::toQueryValue($phone_number2_between);
        }
        // query params
        if ($phone_number3_not_equal !== null) {
            $queryParams['PhoneNumber3.NotEqual'] = ObjectSerializer::toQueryValue($phone_number3_not_equal);
        }
        // query params
        if ($phone_number3_less !== null) {
            $queryParams['PhoneNumber3.Less'] = ObjectSerializer::toQueryValue($phone_number3_less);
        }
        // query params
        if ($phone_number3_less_or_equal !== null) {
            $queryParams['PhoneNumber3.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number3_less_or_equal);
        }
        // query params
        if ($phone_number3_greater !== null) {
            $queryParams['PhoneNumber3.Greater'] = ObjectSerializer::toQueryValue($phone_number3_greater);
        }
        // query params
        if ($phone_number3_greater_or_equal !== null) {
            $queryParams['PhoneNumber3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number3_greater_or_equal);
        }
        // query params
        if ($phone_number3_is_null !== null) {
            $queryParams['PhoneNumber3.IsNull'] = ObjectSerializer::toQueryValue($phone_number3_is_null);
        }
        // query params
        if ($phone_number3_is_not_null !== null) {
            $queryParams['PhoneNumber3.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number3_is_not_null);
        }
        // query params
        if ($phone_number3_like !== null) {
            $queryParams['PhoneNumber3.Like'] = ObjectSerializer::toQueryValue($phone_number3_like);
        }
        // query params
        if ($phone_number3_not_like !== null) {
            $queryParams['PhoneNumber3.NotLike'] = ObjectSerializer::toQueryValue($phone_number3_not_like);
        }
        // query params
        if ($phone_number3_contains !== null) {
            $queryParams['PhoneNumber3.Contains'] = ObjectSerializer::toQueryValue($phone_number3_contains);
        }
        // query params
        if ($phone_number3_not_contains !== null) {
            $queryParams['PhoneNumber3.NotContains'] = ObjectSerializer::toQueryValue($phone_number3_not_contains);
        }
        // query params
        if ($phone_number3_starts_with !== null) {
            $queryParams['PhoneNumber3.StartsWith'] = ObjectSerializer::toQueryValue($phone_number3_starts_with);
        }
        // query params
        if ($phone_number3_not_starts_with !== null) {
            $queryParams['PhoneNumber3.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number3_not_starts_with);
        }
        // query params
        if ($phone_number3_ends_with !== null) {
            $queryParams['PhoneNumber3.EndsWith'] = ObjectSerializer::toQueryValue($phone_number3_ends_with);
        }
        // query params
        if ($phone_number3_not_ends_with !== null) {
            $queryParams['PhoneNumber3.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number3_not_ends_with);
        }
        // query params
        if ($phone_number3_in !== null) {
            $queryParams['PhoneNumber3.In'] = ObjectSerializer::toQueryValue($phone_number3_in);
        }
        // query params
        if ($phone_number3_between !== null) {
            $queryParams['PhoneNumber3.Between'] = ObjectSerializer::toQueryValue($phone_number3_between);
        }
        // query params
        if ($street1_not_equal !== null) {
            $queryParams['Street1.NotEqual'] = ObjectSerializer::toQueryValue($street1_not_equal);
        }
        // query params
        if ($street1_less !== null) {
            $queryParams['Street1.Less'] = ObjectSerializer::toQueryValue($street1_less);
        }
        // query params
        if ($street1_less_or_equal !== null) {
            $queryParams['Street1.LessOrEqual'] = ObjectSerializer::toQueryValue($street1_less_or_equal);
        }
        // query params
        if ($street1_greater !== null) {
            $queryParams['Street1.Greater'] = ObjectSerializer::toQueryValue($street1_greater);
        }
        // query params
        if ($street1_greater_or_equal !== null) {
            $queryParams['Street1.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street1_greater_or_equal);
        }
        // query params
        if ($street1_is_null !== null) {
            $queryParams['Street1.IsNull'] = ObjectSerializer::toQueryValue($street1_is_null);
        }
        // query params
        if ($street1_is_not_null !== null) {
            $queryParams['Street1.IsNotNull'] = ObjectSerializer::toQueryValue($street1_is_not_null);
        }
        // query params
        if ($street1_like !== null) {
            $queryParams['Street1.Like'] = ObjectSerializer::toQueryValue($street1_like);
        }
        // query params
        if ($street1_not_like !== null) {
            $queryParams['Street1.NotLike'] = ObjectSerializer::toQueryValue($street1_not_like);
        }
        // query params
        if ($street1_contains !== null) {
            $queryParams['Street1.Contains'] = ObjectSerializer::toQueryValue($street1_contains);
        }
        // query params
        if ($street1_not_contains !== null) {
            $queryParams['Street1.NotContains'] = ObjectSerializer::toQueryValue($street1_not_contains);
        }
        // query params
        if ($street1_starts_with !== null) {
            $queryParams['Street1.StartsWith'] = ObjectSerializer::toQueryValue($street1_starts_with);
        }
        // query params
        if ($street1_not_starts_with !== null) {
            $queryParams['Street1.NotStartsWith'] = ObjectSerializer::toQueryValue($street1_not_starts_with);
        }
        // query params
        if ($street1_ends_with !== null) {
            $queryParams['Street1.EndsWith'] = ObjectSerializer::toQueryValue($street1_ends_with);
        }
        // query params
        if ($street1_not_ends_with !== null) {
            $queryParams['Street1.NotEndsWith'] = ObjectSerializer::toQueryValue($street1_not_ends_with);
        }
        // query params
        if ($street1_in !== null) {
            $queryParams['Street1.In'] = ObjectSerializer::toQueryValue($street1_in);
        }
        // query params
        if ($street1_between !== null) {
            $queryParams['Street1.Between'] = ObjectSerializer::toQueryValue($street1_between);
        }
        // query params
        if ($street2_not_equal !== null) {
            $queryParams['Street2.NotEqual'] = ObjectSerializer::toQueryValue($street2_not_equal);
        }
        // query params
        if ($street2_less !== null) {
            $queryParams['Street2.Less'] = ObjectSerializer::toQueryValue($street2_less);
        }
        // query params
        if ($street2_less_or_equal !== null) {
            $queryParams['Street2.LessOrEqual'] = ObjectSerializer::toQueryValue($street2_less_or_equal);
        }
        // query params
        if ($street2_greater !== null) {
            $queryParams['Street2.Greater'] = ObjectSerializer::toQueryValue($street2_greater);
        }
        // query params
        if ($street2_greater_or_equal !== null) {
            $queryParams['Street2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street2_greater_or_equal);
        }
        // query params
        if ($street2_is_null !== null) {
            $queryParams['Street2.IsNull'] = ObjectSerializer::toQueryValue($street2_is_null);
        }
        // query params
        if ($street2_is_not_null !== null) {
            $queryParams['Street2.IsNotNull'] = ObjectSerializer::toQueryValue($street2_is_not_null);
        }
        // query params
        if ($street2_like !== null) {
            $queryParams['Street2.Like'] = ObjectSerializer::toQueryValue($street2_like);
        }
        // query params
        if ($street2_not_like !== null) {
            $queryParams['Street2.NotLike'] = ObjectSerializer::toQueryValue($street2_not_like);
        }
        // query params
        if ($street2_contains !== null) {
            $queryParams['Street2.Contains'] = ObjectSerializer::toQueryValue($street2_contains);
        }
        // query params
        if ($street2_not_contains !== null) {
            $queryParams['Street2.NotContains'] = ObjectSerializer::toQueryValue($street2_not_contains);
        }
        // query params
        if ($street2_starts_with !== null) {
            $queryParams['Street2.StartsWith'] = ObjectSerializer::toQueryValue($street2_starts_with);
        }
        // query params
        if ($street2_not_starts_with !== null) {
            $queryParams['Street2.NotStartsWith'] = ObjectSerializer::toQueryValue($street2_not_starts_with);
        }
        // query params
        if ($street2_ends_with !== null) {
            $queryParams['Street2.EndsWith'] = ObjectSerializer::toQueryValue($street2_ends_with);
        }
        // query params
        if ($street2_not_ends_with !== null) {
            $queryParams['Street2.NotEndsWith'] = ObjectSerializer::toQueryValue($street2_not_ends_with);
        }
        // query params
        if ($street2_in !== null) {
            $queryParams['Street2.In'] = ObjectSerializer::toQueryValue($street2_in);
        }
        // query params
        if ($street2_between !== null) {
            $queryParams['Street2.Between'] = ObjectSerializer::toQueryValue($street2_between);
        }
        // query params
        if ($street3_not_equal !== null) {
            $queryParams['Street3.NotEqual'] = ObjectSerializer::toQueryValue($street3_not_equal);
        }
        // query params
        if ($street3_less !== null) {
            $queryParams['Street3.Less'] = ObjectSerializer::toQueryValue($street3_less);
        }
        // query params
        if ($street3_less_or_equal !== null) {
            $queryParams['Street3.LessOrEqual'] = ObjectSerializer::toQueryValue($street3_less_or_equal);
        }
        // query params
        if ($street3_greater !== null) {
            $queryParams['Street3.Greater'] = ObjectSerializer::toQueryValue($street3_greater);
        }
        // query params
        if ($street3_greater_or_equal !== null) {
            $queryParams['Street3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street3_greater_or_equal);
        }
        // query params
        if ($street3_is_null !== null) {
            $queryParams['Street3.IsNull'] = ObjectSerializer::toQueryValue($street3_is_null);
        }
        // query params
        if ($street3_is_not_null !== null) {
            $queryParams['Street3.IsNotNull'] = ObjectSerializer::toQueryValue($street3_is_not_null);
        }
        // query params
        if ($street3_like !== null) {
            $queryParams['Street3.Like'] = ObjectSerializer::toQueryValue($street3_like);
        }
        // query params
        if ($street3_not_like !== null) {
            $queryParams['Street3.NotLike'] = ObjectSerializer::toQueryValue($street3_not_like);
        }
        // query params
        if ($street3_contains !== null) {
            $queryParams['Street3.Contains'] = ObjectSerializer::toQueryValue($street3_contains);
        }
        // query params
        if ($street3_not_contains !== null) {
            $queryParams['Street3.NotContains'] = ObjectSerializer::toQueryValue($street3_not_contains);
        }
        // query params
        if ($street3_starts_with !== null) {
            $queryParams['Street3.StartsWith'] = ObjectSerializer::toQueryValue($street3_starts_with);
        }
        // query params
        if ($street3_not_starts_with !== null) {
            $queryParams['Street3.NotStartsWith'] = ObjectSerializer::toQueryValue($street3_not_starts_with);
        }
        // query params
        if ($street3_ends_with !== null) {
            $queryParams['Street3.EndsWith'] = ObjectSerializer::toQueryValue($street3_ends_with);
        }
        // query params
        if ($street3_not_ends_with !== null) {
            $queryParams['Street3.NotEndsWith'] = ObjectSerializer::toQueryValue($street3_not_ends_with);
        }
        // query params
        if ($street3_in !== null) {
            $queryParams['Street3.In'] = ObjectSerializer::toQueryValue($street3_in);
        }
        // query params
        if ($street3_between !== null) {
            $queryParams['Street3.Between'] = ObjectSerializer::toQueryValue($street3_between);
        }
        // query params
        if ($city_not_equal !== null) {
            $queryParams['City.NotEqual'] = ObjectSerializer::toQueryValue($city_not_equal);
        }
        // query params
        if ($city_less !== null) {
            $queryParams['City.Less'] = ObjectSerializer::toQueryValue($city_less);
        }
        // query params
        if ($city_less_or_equal !== null) {
            $queryParams['City.LessOrEqual'] = ObjectSerializer::toQueryValue($city_less_or_equal);
        }
        // query params
        if ($city_greater !== null) {
            $queryParams['City.Greater'] = ObjectSerializer::toQueryValue($city_greater);
        }
        // query params
        if ($city_greater_or_equal !== null) {
            $queryParams['City.GreaterOrEqual'] = ObjectSerializer::toQueryValue($city_greater_or_equal);
        }
        // query params
        if ($city_is_null !== null) {
            $queryParams['City.IsNull'] = ObjectSerializer::toQueryValue($city_is_null);
        }
        // query params
        if ($city_is_not_null !== null) {
            $queryParams['City.IsNotNull'] = ObjectSerializer::toQueryValue($city_is_not_null);
        }
        // query params
        if ($city_like !== null) {
            $queryParams['City.Like'] = ObjectSerializer::toQueryValue($city_like);
        }
        // query params
        if ($city_not_like !== null) {
            $queryParams['City.NotLike'] = ObjectSerializer::toQueryValue($city_not_like);
        }
        // query params
        if ($city_contains !== null) {
            $queryParams['City.Contains'] = ObjectSerializer::toQueryValue($city_contains);
        }
        // query params
        if ($city_not_contains !== null) {
            $queryParams['City.NotContains'] = ObjectSerializer::toQueryValue($city_not_contains);
        }
        // query params
        if ($city_starts_with !== null) {
            $queryParams['City.StartsWith'] = ObjectSerializer::toQueryValue($city_starts_with);
        }
        // query params
        if ($city_not_starts_with !== null) {
            $queryParams['City.NotStartsWith'] = ObjectSerializer::toQueryValue($city_not_starts_with);
        }
        // query params
        if ($city_ends_with !== null) {
            $queryParams['City.EndsWith'] = ObjectSerializer::toQueryValue($city_ends_with);
        }
        // query params
        if ($city_not_ends_with !== null) {
            $queryParams['City.NotEndsWith'] = ObjectSerializer::toQueryValue($city_not_ends_with);
        }
        // query params
        if ($city_in !== null) {
            $queryParams['City.In'] = ObjectSerializer::toQueryValue($city_in);
        }
        // query params
        if ($city_between !== null) {
            $queryParams['City.Between'] = ObjectSerializer::toQueryValue($city_between);
        }
        // query params
        if ($state_not_equal !== null) {
            $queryParams['State.NotEqual'] = ObjectSerializer::toQueryValue($state_not_equal);
        }
        // query params
        if ($state_less !== null) {
            $queryParams['State.Less'] = ObjectSerializer::toQueryValue($state_less);
        }
        // query params
        if ($state_less_or_equal !== null) {
            $queryParams['State.LessOrEqual'] = ObjectSerializer::toQueryValue($state_less_or_equal);
        }
        // query params
        if ($state_greater !== null) {
            $queryParams['State.Greater'] = ObjectSerializer::toQueryValue($state_greater);
        }
        // query params
        if ($state_greater_or_equal !== null) {
            $queryParams['State.GreaterOrEqual'] = ObjectSerializer::toQueryValue($state_greater_or_equal);
        }
        // query params
        if ($state_is_null !== null) {
            $queryParams['State.IsNull'] = ObjectSerializer::toQueryValue($state_is_null);
        }
        // query params
        if ($state_is_not_null !== null) {
            $queryParams['State.IsNotNull'] = ObjectSerializer::toQueryValue($state_is_not_null);
        }
        // query params
        if ($state_like !== null) {
            $queryParams['State.Like'] = ObjectSerializer::toQueryValue($state_like);
        }
        // query params
        if ($state_not_like !== null) {
            $queryParams['State.NotLike'] = ObjectSerializer::toQueryValue($state_not_like);
        }
        // query params
        if ($state_contains !== null) {
            $queryParams['State.Contains'] = ObjectSerializer::toQueryValue($state_contains);
        }
        // query params
        if ($state_not_contains !== null) {
            $queryParams['State.NotContains'] = ObjectSerializer::toQueryValue($state_not_contains);
        }
        // query params
        if ($state_starts_with !== null) {
            $queryParams['State.StartsWith'] = ObjectSerializer::toQueryValue($state_starts_with);
        }
        // query params
        if ($state_not_starts_with !== null) {
            $queryParams['State.NotStartsWith'] = ObjectSerializer::toQueryValue($state_not_starts_with);
        }
        // query params
        if ($state_ends_with !== null) {
            $queryParams['State.EndsWith'] = ObjectSerializer::toQueryValue($state_ends_with);
        }
        // query params
        if ($state_not_ends_with !== null) {
            $queryParams['State.NotEndsWith'] = ObjectSerializer::toQueryValue($state_not_ends_with);
        }
        // query params
        if ($state_in !== null) {
            $queryParams['State.In'] = ObjectSerializer::toQueryValue($state_in);
        }
        // query params
        if ($state_between !== null) {
            $queryParams['State.Between'] = ObjectSerializer::toQueryValue($state_between);
        }
        // query params
        if ($country_code_not_equal !== null) {
            $queryParams['CountryCode.NotEqual'] = ObjectSerializer::toQueryValue($country_code_not_equal);
        }
        // query params
        if ($country_code_less !== null) {
            $queryParams['CountryCode.Less'] = ObjectSerializer::toQueryValue($country_code_less);
        }
        // query params
        if ($country_code_less_or_equal !== null) {
            $queryParams['CountryCode.LessOrEqual'] = ObjectSerializer::toQueryValue($country_code_less_or_equal);
        }
        // query params
        if ($country_code_greater !== null) {
            $queryParams['CountryCode.Greater'] = ObjectSerializer::toQueryValue($country_code_greater);
        }
        // query params
        if ($country_code_greater_or_equal !== null) {
            $queryParams['CountryCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($country_code_greater_or_equal);
        }
        // query params
        if ($country_code_is_null !== null) {
            $queryParams['CountryCode.IsNull'] = ObjectSerializer::toQueryValue($country_code_is_null);
        }
        // query params
        if ($country_code_is_not_null !== null) {
            $queryParams['CountryCode.IsNotNull'] = ObjectSerializer::toQueryValue($country_code_is_not_null);
        }
        // query params
        if ($country_code_like !== null) {
            $queryParams['CountryCode.Like'] = ObjectSerializer::toQueryValue($country_code_like);
        }
        // query params
        if ($country_code_not_like !== null) {
            $queryParams['CountryCode.NotLike'] = ObjectSerializer::toQueryValue($country_code_not_like);
        }
        // query params
        if ($country_code_contains !== null) {
            $queryParams['CountryCode.Contains'] = ObjectSerializer::toQueryValue($country_code_contains);
        }
        // query params
        if ($country_code_not_contains !== null) {
            $queryParams['CountryCode.NotContains'] = ObjectSerializer::toQueryValue($country_code_not_contains);
        }
        // query params
        if ($country_code_starts_with !== null) {
            $queryParams['CountryCode.StartsWith'] = ObjectSerializer::toQueryValue($country_code_starts_with);
        }
        // query params
        if ($country_code_not_starts_with !== null) {
            $queryParams['CountryCode.NotStartsWith'] = ObjectSerializer::toQueryValue($country_code_not_starts_with);
        }
        // query params
        if ($country_code_ends_with !== null) {
            $queryParams['CountryCode.EndsWith'] = ObjectSerializer::toQueryValue($country_code_ends_with);
        }
        // query params
        if ($country_code_not_ends_with !== null) {
            $queryParams['CountryCode.NotEndsWith'] = ObjectSerializer::toQueryValue($country_code_not_ends_with);
        }
        // query params
        if ($country_code_in !== null) {
            $queryParams['CountryCode.In'] = ObjectSerializer::toQueryValue($country_code_in);
        }
        // query params
        if ($country_code_between !== null) {
            $queryParams['CountryCode.Between'] = ObjectSerializer::toQueryValue($country_code_between);
        }
        // query params
        if ($postal_code_not_equal !== null) {
            $queryParams['PostalCode.NotEqual'] = ObjectSerializer::toQueryValue($postal_code_not_equal);
        }
        // query params
        if ($postal_code_less !== null) {
            $queryParams['PostalCode.Less'] = ObjectSerializer::toQueryValue($postal_code_less);
        }
        // query params
        if ($postal_code_less_or_equal !== null) {
            $queryParams['PostalCode.LessOrEqual'] = ObjectSerializer::toQueryValue($postal_code_less_or_equal);
        }
        // query params
        if ($postal_code_greater !== null) {
            $queryParams['PostalCode.Greater'] = ObjectSerializer::toQueryValue($postal_code_greater);
        }
        // query params
        if ($postal_code_greater_or_equal !== null) {
            $queryParams['PostalCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($postal_code_greater_or_equal);
        }
        // query params
        if ($postal_code_is_null !== null) {
            $queryParams['PostalCode.IsNull'] = ObjectSerializer::toQueryValue($postal_code_is_null);
        }
        // query params
        if ($postal_code_is_not_null !== null) {
            $queryParams['PostalCode.IsNotNull'] = ObjectSerializer::toQueryValue($postal_code_is_not_null);
        }
        // query params
        if ($postal_code_like !== null) {
            $queryParams['PostalCode.Like'] = ObjectSerializer::toQueryValue($postal_code_like);
        }
        // query params
        if ($postal_code_not_like !== null) {
            $queryParams['PostalCode.NotLike'] = ObjectSerializer::toQueryValue($postal_code_not_like);
        }
        // query params
        if ($postal_code_contains !== null) {
            $queryParams['PostalCode.Contains'] = ObjectSerializer::toQueryValue($postal_code_contains);
        }
        // query params
        if ($postal_code_not_contains !== null) {
            $queryParams['PostalCode.NotContains'] = ObjectSerializer::toQueryValue($postal_code_not_contains);
        }
        // query params
        if ($postal_code_starts_with !== null) {
            $queryParams['PostalCode.StartsWith'] = ObjectSerializer::toQueryValue($postal_code_starts_with);
        }
        // query params
        if ($postal_code_not_starts_with !== null) {
            $queryParams['PostalCode.NotStartsWith'] = ObjectSerializer::toQueryValue($postal_code_not_starts_with);
        }
        // query params
        if ($postal_code_ends_with !== null) {
            $queryParams['PostalCode.EndsWith'] = ObjectSerializer::toQueryValue($postal_code_ends_with);
        }
        // query params
        if ($postal_code_not_ends_with !== null) {
            $queryParams['PostalCode.NotEndsWith'] = ObjectSerializer::toQueryValue($postal_code_not_ends_with);
        }
        // query params
        if ($postal_code_in !== null) {
            $queryParams['PostalCode.In'] = ObjectSerializer::toQueryValue($postal_code_in);
        }
        // query params
        if ($postal_code_between !== null) {
            $queryParams['PostalCode.Between'] = ObjectSerializer::toQueryValue($postal_code_between);
        }
        // query params
        if ($fax_number_not_equal !== null) {
            $queryParams['FaxNumber.NotEqual'] = ObjectSerializer::toQueryValue($fax_number_not_equal);
        }
        // query params
        if ($fax_number_less !== null) {
            $queryParams['FaxNumber.Less'] = ObjectSerializer::toQueryValue($fax_number_less);
        }
        // query params
        if ($fax_number_less_or_equal !== null) {
            $queryParams['FaxNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($fax_number_less_or_equal);
        }
        // query params
        if ($fax_number_greater !== null) {
            $queryParams['FaxNumber.Greater'] = ObjectSerializer::toQueryValue($fax_number_greater);
        }
        // query params
        if ($fax_number_greater_or_equal !== null) {
            $queryParams['FaxNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($fax_number_greater_or_equal);
        }
        // query params
        if ($fax_number_is_null !== null) {
            $queryParams['FaxNumber.IsNull'] = ObjectSerializer::toQueryValue($fax_number_is_null);
        }
        // query params
        if ($fax_number_is_not_null !== null) {
            $queryParams['FaxNumber.IsNotNull'] = ObjectSerializer::toQueryValue($fax_number_is_not_null);
        }
        // query params
        if ($fax_number_like !== null) {
            $queryParams['FaxNumber.Like'] = ObjectSerializer::toQueryValue($fax_number_like);
        }
        // query params
        if ($fax_number_not_like !== null) {
            $queryParams['FaxNumber.NotLike'] = ObjectSerializer::toQueryValue($fax_number_not_like);
        }
        // query params
        if ($fax_number_contains !== null) {
            $queryParams['FaxNumber.Contains'] = ObjectSerializer::toQueryValue($fax_number_contains);
        }
        // query params
        if ($fax_number_not_contains !== null) {
            $queryParams['FaxNumber.NotContains'] = ObjectSerializer::toQueryValue($fax_number_not_contains);
        }
        // query params
        if ($fax_number_starts_with !== null) {
            $queryParams['FaxNumber.StartsWith'] = ObjectSerializer::toQueryValue($fax_number_starts_with);
        }
        // query params
        if ($fax_number_not_starts_with !== null) {
            $queryParams['FaxNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($fax_number_not_starts_with);
        }
        // query params
        if ($fax_number_ends_with !== null) {
            $queryParams['FaxNumber.EndsWith'] = ObjectSerializer::toQueryValue($fax_number_ends_with);
        }
        // query params
        if ($fax_number_not_ends_with !== null) {
            $queryParams['FaxNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($fax_number_not_ends_with);
        }
        // query params
        if ($fax_number_in !== null) {
            $queryParams['FaxNumber.In'] = ObjectSerializer::toQueryValue($fax_number_in);
        }
        // query params
        if ($fax_number_between !== null) {
            $queryParams['FaxNumber.Between'] = ObjectSerializer::toQueryValue($fax_number_between);
        }
        // query params
        if ($company_not_equal !== null) {
            $queryParams['Company.NotEqual'] = ObjectSerializer::toQueryValue($company_not_equal);
        }
        // query params
        if ($company_less !== null) {
            $queryParams['Company.Less'] = ObjectSerializer::toQueryValue($company_less);
        }
        // query params
        if ($company_less_or_equal !== null) {
            $queryParams['Company.LessOrEqual'] = ObjectSerializer::toQueryValue($company_less_or_equal);
        }
        // query params
        if ($company_greater !== null) {
            $queryParams['Company.Greater'] = ObjectSerializer::toQueryValue($company_greater);
        }
        // query params
        if ($company_greater_or_equal !== null) {
            $queryParams['Company.GreaterOrEqual'] = ObjectSerializer::toQueryValue($company_greater_or_equal);
        }
        // query params
        if ($company_is_null !== null) {
            $queryParams['Company.IsNull'] = ObjectSerializer::toQueryValue($company_is_null);
        }
        // query params
        if ($company_is_not_null !== null) {
            $queryParams['Company.IsNotNull'] = ObjectSerializer::toQueryValue($company_is_not_null);
        }
        // query params
        if ($company_like !== null) {
            $queryParams['Company.Like'] = ObjectSerializer::toQueryValue($company_like);
        }
        // query params
        if ($company_not_like !== null) {
            $queryParams['Company.NotLike'] = ObjectSerializer::toQueryValue($company_not_like);
        }
        // query params
        if ($company_contains !== null) {
            $queryParams['Company.Contains'] = ObjectSerializer::toQueryValue($company_contains);
        }
        // query params
        if ($company_not_contains !== null) {
            $queryParams['Company.NotContains'] = ObjectSerializer::toQueryValue($company_not_contains);
        }
        // query params
        if ($company_starts_with !== null) {
            $queryParams['Company.StartsWith'] = ObjectSerializer::toQueryValue($company_starts_with);
        }
        // query params
        if ($company_not_starts_with !== null) {
            $queryParams['Company.NotStartsWith'] = ObjectSerializer::toQueryValue($company_not_starts_with);
        }
        // query params
        if ($company_ends_with !== null) {
            $queryParams['Company.EndsWith'] = ObjectSerializer::toQueryValue($company_ends_with);
        }
        // query params
        if ($company_not_ends_with !== null) {
            $queryParams['Company.NotEndsWith'] = ObjectSerializer::toQueryValue($company_not_ends_with);
        }
        // query params
        if ($company_in !== null) {
            $queryParams['Company.In'] = ObjectSerializer::toQueryValue($company_in);
        }
        // query params
        if ($company_between !== null) {
            $queryParams['Company.Between'] = ObjectSerializer::toQueryValue($company_between);
        }
        // query params
        if ($customer_type_not_equal !== null) {
            $queryParams['CustomerType.NotEqual'] = ObjectSerializer::toQueryValue($customer_type_not_equal);
        }
        // query params
        if ($customer_type_less !== null) {
            $queryParams['CustomerType.Less'] = ObjectSerializer::toQueryValue($customer_type_less);
        }
        // query params
        if ($customer_type_less_or_equal !== null) {
            $queryParams['CustomerType.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_type_less_or_equal);
        }
        // query params
        if ($customer_type_greater !== null) {
            $queryParams['CustomerType.Greater'] = ObjectSerializer::toQueryValue($customer_type_greater);
        }
        // query params
        if ($customer_type_greater_or_equal !== null) {
            $queryParams['CustomerType.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_type_greater_or_equal);
        }
        // query params
        if ($customer_type_is_null !== null) {
            $queryParams['CustomerType.IsNull'] = ObjectSerializer::toQueryValue($customer_type_is_null);
        }
        // query params
        if ($customer_type_is_not_null !== null) {
            $queryParams['CustomerType.IsNotNull'] = ObjectSerializer::toQueryValue($customer_type_is_not_null);
        }
        // query params
        if ($customer_type_like !== null) {
            $queryParams['CustomerType.Like'] = ObjectSerializer::toQueryValue($customer_type_like);
        }
        // query params
        if ($customer_type_not_like !== null) {
            $queryParams['CustomerType.NotLike'] = ObjectSerializer::toQueryValue($customer_type_not_like);
        }
        // query params
        if ($customer_type_contains !== null) {
            $queryParams['CustomerType.Contains'] = ObjectSerializer::toQueryValue($customer_type_contains);
        }
        // query params
        if ($customer_type_not_contains !== null) {
            $queryParams['CustomerType.NotContains'] = ObjectSerializer::toQueryValue($customer_type_not_contains);
        }
        // query params
        if ($customer_type_starts_with !== null) {
            $queryParams['CustomerType.StartsWith'] = ObjectSerializer::toQueryValue($customer_type_starts_with);
        }
        // query params
        if ($customer_type_not_starts_with !== null) {
            $queryParams['CustomerType.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_type_not_starts_with);
        }
        // query params
        if ($customer_type_ends_with !== null) {
            $queryParams['CustomerType.EndsWith'] = ObjectSerializer::toQueryValue($customer_type_ends_with);
        }
        // query params
        if ($customer_type_not_ends_with !== null) {
            $queryParams['CustomerType.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_type_not_ends_with);
        }
        // query params
        if ($customer_type_in !== null) {
            $queryParams['CustomerType.In'] = ObjectSerializer::toQueryValue($customer_type_in);
        }
        // query params
        if ($customer_type_between !== null) {
            $queryParams['CustomerType.Between'] = ObjectSerializer::toQueryValue($customer_type_between);
        }
        // query params
        if ($promote_flag_not_equal !== null) {
            $queryParams['PromoteFlag.NotEqual'] = ObjectSerializer::toQueryValue($promote_flag_not_equal);
        }
        // query params
        if ($promote_flag_less !== null) {
            $queryParams['PromoteFlag.Less'] = ObjectSerializer::toQueryValue($promote_flag_less);
        }
        // query params
        if ($promote_flag_less_or_equal !== null) {
            $queryParams['PromoteFlag.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_flag_less_or_equal);
        }
        // query params
        if ($promote_flag_greater !== null) {
            $queryParams['PromoteFlag.Greater'] = ObjectSerializer::toQueryValue($promote_flag_greater);
        }
        // query params
        if ($promote_flag_greater_or_equal !== null) {
            $queryParams['PromoteFlag.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_flag_greater_or_equal);
        }
        // query params
        if ($promote_flag_is_null !== null) {
            $queryParams['PromoteFlag.IsNull'] = ObjectSerializer::toQueryValue($promote_flag_is_null);
        }
        // query params
        if ($promote_flag_is_not_null !== null) {
            $queryParams['PromoteFlag.IsNotNull'] = ObjectSerializer::toQueryValue($promote_flag_is_not_null);
        }
        // query params
        if ($promote_flag_like !== null) {
            $queryParams['PromoteFlag.Like'] = ObjectSerializer::toQueryValue($promote_flag_like);
        }
        // query params
        if ($promote_flag_not_like !== null) {
            $queryParams['PromoteFlag.NotLike'] = ObjectSerializer::toQueryValue($promote_flag_not_like);
        }
        // query params
        if ($promote_flag_contains !== null) {
            $queryParams['PromoteFlag.Contains'] = ObjectSerializer::toQueryValue($promote_flag_contains);
        }
        // query params
        if ($promote_flag_not_contains !== null) {
            $queryParams['PromoteFlag.NotContains'] = ObjectSerializer::toQueryValue($promote_flag_not_contains);
        }
        // query params
        if ($promote_flag_starts_with !== null) {
            $queryParams['PromoteFlag.StartsWith'] = ObjectSerializer::toQueryValue($promote_flag_starts_with);
        }
        // query params
        if ($promote_flag_not_starts_with !== null) {
            $queryParams['PromoteFlag.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_flag_not_starts_with);
        }
        // query params
        if ($promote_flag_ends_with !== null) {
            $queryParams['PromoteFlag.EndsWith'] = ObjectSerializer::toQueryValue($promote_flag_ends_with);
        }
        // query params
        if ($promote_flag_not_ends_with !== null) {
            $queryParams['PromoteFlag.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_flag_not_ends_with);
        }
        // query params
        if ($promote_flag_in !== null) {
            $queryParams['PromoteFlag.In'] = ObjectSerializer::toQueryValue($promote_flag_in);
        }
        // query params
        if ($promote_flag_between !== null) {
            $queryParams['PromoteFlag.Between'] = ObjectSerializer::toQueryValue($promote_flag_between);
        }
        // query params
        if ($promote_by_partners_not_equal !== null) {
            $queryParams['PromoteByPartners.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_not_equal);
        }
        // query params
        if ($promote_by_partners_less !== null) {
            $queryParams['PromoteByPartners.Less'] = ObjectSerializer::toQueryValue($promote_by_partners_less);
        }
        // query params
        if ($promote_by_partners_less_or_equal !== null) {
            $queryParams['PromoteByPartners.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_less_or_equal);
        }
        // query params
        if ($promote_by_partners_greater !== null) {
            $queryParams['PromoteByPartners.Greater'] = ObjectSerializer::toQueryValue($promote_by_partners_greater);
        }
        // query params
        if ($promote_by_partners_greater_or_equal !== null) {
            $queryParams['PromoteByPartners.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_greater_or_equal);
        }
        // query params
        if ($promote_by_partners_is_null !== null) {
            $queryParams['PromoteByPartners.IsNull'] = ObjectSerializer::toQueryValue($promote_by_partners_is_null);
        }
        // query params
        if ($promote_by_partners_is_not_null !== null) {
            $queryParams['PromoteByPartners.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_partners_is_not_null);
        }
        // query params
        if ($promote_by_partners_like !== null) {
            $queryParams['PromoteByPartners.Like'] = ObjectSerializer::toQueryValue($promote_by_partners_like);
        }
        // query params
        if ($promote_by_partners_not_like !== null) {
            $queryParams['PromoteByPartners.NotLike'] = ObjectSerializer::toQueryValue($promote_by_partners_not_like);
        }
        // query params
        if ($promote_by_partners_contains !== null) {
            $queryParams['PromoteByPartners.Contains'] = ObjectSerializer::toQueryValue($promote_by_partners_contains);
        }
        // query params
        if ($promote_by_partners_not_contains !== null) {
            $queryParams['PromoteByPartners.NotContains'] = ObjectSerializer::toQueryValue($promote_by_partners_not_contains);
        }
        // query params
        if ($promote_by_partners_starts_with !== null) {
            $queryParams['PromoteByPartners.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_starts_with);
        }
        // query params
        if ($promote_by_partners_not_starts_with !== null) {
            $queryParams['PromoteByPartners.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_not_starts_with);
        }
        // query params
        if ($promote_by_partners_ends_with !== null) {
            $queryParams['PromoteByPartners.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_ends_with);
        }
        // query params
        if ($promote_by_partners_not_ends_with !== null) {
            $queryParams['PromoteByPartners.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_not_ends_with);
        }
        // query params
        if ($promote_by_partners_in !== null) {
            $queryParams['PromoteByPartners.In'] = ObjectSerializer::toQueryValue($promote_by_partners_in);
        }
        // query params
        if ($promote_by_partners_between !== null) {
            $queryParams['PromoteByPartners.Between'] = ObjectSerializer::toQueryValue($promote_by_partners_between);
        }
        // query params
        if ($promote_by_phone_not_equal !== null) {
            $queryParams['PromoteByPhone.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_not_equal);
        }
        // query params
        if ($promote_by_phone_less !== null) {
            $queryParams['PromoteByPhone.Less'] = ObjectSerializer::toQueryValue($promote_by_phone_less);
        }
        // query params
        if ($promote_by_phone_less_or_equal !== null) {
            $queryParams['PromoteByPhone.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_less_or_equal);
        }
        // query params
        if ($promote_by_phone_greater !== null) {
            $queryParams['PromoteByPhone.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone_greater);
        }
        // query params
        if ($promote_by_phone_greater_or_equal !== null) {
            $queryParams['PromoteByPhone.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_greater_or_equal);
        }
        // query params
        if ($promote_by_phone_is_null !== null) {
            $queryParams['PromoteByPhone.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone_is_null);
        }
        // query params
        if ($promote_by_phone_is_not_null !== null) {
            $queryParams['PromoteByPhone.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone_is_not_null);
        }
        // query params
        if ($promote_by_phone_like !== null) {
            $queryParams['PromoteByPhone.Like'] = ObjectSerializer::toQueryValue($promote_by_phone_like);
        }
        // query params
        if ($promote_by_phone_not_like !== null) {
            $queryParams['PromoteByPhone.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone_not_like);
        }
        // query params
        if ($promote_by_phone_contains !== null) {
            $queryParams['PromoteByPhone.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone_contains);
        }
        // query params
        if ($promote_by_phone_not_contains !== null) {
            $queryParams['PromoteByPhone.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone_not_contains);
        }
        // query params
        if ($promote_by_phone_starts_with !== null) {
            $queryParams['PromoteByPhone.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_starts_with);
        }
        // query params
        if ($promote_by_phone_not_starts_with !== null) {
            $queryParams['PromoteByPhone.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_not_starts_with);
        }
        // query params
        if ($promote_by_phone_ends_with !== null) {
            $queryParams['PromoteByPhone.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_ends_with);
        }
        // query params
        if ($promote_by_phone_not_ends_with !== null) {
            $queryParams['PromoteByPhone.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_not_ends_with);
        }
        // query params
        if ($promote_by_phone_in !== null) {
            $queryParams['PromoteByPhone.In'] = ObjectSerializer::toQueryValue($promote_by_phone_in);
        }
        // query params
        if ($promote_by_phone_between !== null) {
            $queryParams['PromoteByPhone.Between'] = ObjectSerializer::toQueryValue($promote_by_phone_between);
        }
        // query params
        if ($promote_by_fax_not_equal !== null) {
            $queryParams['PromoteByFax.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_not_equal);
        }
        // query params
        if ($promote_by_fax_less !== null) {
            $queryParams['PromoteByFax.Less'] = ObjectSerializer::toQueryValue($promote_by_fax_less);
        }
        // query params
        if ($promote_by_fax_less_or_equal !== null) {
            $queryParams['PromoteByFax.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_less_or_equal);
        }
        // query params
        if ($promote_by_fax_greater !== null) {
            $queryParams['PromoteByFax.Greater'] = ObjectSerializer::toQueryValue($promote_by_fax_greater);
        }
        // query params
        if ($promote_by_fax_greater_or_equal !== null) {
            $queryParams['PromoteByFax.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_greater_or_equal);
        }
        // query params
        if ($promote_by_fax_is_null !== null) {
            $queryParams['PromoteByFax.IsNull'] = ObjectSerializer::toQueryValue($promote_by_fax_is_null);
        }
        // query params
        if ($promote_by_fax_is_not_null !== null) {
            $queryParams['PromoteByFax.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_fax_is_not_null);
        }
        // query params
        if ($promote_by_fax_like !== null) {
            $queryParams['PromoteByFax.Like'] = ObjectSerializer::toQueryValue($promote_by_fax_like);
        }
        // query params
        if ($promote_by_fax_not_like !== null) {
            $queryParams['PromoteByFax.NotLike'] = ObjectSerializer::toQueryValue($promote_by_fax_not_like);
        }
        // query params
        if ($promote_by_fax_contains !== null) {
            $queryParams['PromoteByFax.Contains'] = ObjectSerializer::toQueryValue($promote_by_fax_contains);
        }
        // query params
        if ($promote_by_fax_not_contains !== null) {
            $queryParams['PromoteByFax.NotContains'] = ObjectSerializer::toQueryValue($promote_by_fax_not_contains);
        }
        // query params
        if ($promote_by_fax_starts_with !== null) {
            $queryParams['PromoteByFax.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_starts_with);
        }
        // query params
        if ($promote_by_fax_not_starts_with !== null) {
            $queryParams['PromoteByFax.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_not_starts_with);
        }
        // query params
        if ($promote_by_fax_ends_with !== null) {
            $queryParams['PromoteByFax.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_ends_with);
        }
        // query params
        if ($promote_by_fax_not_ends_with !== null) {
            $queryParams['PromoteByFax.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_not_ends_with);
        }
        // query params
        if ($promote_by_fax_in !== null) {
            $queryParams['PromoteByFax.In'] = ObjectSerializer::toQueryValue($promote_by_fax_in);
        }
        // query params
        if ($promote_by_fax_between !== null) {
            $queryParams['PromoteByFax.Between'] = ObjectSerializer::toQueryValue($promote_by_fax_between);
        }
        // query params
        if ($promote_by_email_not_equal !== null) {
            $queryParams['PromoteByEmail.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_email_not_equal);
        }
        // query params
        if ($promote_by_email_less !== null) {
            $queryParams['PromoteByEmail.Less'] = ObjectSerializer::toQueryValue($promote_by_email_less);
        }
        // query params
        if ($promote_by_email_less_or_equal !== null) {
            $queryParams['PromoteByEmail.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_email_less_or_equal);
        }
        // query params
        if ($promote_by_email_greater !== null) {
            $queryParams['PromoteByEmail.Greater'] = ObjectSerializer::toQueryValue($promote_by_email_greater);
        }
        // query params
        if ($promote_by_email_greater_or_equal !== null) {
            $queryParams['PromoteByEmail.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_email_greater_or_equal);
        }
        // query params
        if ($promote_by_email_is_null !== null) {
            $queryParams['PromoteByEmail.IsNull'] = ObjectSerializer::toQueryValue($promote_by_email_is_null);
        }
        // query params
        if ($promote_by_email_is_not_null !== null) {
            $queryParams['PromoteByEmail.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_email_is_not_null);
        }
        // query params
        if ($promote_by_email_like !== null) {
            $queryParams['PromoteByEmail.Like'] = ObjectSerializer::toQueryValue($promote_by_email_like);
        }
        // query params
        if ($promote_by_email_not_like !== null) {
            $queryParams['PromoteByEmail.NotLike'] = ObjectSerializer::toQueryValue($promote_by_email_not_like);
        }
        // query params
        if ($promote_by_email_contains !== null) {
            $queryParams['PromoteByEmail.Contains'] = ObjectSerializer::toQueryValue($promote_by_email_contains);
        }
        // query params
        if ($promote_by_email_not_contains !== null) {
            $queryParams['PromoteByEmail.NotContains'] = ObjectSerializer::toQueryValue($promote_by_email_not_contains);
        }
        // query params
        if ($promote_by_email_starts_with !== null) {
            $queryParams['PromoteByEmail.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_email_starts_with);
        }
        // query params
        if ($promote_by_email_not_starts_with !== null) {
            $queryParams['PromoteByEmail.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_email_not_starts_with);
        }
        // query params
        if ($promote_by_email_ends_with !== null) {
            $queryParams['PromoteByEmail.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_email_ends_with);
        }
        // query params
        if ($promote_by_email_not_ends_with !== null) {
            $queryParams['PromoteByEmail.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_email_not_ends_with);
        }
        // query params
        if ($promote_by_email_in !== null) {
            $queryParams['PromoteByEmail.In'] = ObjectSerializer::toQueryValue($promote_by_email_in);
        }
        // query params
        if ($promote_by_email_between !== null) {
            $queryParams['PromoteByEmail.Between'] = ObjectSerializer::toQueryValue($promote_by_email_between);
        }
        // query params
        if ($promote_by_mail_not_equal !== null) {
            $queryParams['PromoteByMail.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_not_equal);
        }
        // query params
        if ($promote_by_mail_less !== null) {
            $queryParams['PromoteByMail.Less'] = ObjectSerializer::toQueryValue($promote_by_mail_less);
        }
        // query params
        if ($promote_by_mail_less_or_equal !== null) {
            $queryParams['PromoteByMail.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_less_or_equal);
        }
        // query params
        if ($promote_by_mail_greater !== null) {
            $queryParams['PromoteByMail.Greater'] = ObjectSerializer::toQueryValue($promote_by_mail_greater);
        }
        // query params
        if ($promote_by_mail_greater_or_equal !== null) {
            $queryParams['PromoteByMail.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_greater_or_equal);
        }
        // query params
        if ($promote_by_mail_is_null !== null) {
            $queryParams['PromoteByMail.IsNull'] = ObjectSerializer::toQueryValue($promote_by_mail_is_null);
        }
        // query params
        if ($promote_by_mail_is_not_null !== null) {
            $queryParams['PromoteByMail.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_mail_is_not_null);
        }
        // query params
        if ($promote_by_mail_like !== null) {
            $queryParams['PromoteByMail.Like'] = ObjectSerializer::toQueryValue($promote_by_mail_like);
        }
        // query params
        if ($promote_by_mail_not_like !== null) {
            $queryParams['PromoteByMail.NotLike'] = ObjectSerializer::toQueryValue($promote_by_mail_not_like);
        }
        // query params
        if ($promote_by_mail_contains !== null) {
            $queryParams['PromoteByMail.Contains'] = ObjectSerializer::toQueryValue($promote_by_mail_contains);
        }
        // query params
        if ($promote_by_mail_not_contains !== null) {
            $queryParams['PromoteByMail.NotContains'] = ObjectSerializer::toQueryValue($promote_by_mail_not_contains);
        }
        // query params
        if ($promote_by_mail_starts_with !== null) {
            $queryParams['PromoteByMail.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_starts_with);
        }
        // query params
        if ($promote_by_mail_not_starts_with !== null) {
            $queryParams['PromoteByMail.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_not_starts_with);
        }
        // query params
        if ($promote_by_mail_ends_with !== null) {
            $queryParams['PromoteByMail.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_ends_with);
        }
        // query params
        if ($promote_by_mail_not_ends_with !== null) {
            $queryParams['PromoteByMail.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_not_ends_with);
        }
        // query params
        if ($promote_by_mail_in !== null) {
            $queryParams['PromoteByMail.In'] = ObjectSerializer::toQueryValue($promote_by_mail_in);
        }
        // query params
        if ($promote_by_mail_between !== null) {
            $queryParams['PromoteByMail.Between'] = ObjectSerializer::toQueryValue($promote_by_mail_between);
        }
        // query params
        if ($promote_by_sms_not_equal !== null) {
            $queryParams['PromoteBySms.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_not_equal);
        }
        // query params
        if ($promote_by_sms_less !== null) {
            $queryParams['PromoteBySms.Less'] = ObjectSerializer::toQueryValue($promote_by_sms_less);
        }
        // query params
        if ($promote_by_sms_less_or_equal !== null) {
            $queryParams['PromoteBySms.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_less_or_equal);
        }
        // query params
        if ($promote_by_sms_greater !== null) {
            $queryParams['PromoteBySms.Greater'] = ObjectSerializer::toQueryValue($promote_by_sms_greater);
        }
        // query params
        if ($promote_by_sms_greater_or_equal !== null) {
            $queryParams['PromoteBySms.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_greater_or_equal);
        }
        // query params
        if ($promote_by_sms_is_null !== null) {
            $queryParams['PromoteBySms.IsNull'] = ObjectSerializer::toQueryValue($promote_by_sms_is_null);
        }
        // query params
        if ($promote_by_sms_is_not_null !== null) {
            $queryParams['PromoteBySms.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_sms_is_not_null);
        }
        // query params
        if ($promote_by_sms_like !== null) {
            $queryParams['PromoteBySms.Like'] = ObjectSerializer::toQueryValue($promote_by_sms_like);
        }
        // query params
        if ($promote_by_sms_not_like !== null) {
            $queryParams['PromoteBySms.NotLike'] = ObjectSerializer::toQueryValue($promote_by_sms_not_like);
        }
        // query params
        if ($promote_by_sms_contains !== null) {
            $queryParams['PromoteBySms.Contains'] = ObjectSerializer::toQueryValue($promote_by_sms_contains);
        }
        // query params
        if ($promote_by_sms_not_contains !== null) {
            $queryParams['PromoteBySms.NotContains'] = ObjectSerializer::toQueryValue($promote_by_sms_not_contains);
        }
        // query params
        if ($promote_by_sms_starts_with !== null) {
            $queryParams['PromoteBySms.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_starts_with);
        }
        // query params
        if ($promote_by_sms_not_starts_with !== null) {
            $queryParams['PromoteBySms.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_not_starts_with);
        }
        // query params
        if ($promote_by_sms_ends_with !== null) {
            $queryParams['PromoteBySms.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_ends_with);
        }
        // query params
        if ($promote_by_sms_not_ends_with !== null) {
            $queryParams['PromoteBySms.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_not_ends_with);
        }
        // query params
        if ($promote_by_sms_in !== null) {
            $queryParams['PromoteBySms.In'] = ObjectSerializer::toQueryValue($promote_by_sms_in);
        }
        // query params
        if ($promote_by_sms_between !== null) {
            $queryParams['PromoteBySms.Between'] = ObjectSerializer::toQueryValue($promote_by_sms_between);
        }
        // query params
        if ($promote_by_phone1_not_equal !== null) {
            $queryParams['PromoteByPhone1.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_equal);
        }
        // query params
        if ($promote_by_phone1_less !== null) {
            $queryParams['PromoteByPhone1.Less'] = ObjectSerializer::toQueryValue($promote_by_phone1_less);
        }
        // query params
        if ($promote_by_phone1_less_or_equal !== null) {
            $queryParams['PromoteByPhone1.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_less_or_equal);
        }
        // query params
        if ($promote_by_phone1_greater !== null) {
            $queryParams['PromoteByPhone1.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone1_greater);
        }
        // query params
        if ($promote_by_phone1_greater_or_equal !== null) {
            $queryParams['PromoteByPhone1.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_greater_or_equal);
        }
        // query params
        if ($promote_by_phone1_is_null !== null) {
            $queryParams['PromoteByPhone1.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone1_is_null);
        }
        // query params
        if ($promote_by_phone1_is_not_null !== null) {
            $queryParams['PromoteByPhone1.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone1_is_not_null);
        }
        // query params
        if ($promote_by_phone1_like !== null) {
            $queryParams['PromoteByPhone1.Like'] = ObjectSerializer::toQueryValue($promote_by_phone1_like);
        }
        // query params
        if ($promote_by_phone1_not_like !== null) {
            $queryParams['PromoteByPhone1.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_like);
        }
        // query params
        if ($promote_by_phone1_contains !== null) {
            $queryParams['PromoteByPhone1.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone1_contains);
        }
        // query params
        if ($promote_by_phone1_not_contains !== null) {
            $queryParams['PromoteByPhone1.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_contains);
        }
        // query params
        if ($promote_by_phone1_starts_with !== null) {
            $queryParams['PromoteByPhone1.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_starts_with);
        }
        // query params
        if ($promote_by_phone1_not_starts_with !== null) {
            $queryParams['PromoteByPhone1.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_starts_with);
        }
        // query params
        if ($promote_by_phone1_ends_with !== null) {
            $queryParams['PromoteByPhone1.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_ends_with);
        }
        // query params
        if ($promote_by_phone1_not_ends_with !== null) {
            $queryParams['PromoteByPhone1.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_ends_with);
        }
        // query params
        if ($promote_by_phone1_in !== null) {
            $queryParams['PromoteByPhone1.In'] = ObjectSerializer::toQueryValue($promote_by_phone1_in);
        }
        // query params
        if ($promote_by_phone1_between !== null) {
            $queryParams['PromoteByPhone1.Between'] = ObjectSerializer::toQueryValue($promote_by_phone1_between);
        }
        // query params
        if ($promote_by_phone2_not_equal !== null) {
            $queryParams['PromoteByPhone2.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_equal);
        }
        // query params
        if ($promote_by_phone2_less !== null) {
            $queryParams['PromoteByPhone2.Less'] = ObjectSerializer::toQueryValue($promote_by_phone2_less);
        }
        // query params
        if ($promote_by_phone2_less_or_equal !== null) {
            $queryParams['PromoteByPhone2.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_less_or_equal);
        }
        // query params
        if ($promote_by_phone2_greater !== null) {
            $queryParams['PromoteByPhone2.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone2_greater);
        }
        // query params
        if ($promote_by_phone2_greater_or_equal !== null) {
            $queryParams['PromoteByPhone2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_greater_or_equal);
        }
        // query params
        if ($promote_by_phone2_is_null !== null) {
            $queryParams['PromoteByPhone2.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone2_is_null);
        }
        // query params
        if ($promote_by_phone2_is_not_null !== null) {
            $queryParams['PromoteByPhone2.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone2_is_not_null);
        }
        // query params
        if ($promote_by_phone2_like !== null) {
            $queryParams['PromoteByPhone2.Like'] = ObjectSerializer::toQueryValue($promote_by_phone2_like);
        }
        // query params
        if ($promote_by_phone2_not_like !== null) {
            $queryParams['PromoteByPhone2.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_like);
        }
        // query params
        if ($promote_by_phone2_contains !== null) {
            $queryParams['PromoteByPhone2.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone2_contains);
        }
        // query params
        if ($promote_by_phone2_not_contains !== null) {
            $queryParams['PromoteByPhone2.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_contains);
        }
        // query params
        if ($promote_by_phone2_starts_with !== null) {
            $queryParams['PromoteByPhone2.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_starts_with);
        }
        // query params
        if ($promote_by_phone2_not_starts_with !== null) {
            $queryParams['PromoteByPhone2.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_starts_with);
        }
        // query params
        if ($promote_by_phone2_ends_with !== null) {
            $queryParams['PromoteByPhone2.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_ends_with);
        }
        // query params
        if ($promote_by_phone2_not_ends_with !== null) {
            $queryParams['PromoteByPhone2.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_ends_with);
        }
        // query params
        if ($promote_by_phone2_in !== null) {
            $queryParams['PromoteByPhone2.In'] = ObjectSerializer::toQueryValue($promote_by_phone2_in);
        }
        // query params
        if ($promote_by_phone2_between !== null) {
            $queryParams['PromoteByPhone2.Between'] = ObjectSerializer::toQueryValue($promote_by_phone2_between);
        }
        // query params
        if ($promote_by_phone3_not_equal !== null) {
            $queryParams['PromoteByPhone3.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_equal);
        }
        // query params
        if ($promote_by_phone3_less !== null) {
            $queryParams['PromoteByPhone3.Less'] = ObjectSerializer::toQueryValue($promote_by_phone3_less);
        }
        // query params
        if ($promote_by_phone3_less_or_equal !== null) {
            $queryParams['PromoteByPhone3.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_less_or_equal);
        }
        // query params
        if ($promote_by_phone3_greater !== null) {
            $queryParams['PromoteByPhone3.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone3_greater);
        }
        // query params
        if ($promote_by_phone3_greater_or_equal !== null) {
            $queryParams['PromoteByPhone3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_greater_or_equal);
        }
        // query params
        if ($promote_by_phone3_is_null !== null) {
            $queryParams['PromoteByPhone3.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone3_is_null);
        }
        // query params
        if ($promote_by_phone3_is_not_null !== null) {
            $queryParams['PromoteByPhone3.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone3_is_not_null);
        }
        // query params
        if ($promote_by_phone3_like !== null) {
            $queryParams['PromoteByPhone3.Like'] = ObjectSerializer::toQueryValue($promote_by_phone3_like);
        }
        // query params
        if ($promote_by_phone3_not_like !== null) {
            $queryParams['PromoteByPhone3.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_like);
        }
        // query params
        if ($promote_by_phone3_contains !== null) {
            $queryParams['PromoteByPhone3.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone3_contains);
        }
        // query params
        if ($promote_by_phone3_not_contains !== null) {
            $queryParams['PromoteByPhone3.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_contains);
        }
        // query params
        if ($promote_by_phone3_starts_with !== null) {
            $queryParams['PromoteByPhone3.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_starts_with);
        }
        // query params
        if ($promote_by_phone3_not_starts_with !== null) {
            $queryParams['PromoteByPhone3.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_starts_with);
        }
        // query params
        if ($promote_by_phone3_ends_with !== null) {
            $queryParams['PromoteByPhone3.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_ends_with);
        }
        // query params
        if ($promote_by_phone3_not_ends_with !== null) {
            $queryParams['PromoteByPhone3.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_ends_with);
        }
        // query params
        if ($promote_by_phone3_in !== null) {
            $queryParams['PromoteByPhone3.In'] = ObjectSerializer::toQueryValue($promote_by_phone3_in);
        }
        // query params
        if ($promote_by_phone3_between !== null) {
            $queryParams['PromoteByPhone3.Between'] = ObjectSerializer::toQueryValue($promote_by_phone3_between);
        }
        // query params
        if ($title_not_equal !== null) {
            $queryParams['Title.NotEqual'] = ObjectSerializer::toQueryValue($title_not_equal);
        }
        // query params
        if ($title_less !== null) {
            $queryParams['Title.Less'] = ObjectSerializer::toQueryValue($title_less);
        }
        // query params
        if ($title_less_or_equal !== null) {
            $queryParams['Title.LessOrEqual'] = ObjectSerializer::toQueryValue($title_less_or_equal);
        }
        // query params
        if ($title_greater !== null) {
            $queryParams['Title.Greater'] = ObjectSerializer::toQueryValue($title_greater);
        }
        // query params
        if ($title_greater_or_equal !== null) {
            $queryParams['Title.GreaterOrEqual'] = ObjectSerializer::toQueryValue($title_greater_or_equal);
        }
        // query params
        if ($title_is_null !== null) {
            $queryParams['Title.IsNull'] = ObjectSerializer::toQueryValue($title_is_null);
        }
        // query params
        if ($title_is_not_null !== null) {
            $queryParams['Title.IsNotNull'] = ObjectSerializer::toQueryValue($title_is_not_null);
        }
        // query params
        if ($title_like !== null) {
            $queryParams['Title.Like'] = ObjectSerializer::toQueryValue($title_like);
        }
        // query params
        if ($title_not_like !== null) {
            $queryParams['Title.NotLike'] = ObjectSerializer::toQueryValue($title_not_like);
        }
        // query params
        if ($title_contains !== null) {
            $queryParams['Title.Contains'] = ObjectSerializer::toQueryValue($title_contains);
        }
        // query params
        if ($title_not_contains !== null) {
            $queryParams['Title.NotContains'] = ObjectSerializer::toQueryValue($title_not_contains);
        }
        // query params
        if ($title_starts_with !== null) {
            $queryParams['Title.StartsWith'] = ObjectSerializer::toQueryValue($title_starts_with);
        }
        // query params
        if ($title_not_starts_with !== null) {
            $queryParams['Title.NotStartsWith'] = ObjectSerializer::toQueryValue($title_not_starts_with);
        }
        // query params
        if ($title_ends_with !== null) {
            $queryParams['Title.EndsWith'] = ObjectSerializer::toQueryValue($title_ends_with);
        }
        // query params
        if ($title_not_ends_with !== null) {
            $queryParams['Title.NotEndsWith'] = ObjectSerializer::toQueryValue($title_not_ends_with);
        }
        // query params
        if ($title_in !== null) {
            $queryParams['Title.In'] = ObjectSerializer::toQueryValue($title_in);
        }
        // query params
        if ($title_between !== null) {
            $queryParams['Title.Between'] = ObjectSerializer::toQueryValue($title_between);
        }
        // query params
        if ($first_name_not_equal !== null) {
            $queryParams['FirstName.NotEqual'] = ObjectSerializer::toQueryValue($first_name_not_equal);
        }
        // query params
        if ($first_name_less !== null) {
            $queryParams['FirstName.Less'] = ObjectSerializer::toQueryValue($first_name_less);
        }
        // query params
        if ($first_name_less_or_equal !== null) {
            $queryParams['FirstName.LessOrEqual'] = ObjectSerializer::toQueryValue($first_name_less_or_equal);
        }
        // query params
        if ($first_name_greater !== null) {
            $queryParams['FirstName.Greater'] = ObjectSerializer::toQueryValue($first_name_greater);
        }
        // query params
        if ($first_name_greater_or_equal !== null) {
            $queryParams['FirstName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($first_name_greater_or_equal);
        }
        // query params
        if ($first_name_is_null !== null) {
            $queryParams['FirstName.IsNull'] = ObjectSerializer::toQueryValue($first_name_is_null);
        }
        // query params
        if ($first_name_is_not_null !== null) {
            $queryParams['FirstName.IsNotNull'] = ObjectSerializer::toQueryValue($first_name_is_not_null);
        }
        // query params
        if ($first_name_like !== null) {
            $queryParams['FirstName.Like'] = ObjectSerializer::toQueryValue($first_name_like);
        }
        // query params
        if ($first_name_not_like !== null) {
            $queryParams['FirstName.NotLike'] = ObjectSerializer::toQueryValue($first_name_not_like);
        }
        // query params
        if ($first_name_contains !== null) {
            $queryParams['FirstName.Contains'] = ObjectSerializer::toQueryValue($first_name_contains);
        }
        // query params
        if ($first_name_not_contains !== null) {
            $queryParams['FirstName.NotContains'] = ObjectSerializer::toQueryValue($first_name_not_contains);
        }
        // query params
        if ($first_name_starts_with !== null) {
            $queryParams['FirstName.StartsWith'] = ObjectSerializer::toQueryValue($first_name_starts_with);
        }
        // query params
        if ($first_name_not_starts_with !== null) {
            $queryParams['FirstName.NotStartsWith'] = ObjectSerializer::toQueryValue($first_name_not_starts_with);
        }
        // query params
        if ($first_name_ends_with !== null) {
            $queryParams['FirstName.EndsWith'] = ObjectSerializer::toQueryValue($first_name_ends_with);
        }
        // query params
        if ($first_name_not_ends_with !== null) {
            $queryParams['FirstName.NotEndsWith'] = ObjectSerializer::toQueryValue($first_name_not_ends_with);
        }
        // query params
        if ($first_name_in !== null) {
            $queryParams['FirstName.In'] = ObjectSerializer::toQueryValue($first_name_in);
        }
        // query params
        if ($first_name_between !== null) {
            $queryParams['FirstName.Between'] = ObjectSerializer::toQueryValue($first_name_between);
        }
        // query params
        if ($middle_initial_not_equal !== null) {
            $queryParams['MiddleInitial.NotEqual'] = ObjectSerializer::toQueryValue($middle_initial_not_equal);
        }
        // query params
        if ($middle_initial_less !== null) {
            $queryParams['MiddleInitial.Less'] = ObjectSerializer::toQueryValue($middle_initial_less);
        }
        // query params
        if ($middle_initial_less_or_equal !== null) {
            $queryParams['MiddleInitial.LessOrEqual'] = ObjectSerializer::toQueryValue($middle_initial_less_or_equal);
        }
        // query params
        if ($middle_initial_greater !== null) {
            $queryParams['MiddleInitial.Greater'] = ObjectSerializer::toQueryValue($middle_initial_greater);
        }
        // query params
        if ($middle_initial_greater_or_equal !== null) {
            $queryParams['MiddleInitial.GreaterOrEqual'] = ObjectSerializer::toQueryValue($middle_initial_greater_or_equal);
        }
        // query params
        if ($middle_initial_is_null !== null) {
            $queryParams['MiddleInitial.IsNull'] = ObjectSerializer::toQueryValue($middle_initial_is_null);
        }
        // query params
        if ($middle_initial_is_not_null !== null) {
            $queryParams['MiddleInitial.IsNotNull'] = ObjectSerializer::toQueryValue($middle_initial_is_not_null);
        }
        // query params
        if ($middle_initial_like !== null) {
            $queryParams['MiddleInitial.Like'] = ObjectSerializer::toQueryValue($middle_initial_like);
        }
        // query params
        if ($middle_initial_not_like !== null) {
            $queryParams['MiddleInitial.NotLike'] = ObjectSerializer::toQueryValue($middle_initial_not_like);
        }
        // query params
        if ($middle_initial_contains !== null) {
            $queryParams['MiddleInitial.Contains'] = ObjectSerializer::toQueryValue($middle_initial_contains);
        }
        // query params
        if ($middle_initial_not_contains !== null) {
            $queryParams['MiddleInitial.NotContains'] = ObjectSerializer::toQueryValue($middle_initial_not_contains);
        }
        // query params
        if ($middle_initial_starts_with !== null) {
            $queryParams['MiddleInitial.StartsWith'] = ObjectSerializer::toQueryValue($middle_initial_starts_with);
        }
        // query params
        if ($middle_initial_not_starts_with !== null) {
            $queryParams['MiddleInitial.NotStartsWith'] = ObjectSerializer::toQueryValue($middle_initial_not_starts_with);
        }
        // query params
        if ($middle_initial_ends_with !== null) {
            $queryParams['MiddleInitial.EndsWith'] = ObjectSerializer::toQueryValue($middle_initial_ends_with);
        }
        // query params
        if ($middle_initial_not_ends_with !== null) {
            $queryParams['MiddleInitial.NotEndsWith'] = ObjectSerializer::toQueryValue($middle_initial_not_ends_with);
        }
        // query params
        if ($middle_initial_in !== null) {
            $queryParams['MiddleInitial.In'] = ObjectSerializer::toQueryValue($middle_initial_in);
        }
        // query params
        if ($middle_initial_between !== null) {
            $queryParams['MiddleInitial.Between'] = ObjectSerializer::toQueryValue($middle_initial_between);
        }
        // query params
        if ($last_name_not_equal !== null) {
            $queryParams['LastName.NotEqual'] = ObjectSerializer::toQueryValue($last_name_not_equal);
        }
        // query params
        if ($last_name_less !== null) {
            $queryParams['LastName.Less'] = ObjectSerializer::toQueryValue($last_name_less);
        }
        // query params
        if ($last_name_less_or_equal !== null) {
            $queryParams['LastName.LessOrEqual'] = ObjectSerializer::toQueryValue($last_name_less_or_equal);
        }
        // query params
        if ($last_name_greater !== null) {
            $queryParams['LastName.Greater'] = ObjectSerializer::toQueryValue($last_name_greater);
        }
        // query params
        if ($last_name_greater_or_equal !== null) {
            $queryParams['LastName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_name_greater_or_equal);
        }
        // query params
        if ($last_name_is_null !== null) {
            $queryParams['LastName.IsNull'] = ObjectSerializer::toQueryValue($last_name_is_null);
        }
        // query params
        if ($last_name_is_not_null !== null) {
            $queryParams['LastName.IsNotNull'] = ObjectSerializer::toQueryValue($last_name_is_not_null);
        }
        // query params
        if ($last_name_like !== null) {
            $queryParams['LastName.Like'] = ObjectSerializer::toQueryValue($last_name_like);
        }
        // query params
        if ($last_name_not_like !== null) {
            $queryParams['LastName.NotLike'] = ObjectSerializer::toQueryValue($last_name_not_like);
        }
        // query params
        if ($last_name_contains !== null) {
            $queryParams['LastName.Contains'] = ObjectSerializer::toQueryValue($last_name_contains);
        }
        // query params
        if ($last_name_not_contains !== null) {
            $queryParams['LastName.NotContains'] = ObjectSerializer::toQueryValue($last_name_not_contains);
        }
        // query params
        if ($last_name_starts_with !== null) {
            $queryParams['LastName.StartsWith'] = ObjectSerializer::toQueryValue($last_name_starts_with);
        }
        // query params
        if ($last_name_not_starts_with !== null) {
            $queryParams['LastName.NotStartsWith'] = ObjectSerializer::toQueryValue($last_name_not_starts_with);
        }
        // query params
        if ($last_name_ends_with !== null) {
            $queryParams['LastName.EndsWith'] = ObjectSerializer::toQueryValue($last_name_ends_with);
        }
        // query params
        if ($last_name_not_ends_with !== null) {
            $queryParams['LastName.NotEndsWith'] = ObjectSerializer::toQueryValue($last_name_not_ends_with);
        }
        // query params
        if ($last_name_in !== null) {
            $queryParams['LastName.In'] = ObjectSerializer::toQueryValue($last_name_in);
        }
        // query params
        if ($last_name_between !== null) {
            $queryParams['LastName.Between'] = ObjectSerializer::toQueryValue($last_name_between);
        }
        // query params
        if ($suffix_not_equal !== null) {
            $queryParams['Suffix.NotEqual'] = ObjectSerializer::toQueryValue($suffix_not_equal);
        }
        // query params
        if ($suffix_less !== null) {
            $queryParams['Suffix.Less'] = ObjectSerializer::toQueryValue($suffix_less);
        }
        // query params
        if ($suffix_less_or_equal !== null) {
            $queryParams['Suffix.LessOrEqual'] = ObjectSerializer::toQueryValue($suffix_less_or_equal);
        }
        // query params
        if ($suffix_greater !== null) {
            $queryParams['Suffix.Greater'] = ObjectSerializer::toQueryValue($suffix_greater);
        }
        // query params
        if ($suffix_greater_or_equal !== null) {
            $queryParams['Suffix.GreaterOrEqual'] = ObjectSerializer::toQueryValue($suffix_greater_or_equal);
        }
        // query params
        if ($suffix_is_null !== null) {
            $queryParams['Suffix.IsNull'] = ObjectSerializer::toQueryValue($suffix_is_null);
        }
        // query params
        if ($suffix_is_not_null !== null) {
            $queryParams['Suffix.IsNotNull'] = ObjectSerializer::toQueryValue($suffix_is_not_null);
        }
        // query params
        if ($suffix_like !== null) {
            $queryParams['Suffix.Like'] = ObjectSerializer::toQueryValue($suffix_like);
        }
        // query params
        if ($suffix_not_like !== null) {
            $queryParams['Suffix.NotLike'] = ObjectSerializer::toQueryValue($suffix_not_like);
        }
        // query params
        if ($suffix_contains !== null) {
            $queryParams['Suffix.Contains'] = ObjectSerializer::toQueryValue($suffix_contains);
        }
        // query params
        if ($suffix_not_contains !== null) {
            $queryParams['Suffix.NotContains'] = ObjectSerializer::toQueryValue($suffix_not_contains);
        }
        // query params
        if ($suffix_starts_with !== null) {
            $queryParams['Suffix.StartsWith'] = ObjectSerializer::toQueryValue($suffix_starts_with);
        }
        // query params
        if ($suffix_not_starts_with !== null) {
            $queryParams['Suffix.NotStartsWith'] = ObjectSerializer::toQueryValue($suffix_not_starts_with);
        }
        // query params
        if ($suffix_ends_with !== null) {
            $queryParams['Suffix.EndsWith'] = ObjectSerializer::toQueryValue($suffix_ends_with);
        }
        // query params
        if ($suffix_not_ends_with !== null) {
            $queryParams['Suffix.NotEndsWith'] = ObjectSerializer::toQueryValue($suffix_not_ends_with);
        }
        // query params
        if ($suffix_in !== null) {
            $queryParams['Suffix.In'] = ObjectSerializer::toQueryValue($suffix_in);
        }
        // query params
        if ($suffix_between !== null) {
            $queryParams['Suffix.Between'] = ObjectSerializer::toQueryValue($suffix_between);
        }
        // query params
        if ($job_title_not_equal !== null) {
            $queryParams['JobTitle.NotEqual'] = ObjectSerializer::toQueryValue($job_title_not_equal);
        }
        // query params
        if ($job_title_less !== null) {
            $queryParams['JobTitle.Less'] = ObjectSerializer::toQueryValue($job_title_less);
        }
        // query params
        if ($job_title_less_or_equal !== null) {
            $queryParams['JobTitle.LessOrEqual'] = ObjectSerializer::toQueryValue($job_title_less_or_equal);
        }
        // query params
        if ($job_title_greater !== null) {
            $queryParams['JobTitle.Greater'] = ObjectSerializer::toQueryValue($job_title_greater);
        }
        // query params
        if ($job_title_greater_or_equal !== null) {
            $queryParams['JobTitle.GreaterOrEqual'] = ObjectSerializer::toQueryValue($job_title_greater_or_equal);
        }
        // query params
        if ($job_title_is_null !== null) {
            $queryParams['JobTitle.IsNull'] = ObjectSerializer::toQueryValue($job_title_is_null);
        }
        // query params
        if ($job_title_is_not_null !== null) {
            $queryParams['JobTitle.IsNotNull'] = ObjectSerializer::toQueryValue($job_title_is_not_null);
        }
        // query params
        if ($job_title_like !== null) {
            $queryParams['JobTitle.Like'] = ObjectSerializer::toQueryValue($job_title_like);
        }
        // query params
        if ($job_title_not_like !== null) {
            $queryParams['JobTitle.NotLike'] = ObjectSerializer::toQueryValue($job_title_not_like);
        }
        // query params
        if ($job_title_contains !== null) {
            $queryParams['JobTitle.Contains'] = ObjectSerializer::toQueryValue($job_title_contains);
        }
        // query params
        if ($job_title_not_contains !== null) {
            $queryParams['JobTitle.NotContains'] = ObjectSerializer::toQueryValue($job_title_not_contains);
        }
        // query params
        if ($job_title_starts_with !== null) {
            $queryParams['JobTitle.StartsWith'] = ObjectSerializer::toQueryValue($job_title_starts_with);
        }
        // query params
        if ($job_title_not_starts_with !== null) {
            $queryParams['JobTitle.NotStartsWith'] = ObjectSerializer::toQueryValue($job_title_not_starts_with);
        }
        // query params
        if ($job_title_ends_with !== null) {
            $queryParams['JobTitle.EndsWith'] = ObjectSerializer::toQueryValue($job_title_ends_with);
        }
        // query params
        if ($job_title_not_ends_with !== null) {
            $queryParams['JobTitle.NotEndsWith'] = ObjectSerializer::toQueryValue($job_title_not_ends_with);
        }
        // query params
        if ($job_title_in !== null) {
            $queryParams['JobTitle.In'] = ObjectSerializer::toQueryValue($job_title_in);
        }
        // query params
        if ($job_title_between !== null) {
            $queryParams['JobTitle.Between'] = ObjectSerializer::toQueryValue($job_title_between);
        }
        // query params
        if ($job_position_code_not_equal !== null) {
            $queryParams['JobPositionCode.NotEqual'] = ObjectSerializer::toQueryValue($job_position_code_not_equal);
        }
        // query params
        if ($job_position_code_less !== null) {
            $queryParams['JobPositionCode.Less'] = ObjectSerializer::toQueryValue($job_position_code_less);
        }
        // query params
        if ($job_position_code_less_or_equal !== null) {
            $queryParams['JobPositionCode.LessOrEqual'] = ObjectSerializer::toQueryValue($job_position_code_less_or_equal);
        }
        // query params
        if ($job_position_code_greater !== null) {
            $queryParams['JobPositionCode.Greater'] = ObjectSerializer::toQueryValue($job_position_code_greater);
        }
        // query params
        if ($job_position_code_greater_or_equal !== null) {
            $queryParams['JobPositionCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($job_position_code_greater_or_equal);
        }
        // query params
        if ($job_position_code_is_null !== null) {
            $queryParams['JobPositionCode.IsNull'] = ObjectSerializer::toQueryValue($job_position_code_is_null);
        }
        // query params
        if ($job_position_code_is_not_null !== null) {
            $queryParams['JobPositionCode.IsNotNull'] = ObjectSerializer::toQueryValue($job_position_code_is_not_null);
        }
        // query params
        if ($job_position_code_like !== null) {
            $queryParams['JobPositionCode.Like'] = ObjectSerializer::toQueryValue($job_position_code_like);
        }
        // query params
        if ($job_position_code_not_like !== null) {
            $queryParams['JobPositionCode.NotLike'] = ObjectSerializer::toQueryValue($job_position_code_not_like);
        }
        // query params
        if ($job_position_code_contains !== null) {
            $queryParams['JobPositionCode.Contains'] = ObjectSerializer::toQueryValue($job_position_code_contains);
        }
        // query params
        if ($job_position_code_not_contains !== null) {
            $queryParams['JobPositionCode.NotContains'] = ObjectSerializer::toQueryValue($job_position_code_not_contains);
        }
        // query params
        if ($job_position_code_starts_with !== null) {
            $queryParams['JobPositionCode.StartsWith'] = ObjectSerializer::toQueryValue($job_position_code_starts_with);
        }
        // query params
        if ($job_position_code_not_starts_with !== null) {
            $queryParams['JobPositionCode.NotStartsWith'] = ObjectSerializer::toQueryValue($job_position_code_not_starts_with);
        }
        // query params
        if ($job_position_code_ends_with !== null) {
            $queryParams['JobPositionCode.EndsWith'] = ObjectSerializer::toQueryValue($job_position_code_ends_with);
        }
        // query params
        if ($job_position_code_not_ends_with !== null) {
            $queryParams['JobPositionCode.NotEndsWith'] = ObjectSerializer::toQueryValue($job_position_code_not_ends_with);
        }
        // query params
        if ($job_position_code_in !== null) {
            $queryParams['JobPositionCode.In'] = ObjectSerializer::toQueryValue($job_position_code_in);
        }
        // query params
        if ($job_position_code_between !== null) {
            $queryParams['JobPositionCode.Between'] = ObjectSerializer::toQueryValue($job_position_code_between);
        }
        // query params
        if ($communication_preference_not_equal !== null) {
            $queryParams['CommunicationPreference.NotEqual'] = ObjectSerializer::toQueryValue($communication_preference_not_equal);
        }
        // query params
        if ($communication_preference_less !== null) {
            $queryParams['CommunicationPreference.Less'] = ObjectSerializer::toQueryValue($communication_preference_less);
        }
        // query params
        if ($communication_preference_less_or_equal !== null) {
            $queryParams['CommunicationPreference.LessOrEqual'] = ObjectSerializer::toQueryValue($communication_preference_less_or_equal);
        }
        // query params
        if ($communication_preference_greater !== null) {
            $queryParams['CommunicationPreference.Greater'] = ObjectSerializer::toQueryValue($communication_preference_greater);
        }
        // query params
        if ($communication_preference_greater_or_equal !== null) {
            $queryParams['CommunicationPreference.GreaterOrEqual'] = ObjectSerializer::toQueryValue($communication_preference_greater_or_equal);
        }
        // query params
        if ($communication_preference_is_null !== null) {
            $queryParams['CommunicationPreference.IsNull'] = ObjectSerializer::toQueryValue($communication_preference_is_null);
        }
        // query params
        if ($communication_preference_is_not_null !== null) {
            $queryParams['CommunicationPreference.IsNotNull'] = ObjectSerializer::toQueryValue($communication_preference_is_not_null);
        }
        // query params
        if ($communication_preference_like !== null) {
            $queryParams['CommunicationPreference.Like'] = ObjectSerializer::toQueryValue($communication_preference_like);
        }
        // query params
        if ($communication_preference_not_like !== null) {
            $queryParams['CommunicationPreference.NotLike'] = ObjectSerializer::toQueryValue($communication_preference_not_like);
        }
        // query params
        if ($communication_preference_contains !== null) {
            $queryParams['CommunicationPreference.Contains'] = ObjectSerializer::toQueryValue($communication_preference_contains);
        }
        // query params
        if ($communication_preference_not_contains !== null) {
            $queryParams['CommunicationPreference.NotContains'] = ObjectSerializer::toQueryValue($communication_preference_not_contains);
        }
        // query params
        if ($communication_preference_starts_with !== null) {
            $queryParams['CommunicationPreference.StartsWith'] = ObjectSerializer::toQueryValue($communication_preference_starts_with);
        }
        // query params
        if ($communication_preference_not_starts_with !== null) {
            $queryParams['CommunicationPreference.NotStartsWith'] = ObjectSerializer::toQueryValue($communication_preference_not_starts_with);
        }
        // query params
        if ($communication_preference_ends_with !== null) {
            $queryParams['CommunicationPreference.EndsWith'] = ObjectSerializer::toQueryValue($communication_preference_ends_with);
        }
        // query params
        if ($communication_preference_not_ends_with !== null) {
            $queryParams['CommunicationPreference.NotEndsWith'] = ObjectSerializer::toQueryValue($communication_preference_not_ends_with);
        }
        // query params
        if ($communication_preference_in !== null) {
            $queryParams['CommunicationPreference.In'] = ObjectSerializer::toQueryValue($communication_preference_in);
        }
        // query params
        if ($communication_preference_between !== null) {
            $queryParams['CommunicationPreference.Between'] = ObjectSerializer::toQueryValue($communication_preference_between);
        }
        // query params
        if ($source_promotion_not_equal !== null) {
            $queryParams['SourcePromotion.NotEqual'] = ObjectSerializer::toQueryValue($source_promotion_not_equal);
        }
        // query params
        if ($source_promotion_less !== null) {
            $queryParams['SourcePromotion.Less'] = ObjectSerializer::toQueryValue($source_promotion_less);
        }
        // query params
        if ($source_promotion_less_or_equal !== null) {
            $queryParams['SourcePromotion.LessOrEqual'] = ObjectSerializer::toQueryValue($source_promotion_less_or_equal);
        }
        // query params
        if ($source_promotion_greater !== null) {
            $queryParams['SourcePromotion.Greater'] = ObjectSerializer::toQueryValue($source_promotion_greater);
        }
        // query params
        if ($source_promotion_greater_or_equal !== null) {
            $queryParams['SourcePromotion.GreaterOrEqual'] = ObjectSerializer::toQueryValue($source_promotion_greater_or_equal);
        }
        // query params
        if ($source_promotion_is_null !== null) {
            $queryParams['SourcePromotion.IsNull'] = ObjectSerializer::toQueryValue($source_promotion_is_null);
        }
        // query params
        if ($source_promotion_is_not_null !== null) {
            $queryParams['SourcePromotion.IsNotNull'] = ObjectSerializer::toQueryValue($source_promotion_is_not_null);
        }
        // query params
        if ($source_promotion_like !== null) {
            $queryParams['SourcePromotion.Like'] = ObjectSerializer::toQueryValue($source_promotion_like);
        }
        // query params
        if ($source_promotion_not_like !== null) {
            $queryParams['SourcePromotion.NotLike'] = ObjectSerializer::toQueryValue($source_promotion_not_like);
        }
        // query params
        if ($source_promotion_contains !== null) {
            $queryParams['SourcePromotion.Contains'] = ObjectSerializer::toQueryValue($source_promotion_contains);
        }
        // query params
        if ($source_promotion_not_contains !== null) {
            $queryParams['SourcePromotion.NotContains'] = ObjectSerializer::toQueryValue($source_promotion_not_contains);
        }
        // query params
        if ($source_promotion_starts_with !== null) {
            $queryParams['SourcePromotion.StartsWith'] = ObjectSerializer::toQueryValue($source_promotion_starts_with);
        }
        // query params
        if ($source_promotion_not_starts_with !== null) {
            $queryParams['SourcePromotion.NotStartsWith'] = ObjectSerializer::toQueryValue($source_promotion_not_starts_with);
        }
        // query params
        if ($source_promotion_ends_with !== null) {
            $queryParams['SourcePromotion.EndsWith'] = ObjectSerializer::toQueryValue($source_promotion_ends_with);
        }
        // query params
        if ($source_promotion_not_ends_with !== null) {
            $queryParams['SourcePromotion.NotEndsWith'] = ObjectSerializer::toQueryValue($source_promotion_not_ends_with);
        }
        // query params
        if ($source_promotion_in !== null) {
            $queryParams['SourcePromotion.In'] = ObjectSerializer::toQueryValue($source_promotion_in);
        }
        // query params
        if ($source_promotion_between !== null) {
            $queryParams['SourcePromotion.Between'] = ObjectSerializer::toQueryValue($source_promotion_between);
        }
        // query params
        if ($address_code_not_equal !== null) {
            $queryParams['AddressCode.NotEqual'] = ObjectSerializer::toQueryValue($address_code_not_equal);
        }
        // query params
        if ($address_code_less !== null) {
            $queryParams['AddressCode.Less'] = ObjectSerializer::toQueryValue($address_code_less);
        }
        // query params
        if ($address_code_less_or_equal !== null) {
            $queryParams['AddressCode.LessOrEqual'] = ObjectSerializer::toQueryValue($address_code_less_or_equal);
        }
        // query params
        if ($address_code_greater !== null) {
            $queryParams['AddressCode.Greater'] = ObjectSerializer::toQueryValue($address_code_greater);
        }
        // query params
        if ($address_code_greater_or_equal !== null) {
            $queryParams['AddressCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($address_code_greater_or_equal);
        }
        // query params
        if ($address_code_is_null !== null) {
            $queryParams['AddressCode.IsNull'] = ObjectSerializer::toQueryValue($address_code_is_null);
        }
        // query params
        if ($address_code_is_not_null !== null) {
            $queryParams['AddressCode.IsNotNull'] = ObjectSerializer::toQueryValue($address_code_is_not_null);
        }
        // query params
        if ($address_code_like !== null) {
            $queryParams['AddressCode.Like'] = ObjectSerializer::toQueryValue($address_code_like);
        }
        // query params
        if ($address_code_not_like !== null) {
            $queryParams['AddressCode.NotLike'] = ObjectSerializer::toQueryValue($address_code_not_like);
        }
        // query params
        if ($address_code_contains !== null) {
            $queryParams['AddressCode.Contains'] = ObjectSerializer::toQueryValue($address_code_contains);
        }
        // query params
        if ($address_code_not_contains !== null) {
            $queryParams['AddressCode.NotContains'] = ObjectSerializer::toQueryValue($address_code_not_contains);
        }
        // query params
        if ($address_code_starts_with !== null) {
            $queryParams['AddressCode.StartsWith'] = ObjectSerializer::toQueryValue($address_code_starts_with);
        }
        // query params
        if ($address_code_not_starts_with !== null) {
            $queryParams['AddressCode.NotStartsWith'] = ObjectSerializer::toQueryValue($address_code_not_starts_with);
        }
        // query params
        if ($address_code_ends_with !== null) {
            $queryParams['AddressCode.EndsWith'] = ObjectSerializer::toQueryValue($address_code_ends_with);
        }
        // query params
        if ($address_code_not_ends_with !== null) {
            $queryParams['AddressCode.NotEndsWith'] = ObjectSerializer::toQueryValue($address_code_not_ends_with);
        }
        // query params
        if ($address_code_in !== null) {
            $queryParams['AddressCode.In'] = ObjectSerializer::toQueryValue($address_code_in);
        }
        // query params
        if ($address_code_between !== null) {
            $queryParams['AddressCode.Between'] = ObjectSerializer::toQueryValue($address_code_between);
        }
        // query params
        if ($default_currency_not_equal !== null) {
            $queryParams['DefaultCurrency.NotEqual'] = ObjectSerializer::toQueryValue($default_currency_not_equal);
        }
        // query params
        if ($default_currency_less !== null) {
            $queryParams['DefaultCurrency.Less'] = ObjectSerializer::toQueryValue($default_currency_less);
        }
        // query params
        if ($default_currency_less_or_equal !== null) {
            $queryParams['DefaultCurrency.LessOrEqual'] = ObjectSerializer::toQueryValue($default_currency_less_or_equal);
        }
        // query params
        if ($default_currency_greater !== null) {
            $queryParams['DefaultCurrency.Greater'] = ObjectSerializer::toQueryValue($default_currency_greater);
        }
        // query params
        if ($default_currency_greater_or_equal !== null) {
            $queryParams['DefaultCurrency.GreaterOrEqual'] = ObjectSerializer::toQueryValue($default_currency_greater_or_equal);
        }
        // query params
        if ($default_currency_is_null !== null) {
            $queryParams['DefaultCurrency.IsNull'] = ObjectSerializer::toQueryValue($default_currency_is_null);
        }
        // query params
        if ($default_currency_is_not_null !== null) {
            $queryParams['DefaultCurrency.IsNotNull'] = ObjectSerializer::toQueryValue($default_currency_is_not_null);
        }
        // query params
        if ($default_currency_like !== null) {
            $queryParams['DefaultCurrency.Like'] = ObjectSerializer::toQueryValue($default_currency_like);
        }
        // query params
        if ($default_currency_not_like !== null) {
            $queryParams['DefaultCurrency.NotLike'] = ObjectSerializer::toQueryValue($default_currency_not_like);
        }
        // query params
        if ($default_currency_contains !== null) {
            $queryParams['DefaultCurrency.Contains'] = ObjectSerializer::toQueryValue($default_currency_contains);
        }
        // query params
        if ($default_currency_not_contains !== null) {
            $queryParams['DefaultCurrency.NotContains'] = ObjectSerializer::toQueryValue($default_currency_not_contains);
        }
        // query params
        if ($default_currency_starts_with !== null) {
            $queryParams['DefaultCurrency.StartsWith'] = ObjectSerializer::toQueryValue($default_currency_starts_with);
        }
        // query params
        if ($default_currency_not_starts_with !== null) {
            $queryParams['DefaultCurrency.NotStartsWith'] = ObjectSerializer::toQueryValue($default_currency_not_starts_with);
        }
        // query params
        if ($default_currency_ends_with !== null) {
            $queryParams['DefaultCurrency.EndsWith'] = ObjectSerializer::toQueryValue($default_currency_ends_with);
        }
        // query params
        if ($default_currency_not_ends_with !== null) {
            $queryParams['DefaultCurrency.NotEndsWith'] = ObjectSerializer::toQueryValue($default_currency_not_ends_with);
        }
        // query params
        if ($default_currency_in !== null) {
            $queryParams['DefaultCurrency.In'] = ObjectSerializer::toQueryValue($default_currency_in);
        }
        // query params
        if ($default_currency_between !== null) {
            $queryParams['DefaultCurrency.Between'] = ObjectSerializer::toQueryValue($default_currency_between);
        }
        // query params
        if ($department_not_equal !== null) {
            $queryParams['Department.NotEqual'] = ObjectSerializer::toQueryValue($department_not_equal);
        }
        // query params
        if ($department_less !== null) {
            $queryParams['Department.Less'] = ObjectSerializer::toQueryValue($department_less);
        }
        // query params
        if ($department_less_or_equal !== null) {
            $queryParams['Department.LessOrEqual'] = ObjectSerializer::toQueryValue($department_less_or_equal);
        }
        // query params
        if ($department_greater !== null) {
            $queryParams['Department.Greater'] = ObjectSerializer::toQueryValue($department_greater);
        }
        // query params
        if ($department_greater_or_equal !== null) {
            $queryParams['Department.GreaterOrEqual'] = ObjectSerializer::toQueryValue($department_greater_or_equal);
        }
        // query params
        if ($department_is_null !== null) {
            $queryParams['Department.IsNull'] = ObjectSerializer::toQueryValue($department_is_null);
        }
        // query params
        if ($department_is_not_null !== null) {
            $queryParams['Department.IsNotNull'] = ObjectSerializer::toQueryValue($department_is_not_null);
        }
        // query params
        if ($department_like !== null) {
            $queryParams['Department.Like'] = ObjectSerializer::toQueryValue($department_like);
        }
        // query params
        if ($department_not_like !== null) {
            $queryParams['Department.NotLike'] = ObjectSerializer::toQueryValue($department_not_like);
        }
        // query params
        if ($department_contains !== null) {
            $queryParams['Department.Contains'] = ObjectSerializer::toQueryValue($department_contains);
        }
        // query params
        if ($department_not_contains !== null) {
            $queryParams['Department.NotContains'] = ObjectSerializer::toQueryValue($department_not_contains);
        }
        // query params
        if ($department_starts_with !== null) {
            $queryParams['Department.StartsWith'] = ObjectSerializer::toQueryValue($department_starts_with);
        }
        // query params
        if ($department_not_starts_with !== null) {
            $queryParams['Department.NotStartsWith'] = ObjectSerializer::toQueryValue($department_not_starts_with);
        }
        // query params
        if ($department_ends_with !== null) {
            $queryParams['Department.EndsWith'] = ObjectSerializer::toQueryValue($department_ends_with);
        }
        // query params
        if ($department_not_ends_with !== null) {
            $queryParams['Department.NotEndsWith'] = ObjectSerializer::toQueryValue($department_not_ends_with);
        }
        // query params
        if ($department_in !== null) {
            $queryParams['Department.In'] = ObjectSerializer::toQueryValue($department_in);
        }
        // query params
        if ($department_between !== null) {
            $queryParams['Department.Between'] = ObjectSerializer::toQueryValue($department_between);
        }
        // query params
        if ($county_not_equal !== null) {
            $queryParams['County.NotEqual'] = ObjectSerializer::toQueryValue($county_not_equal);
        }
        // query params
        if ($county_less !== null) {
            $queryParams['County.Less'] = ObjectSerializer::toQueryValue($county_less);
        }
        // query params
        if ($county_less_or_equal !== null) {
            $queryParams['County.LessOrEqual'] = ObjectSerializer::toQueryValue($county_less_or_equal);
        }
        // query params
        if ($county_greater !== null) {
            $queryParams['County.Greater'] = ObjectSerializer::toQueryValue($county_greater);
        }
        // query params
        if ($county_greater_or_equal !== null) {
            $queryParams['County.GreaterOrEqual'] = ObjectSerializer::toQueryValue($county_greater_or_equal);
        }
        // query params
        if ($county_is_null !== null) {
            $queryParams['County.IsNull'] = ObjectSerializer::toQueryValue($county_is_null);
        }
        // query params
        if ($county_is_not_null !== null) {
            $queryParams['County.IsNotNull'] = ObjectSerializer::toQueryValue($county_is_not_null);
        }
        // query params
        if ($county_like !== null) {
            $queryParams['County.Like'] = ObjectSerializer::toQueryValue($county_like);
        }
        // query params
        if ($county_not_like !== null) {
            $queryParams['County.NotLike'] = ObjectSerializer::toQueryValue($county_not_like);
        }
        // query params
        if ($county_contains !== null) {
            $queryParams['County.Contains'] = ObjectSerializer::toQueryValue($county_contains);
        }
        // query params
        if ($county_not_contains !== null) {
            $queryParams['County.NotContains'] = ObjectSerializer::toQueryValue($county_not_contains);
        }
        // query params
        if ($county_starts_with !== null) {
            $queryParams['County.StartsWith'] = ObjectSerializer::toQueryValue($county_starts_with);
        }
        // query params
        if ($county_not_starts_with !== null) {
            $queryParams['County.NotStartsWith'] = ObjectSerializer::toQueryValue($county_not_starts_with);
        }
        // query params
        if ($county_ends_with !== null) {
            $queryParams['County.EndsWith'] = ObjectSerializer::toQueryValue($county_ends_with);
        }
        // query params
        if ($county_not_ends_with !== null) {
            $queryParams['County.NotEndsWith'] = ObjectSerializer::toQueryValue($county_not_ends_with);
        }
        // query params
        if ($county_in !== null) {
            $queryParams['County.In'] = ObjectSerializer::toQueryValue($county_in);
        }
        // query params
        if ($county_between !== null) {
            $queryParams['County.Between'] = ObjectSerializer::toQueryValue($county_between);
        }
        // query params
        if ($pin_code_not_equal !== null) {
            $queryParams['PinCode.NotEqual'] = ObjectSerializer::toQueryValue($pin_code_not_equal);
        }
        // query params
        if ($pin_code_less !== null) {
            $queryParams['PinCode.Less'] = ObjectSerializer::toQueryValue($pin_code_less);
        }
        // query params
        if ($pin_code_less_or_equal !== null) {
            $queryParams['PinCode.LessOrEqual'] = ObjectSerializer::toQueryValue($pin_code_less_or_equal);
        }
        // query params
        if ($pin_code_greater !== null) {
            $queryParams['PinCode.Greater'] = ObjectSerializer::toQueryValue($pin_code_greater);
        }
        // query params
        if ($pin_code_greater_or_equal !== null) {
            $queryParams['PinCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($pin_code_greater_or_equal);
        }
        // query params
        if ($pin_code_is_null !== null) {
            $queryParams['PinCode.IsNull'] = ObjectSerializer::toQueryValue($pin_code_is_null);
        }
        // query params
        if ($pin_code_is_not_null !== null) {
            $queryParams['PinCode.IsNotNull'] = ObjectSerializer::toQueryValue($pin_code_is_not_null);
        }
        // query params
        if ($pin_code_like !== null) {
            $queryParams['PinCode.Like'] = ObjectSerializer::toQueryValue($pin_code_like);
        }
        // query params
        if ($pin_code_not_like !== null) {
            $queryParams['PinCode.NotLike'] = ObjectSerializer::toQueryValue($pin_code_not_like);
        }
        // query params
        if ($pin_code_contains !== null) {
            $queryParams['PinCode.Contains'] = ObjectSerializer::toQueryValue($pin_code_contains);
        }
        // query params
        if ($pin_code_not_contains !== null) {
            $queryParams['PinCode.NotContains'] = ObjectSerializer::toQueryValue($pin_code_not_contains);
        }
        // query params
        if ($pin_code_starts_with !== null) {
            $queryParams['PinCode.StartsWith'] = ObjectSerializer::toQueryValue($pin_code_starts_with);
        }
        // query params
        if ($pin_code_not_starts_with !== null) {
            $queryParams['PinCode.NotStartsWith'] = ObjectSerializer::toQueryValue($pin_code_not_starts_with);
        }
        // query params
        if ($pin_code_ends_with !== null) {
            $queryParams['PinCode.EndsWith'] = ObjectSerializer::toQueryValue($pin_code_ends_with);
        }
        // query params
        if ($pin_code_not_ends_with !== null) {
            $queryParams['PinCode.NotEndsWith'] = ObjectSerializer::toQueryValue($pin_code_not_ends_with);
        }
        // query params
        if ($pin_code_in !== null) {
            $queryParams['PinCode.In'] = ObjectSerializer::toQueryValue($pin_code_in);
        }
        // query params
        if ($pin_code_between !== null) {
            $queryParams['PinCode.Between'] = ObjectSerializer::toQueryValue($pin_code_between);
        }
        // query params
        if ($social_security_number_not_equal !== null) {
            $queryParams['SocialSecurityNumber.NotEqual'] = ObjectSerializer::toQueryValue($social_security_number_not_equal);
        }
        // query params
        if ($social_security_number_less !== null) {
            $queryParams['SocialSecurityNumber.Less'] = ObjectSerializer::toQueryValue($social_security_number_less);
        }
        // query params
        if ($social_security_number_less_or_equal !== null) {
            $queryParams['SocialSecurityNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($social_security_number_less_or_equal);
        }
        // query params
        if ($social_security_number_greater !== null) {
            $queryParams['SocialSecurityNumber.Greater'] = ObjectSerializer::toQueryValue($social_security_number_greater);
        }
        // query params
        if ($social_security_number_greater_or_equal !== null) {
            $queryParams['SocialSecurityNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($social_security_number_greater_or_equal);
        }
        // query params
        if ($social_security_number_is_null !== null) {
            $queryParams['SocialSecurityNumber.IsNull'] = ObjectSerializer::toQueryValue($social_security_number_is_null);
        }
        // query params
        if ($social_security_number_is_not_null !== null) {
            $queryParams['SocialSecurityNumber.IsNotNull'] = ObjectSerializer::toQueryValue($social_security_number_is_not_null);
        }
        // query params
        if ($social_security_number_like !== null) {
            $queryParams['SocialSecurityNumber.Like'] = ObjectSerializer::toQueryValue($social_security_number_like);
        }
        // query params
        if ($social_security_number_not_like !== null) {
            $queryParams['SocialSecurityNumber.NotLike'] = ObjectSerializer::toQueryValue($social_security_number_not_like);
        }
        // query params
        if ($social_security_number_contains !== null) {
            $queryParams['SocialSecurityNumber.Contains'] = ObjectSerializer::toQueryValue($social_security_number_contains);
        }
        // query params
        if ($social_security_number_not_contains !== null) {
            $queryParams['SocialSecurityNumber.NotContains'] = ObjectSerializer::toQueryValue($social_security_number_not_contains);
        }
        // query params
        if ($social_security_number_starts_with !== null) {
            $queryParams['SocialSecurityNumber.StartsWith'] = ObjectSerializer::toQueryValue($social_security_number_starts_with);
        }
        // query params
        if ($social_security_number_not_starts_with !== null) {
            $queryParams['SocialSecurityNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($social_security_number_not_starts_with);
        }
        // query params
        if ($social_security_number_ends_with !== null) {
            $queryParams['SocialSecurityNumber.EndsWith'] = ObjectSerializer::toQueryValue($social_security_number_ends_with);
        }
        // query params
        if ($social_security_number_not_ends_with !== null) {
            $queryParams['SocialSecurityNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($social_security_number_not_ends_with);
        }
        // query params
        if ($social_security_number_in !== null) {
            $queryParams['SocialSecurityNumber.In'] = ObjectSerializer::toQueryValue($social_security_number_in);
        }
        // query params
        if ($social_security_number_between !== null) {
            $queryParams['SocialSecurityNumber.Between'] = ObjectSerializer::toQueryValue($social_security_number_between);
        }
        // query params
        if ($street_name_not_equal !== null) {
            $queryParams['StreetName.NotEqual'] = ObjectSerializer::toQueryValue($street_name_not_equal);
        }
        // query params
        if ($street_name_less !== null) {
            $queryParams['StreetName.Less'] = ObjectSerializer::toQueryValue($street_name_less);
        }
        // query params
        if ($street_name_less_or_equal !== null) {
            $queryParams['StreetName.LessOrEqual'] = ObjectSerializer::toQueryValue($street_name_less_or_equal);
        }
        // query params
        if ($street_name_greater !== null) {
            $queryParams['StreetName.Greater'] = ObjectSerializer::toQueryValue($street_name_greater);
        }
        // query params
        if ($street_name_greater_or_equal !== null) {
            $queryParams['StreetName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street_name_greater_or_equal);
        }
        // query params
        if ($street_name_is_null !== null) {
            $queryParams['StreetName.IsNull'] = ObjectSerializer::toQueryValue($street_name_is_null);
        }
        // query params
        if ($street_name_is_not_null !== null) {
            $queryParams['StreetName.IsNotNull'] = ObjectSerializer::toQueryValue($street_name_is_not_null);
        }
        // query params
        if ($street_name_like !== null) {
            $queryParams['StreetName.Like'] = ObjectSerializer::toQueryValue($street_name_like);
        }
        // query params
        if ($street_name_not_like !== null) {
            $queryParams['StreetName.NotLike'] = ObjectSerializer::toQueryValue($street_name_not_like);
        }
        // query params
        if ($street_name_contains !== null) {
            $queryParams['StreetName.Contains'] = ObjectSerializer::toQueryValue($street_name_contains);
        }
        // query params
        if ($street_name_not_contains !== null) {
            $queryParams['StreetName.NotContains'] = ObjectSerializer::toQueryValue($street_name_not_contains);
        }
        // query params
        if ($street_name_starts_with !== null) {
            $queryParams['StreetName.StartsWith'] = ObjectSerializer::toQueryValue($street_name_starts_with);
        }
        // query params
        if ($street_name_not_starts_with !== null) {
            $queryParams['StreetName.NotStartsWith'] = ObjectSerializer::toQueryValue($street_name_not_starts_with);
        }
        // query params
        if ($street_name_ends_with !== null) {
            $queryParams['StreetName.EndsWith'] = ObjectSerializer::toQueryValue($street_name_ends_with);
        }
        // query params
        if ($street_name_not_ends_with !== null) {
            $queryParams['StreetName.NotEndsWith'] = ObjectSerializer::toQueryValue($street_name_not_ends_with);
        }
        // query params
        if ($street_name_in !== null) {
            $queryParams['StreetName.In'] = ObjectSerializer::toQueryValue($street_name_in);
        }
        // query params
        if ($street_name_between !== null) {
            $queryParams['StreetName.Between'] = ObjectSerializer::toQueryValue($street_name_between);
        }
        // query params
        if ($street_type_not_equal !== null) {
            $queryParams['StreetType.NotEqual'] = ObjectSerializer::toQueryValue($street_type_not_equal);
        }
        // query params
        if ($street_type_less !== null) {
            $queryParams['StreetType.Less'] = ObjectSerializer::toQueryValue($street_type_less);
        }
        // query params
        if ($street_type_less_or_equal !== null) {
            $queryParams['StreetType.LessOrEqual'] = ObjectSerializer::toQueryValue($street_type_less_or_equal);
        }
        // query params
        if ($street_type_greater !== null) {
            $queryParams['StreetType.Greater'] = ObjectSerializer::toQueryValue($street_type_greater);
        }
        // query params
        if ($street_type_greater_or_equal !== null) {
            $queryParams['StreetType.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street_type_greater_or_equal);
        }
        // query params
        if ($street_type_is_null !== null) {
            $queryParams['StreetType.IsNull'] = ObjectSerializer::toQueryValue($street_type_is_null);
        }
        // query params
        if ($street_type_is_not_null !== null) {
            $queryParams['StreetType.IsNotNull'] = ObjectSerializer::toQueryValue($street_type_is_not_null);
        }
        // query params
        if ($street_type_like !== null) {
            $queryParams['StreetType.Like'] = ObjectSerializer::toQueryValue($street_type_like);
        }
        // query params
        if ($street_type_not_like !== null) {
            $queryParams['StreetType.NotLike'] = ObjectSerializer::toQueryValue($street_type_not_like);
        }
        // query params
        if ($street_type_contains !== null) {
            $queryParams['StreetType.Contains'] = ObjectSerializer::toQueryValue($street_type_contains);
        }
        // query params
        if ($street_type_not_contains !== null) {
            $queryParams['StreetType.NotContains'] = ObjectSerializer::toQueryValue($street_type_not_contains);
        }
        // query params
        if ($street_type_starts_with !== null) {
            $queryParams['StreetType.StartsWith'] = ObjectSerializer::toQueryValue($street_type_starts_with);
        }
        // query params
        if ($street_type_not_starts_with !== null) {
            $queryParams['StreetType.NotStartsWith'] = ObjectSerializer::toQueryValue($street_type_not_starts_with);
        }
        // query params
        if ($street_type_ends_with !== null) {
            $queryParams['StreetType.EndsWith'] = ObjectSerializer::toQueryValue($street_type_ends_with);
        }
        // query params
        if ($street_type_not_ends_with !== null) {
            $queryParams['StreetType.NotEndsWith'] = ObjectSerializer::toQueryValue($street_type_not_ends_with);
        }
        // query params
        if ($street_type_in !== null) {
            $queryParams['StreetType.In'] = ObjectSerializer::toQueryValue($street_type_in);
        }
        // query params
        if ($street_type_between !== null) {
            $queryParams['StreetType.Between'] = ObjectSerializer::toQueryValue($street_type_between);
        }
        // query params
        if ($last_updated_on_not_equal !== null) {
            $queryParams['LastUpdatedOn.NotEqual'] = ObjectSerializer::toQueryValue($last_updated_on_not_equal);
        }
        // query params
        if ($last_updated_on_less !== null) {
            $queryParams['LastUpdatedOn.Less'] = ObjectSerializer::toQueryValue($last_updated_on_less);
        }
        // query params
        if ($last_updated_on_less_or_equal !== null) {
            $queryParams['LastUpdatedOn.LessOrEqual'] = ObjectSerializer::toQueryValue($last_updated_on_less_or_equal);
        }
        // query params
        if ($last_updated_on_greater !== null) {
            $queryParams['LastUpdatedOn.Greater'] = ObjectSerializer::toQueryValue($last_updated_on_greater);
        }
        // query params
        if ($last_updated_on_greater_or_equal !== null) {
            $queryParams['LastUpdatedOn.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_updated_on_greater_or_equal);
        }
        // query params
        if ($last_updated_on_is_null !== null) {
            $queryParams['LastUpdatedOn.IsNull'] = ObjectSerializer::toQueryValue($last_updated_on_is_null);
        }
        // query params
        if ($last_updated_on_is_not_null !== null) {
            $queryParams['LastUpdatedOn.IsNotNull'] = ObjectSerializer::toQueryValue($last_updated_on_is_not_null);
        }
        // query params
        if ($last_updated_on_like !== null) {
            $queryParams['LastUpdatedOn.Like'] = ObjectSerializer::toQueryValue($last_updated_on_like);
        }
        // query params
        if ($last_updated_on_not_like !== null) {
            $queryParams['LastUpdatedOn.NotLike'] = ObjectSerializer::toQueryValue($last_updated_on_not_like);
        }
        // query params
        if ($last_updated_on_contains !== null) {
            $queryParams['LastUpdatedOn.Contains'] = ObjectSerializer::toQueryValue($last_updated_on_contains);
        }
        // query params
        if ($last_updated_on_not_contains !== null) {
            $queryParams['LastUpdatedOn.NotContains'] = ObjectSerializer::toQueryValue($last_updated_on_not_contains);
        }
        // query params
        if ($last_updated_on_starts_with !== null) {
            $queryParams['LastUpdatedOn.StartsWith'] = ObjectSerializer::toQueryValue($last_updated_on_starts_with);
        }
        // query params
        if ($last_updated_on_not_starts_with !== null) {
            $queryParams['LastUpdatedOn.NotStartsWith'] = ObjectSerializer::toQueryValue($last_updated_on_not_starts_with);
        }
        // query params
        if ($last_updated_on_ends_with !== null) {
            $queryParams['LastUpdatedOn.EndsWith'] = ObjectSerializer::toQueryValue($last_updated_on_ends_with);
        }
        // query params
        if ($last_updated_on_not_ends_with !== null) {
            $queryParams['LastUpdatedOn.NotEndsWith'] = ObjectSerializer::toQueryValue($last_updated_on_not_ends_with);
        }
        // query params
        if ($last_updated_on_in !== null) {
            $queryParams['LastUpdatedOn.In'] = ObjectSerializer::toQueryValue($last_updated_on_in);
        }
        // query params
        if ($last_updated_on_between !== null) {
            $queryParams['LastUpdatedOn.Between'] = ObjectSerializer::toQueryValue($last_updated_on_between);
        }
        // query params
        if ($item_number_not_equal !== null) {
            $queryParams['ItemNumber.NotEqual'] = ObjectSerializer::toQueryValue($item_number_not_equal);
        }
        // query params
        if ($item_number_less !== null) {
            $queryParams['ItemNumber.Less'] = ObjectSerializer::toQueryValue($item_number_less);
        }
        // query params
        if ($item_number_less_or_equal !== null) {
            $queryParams['ItemNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($item_number_less_or_equal);
        }
        // query params
        if ($item_number_greater !== null) {
            $queryParams['ItemNumber.Greater'] = ObjectSerializer::toQueryValue($item_number_greater);
        }
        // query params
        if ($item_number_greater_or_equal !== null) {
            $queryParams['ItemNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($item_number_greater_or_equal);
        }
        // query params
        if ($item_number_is_null !== null) {
            $queryParams['ItemNumber.IsNull'] = ObjectSerializer::toQueryValue($item_number_is_null);
        }
        // query params
        if ($item_number_is_not_null !== null) {
            $queryParams['ItemNumber.IsNotNull'] = ObjectSerializer::toQueryValue($item_number_is_not_null);
        }
        // query params
        if ($item_number_like !== null) {
            $queryParams['ItemNumber.Like'] = ObjectSerializer::toQueryValue($item_number_like);
        }
        // query params
        if ($item_number_not_like !== null) {
            $queryParams['ItemNumber.NotLike'] = ObjectSerializer::toQueryValue($item_number_not_like);
        }
        // query params
        if ($item_number_contains !== null) {
            $queryParams['ItemNumber.Contains'] = ObjectSerializer::toQueryValue($item_number_contains);
        }
        // query params
        if ($item_number_not_contains !== null) {
            $queryParams['ItemNumber.NotContains'] = ObjectSerializer::toQueryValue($item_number_not_contains);
        }
        // query params
        if ($item_number_starts_with !== null) {
            $queryParams['ItemNumber.StartsWith'] = ObjectSerializer::toQueryValue($item_number_starts_with);
        }
        // query params
        if ($item_number_not_starts_with !== null) {
            $queryParams['ItemNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($item_number_not_starts_with);
        }
        // query params
        if ($item_number_ends_with !== null) {
            $queryParams['ItemNumber.EndsWith'] = ObjectSerializer::toQueryValue($item_number_ends_with);
        }
        // query params
        if ($item_number_not_ends_with !== null) {
            $queryParams['ItemNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($item_number_not_ends_with);
        }
        // query params
        if ($item_number_in !== null) {
            $queryParams['ItemNumber.In'] = ObjectSerializer::toQueryValue($item_number_in);
        }
        // query params
        if ($item_number_between !== null) {
            $queryParams['ItemNumber.Between'] = ObjectSerializer::toQueryValue($item_number_between);
        }
        // query params
        if ($last_name_soundex_not_equal !== null) {
            $queryParams['LastNameSoundex.NotEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_not_equal);
        }
        // query params
        if ($last_name_soundex_less !== null) {
            $queryParams['LastNameSoundex.Less'] = ObjectSerializer::toQueryValue($last_name_soundex_less);
        }
        // query params
        if ($last_name_soundex_less_or_equal !== null) {
            $queryParams['LastNameSoundex.LessOrEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_less_or_equal);
        }
        // query params
        if ($last_name_soundex_greater !== null) {
            $queryParams['LastNameSoundex.Greater'] = ObjectSerializer::toQueryValue($last_name_soundex_greater);
        }
        // query params
        if ($last_name_soundex_greater_or_equal !== null) {
            $queryParams['LastNameSoundex.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_greater_or_equal);
        }
        // query params
        if ($last_name_soundex_is_null !== null) {
            $queryParams['LastNameSoundex.IsNull'] = ObjectSerializer::toQueryValue($last_name_soundex_is_null);
        }
        // query params
        if ($last_name_soundex_is_not_null !== null) {
            $queryParams['LastNameSoundex.IsNotNull'] = ObjectSerializer::toQueryValue($last_name_soundex_is_not_null);
        }
        // query params
        if ($last_name_soundex_like !== null) {
            $queryParams['LastNameSoundex.Like'] = ObjectSerializer::toQueryValue($last_name_soundex_like);
        }
        // query params
        if ($last_name_soundex_not_like !== null) {
            $queryParams['LastNameSoundex.NotLike'] = ObjectSerializer::toQueryValue($last_name_soundex_not_like);
        }
        // query params
        if ($last_name_soundex_contains !== null) {
            $queryParams['LastNameSoundex.Contains'] = ObjectSerializer::toQueryValue($last_name_soundex_contains);
        }
        // query params
        if ($last_name_soundex_not_contains !== null) {
            $queryParams['LastNameSoundex.NotContains'] = ObjectSerializer::toQueryValue($last_name_soundex_not_contains);
        }
        // query params
        if ($last_name_soundex_starts_with !== null) {
            $queryParams['LastNameSoundex.StartsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_starts_with);
        }
        // query params
        if ($last_name_soundex_not_starts_with !== null) {
            $queryParams['LastNameSoundex.NotStartsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_not_starts_with);
        }
        // query params
        if ($last_name_soundex_ends_with !== null) {
            $queryParams['LastNameSoundex.EndsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_ends_with);
        }
        // query params
        if ($last_name_soundex_not_ends_with !== null) {
            $queryParams['LastNameSoundex.NotEndsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_not_ends_with);
        }
        // query params
        if ($last_name_soundex_in !== null) {
            $queryParams['LastNameSoundex.In'] = ObjectSerializer::toQueryValue($last_name_soundex_in);
        }
        // query params
        if ($last_name_soundex_between !== null) {
            $queryParams['LastNameSoundex.Between'] = ObjectSerializer::toQueryValue($last_name_soundex_between);
        }
        // query params
        if ($company_name_soundex_not_equal !== null) {
            $queryParams['CompanyNameSoundex.NotEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_not_equal);
        }
        // query params
        if ($company_name_soundex_less !== null) {
            $queryParams['CompanyNameSoundex.Less'] = ObjectSerializer::toQueryValue($company_name_soundex_less);
        }
        // query params
        if ($company_name_soundex_less_or_equal !== null) {
            $queryParams['CompanyNameSoundex.LessOrEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_less_or_equal);
        }
        // query params
        if ($company_name_soundex_greater !== null) {
            $queryParams['CompanyNameSoundex.Greater'] = ObjectSerializer::toQueryValue($company_name_soundex_greater);
        }
        // query params
        if ($company_name_soundex_greater_or_equal !== null) {
            $queryParams['CompanyNameSoundex.GreaterOrEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_greater_or_equal);
        }
        // query params
        if ($company_name_soundex_is_null !== null) {
            $queryParams['CompanyNameSoundex.IsNull'] = ObjectSerializer::toQueryValue($company_name_soundex_is_null);
        }
        // query params
        if ($company_name_soundex_is_not_null !== null) {
            $queryParams['CompanyNameSoundex.IsNotNull'] = ObjectSerializer::toQueryValue($company_name_soundex_is_not_null);
        }
        // query params
        if ($company_name_soundex_like !== null) {
            $queryParams['CompanyNameSoundex.Like'] = ObjectSerializer::toQueryValue($company_name_soundex_like);
        }
        // query params
        if ($company_name_soundex_not_like !== null) {
            $queryParams['CompanyNameSoundex.NotLike'] = ObjectSerializer::toQueryValue($company_name_soundex_not_like);
        }
        // query params
        if ($company_name_soundex_contains !== null) {
            $queryParams['CompanyNameSoundex.Contains'] = ObjectSerializer::toQueryValue($company_name_soundex_contains);
        }
        // query params
        if ($company_name_soundex_not_contains !== null) {
            $queryParams['CompanyNameSoundex.NotContains'] = ObjectSerializer::toQueryValue($company_name_soundex_not_contains);
        }
        // query params
        if ($company_name_soundex_starts_with !== null) {
            $queryParams['CompanyNameSoundex.StartsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_starts_with);
        }
        // query params
        if ($company_name_soundex_not_starts_with !== null) {
            $queryParams['CompanyNameSoundex.NotStartsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_not_starts_with);
        }
        // query params
        if ($company_name_soundex_ends_with !== null) {
            $queryParams['CompanyNameSoundex.EndsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_ends_with);
        }
        // query params
        if ($company_name_soundex_not_ends_with !== null) {
            $queryParams['CompanyNameSoundex.NotEndsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_not_ends_with);
        }
        // query params
        if ($company_name_soundex_in !== null) {
            $queryParams['CompanyNameSoundex.In'] = ObjectSerializer::toQueryValue($company_name_soundex_in);
        }
        // query params
        if ($company_name_soundex_between !== null) {
            $queryParams['CompanyNameSoundex.Between'] = ObjectSerializer::toQueryValue($company_name_soundex_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearchAddresses
     *
     * Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultCustomerAddress
     */
    public function customerSearchAddresses($customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        list($response) = $this->customerSearchAddressesWithHttpInfo($customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);
        return $response;
    }

    /**
     * Operation customerSearchAddressesWithHttpInfo
     *
     * Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultCustomerAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchAddressesWithHttpInfo($customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomerAddress';
        $request = $this->customerSearchAddressesRequest($customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultCustomerAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchAddressesAsync
     *
     * Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAddressesAsync($customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        return $this->customerSearchAddressesAsyncWithHttpInfo($customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerSearchAddressesAsyncWithHttpInfo
     *
     * Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe
     *
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAddressesAsyncWithHttpInfo($customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultCustomerAddress';
        $request = $this->customerSearchAddressesRequest($customer_number, $full_name, $email_address, $phone_number, $phone_number2, $phone_number3, $street1, $street2, $street3, $city, $state, $country_code, $postal_code, $fax_number, $company, $customer_type, $promote_flag, $promote_by_partners, $promote_by_phone, $promote_by_fax, $promote_by_email, $promote_by_mail, $promote_by_sms, $promote_by_phone1, $promote_by_phone2, $promote_by_phone3, $title, $first_name, $middle_initial, $last_name, $suffix, $job_title, $job_position_code, $communication_preference, $source_promotion, $address_code, $default_currency, $department, $county, $pin_code, $social_security_number, $street_name, $street_type, $last_updated_on, $item_number, $last_name_soundex, $company_name_soundex, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $full_name_not_equal, $full_name_less, $full_name_less_or_equal, $full_name_greater, $full_name_greater_or_equal, $full_name_is_null, $full_name_is_not_null, $full_name_like, $full_name_not_like, $full_name_contains, $full_name_not_contains, $full_name_starts_with, $full_name_not_starts_with, $full_name_ends_with, $full_name_not_ends_with, $full_name_in, $full_name_between, $email_address_not_equal, $email_address_less, $email_address_less_or_equal, $email_address_greater, $email_address_greater_or_equal, $email_address_is_null, $email_address_is_not_null, $email_address_like, $email_address_not_like, $email_address_contains, $email_address_not_contains, $email_address_starts_with, $email_address_not_starts_with, $email_address_ends_with, $email_address_not_ends_with, $email_address_in, $email_address_between, $phone_number_not_equal, $phone_number_less, $phone_number_less_or_equal, $phone_number_greater, $phone_number_greater_or_equal, $phone_number_is_null, $phone_number_is_not_null, $phone_number_like, $phone_number_not_like, $phone_number_contains, $phone_number_not_contains, $phone_number_starts_with, $phone_number_not_starts_with, $phone_number_ends_with, $phone_number_not_ends_with, $phone_number_in, $phone_number_between, $phone_number2_not_equal, $phone_number2_less, $phone_number2_less_or_equal, $phone_number2_greater, $phone_number2_greater_or_equal, $phone_number2_is_null, $phone_number2_is_not_null, $phone_number2_like, $phone_number2_not_like, $phone_number2_contains, $phone_number2_not_contains, $phone_number2_starts_with, $phone_number2_not_starts_with, $phone_number2_ends_with, $phone_number2_not_ends_with, $phone_number2_in, $phone_number2_between, $phone_number3_not_equal, $phone_number3_less, $phone_number3_less_or_equal, $phone_number3_greater, $phone_number3_greater_or_equal, $phone_number3_is_null, $phone_number3_is_not_null, $phone_number3_like, $phone_number3_not_like, $phone_number3_contains, $phone_number3_not_contains, $phone_number3_starts_with, $phone_number3_not_starts_with, $phone_number3_ends_with, $phone_number3_not_ends_with, $phone_number3_in, $phone_number3_between, $street1_not_equal, $street1_less, $street1_less_or_equal, $street1_greater, $street1_greater_or_equal, $street1_is_null, $street1_is_not_null, $street1_like, $street1_not_like, $street1_contains, $street1_not_contains, $street1_starts_with, $street1_not_starts_with, $street1_ends_with, $street1_not_ends_with, $street1_in, $street1_between, $street2_not_equal, $street2_less, $street2_less_or_equal, $street2_greater, $street2_greater_or_equal, $street2_is_null, $street2_is_not_null, $street2_like, $street2_not_like, $street2_contains, $street2_not_contains, $street2_starts_with, $street2_not_starts_with, $street2_ends_with, $street2_not_ends_with, $street2_in, $street2_between, $street3_not_equal, $street3_less, $street3_less_or_equal, $street3_greater, $street3_greater_or_equal, $street3_is_null, $street3_is_not_null, $street3_like, $street3_not_like, $street3_contains, $street3_not_contains, $street3_starts_with, $street3_not_starts_with, $street3_ends_with, $street3_not_ends_with, $street3_in, $street3_between, $city_not_equal, $city_less, $city_less_or_equal, $city_greater, $city_greater_or_equal, $city_is_null, $city_is_not_null, $city_like, $city_not_like, $city_contains, $city_not_contains, $city_starts_with, $city_not_starts_with, $city_ends_with, $city_not_ends_with, $city_in, $city_between, $state_not_equal, $state_less, $state_less_or_equal, $state_greater, $state_greater_or_equal, $state_is_null, $state_is_not_null, $state_like, $state_not_like, $state_contains, $state_not_contains, $state_starts_with, $state_not_starts_with, $state_ends_with, $state_not_ends_with, $state_in, $state_between, $country_code_not_equal, $country_code_less, $country_code_less_or_equal, $country_code_greater, $country_code_greater_or_equal, $country_code_is_null, $country_code_is_not_null, $country_code_like, $country_code_not_like, $country_code_contains, $country_code_not_contains, $country_code_starts_with, $country_code_not_starts_with, $country_code_ends_with, $country_code_not_ends_with, $country_code_in, $country_code_between, $postal_code_not_equal, $postal_code_less, $postal_code_less_or_equal, $postal_code_greater, $postal_code_greater_or_equal, $postal_code_is_null, $postal_code_is_not_null, $postal_code_like, $postal_code_not_like, $postal_code_contains, $postal_code_not_contains, $postal_code_starts_with, $postal_code_not_starts_with, $postal_code_ends_with, $postal_code_not_ends_with, $postal_code_in, $postal_code_between, $fax_number_not_equal, $fax_number_less, $fax_number_less_or_equal, $fax_number_greater, $fax_number_greater_or_equal, $fax_number_is_null, $fax_number_is_not_null, $fax_number_like, $fax_number_not_like, $fax_number_contains, $fax_number_not_contains, $fax_number_starts_with, $fax_number_not_starts_with, $fax_number_ends_with, $fax_number_not_ends_with, $fax_number_in, $fax_number_between, $company_not_equal, $company_less, $company_less_or_equal, $company_greater, $company_greater_or_equal, $company_is_null, $company_is_not_null, $company_like, $company_not_like, $company_contains, $company_not_contains, $company_starts_with, $company_not_starts_with, $company_ends_with, $company_not_ends_with, $company_in, $company_between, $customer_type_not_equal, $customer_type_less, $customer_type_less_or_equal, $customer_type_greater, $customer_type_greater_or_equal, $customer_type_is_null, $customer_type_is_not_null, $customer_type_like, $customer_type_not_like, $customer_type_contains, $customer_type_not_contains, $customer_type_starts_with, $customer_type_not_starts_with, $customer_type_ends_with, $customer_type_not_ends_with, $customer_type_in, $customer_type_between, $promote_flag_not_equal, $promote_flag_less, $promote_flag_less_or_equal, $promote_flag_greater, $promote_flag_greater_or_equal, $promote_flag_is_null, $promote_flag_is_not_null, $promote_flag_like, $promote_flag_not_like, $promote_flag_contains, $promote_flag_not_contains, $promote_flag_starts_with, $promote_flag_not_starts_with, $promote_flag_ends_with, $promote_flag_not_ends_with, $promote_flag_in, $promote_flag_between, $promote_by_partners_not_equal, $promote_by_partners_less, $promote_by_partners_less_or_equal, $promote_by_partners_greater, $promote_by_partners_greater_or_equal, $promote_by_partners_is_null, $promote_by_partners_is_not_null, $promote_by_partners_like, $promote_by_partners_not_like, $promote_by_partners_contains, $promote_by_partners_not_contains, $promote_by_partners_starts_with, $promote_by_partners_not_starts_with, $promote_by_partners_ends_with, $promote_by_partners_not_ends_with, $promote_by_partners_in, $promote_by_partners_between, $promote_by_phone_not_equal, $promote_by_phone_less, $promote_by_phone_less_or_equal, $promote_by_phone_greater, $promote_by_phone_greater_or_equal, $promote_by_phone_is_null, $promote_by_phone_is_not_null, $promote_by_phone_like, $promote_by_phone_not_like, $promote_by_phone_contains, $promote_by_phone_not_contains, $promote_by_phone_starts_with, $promote_by_phone_not_starts_with, $promote_by_phone_ends_with, $promote_by_phone_not_ends_with, $promote_by_phone_in, $promote_by_phone_between, $promote_by_fax_not_equal, $promote_by_fax_less, $promote_by_fax_less_or_equal, $promote_by_fax_greater, $promote_by_fax_greater_or_equal, $promote_by_fax_is_null, $promote_by_fax_is_not_null, $promote_by_fax_like, $promote_by_fax_not_like, $promote_by_fax_contains, $promote_by_fax_not_contains, $promote_by_fax_starts_with, $promote_by_fax_not_starts_with, $promote_by_fax_ends_with, $promote_by_fax_not_ends_with, $promote_by_fax_in, $promote_by_fax_between, $promote_by_email_not_equal, $promote_by_email_less, $promote_by_email_less_or_equal, $promote_by_email_greater, $promote_by_email_greater_or_equal, $promote_by_email_is_null, $promote_by_email_is_not_null, $promote_by_email_like, $promote_by_email_not_like, $promote_by_email_contains, $promote_by_email_not_contains, $promote_by_email_starts_with, $promote_by_email_not_starts_with, $promote_by_email_ends_with, $promote_by_email_not_ends_with, $promote_by_email_in, $promote_by_email_between, $promote_by_mail_not_equal, $promote_by_mail_less, $promote_by_mail_less_or_equal, $promote_by_mail_greater, $promote_by_mail_greater_or_equal, $promote_by_mail_is_null, $promote_by_mail_is_not_null, $promote_by_mail_like, $promote_by_mail_not_like, $promote_by_mail_contains, $promote_by_mail_not_contains, $promote_by_mail_starts_with, $promote_by_mail_not_starts_with, $promote_by_mail_ends_with, $promote_by_mail_not_ends_with, $promote_by_mail_in, $promote_by_mail_between, $promote_by_sms_not_equal, $promote_by_sms_less, $promote_by_sms_less_or_equal, $promote_by_sms_greater, $promote_by_sms_greater_or_equal, $promote_by_sms_is_null, $promote_by_sms_is_not_null, $promote_by_sms_like, $promote_by_sms_not_like, $promote_by_sms_contains, $promote_by_sms_not_contains, $promote_by_sms_starts_with, $promote_by_sms_not_starts_with, $promote_by_sms_ends_with, $promote_by_sms_not_ends_with, $promote_by_sms_in, $promote_by_sms_between, $promote_by_phone1_not_equal, $promote_by_phone1_less, $promote_by_phone1_less_or_equal, $promote_by_phone1_greater, $promote_by_phone1_greater_or_equal, $promote_by_phone1_is_null, $promote_by_phone1_is_not_null, $promote_by_phone1_like, $promote_by_phone1_not_like, $promote_by_phone1_contains, $promote_by_phone1_not_contains, $promote_by_phone1_starts_with, $promote_by_phone1_not_starts_with, $promote_by_phone1_ends_with, $promote_by_phone1_not_ends_with, $promote_by_phone1_in, $promote_by_phone1_between, $promote_by_phone2_not_equal, $promote_by_phone2_less, $promote_by_phone2_less_or_equal, $promote_by_phone2_greater, $promote_by_phone2_greater_or_equal, $promote_by_phone2_is_null, $promote_by_phone2_is_not_null, $promote_by_phone2_like, $promote_by_phone2_not_like, $promote_by_phone2_contains, $promote_by_phone2_not_contains, $promote_by_phone2_starts_with, $promote_by_phone2_not_starts_with, $promote_by_phone2_ends_with, $promote_by_phone2_not_ends_with, $promote_by_phone2_in, $promote_by_phone2_between, $promote_by_phone3_not_equal, $promote_by_phone3_less, $promote_by_phone3_less_or_equal, $promote_by_phone3_greater, $promote_by_phone3_greater_or_equal, $promote_by_phone3_is_null, $promote_by_phone3_is_not_null, $promote_by_phone3_like, $promote_by_phone3_not_like, $promote_by_phone3_contains, $promote_by_phone3_not_contains, $promote_by_phone3_starts_with, $promote_by_phone3_not_starts_with, $promote_by_phone3_ends_with, $promote_by_phone3_not_ends_with, $promote_by_phone3_in, $promote_by_phone3_between, $title_not_equal, $title_less, $title_less_or_equal, $title_greater, $title_greater_or_equal, $title_is_null, $title_is_not_null, $title_like, $title_not_like, $title_contains, $title_not_contains, $title_starts_with, $title_not_starts_with, $title_ends_with, $title_not_ends_with, $title_in, $title_between, $first_name_not_equal, $first_name_less, $first_name_less_or_equal, $first_name_greater, $first_name_greater_or_equal, $first_name_is_null, $first_name_is_not_null, $first_name_like, $first_name_not_like, $first_name_contains, $first_name_not_contains, $first_name_starts_with, $first_name_not_starts_with, $first_name_ends_with, $first_name_not_ends_with, $first_name_in, $first_name_between, $middle_initial_not_equal, $middle_initial_less, $middle_initial_less_or_equal, $middle_initial_greater, $middle_initial_greater_or_equal, $middle_initial_is_null, $middle_initial_is_not_null, $middle_initial_like, $middle_initial_not_like, $middle_initial_contains, $middle_initial_not_contains, $middle_initial_starts_with, $middle_initial_not_starts_with, $middle_initial_ends_with, $middle_initial_not_ends_with, $middle_initial_in, $middle_initial_between, $last_name_not_equal, $last_name_less, $last_name_less_or_equal, $last_name_greater, $last_name_greater_or_equal, $last_name_is_null, $last_name_is_not_null, $last_name_like, $last_name_not_like, $last_name_contains, $last_name_not_contains, $last_name_starts_with, $last_name_not_starts_with, $last_name_ends_with, $last_name_not_ends_with, $last_name_in, $last_name_between, $suffix_not_equal, $suffix_less, $suffix_less_or_equal, $suffix_greater, $suffix_greater_or_equal, $suffix_is_null, $suffix_is_not_null, $suffix_like, $suffix_not_like, $suffix_contains, $suffix_not_contains, $suffix_starts_with, $suffix_not_starts_with, $suffix_ends_with, $suffix_not_ends_with, $suffix_in, $suffix_between, $job_title_not_equal, $job_title_less, $job_title_less_or_equal, $job_title_greater, $job_title_greater_or_equal, $job_title_is_null, $job_title_is_not_null, $job_title_like, $job_title_not_like, $job_title_contains, $job_title_not_contains, $job_title_starts_with, $job_title_not_starts_with, $job_title_ends_with, $job_title_not_ends_with, $job_title_in, $job_title_between, $job_position_code_not_equal, $job_position_code_less, $job_position_code_less_or_equal, $job_position_code_greater, $job_position_code_greater_or_equal, $job_position_code_is_null, $job_position_code_is_not_null, $job_position_code_like, $job_position_code_not_like, $job_position_code_contains, $job_position_code_not_contains, $job_position_code_starts_with, $job_position_code_not_starts_with, $job_position_code_ends_with, $job_position_code_not_ends_with, $job_position_code_in, $job_position_code_between, $communication_preference_not_equal, $communication_preference_less, $communication_preference_less_or_equal, $communication_preference_greater, $communication_preference_greater_or_equal, $communication_preference_is_null, $communication_preference_is_not_null, $communication_preference_like, $communication_preference_not_like, $communication_preference_contains, $communication_preference_not_contains, $communication_preference_starts_with, $communication_preference_not_starts_with, $communication_preference_ends_with, $communication_preference_not_ends_with, $communication_preference_in, $communication_preference_between, $source_promotion_not_equal, $source_promotion_less, $source_promotion_less_or_equal, $source_promotion_greater, $source_promotion_greater_or_equal, $source_promotion_is_null, $source_promotion_is_not_null, $source_promotion_like, $source_promotion_not_like, $source_promotion_contains, $source_promotion_not_contains, $source_promotion_starts_with, $source_promotion_not_starts_with, $source_promotion_ends_with, $source_promotion_not_ends_with, $source_promotion_in, $source_promotion_between, $address_code_not_equal, $address_code_less, $address_code_less_or_equal, $address_code_greater, $address_code_greater_or_equal, $address_code_is_null, $address_code_is_not_null, $address_code_like, $address_code_not_like, $address_code_contains, $address_code_not_contains, $address_code_starts_with, $address_code_not_starts_with, $address_code_ends_with, $address_code_not_ends_with, $address_code_in, $address_code_between, $default_currency_not_equal, $default_currency_less, $default_currency_less_or_equal, $default_currency_greater, $default_currency_greater_or_equal, $default_currency_is_null, $default_currency_is_not_null, $default_currency_like, $default_currency_not_like, $default_currency_contains, $default_currency_not_contains, $default_currency_starts_with, $default_currency_not_starts_with, $default_currency_ends_with, $default_currency_not_ends_with, $default_currency_in, $default_currency_between, $department_not_equal, $department_less, $department_less_or_equal, $department_greater, $department_greater_or_equal, $department_is_null, $department_is_not_null, $department_like, $department_not_like, $department_contains, $department_not_contains, $department_starts_with, $department_not_starts_with, $department_ends_with, $department_not_ends_with, $department_in, $department_between, $county_not_equal, $county_less, $county_less_or_equal, $county_greater, $county_greater_or_equal, $county_is_null, $county_is_not_null, $county_like, $county_not_like, $county_contains, $county_not_contains, $county_starts_with, $county_not_starts_with, $county_ends_with, $county_not_ends_with, $county_in, $county_between, $pin_code_not_equal, $pin_code_less, $pin_code_less_or_equal, $pin_code_greater, $pin_code_greater_or_equal, $pin_code_is_null, $pin_code_is_not_null, $pin_code_like, $pin_code_not_like, $pin_code_contains, $pin_code_not_contains, $pin_code_starts_with, $pin_code_not_starts_with, $pin_code_ends_with, $pin_code_not_ends_with, $pin_code_in, $pin_code_between, $social_security_number_not_equal, $social_security_number_less, $social_security_number_less_or_equal, $social_security_number_greater, $social_security_number_greater_or_equal, $social_security_number_is_null, $social_security_number_is_not_null, $social_security_number_like, $social_security_number_not_like, $social_security_number_contains, $social_security_number_not_contains, $social_security_number_starts_with, $social_security_number_not_starts_with, $social_security_number_ends_with, $social_security_number_not_ends_with, $social_security_number_in, $social_security_number_between, $street_name_not_equal, $street_name_less, $street_name_less_or_equal, $street_name_greater, $street_name_greater_or_equal, $street_name_is_null, $street_name_is_not_null, $street_name_like, $street_name_not_like, $street_name_contains, $street_name_not_contains, $street_name_starts_with, $street_name_not_starts_with, $street_name_ends_with, $street_name_not_ends_with, $street_name_in, $street_name_between, $street_type_not_equal, $street_type_less, $street_type_less_or_equal, $street_type_greater, $street_type_greater_or_equal, $street_type_is_null, $street_type_is_not_null, $street_type_like, $street_type_not_like, $street_type_contains, $street_type_not_contains, $street_type_starts_with, $street_type_not_starts_with, $street_type_ends_with, $street_type_not_ends_with, $street_type_in, $street_type_between, $last_updated_on_not_equal, $last_updated_on_less, $last_updated_on_less_or_equal, $last_updated_on_greater, $last_updated_on_greater_or_equal, $last_updated_on_is_null, $last_updated_on_is_not_null, $last_updated_on_like, $last_updated_on_not_like, $last_updated_on_contains, $last_updated_on_not_contains, $last_updated_on_starts_with, $last_updated_on_not_starts_with, $last_updated_on_ends_with, $last_updated_on_not_ends_with, $last_updated_on_in, $last_updated_on_between, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $last_name_soundex_not_equal, $last_name_soundex_less, $last_name_soundex_less_or_equal, $last_name_soundex_greater, $last_name_soundex_greater_or_equal, $last_name_soundex_is_null, $last_name_soundex_is_not_null, $last_name_soundex_like, $last_name_soundex_not_like, $last_name_soundex_contains, $last_name_soundex_not_contains, $last_name_soundex_starts_with, $last_name_soundex_not_starts_with, $last_name_soundex_ends_with, $last_name_soundex_not_ends_with, $last_name_soundex_in, $last_name_soundex_between, $company_name_soundex_not_equal, $company_name_soundex_less, $company_name_soundex_less_or_equal, $company_name_soundex_greater, $company_name_soundex_greater_or_equal, $company_name_soundex_is_null, $company_name_soundex_is_not_null, $company_name_soundex_like, $company_name_soundex_not_like, $company_name_soundex_contains, $company_name_soundex_not_contains, $company_name_soundex_starts_with, $company_name_soundex_not_starts_with, $company_name_soundex_ends_with, $company_name_soundex_not_ends_with, $company_name_soundex_in, $company_name_soundex_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerSearchAddresses'
     *
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $full_name Filter on ATN-NME using &#39;Equal&#39; operator (optional)
     * @param  string $email_address Filter on ADR-EML using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number Filter on PHO1-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number2 Filter on PHO2-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $phone_number3 Filter on PHO3-IDX using &#39;Equal&#39; operator (optional)
     * @param  string $street1 Filter on STR-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $street2 Filter on STR-2ND using &#39;Equal&#39; operator (optional)
     * @param  string $street3 Filter on STR-3RD using &#39;Equal&#39; operator (optional)
     * @param  string $city Filter on CTM-CTY using &#39;Equal&#39; operator (optional)
     * @param  string $state Filter on CTM-STE using &#39;Equal&#39; operator (optional)
     * @param  string $country_code Filter on CUN-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $postal_code Filter on ZIP-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $fax_number Filter on FAX-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $company Filter on CMP-NME using &#39;Equal&#39; operator (optional)
     * @param  string $customer_type Filter on CTM-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $promote_flag Filter on PROMO using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_partners Filter on PMO-PTR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone Filter on PMO-PHN using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_fax Filter on PMO-FAX using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_email Filter on PMO-EML using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_mail Filter on PMO-ADR using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_sms Filter on PMO-SMS using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone1 Filter on PMO-PH1 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone2 Filter on PMO-PH2 using &#39;Equal&#39; operator (optional)
     * @param  string $promote_by_phone3 Filter on PMO-PH3 using &#39;Equal&#39; operator (optional)
     * @param  string $title Filter on CTM-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $first_name Filter on ATN-1ST using &#39;Equal&#39; operator (optional)
     * @param  string $middle_initial Filter on ATN-MID using &#39;Equal&#39; operator (optional)
     * @param  string $last_name Filter on ATN-END using &#39;Equal&#39; operator (optional)
     * @param  string $suffix Filter on CTM-SFX using &#39;Equal&#39; operator (optional)
     * @param  string $job_title Filter on JOB-TTL using &#39;Equal&#39; operator (optional)
     * @param  string $job_position_code Filter on CTM-POS using &#39;Equal&#39; operator (optional)
     * @param  string $communication_preference Filter on COMM-PRF using &#39;Equal&#39; operator (optional)
     * @param  string $source_promotion Filter on CTM-SRC using &#39;Equal&#39; operator (optional)
     * @param  string $address_code Filter on ADR-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $default_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $department Filter on DPT-NME using &#39;Equal&#39; operator (optional)
     * @param  string $county Filter on CTM-CNTY using &#39;Equal&#39; operator (optional)
     * @param  string $pin_code Filter on PIN-CODE using &#39;Equal&#39; operator (optional)
     * @param  string $social_security_number Filter on SOC-SEC using &#39;Equal&#39; operator (optional)
     * @param  string $street_name Filter on FSTR-NME using &#39;Equal&#39; operator (optional)
     * @param  string $street_type Filter on STR-TYP using &#39;Equal&#39; operator (optional)
     * @param  string $last_updated_on Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $last_name_soundex Filter on END-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $company_name_soundex Filter on CMP-SNDX using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $full_name_not_equal Filter on ATN-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $full_name_less Filter on ATN-NME using &#39;Less&#39; operator (optional)
     * @param  string $full_name_less_or_equal Filter on ATN-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $full_name_greater Filter on ATN-NME using &#39;Greater&#39; operator (optional)
     * @param  string $full_name_greater_or_equal Filter on ATN-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $full_name_is_null Filter on ATN-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $full_name_is_not_null Filter on ATN-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $full_name_like Filter on ATN-NME using &#39;Like&#39; operator (optional)
     * @param  string $full_name_not_like Filter on ATN-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $full_name_contains Filter on ATN-NME using &#39;Contains&#39; operator (optional)
     * @param  string $full_name_not_contains Filter on ATN-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $full_name_starts_with Filter on ATN-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $full_name_not_starts_with Filter on ATN-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $full_name_ends_with Filter on ATN-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $full_name_not_ends_with Filter on ATN-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $full_name_in Filter on ATN-NME using &#39;In&#39; operator (optional)
     * @param  string $full_name_between Filter on ATN-NME using &#39;Between&#39; operator (optional)
     * @param  string $email_address_not_equal Filter on ADR-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $email_address_less Filter on ADR-EML using &#39;Less&#39; operator (optional)
     * @param  string $email_address_less_or_equal Filter on ADR-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $email_address_greater Filter on ADR-EML using &#39;Greater&#39; operator (optional)
     * @param  string $email_address_greater_or_equal Filter on ADR-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $email_address_is_null Filter on ADR-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $email_address_is_not_null Filter on ADR-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $email_address_like Filter on ADR-EML using &#39;Like&#39; operator (optional)
     * @param  string $email_address_not_like Filter on ADR-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $email_address_contains Filter on ADR-EML using &#39;Contains&#39; operator (optional)
     * @param  string $email_address_not_contains Filter on ADR-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $email_address_starts_with Filter on ADR-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $email_address_not_starts_with Filter on ADR-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $email_address_ends_with Filter on ADR-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $email_address_not_ends_with Filter on ADR-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $email_address_in Filter on ADR-EML using &#39;In&#39; operator (optional)
     * @param  string $email_address_between Filter on ADR-EML using &#39;Between&#39; operator (optional)
     * @param  string $phone_number_not_equal Filter on PHO1-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number_less Filter on PHO1-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number_less_or_equal Filter on PHO1-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number_greater Filter on PHO1-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number_greater_or_equal Filter on PHO1-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number_is_null Filter on PHO1-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number_is_not_null Filter on PHO1-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number_like Filter on PHO1-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number_not_like Filter on PHO1-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number_contains Filter on PHO1-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number_not_contains Filter on PHO1-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number_starts_with Filter on PHO1-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number_not_starts_with Filter on PHO1-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number_ends_with Filter on PHO1-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number_not_ends_with Filter on PHO1-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number_in Filter on PHO1-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number_between Filter on PHO1-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number2_not_equal Filter on PHO2-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number2_less Filter on PHO2-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number2_less_or_equal Filter on PHO2-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number2_greater Filter on PHO2-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number2_greater_or_equal Filter on PHO2-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number2_is_null Filter on PHO2-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number2_is_not_null Filter on PHO2-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number2_like Filter on PHO2-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number2_not_like Filter on PHO2-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number2_contains Filter on PHO2-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number2_not_contains Filter on PHO2-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number2_starts_with Filter on PHO2-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number2_not_starts_with Filter on PHO2-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number2_ends_with Filter on PHO2-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number2_not_ends_with Filter on PHO2-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number2_in Filter on PHO2-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number2_between Filter on PHO2-IDX using &#39;Between&#39; operator (optional)
     * @param  string $phone_number3_not_equal Filter on PHO3-IDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $phone_number3_less Filter on PHO3-IDX using &#39;Less&#39; operator (optional)
     * @param  string $phone_number3_less_or_equal Filter on PHO3-IDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $phone_number3_greater Filter on PHO3-IDX using &#39;Greater&#39; operator (optional)
     * @param  string $phone_number3_greater_or_equal Filter on PHO3-IDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $phone_number3_is_null Filter on PHO3-IDX using &#39;IsNull&#39; operator (optional)
     * @param  string $phone_number3_is_not_null Filter on PHO3-IDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $phone_number3_like Filter on PHO3-IDX using &#39;Like&#39; operator (optional)
     * @param  string $phone_number3_not_like Filter on PHO3-IDX using &#39;NotLike&#39; operator (optional)
     * @param  string $phone_number3_contains Filter on PHO3-IDX using &#39;Contains&#39; operator (optional)
     * @param  string $phone_number3_not_contains Filter on PHO3-IDX using &#39;NotContains&#39; operator (optional)
     * @param  string $phone_number3_starts_with Filter on PHO3-IDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $phone_number3_not_starts_with Filter on PHO3-IDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $phone_number3_ends_with Filter on PHO3-IDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $phone_number3_not_ends_with Filter on PHO3-IDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $phone_number3_in Filter on PHO3-IDX using &#39;In&#39; operator (optional)
     * @param  string $phone_number3_between Filter on PHO3-IDX using &#39;Between&#39; operator (optional)
     * @param  string $street1_not_equal Filter on STR-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $street1_less Filter on STR-1ST using &#39;Less&#39; operator (optional)
     * @param  string $street1_less_or_equal Filter on STR-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street1_greater Filter on STR-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $street1_greater_or_equal Filter on STR-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street1_is_null Filter on STR-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $street1_is_not_null Filter on STR-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street1_like Filter on STR-1ST using &#39;Like&#39; operator (optional)
     * @param  string $street1_not_like Filter on STR-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $street1_contains Filter on STR-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $street1_not_contains Filter on STR-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $street1_starts_with Filter on STR-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $street1_not_starts_with Filter on STR-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street1_ends_with Filter on STR-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $street1_not_ends_with Filter on STR-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street1_in Filter on STR-1ST using &#39;In&#39; operator (optional)
     * @param  string $street1_between Filter on STR-1ST using &#39;Between&#39; operator (optional)
     * @param  string $street2_not_equal Filter on STR-2ND using &#39;NotEqual&#39; operator (optional)
     * @param  string $street2_less Filter on STR-2ND using &#39;Less&#39; operator (optional)
     * @param  string $street2_less_or_equal Filter on STR-2ND using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street2_greater Filter on STR-2ND using &#39;Greater&#39; operator (optional)
     * @param  string $street2_greater_or_equal Filter on STR-2ND using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street2_is_null Filter on STR-2ND using &#39;IsNull&#39; operator (optional)
     * @param  string $street2_is_not_null Filter on STR-2ND using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street2_like Filter on STR-2ND using &#39;Like&#39; operator (optional)
     * @param  string $street2_not_like Filter on STR-2ND using &#39;NotLike&#39; operator (optional)
     * @param  string $street2_contains Filter on STR-2ND using &#39;Contains&#39; operator (optional)
     * @param  string $street2_not_contains Filter on STR-2ND using &#39;NotContains&#39; operator (optional)
     * @param  string $street2_starts_with Filter on STR-2ND using &#39;StartsWith&#39; operator (optional)
     * @param  string $street2_not_starts_with Filter on STR-2ND using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street2_ends_with Filter on STR-2ND using &#39;EndsWith&#39; operator (optional)
     * @param  string $street2_not_ends_with Filter on STR-2ND using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street2_in Filter on STR-2ND using &#39;In&#39; operator (optional)
     * @param  string $street2_between Filter on STR-2ND using &#39;Between&#39; operator (optional)
     * @param  string $street3_not_equal Filter on STR-3RD using &#39;NotEqual&#39; operator (optional)
     * @param  string $street3_less Filter on STR-3RD using &#39;Less&#39; operator (optional)
     * @param  string $street3_less_or_equal Filter on STR-3RD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street3_greater Filter on STR-3RD using &#39;Greater&#39; operator (optional)
     * @param  string $street3_greater_or_equal Filter on STR-3RD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street3_is_null Filter on STR-3RD using &#39;IsNull&#39; operator (optional)
     * @param  string $street3_is_not_null Filter on STR-3RD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street3_like Filter on STR-3RD using &#39;Like&#39; operator (optional)
     * @param  string $street3_not_like Filter on STR-3RD using &#39;NotLike&#39; operator (optional)
     * @param  string $street3_contains Filter on STR-3RD using &#39;Contains&#39; operator (optional)
     * @param  string $street3_not_contains Filter on STR-3RD using &#39;NotContains&#39; operator (optional)
     * @param  string $street3_starts_with Filter on STR-3RD using &#39;StartsWith&#39; operator (optional)
     * @param  string $street3_not_starts_with Filter on STR-3RD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street3_ends_with Filter on STR-3RD using &#39;EndsWith&#39; operator (optional)
     * @param  string $street3_not_ends_with Filter on STR-3RD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street3_in Filter on STR-3RD using &#39;In&#39; operator (optional)
     * @param  string $street3_between Filter on STR-3RD using &#39;Between&#39; operator (optional)
     * @param  string $city_not_equal Filter on CTM-CTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $city_less Filter on CTM-CTY using &#39;Less&#39; operator (optional)
     * @param  string $city_less_or_equal Filter on CTM-CTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $city_greater Filter on CTM-CTY using &#39;Greater&#39; operator (optional)
     * @param  string $city_greater_or_equal Filter on CTM-CTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $city_is_null Filter on CTM-CTY using &#39;IsNull&#39; operator (optional)
     * @param  string $city_is_not_null Filter on CTM-CTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $city_like Filter on CTM-CTY using &#39;Like&#39; operator (optional)
     * @param  string $city_not_like Filter on CTM-CTY using &#39;NotLike&#39; operator (optional)
     * @param  string $city_contains Filter on CTM-CTY using &#39;Contains&#39; operator (optional)
     * @param  string $city_not_contains Filter on CTM-CTY using &#39;NotContains&#39; operator (optional)
     * @param  string $city_starts_with Filter on CTM-CTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $city_not_starts_with Filter on CTM-CTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $city_ends_with Filter on CTM-CTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $city_not_ends_with Filter on CTM-CTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $city_in Filter on CTM-CTY using &#39;In&#39; operator (optional)
     * @param  string $city_between Filter on CTM-CTY using &#39;Between&#39; operator (optional)
     * @param  string $state_not_equal Filter on CTM-STE using &#39;NotEqual&#39; operator (optional)
     * @param  string $state_less Filter on CTM-STE using &#39;Less&#39; operator (optional)
     * @param  string $state_less_or_equal Filter on CTM-STE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $state_greater Filter on CTM-STE using &#39;Greater&#39; operator (optional)
     * @param  string $state_greater_or_equal Filter on CTM-STE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $state_is_null Filter on CTM-STE using &#39;IsNull&#39; operator (optional)
     * @param  string $state_is_not_null Filter on CTM-STE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $state_like Filter on CTM-STE using &#39;Like&#39; operator (optional)
     * @param  string $state_not_like Filter on CTM-STE using &#39;NotLike&#39; operator (optional)
     * @param  string $state_contains Filter on CTM-STE using &#39;Contains&#39; operator (optional)
     * @param  string $state_not_contains Filter on CTM-STE using &#39;NotContains&#39; operator (optional)
     * @param  string $state_starts_with Filter on CTM-STE using &#39;StartsWith&#39; operator (optional)
     * @param  string $state_not_starts_with Filter on CTM-STE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $state_ends_with Filter on CTM-STE using &#39;EndsWith&#39; operator (optional)
     * @param  string $state_not_ends_with Filter on CTM-STE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $state_in Filter on CTM-STE using &#39;In&#39; operator (optional)
     * @param  string $state_between Filter on CTM-STE using &#39;Between&#39; operator (optional)
     * @param  string $country_code_not_equal Filter on CUN-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $country_code_less Filter on CUN-TYP using &#39;Less&#39; operator (optional)
     * @param  string $country_code_less_or_equal Filter on CUN-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $country_code_greater Filter on CUN-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $country_code_greater_or_equal Filter on CUN-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $country_code_is_null Filter on CUN-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $country_code_is_not_null Filter on CUN-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $country_code_like Filter on CUN-TYP using &#39;Like&#39; operator (optional)
     * @param  string $country_code_not_like Filter on CUN-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $country_code_contains Filter on CUN-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $country_code_not_contains Filter on CUN-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $country_code_starts_with Filter on CUN-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $country_code_not_starts_with Filter on CUN-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $country_code_ends_with Filter on CUN-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $country_code_not_ends_with Filter on CUN-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $country_code_in Filter on CUN-TYP using &#39;In&#39; operator (optional)
     * @param  string $country_code_between Filter on CUN-TYP using &#39;Between&#39; operator (optional)
     * @param  string $postal_code_not_equal Filter on ZIP-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $postal_code_less Filter on ZIP-CDE using &#39;Less&#39; operator (optional)
     * @param  string $postal_code_less_or_equal Filter on ZIP-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $postal_code_greater Filter on ZIP-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $postal_code_greater_or_equal Filter on ZIP-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $postal_code_is_null Filter on ZIP-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $postal_code_is_not_null Filter on ZIP-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $postal_code_like Filter on ZIP-CDE using &#39;Like&#39; operator (optional)
     * @param  string $postal_code_not_like Filter on ZIP-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $postal_code_contains Filter on ZIP-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $postal_code_not_contains Filter on ZIP-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $postal_code_starts_with Filter on ZIP-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $postal_code_not_starts_with Filter on ZIP-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $postal_code_ends_with Filter on ZIP-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $postal_code_not_ends_with Filter on ZIP-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $postal_code_in Filter on ZIP-CDE using &#39;In&#39; operator (optional)
     * @param  string $postal_code_between Filter on ZIP-CDE using &#39;Between&#39; operator (optional)
     * @param  string $fax_number_not_equal Filter on FAX-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $fax_number_less Filter on FAX-NBR using &#39;Less&#39; operator (optional)
     * @param  string $fax_number_less_or_equal Filter on FAX-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $fax_number_greater Filter on FAX-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $fax_number_greater_or_equal Filter on FAX-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $fax_number_is_null Filter on FAX-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $fax_number_is_not_null Filter on FAX-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $fax_number_like Filter on FAX-NBR using &#39;Like&#39; operator (optional)
     * @param  string $fax_number_not_like Filter on FAX-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $fax_number_contains Filter on FAX-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $fax_number_not_contains Filter on FAX-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $fax_number_starts_with Filter on FAX-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $fax_number_not_starts_with Filter on FAX-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $fax_number_ends_with Filter on FAX-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $fax_number_not_ends_with Filter on FAX-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $fax_number_in Filter on FAX-NBR using &#39;In&#39; operator (optional)
     * @param  string $fax_number_between Filter on FAX-NBR using &#39;Between&#39; operator (optional)
     * @param  string $company_not_equal Filter on CMP-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_less Filter on CMP-NME using &#39;Less&#39; operator (optional)
     * @param  string $company_less_or_equal Filter on CMP-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_greater Filter on CMP-NME using &#39;Greater&#39; operator (optional)
     * @param  string $company_greater_or_equal Filter on CMP-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_is_null Filter on CMP-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $company_is_not_null Filter on CMP-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_like Filter on CMP-NME using &#39;Like&#39; operator (optional)
     * @param  string $company_not_like Filter on CMP-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $company_contains Filter on CMP-NME using &#39;Contains&#39; operator (optional)
     * @param  string $company_not_contains Filter on CMP-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $company_starts_with Filter on CMP-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_not_starts_with Filter on CMP-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_ends_with Filter on CMP-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_not_ends_with Filter on CMP-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_in Filter on CMP-NME using &#39;In&#39; operator (optional)
     * @param  string $company_between Filter on CMP-NME using &#39;Between&#39; operator (optional)
     * @param  string $customer_type_not_equal Filter on CTM-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_type_less Filter on CTM-TYP using &#39;Less&#39; operator (optional)
     * @param  string $customer_type_less_or_equal Filter on CTM-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_type_greater Filter on CTM-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $customer_type_greater_or_equal Filter on CTM-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_type_is_null Filter on CTM-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_type_is_not_null Filter on CTM-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_type_like Filter on CTM-TYP using &#39;Like&#39; operator (optional)
     * @param  string $customer_type_not_like Filter on CTM-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_type_contains Filter on CTM-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $customer_type_not_contains Filter on CTM-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_type_starts_with Filter on CTM-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_type_not_starts_with Filter on CTM-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_type_ends_with Filter on CTM-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_type_not_ends_with Filter on CTM-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_type_in Filter on CTM-TYP using &#39;In&#39; operator (optional)
     * @param  string $customer_type_between Filter on CTM-TYP using &#39;Between&#39; operator (optional)
     * @param  string $promote_flag_not_equal Filter on PROMO using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_flag_less Filter on PROMO using &#39;Less&#39; operator (optional)
     * @param  string $promote_flag_less_or_equal Filter on PROMO using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_flag_greater Filter on PROMO using &#39;Greater&#39; operator (optional)
     * @param  string $promote_flag_greater_or_equal Filter on PROMO using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_flag_is_null Filter on PROMO using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_flag_is_not_null Filter on PROMO using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_flag_like Filter on PROMO using &#39;Like&#39; operator (optional)
     * @param  string $promote_flag_not_like Filter on PROMO using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_flag_contains Filter on PROMO using &#39;Contains&#39; operator (optional)
     * @param  string $promote_flag_not_contains Filter on PROMO using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_flag_starts_with Filter on PROMO using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_flag_not_starts_with Filter on PROMO using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_flag_ends_with Filter on PROMO using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_flag_not_ends_with Filter on PROMO using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_flag_in Filter on PROMO using &#39;In&#39; operator (optional)
     * @param  string $promote_flag_between Filter on PROMO using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_partners_not_equal Filter on PMO-PTR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_partners_less Filter on PMO-PTR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_partners_less_or_equal Filter on PMO-PTR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_greater Filter on PMO-PTR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_partners_greater_or_equal Filter on PMO-PTR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_partners_is_null Filter on PMO-PTR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_partners_is_not_null Filter on PMO-PTR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_partners_like Filter on PMO-PTR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_partners_not_like Filter on PMO-PTR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_partners_contains Filter on PMO-PTR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_partners_not_contains Filter on PMO-PTR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_partners_starts_with Filter on PMO-PTR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_starts_with Filter on PMO-PTR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_partners_ends_with Filter on PMO-PTR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_not_ends_with Filter on PMO-PTR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_partners_in Filter on PMO-PTR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_partners_between Filter on PMO-PTR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone_not_equal Filter on PMO-PHN using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone_less Filter on PMO-PHN using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone_less_or_equal Filter on PMO-PHN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_greater Filter on PMO-PHN using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone_greater_or_equal Filter on PMO-PHN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone_is_null Filter on PMO-PHN using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone_is_not_null Filter on PMO-PHN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone_like Filter on PMO-PHN using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone_not_like Filter on PMO-PHN using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone_contains Filter on PMO-PHN using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone_not_contains Filter on PMO-PHN using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone_starts_with Filter on PMO-PHN using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_starts_with Filter on PMO-PHN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone_ends_with Filter on PMO-PHN using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_not_ends_with Filter on PMO-PHN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone_in Filter on PMO-PHN using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone_between Filter on PMO-PHN using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_fax_not_equal Filter on PMO-FAX using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_fax_less Filter on PMO-FAX using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_fax_less_or_equal Filter on PMO-FAX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_greater Filter on PMO-FAX using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_fax_greater_or_equal Filter on PMO-FAX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_fax_is_null Filter on PMO-FAX using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_fax_is_not_null Filter on PMO-FAX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_fax_like Filter on PMO-FAX using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_fax_not_like Filter on PMO-FAX using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_fax_contains Filter on PMO-FAX using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_fax_not_contains Filter on PMO-FAX using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_fax_starts_with Filter on PMO-FAX using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_starts_with Filter on PMO-FAX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_fax_ends_with Filter on PMO-FAX using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_not_ends_with Filter on PMO-FAX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_fax_in Filter on PMO-FAX using &#39;In&#39; operator (optional)
     * @param  string $promote_by_fax_between Filter on PMO-FAX using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_email_not_equal Filter on PMO-EML using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_email_less Filter on PMO-EML using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_email_less_or_equal Filter on PMO-EML using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_greater Filter on PMO-EML using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_email_greater_or_equal Filter on PMO-EML using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_email_is_null Filter on PMO-EML using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_email_is_not_null Filter on PMO-EML using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_email_like Filter on PMO-EML using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_email_not_like Filter on PMO-EML using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_email_contains Filter on PMO-EML using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_email_not_contains Filter on PMO-EML using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_email_starts_with Filter on PMO-EML using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_starts_with Filter on PMO-EML using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_email_ends_with Filter on PMO-EML using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_email_not_ends_with Filter on PMO-EML using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_email_in Filter on PMO-EML using &#39;In&#39; operator (optional)
     * @param  string $promote_by_email_between Filter on PMO-EML using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_mail_not_equal Filter on PMO-ADR using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_mail_less Filter on PMO-ADR using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_mail_less_or_equal Filter on PMO-ADR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_greater Filter on PMO-ADR using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_mail_greater_or_equal Filter on PMO-ADR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_mail_is_null Filter on PMO-ADR using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_mail_is_not_null Filter on PMO-ADR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_mail_like Filter on PMO-ADR using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_mail_not_like Filter on PMO-ADR using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_mail_contains Filter on PMO-ADR using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_mail_not_contains Filter on PMO-ADR using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_mail_starts_with Filter on PMO-ADR using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_starts_with Filter on PMO-ADR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_mail_ends_with Filter on PMO-ADR using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_not_ends_with Filter on PMO-ADR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_mail_in Filter on PMO-ADR using &#39;In&#39; operator (optional)
     * @param  string $promote_by_mail_between Filter on PMO-ADR using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_sms_not_equal Filter on PMO-SMS using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_sms_less Filter on PMO-SMS using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_sms_less_or_equal Filter on PMO-SMS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_greater Filter on PMO-SMS using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_sms_greater_or_equal Filter on PMO-SMS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_sms_is_null Filter on PMO-SMS using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_sms_is_not_null Filter on PMO-SMS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_sms_like Filter on PMO-SMS using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_sms_not_like Filter on PMO-SMS using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_sms_contains Filter on PMO-SMS using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_sms_not_contains Filter on PMO-SMS using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_sms_starts_with Filter on PMO-SMS using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_starts_with Filter on PMO-SMS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_sms_ends_with Filter on PMO-SMS using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_not_ends_with Filter on PMO-SMS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_sms_in Filter on PMO-SMS using &#39;In&#39; operator (optional)
     * @param  string $promote_by_sms_between Filter on PMO-SMS using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone1_not_equal Filter on PMO-PH1 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_less Filter on PMO-PH1 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone1_less_or_equal Filter on PMO-PH1 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_greater Filter on PMO-PH1 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone1_greater_or_equal Filter on PMO-PH1 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone1_is_null Filter on PMO-PH1 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone1_is_not_null Filter on PMO-PH1 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone1_like Filter on PMO-PH1 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone1_not_like Filter on PMO-PH1 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone1_contains Filter on PMO-PH1 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone1_not_contains Filter on PMO-PH1 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone1_starts_with Filter on PMO-PH1 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_starts_with Filter on PMO-PH1 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_ends_with Filter on PMO-PH1 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_not_ends_with Filter on PMO-PH1 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone1_in Filter on PMO-PH1 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone1_between Filter on PMO-PH1 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone2_not_equal Filter on PMO-PH2 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_less Filter on PMO-PH2 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone2_less_or_equal Filter on PMO-PH2 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_greater Filter on PMO-PH2 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone2_greater_or_equal Filter on PMO-PH2 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone2_is_null Filter on PMO-PH2 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone2_is_not_null Filter on PMO-PH2 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone2_like Filter on PMO-PH2 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone2_not_like Filter on PMO-PH2 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone2_contains Filter on PMO-PH2 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone2_not_contains Filter on PMO-PH2 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone2_starts_with Filter on PMO-PH2 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_starts_with Filter on PMO-PH2 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_ends_with Filter on PMO-PH2 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_not_ends_with Filter on PMO-PH2 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone2_in Filter on PMO-PH2 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone2_between Filter on PMO-PH2 using &#39;Between&#39; operator (optional)
     * @param  string $promote_by_phone3_not_equal Filter on PMO-PH3 using &#39;NotEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_less Filter on PMO-PH3 using &#39;Less&#39; operator (optional)
     * @param  string $promote_by_phone3_less_or_equal Filter on PMO-PH3 using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_greater Filter on PMO-PH3 using &#39;Greater&#39; operator (optional)
     * @param  string $promote_by_phone3_greater_or_equal Filter on PMO-PH3 using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promote_by_phone3_is_null Filter on PMO-PH3 using &#39;IsNull&#39; operator (optional)
     * @param  string $promote_by_phone3_is_not_null Filter on PMO-PH3 using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promote_by_phone3_like Filter on PMO-PH3 using &#39;Like&#39; operator (optional)
     * @param  string $promote_by_phone3_not_like Filter on PMO-PH3 using &#39;NotLike&#39; operator (optional)
     * @param  string $promote_by_phone3_contains Filter on PMO-PH3 using &#39;Contains&#39; operator (optional)
     * @param  string $promote_by_phone3_not_contains Filter on PMO-PH3 using &#39;NotContains&#39; operator (optional)
     * @param  string $promote_by_phone3_starts_with Filter on PMO-PH3 using &#39;StartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_starts_with Filter on PMO-PH3 using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_ends_with Filter on PMO-PH3 using &#39;EndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_not_ends_with Filter on PMO-PH3 using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promote_by_phone3_in Filter on PMO-PH3 using &#39;In&#39; operator (optional)
     * @param  string $promote_by_phone3_between Filter on PMO-PH3 using &#39;Between&#39; operator (optional)
     * @param  string $title_not_equal Filter on CTM-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $title_less Filter on CTM-TTL using &#39;Less&#39; operator (optional)
     * @param  string $title_less_or_equal Filter on CTM-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $title_greater Filter on CTM-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $title_greater_or_equal Filter on CTM-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $title_is_null Filter on CTM-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $title_is_not_null Filter on CTM-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $title_like Filter on CTM-TTL using &#39;Like&#39; operator (optional)
     * @param  string $title_not_like Filter on CTM-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $title_contains Filter on CTM-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $title_not_contains Filter on CTM-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $title_starts_with Filter on CTM-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $title_not_starts_with Filter on CTM-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $title_ends_with Filter on CTM-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $title_not_ends_with Filter on CTM-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $title_in Filter on CTM-TTL using &#39;In&#39; operator (optional)
     * @param  string $title_between Filter on CTM-TTL using &#39;Between&#39; operator (optional)
     * @param  string $first_name_not_equal Filter on ATN-1ST using &#39;NotEqual&#39; operator (optional)
     * @param  string $first_name_less Filter on ATN-1ST using &#39;Less&#39; operator (optional)
     * @param  string $first_name_less_or_equal Filter on ATN-1ST using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $first_name_greater Filter on ATN-1ST using &#39;Greater&#39; operator (optional)
     * @param  string $first_name_greater_or_equal Filter on ATN-1ST using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $first_name_is_null Filter on ATN-1ST using &#39;IsNull&#39; operator (optional)
     * @param  string $first_name_is_not_null Filter on ATN-1ST using &#39;IsNotNull&#39; operator (optional)
     * @param  string $first_name_like Filter on ATN-1ST using &#39;Like&#39; operator (optional)
     * @param  string $first_name_not_like Filter on ATN-1ST using &#39;NotLike&#39; operator (optional)
     * @param  string $first_name_contains Filter on ATN-1ST using &#39;Contains&#39; operator (optional)
     * @param  string $first_name_not_contains Filter on ATN-1ST using &#39;NotContains&#39; operator (optional)
     * @param  string $first_name_starts_with Filter on ATN-1ST using &#39;StartsWith&#39; operator (optional)
     * @param  string $first_name_not_starts_with Filter on ATN-1ST using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $first_name_ends_with Filter on ATN-1ST using &#39;EndsWith&#39; operator (optional)
     * @param  string $first_name_not_ends_with Filter on ATN-1ST using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $first_name_in Filter on ATN-1ST using &#39;In&#39; operator (optional)
     * @param  string $first_name_between Filter on ATN-1ST using &#39;Between&#39; operator (optional)
     * @param  string $middle_initial_not_equal Filter on ATN-MID using &#39;NotEqual&#39; operator (optional)
     * @param  string $middle_initial_less Filter on ATN-MID using &#39;Less&#39; operator (optional)
     * @param  string $middle_initial_less_or_equal Filter on ATN-MID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $middle_initial_greater Filter on ATN-MID using &#39;Greater&#39; operator (optional)
     * @param  string $middle_initial_greater_or_equal Filter on ATN-MID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $middle_initial_is_null Filter on ATN-MID using &#39;IsNull&#39; operator (optional)
     * @param  string $middle_initial_is_not_null Filter on ATN-MID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $middle_initial_like Filter on ATN-MID using &#39;Like&#39; operator (optional)
     * @param  string $middle_initial_not_like Filter on ATN-MID using &#39;NotLike&#39; operator (optional)
     * @param  string $middle_initial_contains Filter on ATN-MID using &#39;Contains&#39; operator (optional)
     * @param  string $middle_initial_not_contains Filter on ATN-MID using &#39;NotContains&#39; operator (optional)
     * @param  string $middle_initial_starts_with Filter on ATN-MID using &#39;StartsWith&#39; operator (optional)
     * @param  string $middle_initial_not_starts_with Filter on ATN-MID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $middle_initial_ends_with Filter on ATN-MID using &#39;EndsWith&#39; operator (optional)
     * @param  string $middle_initial_not_ends_with Filter on ATN-MID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $middle_initial_in Filter on ATN-MID using &#39;In&#39; operator (optional)
     * @param  string $middle_initial_between Filter on ATN-MID using &#39;Between&#39; operator (optional)
     * @param  string $last_name_not_equal Filter on ATN-END using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_less Filter on ATN-END using &#39;Less&#39; operator (optional)
     * @param  string $last_name_less_or_equal Filter on ATN-END using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_greater Filter on ATN-END using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_greater_or_equal Filter on ATN-END using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_is_null Filter on ATN-END using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_is_not_null Filter on ATN-END using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_like Filter on ATN-END using &#39;Like&#39; operator (optional)
     * @param  string $last_name_not_like Filter on ATN-END using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_contains Filter on ATN-END using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_not_contains Filter on ATN-END using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_starts_with Filter on ATN-END using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_not_starts_with Filter on ATN-END using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_ends_with Filter on ATN-END using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_not_ends_with Filter on ATN-END using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_in Filter on ATN-END using &#39;In&#39; operator (optional)
     * @param  string $last_name_between Filter on ATN-END using &#39;Between&#39; operator (optional)
     * @param  string $suffix_not_equal Filter on CTM-SFX using &#39;NotEqual&#39; operator (optional)
     * @param  string $suffix_less Filter on CTM-SFX using &#39;Less&#39; operator (optional)
     * @param  string $suffix_less_or_equal Filter on CTM-SFX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $suffix_greater Filter on CTM-SFX using &#39;Greater&#39; operator (optional)
     * @param  string $suffix_greater_or_equal Filter on CTM-SFX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $suffix_is_null Filter on CTM-SFX using &#39;IsNull&#39; operator (optional)
     * @param  string $suffix_is_not_null Filter on CTM-SFX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $suffix_like Filter on CTM-SFX using &#39;Like&#39; operator (optional)
     * @param  string $suffix_not_like Filter on CTM-SFX using &#39;NotLike&#39; operator (optional)
     * @param  string $suffix_contains Filter on CTM-SFX using &#39;Contains&#39; operator (optional)
     * @param  string $suffix_not_contains Filter on CTM-SFX using &#39;NotContains&#39; operator (optional)
     * @param  string $suffix_starts_with Filter on CTM-SFX using &#39;StartsWith&#39; operator (optional)
     * @param  string $suffix_not_starts_with Filter on CTM-SFX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $suffix_ends_with Filter on CTM-SFX using &#39;EndsWith&#39; operator (optional)
     * @param  string $suffix_not_ends_with Filter on CTM-SFX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $suffix_in Filter on CTM-SFX using &#39;In&#39; operator (optional)
     * @param  string $suffix_between Filter on CTM-SFX using &#39;Between&#39; operator (optional)
     * @param  string $job_title_not_equal Filter on JOB-TTL using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_title_less Filter on JOB-TTL using &#39;Less&#39; operator (optional)
     * @param  string $job_title_less_or_equal Filter on JOB-TTL using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_title_greater Filter on JOB-TTL using &#39;Greater&#39; operator (optional)
     * @param  string $job_title_greater_or_equal Filter on JOB-TTL using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_title_is_null Filter on JOB-TTL using &#39;IsNull&#39; operator (optional)
     * @param  string $job_title_is_not_null Filter on JOB-TTL using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_title_like Filter on JOB-TTL using &#39;Like&#39; operator (optional)
     * @param  string $job_title_not_like Filter on JOB-TTL using &#39;NotLike&#39; operator (optional)
     * @param  string $job_title_contains Filter on JOB-TTL using &#39;Contains&#39; operator (optional)
     * @param  string $job_title_not_contains Filter on JOB-TTL using &#39;NotContains&#39; operator (optional)
     * @param  string $job_title_starts_with Filter on JOB-TTL using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_title_not_starts_with Filter on JOB-TTL using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_title_ends_with Filter on JOB-TTL using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_title_not_ends_with Filter on JOB-TTL using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_title_in Filter on JOB-TTL using &#39;In&#39; operator (optional)
     * @param  string $job_title_between Filter on JOB-TTL using &#39;Between&#39; operator (optional)
     * @param  string $job_position_code_not_equal Filter on CTM-POS using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_position_code_less Filter on CTM-POS using &#39;Less&#39; operator (optional)
     * @param  string $job_position_code_less_or_equal Filter on CTM-POS using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_position_code_greater Filter on CTM-POS using &#39;Greater&#39; operator (optional)
     * @param  string $job_position_code_greater_or_equal Filter on CTM-POS using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_position_code_is_null Filter on CTM-POS using &#39;IsNull&#39; operator (optional)
     * @param  string $job_position_code_is_not_null Filter on CTM-POS using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_position_code_like Filter on CTM-POS using &#39;Like&#39; operator (optional)
     * @param  string $job_position_code_not_like Filter on CTM-POS using &#39;NotLike&#39; operator (optional)
     * @param  string $job_position_code_contains Filter on CTM-POS using &#39;Contains&#39; operator (optional)
     * @param  string $job_position_code_not_contains Filter on CTM-POS using &#39;NotContains&#39; operator (optional)
     * @param  string $job_position_code_starts_with Filter on CTM-POS using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_position_code_not_starts_with Filter on CTM-POS using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_position_code_ends_with Filter on CTM-POS using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_position_code_not_ends_with Filter on CTM-POS using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_position_code_in Filter on CTM-POS using &#39;In&#39; operator (optional)
     * @param  string $job_position_code_between Filter on CTM-POS using &#39;Between&#39; operator (optional)
     * @param  string $communication_preference_not_equal Filter on COMM-PRF using &#39;NotEqual&#39; operator (optional)
     * @param  string $communication_preference_less Filter on COMM-PRF using &#39;Less&#39; operator (optional)
     * @param  string $communication_preference_less_or_equal Filter on COMM-PRF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $communication_preference_greater Filter on COMM-PRF using &#39;Greater&#39; operator (optional)
     * @param  string $communication_preference_greater_or_equal Filter on COMM-PRF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $communication_preference_is_null Filter on COMM-PRF using &#39;IsNull&#39; operator (optional)
     * @param  string $communication_preference_is_not_null Filter on COMM-PRF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $communication_preference_like Filter on COMM-PRF using &#39;Like&#39; operator (optional)
     * @param  string $communication_preference_not_like Filter on COMM-PRF using &#39;NotLike&#39; operator (optional)
     * @param  string $communication_preference_contains Filter on COMM-PRF using &#39;Contains&#39; operator (optional)
     * @param  string $communication_preference_not_contains Filter on COMM-PRF using &#39;NotContains&#39; operator (optional)
     * @param  string $communication_preference_starts_with Filter on COMM-PRF using &#39;StartsWith&#39; operator (optional)
     * @param  string $communication_preference_not_starts_with Filter on COMM-PRF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $communication_preference_ends_with Filter on COMM-PRF using &#39;EndsWith&#39; operator (optional)
     * @param  string $communication_preference_not_ends_with Filter on COMM-PRF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $communication_preference_in Filter on COMM-PRF using &#39;In&#39; operator (optional)
     * @param  string $communication_preference_between Filter on COMM-PRF using &#39;Between&#39; operator (optional)
     * @param  string $source_promotion_not_equal Filter on CTM-SRC using &#39;NotEqual&#39; operator (optional)
     * @param  string $source_promotion_less Filter on CTM-SRC using &#39;Less&#39; operator (optional)
     * @param  string $source_promotion_less_or_equal Filter on CTM-SRC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $source_promotion_greater Filter on CTM-SRC using &#39;Greater&#39; operator (optional)
     * @param  string $source_promotion_greater_or_equal Filter on CTM-SRC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $source_promotion_is_null Filter on CTM-SRC using &#39;IsNull&#39; operator (optional)
     * @param  string $source_promotion_is_not_null Filter on CTM-SRC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $source_promotion_like Filter on CTM-SRC using &#39;Like&#39; operator (optional)
     * @param  string $source_promotion_not_like Filter on CTM-SRC using &#39;NotLike&#39; operator (optional)
     * @param  string $source_promotion_contains Filter on CTM-SRC using &#39;Contains&#39; operator (optional)
     * @param  string $source_promotion_not_contains Filter on CTM-SRC using &#39;NotContains&#39; operator (optional)
     * @param  string $source_promotion_starts_with Filter on CTM-SRC using &#39;StartsWith&#39; operator (optional)
     * @param  string $source_promotion_not_starts_with Filter on CTM-SRC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $source_promotion_ends_with Filter on CTM-SRC using &#39;EndsWith&#39; operator (optional)
     * @param  string $source_promotion_not_ends_with Filter on CTM-SRC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $source_promotion_in Filter on CTM-SRC using &#39;In&#39; operator (optional)
     * @param  string $source_promotion_between Filter on CTM-SRC using &#39;Between&#39; operator (optional)
     * @param  string $address_code_not_equal Filter on ADR-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $address_code_less Filter on ADR-CDE using &#39;Less&#39; operator (optional)
     * @param  string $address_code_less_or_equal Filter on ADR-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $address_code_greater Filter on ADR-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $address_code_greater_or_equal Filter on ADR-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $address_code_is_null Filter on ADR-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $address_code_is_not_null Filter on ADR-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $address_code_like Filter on ADR-CDE using &#39;Like&#39; operator (optional)
     * @param  string $address_code_not_like Filter on ADR-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $address_code_contains Filter on ADR-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $address_code_not_contains Filter on ADR-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $address_code_starts_with Filter on ADR-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $address_code_not_starts_with Filter on ADR-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $address_code_ends_with Filter on ADR-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $address_code_not_ends_with Filter on ADR-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $address_code_in Filter on ADR-CDE using &#39;In&#39; operator (optional)
     * @param  string $address_code_between Filter on ADR-CDE using &#39;Between&#39; operator (optional)
     * @param  string $default_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $default_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $default_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $default_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $default_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $default_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $default_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $default_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $default_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $default_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $default_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $default_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $default_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $default_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $default_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $default_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $default_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $department_not_equal Filter on DPT-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $department_less Filter on DPT-NME using &#39;Less&#39; operator (optional)
     * @param  string $department_less_or_equal Filter on DPT-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $department_greater Filter on DPT-NME using &#39;Greater&#39; operator (optional)
     * @param  string $department_greater_or_equal Filter on DPT-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $department_is_null Filter on DPT-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $department_is_not_null Filter on DPT-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $department_like Filter on DPT-NME using &#39;Like&#39; operator (optional)
     * @param  string $department_not_like Filter on DPT-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $department_contains Filter on DPT-NME using &#39;Contains&#39; operator (optional)
     * @param  string $department_not_contains Filter on DPT-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $department_starts_with Filter on DPT-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $department_not_starts_with Filter on DPT-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $department_ends_with Filter on DPT-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $department_not_ends_with Filter on DPT-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $department_in Filter on DPT-NME using &#39;In&#39; operator (optional)
     * @param  string $department_between Filter on DPT-NME using &#39;Between&#39; operator (optional)
     * @param  string $county_not_equal Filter on CTM-CNTY using &#39;NotEqual&#39; operator (optional)
     * @param  string $county_less Filter on CTM-CNTY using &#39;Less&#39; operator (optional)
     * @param  string $county_less_or_equal Filter on CTM-CNTY using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $county_greater Filter on CTM-CNTY using &#39;Greater&#39; operator (optional)
     * @param  string $county_greater_or_equal Filter on CTM-CNTY using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $county_is_null Filter on CTM-CNTY using &#39;IsNull&#39; operator (optional)
     * @param  string $county_is_not_null Filter on CTM-CNTY using &#39;IsNotNull&#39; operator (optional)
     * @param  string $county_like Filter on CTM-CNTY using &#39;Like&#39; operator (optional)
     * @param  string $county_not_like Filter on CTM-CNTY using &#39;NotLike&#39; operator (optional)
     * @param  string $county_contains Filter on CTM-CNTY using &#39;Contains&#39; operator (optional)
     * @param  string $county_not_contains Filter on CTM-CNTY using &#39;NotContains&#39; operator (optional)
     * @param  string $county_starts_with Filter on CTM-CNTY using &#39;StartsWith&#39; operator (optional)
     * @param  string $county_not_starts_with Filter on CTM-CNTY using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $county_ends_with Filter on CTM-CNTY using &#39;EndsWith&#39; operator (optional)
     * @param  string $county_not_ends_with Filter on CTM-CNTY using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $county_in Filter on CTM-CNTY using &#39;In&#39; operator (optional)
     * @param  string $county_between Filter on CTM-CNTY using &#39;Between&#39; operator (optional)
     * @param  string $pin_code_not_equal Filter on PIN-CODE using &#39;NotEqual&#39; operator (optional)
     * @param  string $pin_code_less Filter on PIN-CODE using &#39;Less&#39; operator (optional)
     * @param  string $pin_code_less_or_equal Filter on PIN-CODE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $pin_code_greater Filter on PIN-CODE using &#39;Greater&#39; operator (optional)
     * @param  string $pin_code_greater_or_equal Filter on PIN-CODE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $pin_code_is_null Filter on PIN-CODE using &#39;IsNull&#39; operator (optional)
     * @param  string $pin_code_is_not_null Filter on PIN-CODE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $pin_code_like Filter on PIN-CODE using &#39;Like&#39; operator (optional)
     * @param  string $pin_code_not_like Filter on PIN-CODE using &#39;NotLike&#39; operator (optional)
     * @param  string $pin_code_contains Filter on PIN-CODE using &#39;Contains&#39; operator (optional)
     * @param  string $pin_code_not_contains Filter on PIN-CODE using &#39;NotContains&#39; operator (optional)
     * @param  string $pin_code_starts_with Filter on PIN-CODE using &#39;StartsWith&#39; operator (optional)
     * @param  string $pin_code_not_starts_with Filter on PIN-CODE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $pin_code_ends_with Filter on PIN-CODE using &#39;EndsWith&#39; operator (optional)
     * @param  string $pin_code_not_ends_with Filter on PIN-CODE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $pin_code_in Filter on PIN-CODE using &#39;In&#39; operator (optional)
     * @param  string $pin_code_between Filter on PIN-CODE using &#39;Between&#39; operator (optional)
     * @param  string $social_security_number_not_equal Filter on SOC-SEC using &#39;NotEqual&#39; operator (optional)
     * @param  string $social_security_number_less Filter on SOC-SEC using &#39;Less&#39; operator (optional)
     * @param  string $social_security_number_less_or_equal Filter on SOC-SEC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $social_security_number_greater Filter on SOC-SEC using &#39;Greater&#39; operator (optional)
     * @param  string $social_security_number_greater_or_equal Filter on SOC-SEC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $social_security_number_is_null Filter on SOC-SEC using &#39;IsNull&#39; operator (optional)
     * @param  string $social_security_number_is_not_null Filter on SOC-SEC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $social_security_number_like Filter on SOC-SEC using &#39;Like&#39; operator (optional)
     * @param  string $social_security_number_not_like Filter on SOC-SEC using &#39;NotLike&#39; operator (optional)
     * @param  string $social_security_number_contains Filter on SOC-SEC using &#39;Contains&#39; operator (optional)
     * @param  string $social_security_number_not_contains Filter on SOC-SEC using &#39;NotContains&#39; operator (optional)
     * @param  string $social_security_number_starts_with Filter on SOC-SEC using &#39;StartsWith&#39; operator (optional)
     * @param  string $social_security_number_not_starts_with Filter on SOC-SEC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $social_security_number_ends_with Filter on SOC-SEC using &#39;EndsWith&#39; operator (optional)
     * @param  string $social_security_number_not_ends_with Filter on SOC-SEC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $social_security_number_in Filter on SOC-SEC using &#39;In&#39; operator (optional)
     * @param  string $social_security_number_between Filter on SOC-SEC using &#39;Between&#39; operator (optional)
     * @param  string $street_name_not_equal Filter on FSTR-NME using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_name_less Filter on FSTR-NME using &#39;Less&#39; operator (optional)
     * @param  string $street_name_less_or_equal Filter on FSTR-NME using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_name_greater Filter on FSTR-NME using &#39;Greater&#39; operator (optional)
     * @param  string $street_name_greater_or_equal Filter on FSTR-NME using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_name_is_null Filter on FSTR-NME using &#39;IsNull&#39; operator (optional)
     * @param  string $street_name_is_not_null Filter on FSTR-NME using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_name_like Filter on FSTR-NME using &#39;Like&#39; operator (optional)
     * @param  string $street_name_not_like Filter on FSTR-NME using &#39;NotLike&#39; operator (optional)
     * @param  string $street_name_contains Filter on FSTR-NME using &#39;Contains&#39; operator (optional)
     * @param  string $street_name_not_contains Filter on FSTR-NME using &#39;NotContains&#39; operator (optional)
     * @param  string $street_name_starts_with Filter on FSTR-NME using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_name_not_starts_with Filter on FSTR-NME using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_name_ends_with Filter on FSTR-NME using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_name_not_ends_with Filter on FSTR-NME using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_name_in Filter on FSTR-NME using &#39;In&#39; operator (optional)
     * @param  string $street_name_between Filter on FSTR-NME using &#39;Between&#39; operator (optional)
     * @param  string $street_type_not_equal Filter on STR-TYP using &#39;NotEqual&#39; operator (optional)
     * @param  string $street_type_less Filter on STR-TYP using &#39;Less&#39; operator (optional)
     * @param  string $street_type_less_or_equal Filter on STR-TYP using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $street_type_greater Filter on STR-TYP using &#39;Greater&#39; operator (optional)
     * @param  string $street_type_greater_or_equal Filter on STR-TYP using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $street_type_is_null Filter on STR-TYP using &#39;IsNull&#39; operator (optional)
     * @param  string $street_type_is_not_null Filter on STR-TYP using &#39;IsNotNull&#39; operator (optional)
     * @param  string $street_type_like Filter on STR-TYP using &#39;Like&#39; operator (optional)
     * @param  string $street_type_not_like Filter on STR-TYP using &#39;NotLike&#39; operator (optional)
     * @param  string $street_type_contains Filter on STR-TYP using &#39;Contains&#39; operator (optional)
     * @param  string $street_type_not_contains Filter on STR-TYP using &#39;NotContains&#39; operator (optional)
     * @param  string $street_type_starts_with Filter on STR-TYP using &#39;StartsWith&#39; operator (optional)
     * @param  string $street_type_not_starts_with Filter on STR-TYP using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $street_type_ends_with Filter on STR-TYP using &#39;EndsWith&#39; operator (optional)
     * @param  string $street_type_not_ends_with Filter on STR-TYP using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $street_type_in Filter on STR-TYP using &#39;In&#39; operator (optional)
     * @param  string $street_type_between Filter on STR-TYP using &#39;Between&#39; operator (optional)
     * @param  string $last_updated_on_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_updated_on_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $last_updated_on_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $last_updated_on_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_updated_on_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $last_updated_on_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_updated_on_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $last_updated_on_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $last_updated_on_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $last_updated_on_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $last_updated_on_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_updated_on_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_updated_on_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_updated_on_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $last_updated_on_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $last_name_soundex_not_equal Filter on END-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $last_name_soundex_less Filter on END-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $last_name_soundex_less_or_equal Filter on END-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_greater Filter on END-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $last_name_soundex_greater_or_equal Filter on END-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $last_name_soundex_is_null Filter on END-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $last_name_soundex_is_not_null Filter on END-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $last_name_soundex_like Filter on END-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $last_name_soundex_not_like Filter on END-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $last_name_soundex_contains Filter on END-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $last_name_soundex_not_contains Filter on END-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $last_name_soundex_starts_with Filter on END-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_starts_with Filter on END-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $last_name_soundex_ends_with Filter on END-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_not_ends_with Filter on END-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $last_name_soundex_in Filter on END-SNDX using &#39;In&#39; operator (optional)
     * @param  string $last_name_soundex_between Filter on END-SNDX using &#39;Between&#39; operator (optional)
     * @param  string $company_name_soundex_not_equal Filter on CMP-SNDX using &#39;NotEqual&#39; operator (optional)
     * @param  string $company_name_soundex_less Filter on CMP-SNDX using &#39;Less&#39; operator (optional)
     * @param  string $company_name_soundex_less_or_equal Filter on CMP-SNDX using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_greater Filter on CMP-SNDX using &#39;Greater&#39; operator (optional)
     * @param  string $company_name_soundex_greater_or_equal Filter on CMP-SNDX using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $company_name_soundex_is_null Filter on CMP-SNDX using &#39;IsNull&#39; operator (optional)
     * @param  string $company_name_soundex_is_not_null Filter on CMP-SNDX using &#39;IsNotNull&#39; operator (optional)
     * @param  string $company_name_soundex_like Filter on CMP-SNDX using &#39;Like&#39; operator (optional)
     * @param  string $company_name_soundex_not_like Filter on CMP-SNDX using &#39;NotLike&#39; operator (optional)
     * @param  string $company_name_soundex_contains Filter on CMP-SNDX using &#39;Contains&#39; operator (optional)
     * @param  string $company_name_soundex_not_contains Filter on CMP-SNDX using &#39;NotContains&#39; operator (optional)
     * @param  string $company_name_soundex_starts_with Filter on CMP-SNDX using &#39;StartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_starts_with Filter on CMP-SNDX using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $company_name_soundex_ends_with Filter on CMP-SNDX using &#39;EndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_not_ends_with Filter on CMP-SNDX using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $company_name_soundex_in Filter on CMP-SNDX using &#39;In&#39; operator (optional)
     * @param  string $company_name_soundex_between Filter on CMP-SNDX using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchAddressesRequest($customer_number = null, $full_name = null, $email_address = null, $phone_number = null, $phone_number2 = null, $phone_number3 = null, $street1 = null, $street2 = null, $street3 = null, $city = null, $state = null, $country_code = null, $postal_code = null, $fax_number = null, $company = null, $customer_type = null, $promote_flag = null, $promote_by_partners = null, $promote_by_phone = null, $promote_by_fax = null, $promote_by_email = null, $promote_by_mail = null, $promote_by_sms = null, $promote_by_phone1 = null, $promote_by_phone2 = null, $promote_by_phone3 = null, $title = null, $first_name = null, $middle_initial = null, $last_name = null, $suffix = null, $job_title = null, $job_position_code = null, $communication_preference = null, $source_promotion = null, $address_code = null, $default_currency = null, $department = null, $county = null, $pin_code = null, $social_security_number = null, $street_name = null, $street_type = null, $last_updated_on = null, $item_number = null, $last_name_soundex = null, $company_name_soundex = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $full_name_not_equal = null, $full_name_less = null, $full_name_less_or_equal = null, $full_name_greater = null, $full_name_greater_or_equal = null, $full_name_is_null = null, $full_name_is_not_null = null, $full_name_like = null, $full_name_not_like = null, $full_name_contains = null, $full_name_not_contains = null, $full_name_starts_with = null, $full_name_not_starts_with = null, $full_name_ends_with = null, $full_name_not_ends_with = null, $full_name_in = null, $full_name_between = null, $email_address_not_equal = null, $email_address_less = null, $email_address_less_or_equal = null, $email_address_greater = null, $email_address_greater_or_equal = null, $email_address_is_null = null, $email_address_is_not_null = null, $email_address_like = null, $email_address_not_like = null, $email_address_contains = null, $email_address_not_contains = null, $email_address_starts_with = null, $email_address_not_starts_with = null, $email_address_ends_with = null, $email_address_not_ends_with = null, $email_address_in = null, $email_address_between = null, $phone_number_not_equal = null, $phone_number_less = null, $phone_number_less_or_equal = null, $phone_number_greater = null, $phone_number_greater_or_equal = null, $phone_number_is_null = null, $phone_number_is_not_null = null, $phone_number_like = null, $phone_number_not_like = null, $phone_number_contains = null, $phone_number_not_contains = null, $phone_number_starts_with = null, $phone_number_not_starts_with = null, $phone_number_ends_with = null, $phone_number_not_ends_with = null, $phone_number_in = null, $phone_number_between = null, $phone_number2_not_equal = null, $phone_number2_less = null, $phone_number2_less_or_equal = null, $phone_number2_greater = null, $phone_number2_greater_or_equal = null, $phone_number2_is_null = null, $phone_number2_is_not_null = null, $phone_number2_like = null, $phone_number2_not_like = null, $phone_number2_contains = null, $phone_number2_not_contains = null, $phone_number2_starts_with = null, $phone_number2_not_starts_with = null, $phone_number2_ends_with = null, $phone_number2_not_ends_with = null, $phone_number2_in = null, $phone_number2_between = null, $phone_number3_not_equal = null, $phone_number3_less = null, $phone_number3_less_or_equal = null, $phone_number3_greater = null, $phone_number3_greater_or_equal = null, $phone_number3_is_null = null, $phone_number3_is_not_null = null, $phone_number3_like = null, $phone_number3_not_like = null, $phone_number3_contains = null, $phone_number3_not_contains = null, $phone_number3_starts_with = null, $phone_number3_not_starts_with = null, $phone_number3_ends_with = null, $phone_number3_not_ends_with = null, $phone_number3_in = null, $phone_number3_between = null, $street1_not_equal = null, $street1_less = null, $street1_less_or_equal = null, $street1_greater = null, $street1_greater_or_equal = null, $street1_is_null = null, $street1_is_not_null = null, $street1_like = null, $street1_not_like = null, $street1_contains = null, $street1_not_contains = null, $street1_starts_with = null, $street1_not_starts_with = null, $street1_ends_with = null, $street1_not_ends_with = null, $street1_in = null, $street1_between = null, $street2_not_equal = null, $street2_less = null, $street2_less_or_equal = null, $street2_greater = null, $street2_greater_or_equal = null, $street2_is_null = null, $street2_is_not_null = null, $street2_like = null, $street2_not_like = null, $street2_contains = null, $street2_not_contains = null, $street2_starts_with = null, $street2_not_starts_with = null, $street2_ends_with = null, $street2_not_ends_with = null, $street2_in = null, $street2_between = null, $street3_not_equal = null, $street3_less = null, $street3_less_or_equal = null, $street3_greater = null, $street3_greater_or_equal = null, $street3_is_null = null, $street3_is_not_null = null, $street3_like = null, $street3_not_like = null, $street3_contains = null, $street3_not_contains = null, $street3_starts_with = null, $street3_not_starts_with = null, $street3_ends_with = null, $street3_not_ends_with = null, $street3_in = null, $street3_between = null, $city_not_equal = null, $city_less = null, $city_less_or_equal = null, $city_greater = null, $city_greater_or_equal = null, $city_is_null = null, $city_is_not_null = null, $city_like = null, $city_not_like = null, $city_contains = null, $city_not_contains = null, $city_starts_with = null, $city_not_starts_with = null, $city_ends_with = null, $city_not_ends_with = null, $city_in = null, $city_between = null, $state_not_equal = null, $state_less = null, $state_less_or_equal = null, $state_greater = null, $state_greater_or_equal = null, $state_is_null = null, $state_is_not_null = null, $state_like = null, $state_not_like = null, $state_contains = null, $state_not_contains = null, $state_starts_with = null, $state_not_starts_with = null, $state_ends_with = null, $state_not_ends_with = null, $state_in = null, $state_between = null, $country_code_not_equal = null, $country_code_less = null, $country_code_less_or_equal = null, $country_code_greater = null, $country_code_greater_or_equal = null, $country_code_is_null = null, $country_code_is_not_null = null, $country_code_like = null, $country_code_not_like = null, $country_code_contains = null, $country_code_not_contains = null, $country_code_starts_with = null, $country_code_not_starts_with = null, $country_code_ends_with = null, $country_code_not_ends_with = null, $country_code_in = null, $country_code_between = null, $postal_code_not_equal = null, $postal_code_less = null, $postal_code_less_or_equal = null, $postal_code_greater = null, $postal_code_greater_or_equal = null, $postal_code_is_null = null, $postal_code_is_not_null = null, $postal_code_like = null, $postal_code_not_like = null, $postal_code_contains = null, $postal_code_not_contains = null, $postal_code_starts_with = null, $postal_code_not_starts_with = null, $postal_code_ends_with = null, $postal_code_not_ends_with = null, $postal_code_in = null, $postal_code_between = null, $fax_number_not_equal = null, $fax_number_less = null, $fax_number_less_or_equal = null, $fax_number_greater = null, $fax_number_greater_or_equal = null, $fax_number_is_null = null, $fax_number_is_not_null = null, $fax_number_like = null, $fax_number_not_like = null, $fax_number_contains = null, $fax_number_not_contains = null, $fax_number_starts_with = null, $fax_number_not_starts_with = null, $fax_number_ends_with = null, $fax_number_not_ends_with = null, $fax_number_in = null, $fax_number_between = null, $company_not_equal = null, $company_less = null, $company_less_or_equal = null, $company_greater = null, $company_greater_or_equal = null, $company_is_null = null, $company_is_not_null = null, $company_like = null, $company_not_like = null, $company_contains = null, $company_not_contains = null, $company_starts_with = null, $company_not_starts_with = null, $company_ends_with = null, $company_not_ends_with = null, $company_in = null, $company_between = null, $customer_type_not_equal = null, $customer_type_less = null, $customer_type_less_or_equal = null, $customer_type_greater = null, $customer_type_greater_or_equal = null, $customer_type_is_null = null, $customer_type_is_not_null = null, $customer_type_like = null, $customer_type_not_like = null, $customer_type_contains = null, $customer_type_not_contains = null, $customer_type_starts_with = null, $customer_type_not_starts_with = null, $customer_type_ends_with = null, $customer_type_not_ends_with = null, $customer_type_in = null, $customer_type_between = null, $promote_flag_not_equal = null, $promote_flag_less = null, $promote_flag_less_or_equal = null, $promote_flag_greater = null, $promote_flag_greater_or_equal = null, $promote_flag_is_null = null, $promote_flag_is_not_null = null, $promote_flag_like = null, $promote_flag_not_like = null, $promote_flag_contains = null, $promote_flag_not_contains = null, $promote_flag_starts_with = null, $promote_flag_not_starts_with = null, $promote_flag_ends_with = null, $promote_flag_not_ends_with = null, $promote_flag_in = null, $promote_flag_between = null, $promote_by_partners_not_equal = null, $promote_by_partners_less = null, $promote_by_partners_less_or_equal = null, $promote_by_partners_greater = null, $promote_by_partners_greater_or_equal = null, $promote_by_partners_is_null = null, $promote_by_partners_is_not_null = null, $promote_by_partners_like = null, $promote_by_partners_not_like = null, $promote_by_partners_contains = null, $promote_by_partners_not_contains = null, $promote_by_partners_starts_with = null, $promote_by_partners_not_starts_with = null, $promote_by_partners_ends_with = null, $promote_by_partners_not_ends_with = null, $promote_by_partners_in = null, $promote_by_partners_between = null, $promote_by_phone_not_equal = null, $promote_by_phone_less = null, $promote_by_phone_less_or_equal = null, $promote_by_phone_greater = null, $promote_by_phone_greater_or_equal = null, $promote_by_phone_is_null = null, $promote_by_phone_is_not_null = null, $promote_by_phone_like = null, $promote_by_phone_not_like = null, $promote_by_phone_contains = null, $promote_by_phone_not_contains = null, $promote_by_phone_starts_with = null, $promote_by_phone_not_starts_with = null, $promote_by_phone_ends_with = null, $promote_by_phone_not_ends_with = null, $promote_by_phone_in = null, $promote_by_phone_between = null, $promote_by_fax_not_equal = null, $promote_by_fax_less = null, $promote_by_fax_less_or_equal = null, $promote_by_fax_greater = null, $promote_by_fax_greater_or_equal = null, $promote_by_fax_is_null = null, $promote_by_fax_is_not_null = null, $promote_by_fax_like = null, $promote_by_fax_not_like = null, $promote_by_fax_contains = null, $promote_by_fax_not_contains = null, $promote_by_fax_starts_with = null, $promote_by_fax_not_starts_with = null, $promote_by_fax_ends_with = null, $promote_by_fax_not_ends_with = null, $promote_by_fax_in = null, $promote_by_fax_between = null, $promote_by_email_not_equal = null, $promote_by_email_less = null, $promote_by_email_less_or_equal = null, $promote_by_email_greater = null, $promote_by_email_greater_or_equal = null, $promote_by_email_is_null = null, $promote_by_email_is_not_null = null, $promote_by_email_like = null, $promote_by_email_not_like = null, $promote_by_email_contains = null, $promote_by_email_not_contains = null, $promote_by_email_starts_with = null, $promote_by_email_not_starts_with = null, $promote_by_email_ends_with = null, $promote_by_email_not_ends_with = null, $promote_by_email_in = null, $promote_by_email_between = null, $promote_by_mail_not_equal = null, $promote_by_mail_less = null, $promote_by_mail_less_or_equal = null, $promote_by_mail_greater = null, $promote_by_mail_greater_or_equal = null, $promote_by_mail_is_null = null, $promote_by_mail_is_not_null = null, $promote_by_mail_like = null, $promote_by_mail_not_like = null, $promote_by_mail_contains = null, $promote_by_mail_not_contains = null, $promote_by_mail_starts_with = null, $promote_by_mail_not_starts_with = null, $promote_by_mail_ends_with = null, $promote_by_mail_not_ends_with = null, $promote_by_mail_in = null, $promote_by_mail_between = null, $promote_by_sms_not_equal = null, $promote_by_sms_less = null, $promote_by_sms_less_or_equal = null, $promote_by_sms_greater = null, $promote_by_sms_greater_or_equal = null, $promote_by_sms_is_null = null, $promote_by_sms_is_not_null = null, $promote_by_sms_like = null, $promote_by_sms_not_like = null, $promote_by_sms_contains = null, $promote_by_sms_not_contains = null, $promote_by_sms_starts_with = null, $promote_by_sms_not_starts_with = null, $promote_by_sms_ends_with = null, $promote_by_sms_not_ends_with = null, $promote_by_sms_in = null, $promote_by_sms_between = null, $promote_by_phone1_not_equal = null, $promote_by_phone1_less = null, $promote_by_phone1_less_or_equal = null, $promote_by_phone1_greater = null, $promote_by_phone1_greater_or_equal = null, $promote_by_phone1_is_null = null, $promote_by_phone1_is_not_null = null, $promote_by_phone1_like = null, $promote_by_phone1_not_like = null, $promote_by_phone1_contains = null, $promote_by_phone1_not_contains = null, $promote_by_phone1_starts_with = null, $promote_by_phone1_not_starts_with = null, $promote_by_phone1_ends_with = null, $promote_by_phone1_not_ends_with = null, $promote_by_phone1_in = null, $promote_by_phone1_between = null, $promote_by_phone2_not_equal = null, $promote_by_phone2_less = null, $promote_by_phone2_less_or_equal = null, $promote_by_phone2_greater = null, $promote_by_phone2_greater_or_equal = null, $promote_by_phone2_is_null = null, $promote_by_phone2_is_not_null = null, $promote_by_phone2_like = null, $promote_by_phone2_not_like = null, $promote_by_phone2_contains = null, $promote_by_phone2_not_contains = null, $promote_by_phone2_starts_with = null, $promote_by_phone2_not_starts_with = null, $promote_by_phone2_ends_with = null, $promote_by_phone2_not_ends_with = null, $promote_by_phone2_in = null, $promote_by_phone2_between = null, $promote_by_phone3_not_equal = null, $promote_by_phone3_less = null, $promote_by_phone3_less_or_equal = null, $promote_by_phone3_greater = null, $promote_by_phone3_greater_or_equal = null, $promote_by_phone3_is_null = null, $promote_by_phone3_is_not_null = null, $promote_by_phone3_like = null, $promote_by_phone3_not_like = null, $promote_by_phone3_contains = null, $promote_by_phone3_not_contains = null, $promote_by_phone3_starts_with = null, $promote_by_phone3_not_starts_with = null, $promote_by_phone3_ends_with = null, $promote_by_phone3_not_ends_with = null, $promote_by_phone3_in = null, $promote_by_phone3_between = null, $title_not_equal = null, $title_less = null, $title_less_or_equal = null, $title_greater = null, $title_greater_or_equal = null, $title_is_null = null, $title_is_not_null = null, $title_like = null, $title_not_like = null, $title_contains = null, $title_not_contains = null, $title_starts_with = null, $title_not_starts_with = null, $title_ends_with = null, $title_not_ends_with = null, $title_in = null, $title_between = null, $first_name_not_equal = null, $first_name_less = null, $first_name_less_or_equal = null, $first_name_greater = null, $first_name_greater_or_equal = null, $first_name_is_null = null, $first_name_is_not_null = null, $first_name_like = null, $first_name_not_like = null, $first_name_contains = null, $first_name_not_contains = null, $first_name_starts_with = null, $first_name_not_starts_with = null, $first_name_ends_with = null, $first_name_not_ends_with = null, $first_name_in = null, $first_name_between = null, $middle_initial_not_equal = null, $middle_initial_less = null, $middle_initial_less_or_equal = null, $middle_initial_greater = null, $middle_initial_greater_or_equal = null, $middle_initial_is_null = null, $middle_initial_is_not_null = null, $middle_initial_like = null, $middle_initial_not_like = null, $middle_initial_contains = null, $middle_initial_not_contains = null, $middle_initial_starts_with = null, $middle_initial_not_starts_with = null, $middle_initial_ends_with = null, $middle_initial_not_ends_with = null, $middle_initial_in = null, $middle_initial_between = null, $last_name_not_equal = null, $last_name_less = null, $last_name_less_or_equal = null, $last_name_greater = null, $last_name_greater_or_equal = null, $last_name_is_null = null, $last_name_is_not_null = null, $last_name_like = null, $last_name_not_like = null, $last_name_contains = null, $last_name_not_contains = null, $last_name_starts_with = null, $last_name_not_starts_with = null, $last_name_ends_with = null, $last_name_not_ends_with = null, $last_name_in = null, $last_name_between = null, $suffix_not_equal = null, $suffix_less = null, $suffix_less_or_equal = null, $suffix_greater = null, $suffix_greater_or_equal = null, $suffix_is_null = null, $suffix_is_not_null = null, $suffix_like = null, $suffix_not_like = null, $suffix_contains = null, $suffix_not_contains = null, $suffix_starts_with = null, $suffix_not_starts_with = null, $suffix_ends_with = null, $suffix_not_ends_with = null, $suffix_in = null, $suffix_between = null, $job_title_not_equal = null, $job_title_less = null, $job_title_less_or_equal = null, $job_title_greater = null, $job_title_greater_or_equal = null, $job_title_is_null = null, $job_title_is_not_null = null, $job_title_like = null, $job_title_not_like = null, $job_title_contains = null, $job_title_not_contains = null, $job_title_starts_with = null, $job_title_not_starts_with = null, $job_title_ends_with = null, $job_title_not_ends_with = null, $job_title_in = null, $job_title_between = null, $job_position_code_not_equal = null, $job_position_code_less = null, $job_position_code_less_or_equal = null, $job_position_code_greater = null, $job_position_code_greater_or_equal = null, $job_position_code_is_null = null, $job_position_code_is_not_null = null, $job_position_code_like = null, $job_position_code_not_like = null, $job_position_code_contains = null, $job_position_code_not_contains = null, $job_position_code_starts_with = null, $job_position_code_not_starts_with = null, $job_position_code_ends_with = null, $job_position_code_not_ends_with = null, $job_position_code_in = null, $job_position_code_between = null, $communication_preference_not_equal = null, $communication_preference_less = null, $communication_preference_less_or_equal = null, $communication_preference_greater = null, $communication_preference_greater_or_equal = null, $communication_preference_is_null = null, $communication_preference_is_not_null = null, $communication_preference_like = null, $communication_preference_not_like = null, $communication_preference_contains = null, $communication_preference_not_contains = null, $communication_preference_starts_with = null, $communication_preference_not_starts_with = null, $communication_preference_ends_with = null, $communication_preference_not_ends_with = null, $communication_preference_in = null, $communication_preference_between = null, $source_promotion_not_equal = null, $source_promotion_less = null, $source_promotion_less_or_equal = null, $source_promotion_greater = null, $source_promotion_greater_or_equal = null, $source_promotion_is_null = null, $source_promotion_is_not_null = null, $source_promotion_like = null, $source_promotion_not_like = null, $source_promotion_contains = null, $source_promotion_not_contains = null, $source_promotion_starts_with = null, $source_promotion_not_starts_with = null, $source_promotion_ends_with = null, $source_promotion_not_ends_with = null, $source_promotion_in = null, $source_promotion_between = null, $address_code_not_equal = null, $address_code_less = null, $address_code_less_or_equal = null, $address_code_greater = null, $address_code_greater_or_equal = null, $address_code_is_null = null, $address_code_is_not_null = null, $address_code_like = null, $address_code_not_like = null, $address_code_contains = null, $address_code_not_contains = null, $address_code_starts_with = null, $address_code_not_starts_with = null, $address_code_ends_with = null, $address_code_not_ends_with = null, $address_code_in = null, $address_code_between = null, $default_currency_not_equal = null, $default_currency_less = null, $default_currency_less_or_equal = null, $default_currency_greater = null, $default_currency_greater_or_equal = null, $default_currency_is_null = null, $default_currency_is_not_null = null, $default_currency_like = null, $default_currency_not_like = null, $default_currency_contains = null, $default_currency_not_contains = null, $default_currency_starts_with = null, $default_currency_not_starts_with = null, $default_currency_ends_with = null, $default_currency_not_ends_with = null, $default_currency_in = null, $default_currency_between = null, $department_not_equal = null, $department_less = null, $department_less_or_equal = null, $department_greater = null, $department_greater_or_equal = null, $department_is_null = null, $department_is_not_null = null, $department_like = null, $department_not_like = null, $department_contains = null, $department_not_contains = null, $department_starts_with = null, $department_not_starts_with = null, $department_ends_with = null, $department_not_ends_with = null, $department_in = null, $department_between = null, $county_not_equal = null, $county_less = null, $county_less_or_equal = null, $county_greater = null, $county_greater_or_equal = null, $county_is_null = null, $county_is_not_null = null, $county_like = null, $county_not_like = null, $county_contains = null, $county_not_contains = null, $county_starts_with = null, $county_not_starts_with = null, $county_ends_with = null, $county_not_ends_with = null, $county_in = null, $county_between = null, $pin_code_not_equal = null, $pin_code_less = null, $pin_code_less_or_equal = null, $pin_code_greater = null, $pin_code_greater_or_equal = null, $pin_code_is_null = null, $pin_code_is_not_null = null, $pin_code_like = null, $pin_code_not_like = null, $pin_code_contains = null, $pin_code_not_contains = null, $pin_code_starts_with = null, $pin_code_not_starts_with = null, $pin_code_ends_with = null, $pin_code_not_ends_with = null, $pin_code_in = null, $pin_code_between = null, $social_security_number_not_equal = null, $social_security_number_less = null, $social_security_number_less_or_equal = null, $social_security_number_greater = null, $social_security_number_greater_or_equal = null, $social_security_number_is_null = null, $social_security_number_is_not_null = null, $social_security_number_like = null, $social_security_number_not_like = null, $social_security_number_contains = null, $social_security_number_not_contains = null, $social_security_number_starts_with = null, $social_security_number_not_starts_with = null, $social_security_number_ends_with = null, $social_security_number_not_ends_with = null, $social_security_number_in = null, $social_security_number_between = null, $street_name_not_equal = null, $street_name_less = null, $street_name_less_or_equal = null, $street_name_greater = null, $street_name_greater_or_equal = null, $street_name_is_null = null, $street_name_is_not_null = null, $street_name_like = null, $street_name_not_like = null, $street_name_contains = null, $street_name_not_contains = null, $street_name_starts_with = null, $street_name_not_starts_with = null, $street_name_ends_with = null, $street_name_not_ends_with = null, $street_name_in = null, $street_name_between = null, $street_type_not_equal = null, $street_type_less = null, $street_type_less_or_equal = null, $street_type_greater = null, $street_type_greater_or_equal = null, $street_type_is_null = null, $street_type_is_not_null = null, $street_type_like = null, $street_type_not_like = null, $street_type_contains = null, $street_type_not_contains = null, $street_type_starts_with = null, $street_type_not_starts_with = null, $street_type_ends_with = null, $street_type_not_ends_with = null, $street_type_in = null, $street_type_between = null, $last_updated_on_not_equal = null, $last_updated_on_less = null, $last_updated_on_less_or_equal = null, $last_updated_on_greater = null, $last_updated_on_greater_or_equal = null, $last_updated_on_is_null = null, $last_updated_on_is_not_null = null, $last_updated_on_like = null, $last_updated_on_not_like = null, $last_updated_on_contains = null, $last_updated_on_not_contains = null, $last_updated_on_starts_with = null, $last_updated_on_not_starts_with = null, $last_updated_on_ends_with = null, $last_updated_on_not_ends_with = null, $last_updated_on_in = null, $last_updated_on_between = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $last_name_soundex_not_equal = null, $last_name_soundex_less = null, $last_name_soundex_less_or_equal = null, $last_name_soundex_greater = null, $last_name_soundex_greater_or_equal = null, $last_name_soundex_is_null = null, $last_name_soundex_is_not_null = null, $last_name_soundex_like = null, $last_name_soundex_not_like = null, $last_name_soundex_contains = null, $last_name_soundex_not_contains = null, $last_name_soundex_starts_with = null, $last_name_soundex_not_starts_with = null, $last_name_soundex_ends_with = null, $last_name_soundex_not_ends_with = null, $last_name_soundex_in = null, $last_name_soundex_between = null, $company_name_soundex_not_equal = null, $company_name_soundex_less = null, $company_name_soundex_less_or_equal = null, $company_name_soundex_greater = null, $company_name_soundex_greater_or_equal = null, $company_name_soundex_is_null = null, $company_name_soundex_is_not_null = null, $company_name_soundex_like = null, $company_name_soundex_not_like = null, $company_name_soundex_contains = null, $company_name_soundex_not_contains = null, $company_name_soundex_starts_with = null, $company_name_soundex_not_starts_with = null, $company_name_soundex_ends_with = null, $company_name_soundex_not_ends_with = null, $company_name_soundex_in = null, $company_name_soundex_between = null)
    {

        $resourcePath = '/customer-addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customer_number !== null) {
            $queryParams['CustomerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($full_name !== null) {
            $queryParams['FullName'] = ObjectSerializer::toQueryValue($full_name);
        }
        // query params
        if ($email_address !== null) {
            $queryParams['EmailAddress'] = ObjectSerializer::toQueryValue($email_address);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['PhoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($phone_number2 !== null) {
            $queryParams['PhoneNumber2'] = ObjectSerializer::toQueryValue($phone_number2);
        }
        // query params
        if ($phone_number3 !== null) {
            $queryParams['PhoneNumber3'] = ObjectSerializer::toQueryValue($phone_number3);
        }
        // query params
        if ($street1 !== null) {
            $queryParams['Street1'] = ObjectSerializer::toQueryValue($street1);
        }
        // query params
        if ($street2 !== null) {
            $queryParams['Street2'] = ObjectSerializer::toQueryValue($street2);
        }
        // query params
        if ($street3 !== null) {
            $queryParams['Street3'] = ObjectSerializer::toQueryValue($street3);
        }
        // query params
        if ($city !== null) {
            $queryParams['City'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['State'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['CountryCode'] = ObjectSerializer::toQueryValue($country_code);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['PostalCode'] = ObjectSerializer::toQueryValue($postal_code);
        }
        // query params
        if ($fax_number !== null) {
            $queryParams['FaxNumber'] = ObjectSerializer::toQueryValue($fax_number);
        }
        // query params
        if ($company !== null) {
            $queryParams['Company'] = ObjectSerializer::toQueryValue($company);
        }
        // query params
        if ($customer_type !== null) {
            $queryParams['CustomerType'] = ObjectSerializer::toQueryValue($customer_type);
        }
        // query params
        if ($promote_flag !== null) {
            $queryParams['PromoteFlag'] = ObjectSerializer::toQueryValue($promote_flag);
        }
        // query params
        if ($promote_by_partners !== null) {
            $queryParams['PromoteByPartners'] = ObjectSerializer::toQueryValue($promote_by_partners);
        }
        // query params
        if ($promote_by_phone !== null) {
            $queryParams['PromoteByPhone'] = ObjectSerializer::toQueryValue($promote_by_phone);
        }
        // query params
        if ($promote_by_fax !== null) {
            $queryParams['PromoteByFax'] = ObjectSerializer::toQueryValue($promote_by_fax);
        }
        // query params
        if ($promote_by_email !== null) {
            $queryParams['PromoteByEmail'] = ObjectSerializer::toQueryValue($promote_by_email);
        }
        // query params
        if ($promote_by_mail !== null) {
            $queryParams['PromoteByMail'] = ObjectSerializer::toQueryValue($promote_by_mail);
        }
        // query params
        if ($promote_by_sms !== null) {
            $queryParams['PromoteBySms'] = ObjectSerializer::toQueryValue($promote_by_sms);
        }
        // query params
        if ($promote_by_phone1 !== null) {
            $queryParams['PromoteByPhone1'] = ObjectSerializer::toQueryValue($promote_by_phone1);
        }
        // query params
        if ($promote_by_phone2 !== null) {
            $queryParams['PromoteByPhone2'] = ObjectSerializer::toQueryValue($promote_by_phone2);
        }
        // query params
        if ($promote_by_phone3 !== null) {
            $queryParams['PromoteByPhone3'] = ObjectSerializer::toQueryValue($promote_by_phone3);
        }
        // query params
        if ($title !== null) {
            $queryParams['Title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['FirstName'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($middle_initial !== null) {
            $queryParams['MiddleInitial'] = ObjectSerializer::toQueryValue($middle_initial);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['LastName'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($suffix !== null) {
            $queryParams['Suffix'] = ObjectSerializer::toQueryValue($suffix);
        }
        // query params
        if ($job_title !== null) {
            $queryParams['JobTitle'] = ObjectSerializer::toQueryValue($job_title);
        }
        // query params
        if ($job_position_code !== null) {
            $queryParams['JobPositionCode'] = ObjectSerializer::toQueryValue($job_position_code);
        }
        // query params
        if ($communication_preference !== null) {
            $queryParams['CommunicationPreference'] = ObjectSerializer::toQueryValue($communication_preference);
        }
        // query params
        if ($source_promotion !== null) {
            $queryParams['SourcePromotion'] = ObjectSerializer::toQueryValue($source_promotion);
        }
        // query params
        if ($address_code !== null) {
            $queryParams['AddressCode'] = ObjectSerializer::toQueryValue($address_code);
        }
        // query params
        if ($default_currency !== null) {
            $queryParams['DefaultCurrency'] = ObjectSerializer::toQueryValue($default_currency);
        }
        // query params
        if ($department !== null) {
            $queryParams['Department'] = ObjectSerializer::toQueryValue($department);
        }
        // query params
        if ($county !== null) {
            $queryParams['County'] = ObjectSerializer::toQueryValue($county);
        }
        // query params
        if ($pin_code !== null) {
            $queryParams['PinCode'] = ObjectSerializer::toQueryValue($pin_code);
        }
        // query params
        if ($social_security_number !== null) {
            $queryParams['SocialSecurityNumber'] = ObjectSerializer::toQueryValue($social_security_number);
        }
        // query params
        if ($street_name !== null) {
            $queryParams['StreetName'] = ObjectSerializer::toQueryValue($street_name);
        }
        // query params
        if ($street_type !== null) {
            $queryParams['StreetType'] = ObjectSerializer::toQueryValue($street_type);
        }
        // query params
        if ($last_updated_on !== null) {
            $queryParams['LastUpdatedOn'] = ObjectSerializer::toQueryValue($last_updated_on);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['ItemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($last_name_soundex !== null) {
            $queryParams['LastNameSoundex'] = ObjectSerializer::toQueryValue($last_name_soundex);
        }
        // query params
        if ($company_name_soundex !== null) {
            $queryParams['CompanyNameSoundex'] = ObjectSerializer::toQueryValue($company_name_soundex);
        }
        // query params
        if ($customer_number_not_equal !== null) {
            $queryParams['CustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($customer_number_not_equal);
        }
        // query params
        if ($customer_number_less !== null) {
            $queryParams['CustomerNumber.Less'] = ObjectSerializer::toQueryValue($customer_number_less);
        }
        // query params
        if ($customer_number_less_or_equal !== null) {
            $queryParams['CustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_number_less_or_equal);
        }
        // query params
        if ($customer_number_greater !== null) {
            $queryParams['CustomerNumber.Greater'] = ObjectSerializer::toQueryValue($customer_number_greater);
        }
        // query params
        if ($customer_number_greater_or_equal !== null) {
            $queryParams['CustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_number_greater_or_equal);
        }
        // query params
        if ($customer_number_is_null !== null) {
            $queryParams['CustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($customer_number_is_null);
        }
        // query params
        if ($customer_number_is_not_null !== null) {
            $queryParams['CustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($customer_number_is_not_null);
        }
        // query params
        if ($customer_number_like !== null) {
            $queryParams['CustomerNumber.Like'] = ObjectSerializer::toQueryValue($customer_number_like);
        }
        // query params
        if ($customer_number_not_like !== null) {
            $queryParams['CustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($customer_number_not_like);
        }
        // query params
        if ($customer_number_contains !== null) {
            $queryParams['CustomerNumber.Contains'] = ObjectSerializer::toQueryValue($customer_number_contains);
        }
        // query params
        if ($customer_number_not_contains !== null) {
            $queryParams['CustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($customer_number_not_contains);
        }
        // query params
        if ($customer_number_starts_with !== null) {
            $queryParams['CustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($customer_number_starts_with);
        }
        // query params
        if ($customer_number_not_starts_with !== null) {
            $queryParams['CustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_number_not_starts_with);
        }
        // query params
        if ($customer_number_ends_with !== null) {
            $queryParams['CustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($customer_number_ends_with);
        }
        // query params
        if ($customer_number_not_ends_with !== null) {
            $queryParams['CustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_number_not_ends_with);
        }
        // query params
        if ($customer_number_in !== null) {
            $queryParams['CustomerNumber.In'] = ObjectSerializer::toQueryValue($customer_number_in);
        }
        // query params
        if ($customer_number_between !== null) {
            $queryParams['CustomerNumber.Between'] = ObjectSerializer::toQueryValue($customer_number_between);
        }
        // query params
        if ($full_name_not_equal !== null) {
            $queryParams['FullName.NotEqual'] = ObjectSerializer::toQueryValue($full_name_not_equal);
        }
        // query params
        if ($full_name_less !== null) {
            $queryParams['FullName.Less'] = ObjectSerializer::toQueryValue($full_name_less);
        }
        // query params
        if ($full_name_less_or_equal !== null) {
            $queryParams['FullName.LessOrEqual'] = ObjectSerializer::toQueryValue($full_name_less_or_equal);
        }
        // query params
        if ($full_name_greater !== null) {
            $queryParams['FullName.Greater'] = ObjectSerializer::toQueryValue($full_name_greater);
        }
        // query params
        if ($full_name_greater_or_equal !== null) {
            $queryParams['FullName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($full_name_greater_or_equal);
        }
        // query params
        if ($full_name_is_null !== null) {
            $queryParams['FullName.IsNull'] = ObjectSerializer::toQueryValue($full_name_is_null);
        }
        // query params
        if ($full_name_is_not_null !== null) {
            $queryParams['FullName.IsNotNull'] = ObjectSerializer::toQueryValue($full_name_is_not_null);
        }
        // query params
        if ($full_name_like !== null) {
            $queryParams['FullName.Like'] = ObjectSerializer::toQueryValue($full_name_like);
        }
        // query params
        if ($full_name_not_like !== null) {
            $queryParams['FullName.NotLike'] = ObjectSerializer::toQueryValue($full_name_not_like);
        }
        // query params
        if ($full_name_contains !== null) {
            $queryParams['FullName.Contains'] = ObjectSerializer::toQueryValue($full_name_contains);
        }
        // query params
        if ($full_name_not_contains !== null) {
            $queryParams['FullName.NotContains'] = ObjectSerializer::toQueryValue($full_name_not_contains);
        }
        // query params
        if ($full_name_starts_with !== null) {
            $queryParams['FullName.StartsWith'] = ObjectSerializer::toQueryValue($full_name_starts_with);
        }
        // query params
        if ($full_name_not_starts_with !== null) {
            $queryParams['FullName.NotStartsWith'] = ObjectSerializer::toQueryValue($full_name_not_starts_with);
        }
        // query params
        if ($full_name_ends_with !== null) {
            $queryParams['FullName.EndsWith'] = ObjectSerializer::toQueryValue($full_name_ends_with);
        }
        // query params
        if ($full_name_not_ends_with !== null) {
            $queryParams['FullName.NotEndsWith'] = ObjectSerializer::toQueryValue($full_name_not_ends_with);
        }
        // query params
        if ($full_name_in !== null) {
            $queryParams['FullName.In'] = ObjectSerializer::toQueryValue($full_name_in);
        }
        // query params
        if ($full_name_between !== null) {
            $queryParams['FullName.Between'] = ObjectSerializer::toQueryValue($full_name_between);
        }
        // query params
        if ($email_address_not_equal !== null) {
            $queryParams['EmailAddress.NotEqual'] = ObjectSerializer::toQueryValue($email_address_not_equal);
        }
        // query params
        if ($email_address_less !== null) {
            $queryParams['EmailAddress.Less'] = ObjectSerializer::toQueryValue($email_address_less);
        }
        // query params
        if ($email_address_less_or_equal !== null) {
            $queryParams['EmailAddress.LessOrEqual'] = ObjectSerializer::toQueryValue($email_address_less_or_equal);
        }
        // query params
        if ($email_address_greater !== null) {
            $queryParams['EmailAddress.Greater'] = ObjectSerializer::toQueryValue($email_address_greater);
        }
        // query params
        if ($email_address_greater_or_equal !== null) {
            $queryParams['EmailAddress.GreaterOrEqual'] = ObjectSerializer::toQueryValue($email_address_greater_or_equal);
        }
        // query params
        if ($email_address_is_null !== null) {
            $queryParams['EmailAddress.IsNull'] = ObjectSerializer::toQueryValue($email_address_is_null);
        }
        // query params
        if ($email_address_is_not_null !== null) {
            $queryParams['EmailAddress.IsNotNull'] = ObjectSerializer::toQueryValue($email_address_is_not_null);
        }
        // query params
        if ($email_address_like !== null) {
            $queryParams['EmailAddress.Like'] = ObjectSerializer::toQueryValue($email_address_like);
        }
        // query params
        if ($email_address_not_like !== null) {
            $queryParams['EmailAddress.NotLike'] = ObjectSerializer::toQueryValue($email_address_not_like);
        }
        // query params
        if ($email_address_contains !== null) {
            $queryParams['EmailAddress.Contains'] = ObjectSerializer::toQueryValue($email_address_contains);
        }
        // query params
        if ($email_address_not_contains !== null) {
            $queryParams['EmailAddress.NotContains'] = ObjectSerializer::toQueryValue($email_address_not_contains);
        }
        // query params
        if ($email_address_starts_with !== null) {
            $queryParams['EmailAddress.StartsWith'] = ObjectSerializer::toQueryValue($email_address_starts_with);
        }
        // query params
        if ($email_address_not_starts_with !== null) {
            $queryParams['EmailAddress.NotStartsWith'] = ObjectSerializer::toQueryValue($email_address_not_starts_with);
        }
        // query params
        if ($email_address_ends_with !== null) {
            $queryParams['EmailAddress.EndsWith'] = ObjectSerializer::toQueryValue($email_address_ends_with);
        }
        // query params
        if ($email_address_not_ends_with !== null) {
            $queryParams['EmailAddress.NotEndsWith'] = ObjectSerializer::toQueryValue($email_address_not_ends_with);
        }
        // query params
        if ($email_address_in !== null) {
            $queryParams['EmailAddress.In'] = ObjectSerializer::toQueryValue($email_address_in);
        }
        // query params
        if ($email_address_between !== null) {
            $queryParams['EmailAddress.Between'] = ObjectSerializer::toQueryValue($email_address_between);
        }
        // query params
        if ($phone_number_not_equal !== null) {
            $queryParams['PhoneNumber.NotEqual'] = ObjectSerializer::toQueryValue($phone_number_not_equal);
        }
        // query params
        if ($phone_number_less !== null) {
            $queryParams['PhoneNumber.Less'] = ObjectSerializer::toQueryValue($phone_number_less);
        }
        // query params
        if ($phone_number_less_or_equal !== null) {
            $queryParams['PhoneNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number_less_or_equal);
        }
        // query params
        if ($phone_number_greater !== null) {
            $queryParams['PhoneNumber.Greater'] = ObjectSerializer::toQueryValue($phone_number_greater);
        }
        // query params
        if ($phone_number_greater_or_equal !== null) {
            $queryParams['PhoneNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number_greater_or_equal);
        }
        // query params
        if ($phone_number_is_null !== null) {
            $queryParams['PhoneNumber.IsNull'] = ObjectSerializer::toQueryValue($phone_number_is_null);
        }
        // query params
        if ($phone_number_is_not_null !== null) {
            $queryParams['PhoneNumber.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number_is_not_null);
        }
        // query params
        if ($phone_number_like !== null) {
            $queryParams['PhoneNumber.Like'] = ObjectSerializer::toQueryValue($phone_number_like);
        }
        // query params
        if ($phone_number_not_like !== null) {
            $queryParams['PhoneNumber.NotLike'] = ObjectSerializer::toQueryValue($phone_number_not_like);
        }
        // query params
        if ($phone_number_contains !== null) {
            $queryParams['PhoneNumber.Contains'] = ObjectSerializer::toQueryValue($phone_number_contains);
        }
        // query params
        if ($phone_number_not_contains !== null) {
            $queryParams['PhoneNumber.NotContains'] = ObjectSerializer::toQueryValue($phone_number_not_contains);
        }
        // query params
        if ($phone_number_starts_with !== null) {
            $queryParams['PhoneNumber.StartsWith'] = ObjectSerializer::toQueryValue($phone_number_starts_with);
        }
        // query params
        if ($phone_number_not_starts_with !== null) {
            $queryParams['PhoneNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number_not_starts_with);
        }
        // query params
        if ($phone_number_ends_with !== null) {
            $queryParams['PhoneNumber.EndsWith'] = ObjectSerializer::toQueryValue($phone_number_ends_with);
        }
        // query params
        if ($phone_number_not_ends_with !== null) {
            $queryParams['PhoneNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number_not_ends_with);
        }
        // query params
        if ($phone_number_in !== null) {
            $queryParams['PhoneNumber.In'] = ObjectSerializer::toQueryValue($phone_number_in);
        }
        // query params
        if ($phone_number_between !== null) {
            $queryParams['PhoneNumber.Between'] = ObjectSerializer::toQueryValue($phone_number_between);
        }
        // query params
        if ($phone_number2_not_equal !== null) {
            $queryParams['PhoneNumber2.NotEqual'] = ObjectSerializer::toQueryValue($phone_number2_not_equal);
        }
        // query params
        if ($phone_number2_less !== null) {
            $queryParams['PhoneNumber2.Less'] = ObjectSerializer::toQueryValue($phone_number2_less);
        }
        // query params
        if ($phone_number2_less_or_equal !== null) {
            $queryParams['PhoneNumber2.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number2_less_or_equal);
        }
        // query params
        if ($phone_number2_greater !== null) {
            $queryParams['PhoneNumber2.Greater'] = ObjectSerializer::toQueryValue($phone_number2_greater);
        }
        // query params
        if ($phone_number2_greater_or_equal !== null) {
            $queryParams['PhoneNumber2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number2_greater_or_equal);
        }
        // query params
        if ($phone_number2_is_null !== null) {
            $queryParams['PhoneNumber2.IsNull'] = ObjectSerializer::toQueryValue($phone_number2_is_null);
        }
        // query params
        if ($phone_number2_is_not_null !== null) {
            $queryParams['PhoneNumber2.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number2_is_not_null);
        }
        // query params
        if ($phone_number2_like !== null) {
            $queryParams['PhoneNumber2.Like'] = ObjectSerializer::toQueryValue($phone_number2_like);
        }
        // query params
        if ($phone_number2_not_like !== null) {
            $queryParams['PhoneNumber2.NotLike'] = ObjectSerializer::toQueryValue($phone_number2_not_like);
        }
        // query params
        if ($phone_number2_contains !== null) {
            $queryParams['PhoneNumber2.Contains'] = ObjectSerializer::toQueryValue($phone_number2_contains);
        }
        // query params
        if ($phone_number2_not_contains !== null) {
            $queryParams['PhoneNumber2.NotContains'] = ObjectSerializer::toQueryValue($phone_number2_not_contains);
        }
        // query params
        if ($phone_number2_starts_with !== null) {
            $queryParams['PhoneNumber2.StartsWith'] = ObjectSerializer::toQueryValue($phone_number2_starts_with);
        }
        // query params
        if ($phone_number2_not_starts_with !== null) {
            $queryParams['PhoneNumber2.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number2_not_starts_with);
        }
        // query params
        if ($phone_number2_ends_with !== null) {
            $queryParams['PhoneNumber2.EndsWith'] = ObjectSerializer::toQueryValue($phone_number2_ends_with);
        }
        // query params
        if ($phone_number2_not_ends_with !== null) {
            $queryParams['PhoneNumber2.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number2_not_ends_with);
        }
        // query params
        if ($phone_number2_in !== null) {
            $queryParams['PhoneNumber2.In'] = ObjectSerializer::toQueryValue($phone_number2_in);
        }
        // query params
        if ($phone_number2_between !== null) {
            $queryParams['PhoneNumber2.Between'] = ObjectSerializer::toQueryValue($phone_number2_between);
        }
        // query params
        if ($phone_number3_not_equal !== null) {
            $queryParams['PhoneNumber3.NotEqual'] = ObjectSerializer::toQueryValue($phone_number3_not_equal);
        }
        // query params
        if ($phone_number3_less !== null) {
            $queryParams['PhoneNumber3.Less'] = ObjectSerializer::toQueryValue($phone_number3_less);
        }
        // query params
        if ($phone_number3_less_or_equal !== null) {
            $queryParams['PhoneNumber3.LessOrEqual'] = ObjectSerializer::toQueryValue($phone_number3_less_or_equal);
        }
        // query params
        if ($phone_number3_greater !== null) {
            $queryParams['PhoneNumber3.Greater'] = ObjectSerializer::toQueryValue($phone_number3_greater);
        }
        // query params
        if ($phone_number3_greater_or_equal !== null) {
            $queryParams['PhoneNumber3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($phone_number3_greater_or_equal);
        }
        // query params
        if ($phone_number3_is_null !== null) {
            $queryParams['PhoneNumber3.IsNull'] = ObjectSerializer::toQueryValue($phone_number3_is_null);
        }
        // query params
        if ($phone_number3_is_not_null !== null) {
            $queryParams['PhoneNumber3.IsNotNull'] = ObjectSerializer::toQueryValue($phone_number3_is_not_null);
        }
        // query params
        if ($phone_number3_like !== null) {
            $queryParams['PhoneNumber3.Like'] = ObjectSerializer::toQueryValue($phone_number3_like);
        }
        // query params
        if ($phone_number3_not_like !== null) {
            $queryParams['PhoneNumber3.NotLike'] = ObjectSerializer::toQueryValue($phone_number3_not_like);
        }
        // query params
        if ($phone_number3_contains !== null) {
            $queryParams['PhoneNumber3.Contains'] = ObjectSerializer::toQueryValue($phone_number3_contains);
        }
        // query params
        if ($phone_number3_not_contains !== null) {
            $queryParams['PhoneNumber3.NotContains'] = ObjectSerializer::toQueryValue($phone_number3_not_contains);
        }
        // query params
        if ($phone_number3_starts_with !== null) {
            $queryParams['PhoneNumber3.StartsWith'] = ObjectSerializer::toQueryValue($phone_number3_starts_with);
        }
        // query params
        if ($phone_number3_not_starts_with !== null) {
            $queryParams['PhoneNumber3.NotStartsWith'] = ObjectSerializer::toQueryValue($phone_number3_not_starts_with);
        }
        // query params
        if ($phone_number3_ends_with !== null) {
            $queryParams['PhoneNumber3.EndsWith'] = ObjectSerializer::toQueryValue($phone_number3_ends_with);
        }
        // query params
        if ($phone_number3_not_ends_with !== null) {
            $queryParams['PhoneNumber3.NotEndsWith'] = ObjectSerializer::toQueryValue($phone_number3_not_ends_with);
        }
        // query params
        if ($phone_number3_in !== null) {
            $queryParams['PhoneNumber3.In'] = ObjectSerializer::toQueryValue($phone_number3_in);
        }
        // query params
        if ($phone_number3_between !== null) {
            $queryParams['PhoneNumber3.Between'] = ObjectSerializer::toQueryValue($phone_number3_between);
        }
        // query params
        if ($street1_not_equal !== null) {
            $queryParams['Street1.NotEqual'] = ObjectSerializer::toQueryValue($street1_not_equal);
        }
        // query params
        if ($street1_less !== null) {
            $queryParams['Street1.Less'] = ObjectSerializer::toQueryValue($street1_less);
        }
        // query params
        if ($street1_less_or_equal !== null) {
            $queryParams['Street1.LessOrEqual'] = ObjectSerializer::toQueryValue($street1_less_or_equal);
        }
        // query params
        if ($street1_greater !== null) {
            $queryParams['Street1.Greater'] = ObjectSerializer::toQueryValue($street1_greater);
        }
        // query params
        if ($street1_greater_or_equal !== null) {
            $queryParams['Street1.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street1_greater_or_equal);
        }
        // query params
        if ($street1_is_null !== null) {
            $queryParams['Street1.IsNull'] = ObjectSerializer::toQueryValue($street1_is_null);
        }
        // query params
        if ($street1_is_not_null !== null) {
            $queryParams['Street1.IsNotNull'] = ObjectSerializer::toQueryValue($street1_is_not_null);
        }
        // query params
        if ($street1_like !== null) {
            $queryParams['Street1.Like'] = ObjectSerializer::toQueryValue($street1_like);
        }
        // query params
        if ($street1_not_like !== null) {
            $queryParams['Street1.NotLike'] = ObjectSerializer::toQueryValue($street1_not_like);
        }
        // query params
        if ($street1_contains !== null) {
            $queryParams['Street1.Contains'] = ObjectSerializer::toQueryValue($street1_contains);
        }
        // query params
        if ($street1_not_contains !== null) {
            $queryParams['Street1.NotContains'] = ObjectSerializer::toQueryValue($street1_not_contains);
        }
        // query params
        if ($street1_starts_with !== null) {
            $queryParams['Street1.StartsWith'] = ObjectSerializer::toQueryValue($street1_starts_with);
        }
        // query params
        if ($street1_not_starts_with !== null) {
            $queryParams['Street1.NotStartsWith'] = ObjectSerializer::toQueryValue($street1_not_starts_with);
        }
        // query params
        if ($street1_ends_with !== null) {
            $queryParams['Street1.EndsWith'] = ObjectSerializer::toQueryValue($street1_ends_with);
        }
        // query params
        if ($street1_not_ends_with !== null) {
            $queryParams['Street1.NotEndsWith'] = ObjectSerializer::toQueryValue($street1_not_ends_with);
        }
        // query params
        if ($street1_in !== null) {
            $queryParams['Street1.In'] = ObjectSerializer::toQueryValue($street1_in);
        }
        // query params
        if ($street1_between !== null) {
            $queryParams['Street1.Between'] = ObjectSerializer::toQueryValue($street1_between);
        }
        // query params
        if ($street2_not_equal !== null) {
            $queryParams['Street2.NotEqual'] = ObjectSerializer::toQueryValue($street2_not_equal);
        }
        // query params
        if ($street2_less !== null) {
            $queryParams['Street2.Less'] = ObjectSerializer::toQueryValue($street2_less);
        }
        // query params
        if ($street2_less_or_equal !== null) {
            $queryParams['Street2.LessOrEqual'] = ObjectSerializer::toQueryValue($street2_less_or_equal);
        }
        // query params
        if ($street2_greater !== null) {
            $queryParams['Street2.Greater'] = ObjectSerializer::toQueryValue($street2_greater);
        }
        // query params
        if ($street2_greater_or_equal !== null) {
            $queryParams['Street2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street2_greater_or_equal);
        }
        // query params
        if ($street2_is_null !== null) {
            $queryParams['Street2.IsNull'] = ObjectSerializer::toQueryValue($street2_is_null);
        }
        // query params
        if ($street2_is_not_null !== null) {
            $queryParams['Street2.IsNotNull'] = ObjectSerializer::toQueryValue($street2_is_not_null);
        }
        // query params
        if ($street2_like !== null) {
            $queryParams['Street2.Like'] = ObjectSerializer::toQueryValue($street2_like);
        }
        // query params
        if ($street2_not_like !== null) {
            $queryParams['Street2.NotLike'] = ObjectSerializer::toQueryValue($street2_not_like);
        }
        // query params
        if ($street2_contains !== null) {
            $queryParams['Street2.Contains'] = ObjectSerializer::toQueryValue($street2_contains);
        }
        // query params
        if ($street2_not_contains !== null) {
            $queryParams['Street2.NotContains'] = ObjectSerializer::toQueryValue($street2_not_contains);
        }
        // query params
        if ($street2_starts_with !== null) {
            $queryParams['Street2.StartsWith'] = ObjectSerializer::toQueryValue($street2_starts_with);
        }
        // query params
        if ($street2_not_starts_with !== null) {
            $queryParams['Street2.NotStartsWith'] = ObjectSerializer::toQueryValue($street2_not_starts_with);
        }
        // query params
        if ($street2_ends_with !== null) {
            $queryParams['Street2.EndsWith'] = ObjectSerializer::toQueryValue($street2_ends_with);
        }
        // query params
        if ($street2_not_ends_with !== null) {
            $queryParams['Street2.NotEndsWith'] = ObjectSerializer::toQueryValue($street2_not_ends_with);
        }
        // query params
        if ($street2_in !== null) {
            $queryParams['Street2.In'] = ObjectSerializer::toQueryValue($street2_in);
        }
        // query params
        if ($street2_between !== null) {
            $queryParams['Street2.Between'] = ObjectSerializer::toQueryValue($street2_between);
        }
        // query params
        if ($street3_not_equal !== null) {
            $queryParams['Street3.NotEqual'] = ObjectSerializer::toQueryValue($street3_not_equal);
        }
        // query params
        if ($street3_less !== null) {
            $queryParams['Street3.Less'] = ObjectSerializer::toQueryValue($street3_less);
        }
        // query params
        if ($street3_less_or_equal !== null) {
            $queryParams['Street3.LessOrEqual'] = ObjectSerializer::toQueryValue($street3_less_or_equal);
        }
        // query params
        if ($street3_greater !== null) {
            $queryParams['Street3.Greater'] = ObjectSerializer::toQueryValue($street3_greater);
        }
        // query params
        if ($street3_greater_or_equal !== null) {
            $queryParams['Street3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street3_greater_or_equal);
        }
        // query params
        if ($street3_is_null !== null) {
            $queryParams['Street3.IsNull'] = ObjectSerializer::toQueryValue($street3_is_null);
        }
        // query params
        if ($street3_is_not_null !== null) {
            $queryParams['Street3.IsNotNull'] = ObjectSerializer::toQueryValue($street3_is_not_null);
        }
        // query params
        if ($street3_like !== null) {
            $queryParams['Street3.Like'] = ObjectSerializer::toQueryValue($street3_like);
        }
        // query params
        if ($street3_not_like !== null) {
            $queryParams['Street3.NotLike'] = ObjectSerializer::toQueryValue($street3_not_like);
        }
        // query params
        if ($street3_contains !== null) {
            $queryParams['Street3.Contains'] = ObjectSerializer::toQueryValue($street3_contains);
        }
        // query params
        if ($street3_not_contains !== null) {
            $queryParams['Street3.NotContains'] = ObjectSerializer::toQueryValue($street3_not_contains);
        }
        // query params
        if ($street3_starts_with !== null) {
            $queryParams['Street3.StartsWith'] = ObjectSerializer::toQueryValue($street3_starts_with);
        }
        // query params
        if ($street3_not_starts_with !== null) {
            $queryParams['Street3.NotStartsWith'] = ObjectSerializer::toQueryValue($street3_not_starts_with);
        }
        // query params
        if ($street3_ends_with !== null) {
            $queryParams['Street3.EndsWith'] = ObjectSerializer::toQueryValue($street3_ends_with);
        }
        // query params
        if ($street3_not_ends_with !== null) {
            $queryParams['Street3.NotEndsWith'] = ObjectSerializer::toQueryValue($street3_not_ends_with);
        }
        // query params
        if ($street3_in !== null) {
            $queryParams['Street3.In'] = ObjectSerializer::toQueryValue($street3_in);
        }
        // query params
        if ($street3_between !== null) {
            $queryParams['Street3.Between'] = ObjectSerializer::toQueryValue($street3_between);
        }
        // query params
        if ($city_not_equal !== null) {
            $queryParams['City.NotEqual'] = ObjectSerializer::toQueryValue($city_not_equal);
        }
        // query params
        if ($city_less !== null) {
            $queryParams['City.Less'] = ObjectSerializer::toQueryValue($city_less);
        }
        // query params
        if ($city_less_or_equal !== null) {
            $queryParams['City.LessOrEqual'] = ObjectSerializer::toQueryValue($city_less_or_equal);
        }
        // query params
        if ($city_greater !== null) {
            $queryParams['City.Greater'] = ObjectSerializer::toQueryValue($city_greater);
        }
        // query params
        if ($city_greater_or_equal !== null) {
            $queryParams['City.GreaterOrEqual'] = ObjectSerializer::toQueryValue($city_greater_or_equal);
        }
        // query params
        if ($city_is_null !== null) {
            $queryParams['City.IsNull'] = ObjectSerializer::toQueryValue($city_is_null);
        }
        // query params
        if ($city_is_not_null !== null) {
            $queryParams['City.IsNotNull'] = ObjectSerializer::toQueryValue($city_is_not_null);
        }
        // query params
        if ($city_like !== null) {
            $queryParams['City.Like'] = ObjectSerializer::toQueryValue($city_like);
        }
        // query params
        if ($city_not_like !== null) {
            $queryParams['City.NotLike'] = ObjectSerializer::toQueryValue($city_not_like);
        }
        // query params
        if ($city_contains !== null) {
            $queryParams['City.Contains'] = ObjectSerializer::toQueryValue($city_contains);
        }
        // query params
        if ($city_not_contains !== null) {
            $queryParams['City.NotContains'] = ObjectSerializer::toQueryValue($city_not_contains);
        }
        // query params
        if ($city_starts_with !== null) {
            $queryParams['City.StartsWith'] = ObjectSerializer::toQueryValue($city_starts_with);
        }
        // query params
        if ($city_not_starts_with !== null) {
            $queryParams['City.NotStartsWith'] = ObjectSerializer::toQueryValue($city_not_starts_with);
        }
        // query params
        if ($city_ends_with !== null) {
            $queryParams['City.EndsWith'] = ObjectSerializer::toQueryValue($city_ends_with);
        }
        // query params
        if ($city_not_ends_with !== null) {
            $queryParams['City.NotEndsWith'] = ObjectSerializer::toQueryValue($city_not_ends_with);
        }
        // query params
        if ($city_in !== null) {
            $queryParams['City.In'] = ObjectSerializer::toQueryValue($city_in);
        }
        // query params
        if ($city_between !== null) {
            $queryParams['City.Between'] = ObjectSerializer::toQueryValue($city_between);
        }
        // query params
        if ($state_not_equal !== null) {
            $queryParams['State.NotEqual'] = ObjectSerializer::toQueryValue($state_not_equal);
        }
        // query params
        if ($state_less !== null) {
            $queryParams['State.Less'] = ObjectSerializer::toQueryValue($state_less);
        }
        // query params
        if ($state_less_or_equal !== null) {
            $queryParams['State.LessOrEqual'] = ObjectSerializer::toQueryValue($state_less_or_equal);
        }
        // query params
        if ($state_greater !== null) {
            $queryParams['State.Greater'] = ObjectSerializer::toQueryValue($state_greater);
        }
        // query params
        if ($state_greater_or_equal !== null) {
            $queryParams['State.GreaterOrEqual'] = ObjectSerializer::toQueryValue($state_greater_or_equal);
        }
        // query params
        if ($state_is_null !== null) {
            $queryParams['State.IsNull'] = ObjectSerializer::toQueryValue($state_is_null);
        }
        // query params
        if ($state_is_not_null !== null) {
            $queryParams['State.IsNotNull'] = ObjectSerializer::toQueryValue($state_is_not_null);
        }
        // query params
        if ($state_like !== null) {
            $queryParams['State.Like'] = ObjectSerializer::toQueryValue($state_like);
        }
        // query params
        if ($state_not_like !== null) {
            $queryParams['State.NotLike'] = ObjectSerializer::toQueryValue($state_not_like);
        }
        // query params
        if ($state_contains !== null) {
            $queryParams['State.Contains'] = ObjectSerializer::toQueryValue($state_contains);
        }
        // query params
        if ($state_not_contains !== null) {
            $queryParams['State.NotContains'] = ObjectSerializer::toQueryValue($state_not_contains);
        }
        // query params
        if ($state_starts_with !== null) {
            $queryParams['State.StartsWith'] = ObjectSerializer::toQueryValue($state_starts_with);
        }
        // query params
        if ($state_not_starts_with !== null) {
            $queryParams['State.NotStartsWith'] = ObjectSerializer::toQueryValue($state_not_starts_with);
        }
        // query params
        if ($state_ends_with !== null) {
            $queryParams['State.EndsWith'] = ObjectSerializer::toQueryValue($state_ends_with);
        }
        // query params
        if ($state_not_ends_with !== null) {
            $queryParams['State.NotEndsWith'] = ObjectSerializer::toQueryValue($state_not_ends_with);
        }
        // query params
        if ($state_in !== null) {
            $queryParams['State.In'] = ObjectSerializer::toQueryValue($state_in);
        }
        // query params
        if ($state_between !== null) {
            $queryParams['State.Between'] = ObjectSerializer::toQueryValue($state_between);
        }
        // query params
        if ($country_code_not_equal !== null) {
            $queryParams['CountryCode.NotEqual'] = ObjectSerializer::toQueryValue($country_code_not_equal);
        }
        // query params
        if ($country_code_less !== null) {
            $queryParams['CountryCode.Less'] = ObjectSerializer::toQueryValue($country_code_less);
        }
        // query params
        if ($country_code_less_or_equal !== null) {
            $queryParams['CountryCode.LessOrEqual'] = ObjectSerializer::toQueryValue($country_code_less_or_equal);
        }
        // query params
        if ($country_code_greater !== null) {
            $queryParams['CountryCode.Greater'] = ObjectSerializer::toQueryValue($country_code_greater);
        }
        // query params
        if ($country_code_greater_or_equal !== null) {
            $queryParams['CountryCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($country_code_greater_or_equal);
        }
        // query params
        if ($country_code_is_null !== null) {
            $queryParams['CountryCode.IsNull'] = ObjectSerializer::toQueryValue($country_code_is_null);
        }
        // query params
        if ($country_code_is_not_null !== null) {
            $queryParams['CountryCode.IsNotNull'] = ObjectSerializer::toQueryValue($country_code_is_not_null);
        }
        // query params
        if ($country_code_like !== null) {
            $queryParams['CountryCode.Like'] = ObjectSerializer::toQueryValue($country_code_like);
        }
        // query params
        if ($country_code_not_like !== null) {
            $queryParams['CountryCode.NotLike'] = ObjectSerializer::toQueryValue($country_code_not_like);
        }
        // query params
        if ($country_code_contains !== null) {
            $queryParams['CountryCode.Contains'] = ObjectSerializer::toQueryValue($country_code_contains);
        }
        // query params
        if ($country_code_not_contains !== null) {
            $queryParams['CountryCode.NotContains'] = ObjectSerializer::toQueryValue($country_code_not_contains);
        }
        // query params
        if ($country_code_starts_with !== null) {
            $queryParams['CountryCode.StartsWith'] = ObjectSerializer::toQueryValue($country_code_starts_with);
        }
        // query params
        if ($country_code_not_starts_with !== null) {
            $queryParams['CountryCode.NotStartsWith'] = ObjectSerializer::toQueryValue($country_code_not_starts_with);
        }
        // query params
        if ($country_code_ends_with !== null) {
            $queryParams['CountryCode.EndsWith'] = ObjectSerializer::toQueryValue($country_code_ends_with);
        }
        // query params
        if ($country_code_not_ends_with !== null) {
            $queryParams['CountryCode.NotEndsWith'] = ObjectSerializer::toQueryValue($country_code_not_ends_with);
        }
        // query params
        if ($country_code_in !== null) {
            $queryParams['CountryCode.In'] = ObjectSerializer::toQueryValue($country_code_in);
        }
        // query params
        if ($country_code_between !== null) {
            $queryParams['CountryCode.Between'] = ObjectSerializer::toQueryValue($country_code_between);
        }
        // query params
        if ($postal_code_not_equal !== null) {
            $queryParams['PostalCode.NotEqual'] = ObjectSerializer::toQueryValue($postal_code_not_equal);
        }
        // query params
        if ($postal_code_less !== null) {
            $queryParams['PostalCode.Less'] = ObjectSerializer::toQueryValue($postal_code_less);
        }
        // query params
        if ($postal_code_less_or_equal !== null) {
            $queryParams['PostalCode.LessOrEqual'] = ObjectSerializer::toQueryValue($postal_code_less_or_equal);
        }
        // query params
        if ($postal_code_greater !== null) {
            $queryParams['PostalCode.Greater'] = ObjectSerializer::toQueryValue($postal_code_greater);
        }
        // query params
        if ($postal_code_greater_or_equal !== null) {
            $queryParams['PostalCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($postal_code_greater_or_equal);
        }
        // query params
        if ($postal_code_is_null !== null) {
            $queryParams['PostalCode.IsNull'] = ObjectSerializer::toQueryValue($postal_code_is_null);
        }
        // query params
        if ($postal_code_is_not_null !== null) {
            $queryParams['PostalCode.IsNotNull'] = ObjectSerializer::toQueryValue($postal_code_is_not_null);
        }
        // query params
        if ($postal_code_like !== null) {
            $queryParams['PostalCode.Like'] = ObjectSerializer::toQueryValue($postal_code_like);
        }
        // query params
        if ($postal_code_not_like !== null) {
            $queryParams['PostalCode.NotLike'] = ObjectSerializer::toQueryValue($postal_code_not_like);
        }
        // query params
        if ($postal_code_contains !== null) {
            $queryParams['PostalCode.Contains'] = ObjectSerializer::toQueryValue($postal_code_contains);
        }
        // query params
        if ($postal_code_not_contains !== null) {
            $queryParams['PostalCode.NotContains'] = ObjectSerializer::toQueryValue($postal_code_not_contains);
        }
        // query params
        if ($postal_code_starts_with !== null) {
            $queryParams['PostalCode.StartsWith'] = ObjectSerializer::toQueryValue($postal_code_starts_with);
        }
        // query params
        if ($postal_code_not_starts_with !== null) {
            $queryParams['PostalCode.NotStartsWith'] = ObjectSerializer::toQueryValue($postal_code_not_starts_with);
        }
        // query params
        if ($postal_code_ends_with !== null) {
            $queryParams['PostalCode.EndsWith'] = ObjectSerializer::toQueryValue($postal_code_ends_with);
        }
        // query params
        if ($postal_code_not_ends_with !== null) {
            $queryParams['PostalCode.NotEndsWith'] = ObjectSerializer::toQueryValue($postal_code_not_ends_with);
        }
        // query params
        if ($postal_code_in !== null) {
            $queryParams['PostalCode.In'] = ObjectSerializer::toQueryValue($postal_code_in);
        }
        // query params
        if ($postal_code_between !== null) {
            $queryParams['PostalCode.Between'] = ObjectSerializer::toQueryValue($postal_code_between);
        }
        // query params
        if ($fax_number_not_equal !== null) {
            $queryParams['FaxNumber.NotEqual'] = ObjectSerializer::toQueryValue($fax_number_not_equal);
        }
        // query params
        if ($fax_number_less !== null) {
            $queryParams['FaxNumber.Less'] = ObjectSerializer::toQueryValue($fax_number_less);
        }
        // query params
        if ($fax_number_less_or_equal !== null) {
            $queryParams['FaxNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($fax_number_less_or_equal);
        }
        // query params
        if ($fax_number_greater !== null) {
            $queryParams['FaxNumber.Greater'] = ObjectSerializer::toQueryValue($fax_number_greater);
        }
        // query params
        if ($fax_number_greater_or_equal !== null) {
            $queryParams['FaxNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($fax_number_greater_or_equal);
        }
        // query params
        if ($fax_number_is_null !== null) {
            $queryParams['FaxNumber.IsNull'] = ObjectSerializer::toQueryValue($fax_number_is_null);
        }
        // query params
        if ($fax_number_is_not_null !== null) {
            $queryParams['FaxNumber.IsNotNull'] = ObjectSerializer::toQueryValue($fax_number_is_not_null);
        }
        // query params
        if ($fax_number_like !== null) {
            $queryParams['FaxNumber.Like'] = ObjectSerializer::toQueryValue($fax_number_like);
        }
        // query params
        if ($fax_number_not_like !== null) {
            $queryParams['FaxNumber.NotLike'] = ObjectSerializer::toQueryValue($fax_number_not_like);
        }
        // query params
        if ($fax_number_contains !== null) {
            $queryParams['FaxNumber.Contains'] = ObjectSerializer::toQueryValue($fax_number_contains);
        }
        // query params
        if ($fax_number_not_contains !== null) {
            $queryParams['FaxNumber.NotContains'] = ObjectSerializer::toQueryValue($fax_number_not_contains);
        }
        // query params
        if ($fax_number_starts_with !== null) {
            $queryParams['FaxNumber.StartsWith'] = ObjectSerializer::toQueryValue($fax_number_starts_with);
        }
        // query params
        if ($fax_number_not_starts_with !== null) {
            $queryParams['FaxNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($fax_number_not_starts_with);
        }
        // query params
        if ($fax_number_ends_with !== null) {
            $queryParams['FaxNumber.EndsWith'] = ObjectSerializer::toQueryValue($fax_number_ends_with);
        }
        // query params
        if ($fax_number_not_ends_with !== null) {
            $queryParams['FaxNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($fax_number_not_ends_with);
        }
        // query params
        if ($fax_number_in !== null) {
            $queryParams['FaxNumber.In'] = ObjectSerializer::toQueryValue($fax_number_in);
        }
        // query params
        if ($fax_number_between !== null) {
            $queryParams['FaxNumber.Between'] = ObjectSerializer::toQueryValue($fax_number_between);
        }
        // query params
        if ($company_not_equal !== null) {
            $queryParams['Company.NotEqual'] = ObjectSerializer::toQueryValue($company_not_equal);
        }
        // query params
        if ($company_less !== null) {
            $queryParams['Company.Less'] = ObjectSerializer::toQueryValue($company_less);
        }
        // query params
        if ($company_less_or_equal !== null) {
            $queryParams['Company.LessOrEqual'] = ObjectSerializer::toQueryValue($company_less_or_equal);
        }
        // query params
        if ($company_greater !== null) {
            $queryParams['Company.Greater'] = ObjectSerializer::toQueryValue($company_greater);
        }
        // query params
        if ($company_greater_or_equal !== null) {
            $queryParams['Company.GreaterOrEqual'] = ObjectSerializer::toQueryValue($company_greater_or_equal);
        }
        // query params
        if ($company_is_null !== null) {
            $queryParams['Company.IsNull'] = ObjectSerializer::toQueryValue($company_is_null);
        }
        // query params
        if ($company_is_not_null !== null) {
            $queryParams['Company.IsNotNull'] = ObjectSerializer::toQueryValue($company_is_not_null);
        }
        // query params
        if ($company_like !== null) {
            $queryParams['Company.Like'] = ObjectSerializer::toQueryValue($company_like);
        }
        // query params
        if ($company_not_like !== null) {
            $queryParams['Company.NotLike'] = ObjectSerializer::toQueryValue($company_not_like);
        }
        // query params
        if ($company_contains !== null) {
            $queryParams['Company.Contains'] = ObjectSerializer::toQueryValue($company_contains);
        }
        // query params
        if ($company_not_contains !== null) {
            $queryParams['Company.NotContains'] = ObjectSerializer::toQueryValue($company_not_contains);
        }
        // query params
        if ($company_starts_with !== null) {
            $queryParams['Company.StartsWith'] = ObjectSerializer::toQueryValue($company_starts_with);
        }
        // query params
        if ($company_not_starts_with !== null) {
            $queryParams['Company.NotStartsWith'] = ObjectSerializer::toQueryValue($company_not_starts_with);
        }
        // query params
        if ($company_ends_with !== null) {
            $queryParams['Company.EndsWith'] = ObjectSerializer::toQueryValue($company_ends_with);
        }
        // query params
        if ($company_not_ends_with !== null) {
            $queryParams['Company.NotEndsWith'] = ObjectSerializer::toQueryValue($company_not_ends_with);
        }
        // query params
        if ($company_in !== null) {
            $queryParams['Company.In'] = ObjectSerializer::toQueryValue($company_in);
        }
        // query params
        if ($company_between !== null) {
            $queryParams['Company.Between'] = ObjectSerializer::toQueryValue($company_between);
        }
        // query params
        if ($customer_type_not_equal !== null) {
            $queryParams['CustomerType.NotEqual'] = ObjectSerializer::toQueryValue($customer_type_not_equal);
        }
        // query params
        if ($customer_type_less !== null) {
            $queryParams['CustomerType.Less'] = ObjectSerializer::toQueryValue($customer_type_less);
        }
        // query params
        if ($customer_type_less_or_equal !== null) {
            $queryParams['CustomerType.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_type_less_or_equal);
        }
        // query params
        if ($customer_type_greater !== null) {
            $queryParams['CustomerType.Greater'] = ObjectSerializer::toQueryValue($customer_type_greater);
        }
        // query params
        if ($customer_type_greater_or_equal !== null) {
            $queryParams['CustomerType.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_type_greater_or_equal);
        }
        // query params
        if ($customer_type_is_null !== null) {
            $queryParams['CustomerType.IsNull'] = ObjectSerializer::toQueryValue($customer_type_is_null);
        }
        // query params
        if ($customer_type_is_not_null !== null) {
            $queryParams['CustomerType.IsNotNull'] = ObjectSerializer::toQueryValue($customer_type_is_not_null);
        }
        // query params
        if ($customer_type_like !== null) {
            $queryParams['CustomerType.Like'] = ObjectSerializer::toQueryValue($customer_type_like);
        }
        // query params
        if ($customer_type_not_like !== null) {
            $queryParams['CustomerType.NotLike'] = ObjectSerializer::toQueryValue($customer_type_not_like);
        }
        // query params
        if ($customer_type_contains !== null) {
            $queryParams['CustomerType.Contains'] = ObjectSerializer::toQueryValue($customer_type_contains);
        }
        // query params
        if ($customer_type_not_contains !== null) {
            $queryParams['CustomerType.NotContains'] = ObjectSerializer::toQueryValue($customer_type_not_contains);
        }
        // query params
        if ($customer_type_starts_with !== null) {
            $queryParams['CustomerType.StartsWith'] = ObjectSerializer::toQueryValue($customer_type_starts_with);
        }
        // query params
        if ($customer_type_not_starts_with !== null) {
            $queryParams['CustomerType.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_type_not_starts_with);
        }
        // query params
        if ($customer_type_ends_with !== null) {
            $queryParams['CustomerType.EndsWith'] = ObjectSerializer::toQueryValue($customer_type_ends_with);
        }
        // query params
        if ($customer_type_not_ends_with !== null) {
            $queryParams['CustomerType.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_type_not_ends_with);
        }
        // query params
        if ($customer_type_in !== null) {
            $queryParams['CustomerType.In'] = ObjectSerializer::toQueryValue($customer_type_in);
        }
        // query params
        if ($customer_type_between !== null) {
            $queryParams['CustomerType.Between'] = ObjectSerializer::toQueryValue($customer_type_between);
        }
        // query params
        if ($promote_flag_not_equal !== null) {
            $queryParams['PromoteFlag.NotEqual'] = ObjectSerializer::toQueryValue($promote_flag_not_equal);
        }
        // query params
        if ($promote_flag_less !== null) {
            $queryParams['PromoteFlag.Less'] = ObjectSerializer::toQueryValue($promote_flag_less);
        }
        // query params
        if ($promote_flag_less_or_equal !== null) {
            $queryParams['PromoteFlag.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_flag_less_or_equal);
        }
        // query params
        if ($promote_flag_greater !== null) {
            $queryParams['PromoteFlag.Greater'] = ObjectSerializer::toQueryValue($promote_flag_greater);
        }
        // query params
        if ($promote_flag_greater_or_equal !== null) {
            $queryParams['PromoteFlag.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_flag_greater_or_equal);
        }
        // query params
        if ($promote_flag_is_null !== null) {
            $queryParams['PromoteFlag.IsNull'] = ObjectSerializer::toQueryValue($promote_flag_is_null);
        }
        // query params
        if ($promote_flag_is_not_null !== null) {
            $queryParams['PromoteFlag.IsNotNull'] = ObjectSerializer::toQueryValue($promote_flag_is_not_null);
        }
        // query params
        if ($promote_flag_like !== null) {
            $queryParams['PromoteFlag.Like'] = ObjectSerializer::toQueryValue($promote_flag_like);
        }
        // query params
        if ($promote_flag_not_like !== null) {
            $queryParams['PromoteFlag.NotLike'] = ObjectSerializer::toQueryValue($promote_flag_not_like);
        }
        // query params
        if ($promote_flag_contains !== null) {
            $queryParams['PromoteFlag.Contains'] = ObjectSerializer::toQueryValue($promote_flag_contains);
        }
        // query params
        if ($promote_flag_not_contains !== null) {
            $queryParams['PromoteFlag.NotContains'] = ObjectSerializer::toQueryValue($promote_flag_not_contains);
        }
        // query params
        if ($promote_flag_starts_with !== null) {
            $queryParams['PromoteFlag.StartsWith'] = ObjectSerializer::toQueryValue($promote_flag_starts_with);
        }
        // query params
        if ($promote_flag_not_starts_with !== null) {
            $queryParams['PromoteFlag.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_flag_not_starts_with);
        }
        // query params
        if ($promote_flag_ends_with !== null) {
            $queryParams['PromoteFlag.EndsWith'] = ObjectSerializer::toQueryValue($promote_flag_ends_with);
        }
        // query params
        if ($promote_flag_not_ends_with !== null) {
            $queryParams['PromoteFlag.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_flag_not_ends_with);
        }
        // query params
        if ($promote_flag_in !== null) {
            $queryParams['PromoteFlag.In'] = ObjectSerializer::toQueryValue($promote_flag_in);
        }
        // query params
        if ($promote_flag_between !== null) {
            $queryParams['PromoteFlag.Between'] = ObjectSerializer::toQueryValue($promote_flag_between);
        }
        // query params
        if ($promote_by_partners_not_equal !== null) {
            $queryParams['PromoteByPartners.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_not_equal);
        }
        // query params
        if ($promote_by_partners_less !== null) {
            $queryParams['PromoteByPartners.Less'] = ObjectSerializer::toQueryValue($promote_by_partners_less);
        }
        // query params
        if ($promote_by_partners_less_or_equal !== null) {
            $queryParams['PromoteByPartners.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_less_or_equal);
        }
        // query params
        if ($promote_by_partners_greater !== null) {
            $queryParams['PromoteByPartners.Greater'] = ObjectSerializer::toQueryValue($promote_by_partners_greater);
        }
        // query params
        if ($promote_by_partners_greater_or_equal !== null) {
            $queryParams['PromoteByPartners.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_partners_greater_or_equal);
        }
        // query params
        if ($promote_by_partners_is_null !== null) {
            $queryParams['PromoteByPartners.IsNull'] = ObjectSerializer::toQueryValue($promote_by_partners_is_null);
        }
        // query params
        if ($promote_by_partners_is_not_null !== null) {
            $queryParams['PromoteByPartners.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_partners_is_not_null);
        }
        // query params
        if ($promote_by_partners_like !== null) {
            $queryParams['PromoteByPartners.Like'] = ObjectSerializer::toQueryValue($promote_by_partners_like);
        }
        // query params
        if ($promote_by_partners_not_like !== null) {
            $queryParams['PromoteByPartners.NotLike'] = ObjectSerializer::toQueryValue($promote_by_partners_not_like);
        }
        // query params
        if ($promote_by_partners_contains !== null) {
            $queryParams['PromoteByPartners.Contains'] = ObjectSerializer::toQueryValue($promote_by_partners_contains);
        }
        // query params
        if ($promote_by_partners_not_contains !== null) {
            $queryParams['PromoteByPartners.NotContains'] = ObjectSerializer::toQueryValue($promote_by_partners_not_contains);
        }
        // query params
        if ($promote_by_partners_starts_with !== null) {
            $queryParams['PromoteByPartners.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_starts_with);
        }
        // query params
        if ($promote_by_partners_not_starts_with !== null) {
            $queryParams['PromoteByPartners.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_not_starts_with);
        }
        // query params
        if ($promote_by_partners_ends_with !== null) {
            $queryParams['PromoteByPartners.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_ends_with);
        }
        // query params
        if ($promote_by_partners_not_ends_with !== null) {
            $queryParams['PromoteByPartners.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_partners_not_ends_with);
        }
        // query params
        if ($promote_by_partners_in !== null) {
            $queryParams['PromoteByPartners.In'] = ObjectSerializer::toQueryValue($promote_by_partners_in);
        }
        // query params
        if ($promote_by_partners_between !== null) {
            $queryParams['PromoteByPartners.Between'] = ObjectSerializer::toQueryValue($promote_by_partners_between);
        }
        // query params
        if ($promote_by_phone_not_equal !== null) {
            $queryParams['PromoteByPhone.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_not_equal);
        }
        // query params
        if ($promote_by_phone_less !== null) {
            $queryParams['PromoteByPhone.Less'] = ObjectSerializer::toQueryValue($promote_by_phone_less);
        }
        // query params
        if ($promote_by_phone_less_or_equal !== null) {
            $queryParams['PromoteByPhone.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_less_or_equal);
        }
        // query params
        if ($promote_by_phone_greater !== null) {
            $queryParams['PromoteByPhone.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone_greater);
        }
        // query params
        if ($promote_by_phone_greater_or_equal !== null) {
            $queryParams['PromoteByPhone.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone_greater_or_equal);
        }
        // query params
        if ($promote_by_phone_is_null !== null) {
            $queryParams['PromoteByPhone.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone_is_null);
        }
        // query params
        if ($promote_by_phone_is_not_null !== null) {
            $queryParams['PromoteByPhone.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone_is_not_null);
        }
        // query params
        if ($promote_by_phone_like !== null) {
            $queryParams['PromoteByPhone.Like'] = ObjectSerializer::toQueryValue($promote_by_phone_like);
        }
        // query params
        if ($promote_by_phone_not_like !== null) {
            $queryParams['PromoteByPhone.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone_not_like);
        }
        // query params
        if ($promote_by_phone_contains !== null) {
            $queryParams['PromoteByPhone.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone_contains);
        }
        // query params
        if ($promote_by_phone_not_contains !== null) {
            $queryParams['PromoteByPhone.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone_not_contains);
        }
        // query params
        if ($promote_by_phone_starts_with !== null) {
            $queryParams['PromoteByPhone.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_starts_with);
        }
        // query params
        if ($promote_by_phone_not_starts_with !== null) {
            $queryParams['PromoteByPhone.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_not_starts_with);
        }
        // query params
        if ($promote_by_phone_ends_with !== null) {
            $queryParams['PromoteByPhone.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_ends_with);
        }
        // query params
        if ($promote_by_phone_not_ends_with !== null) {
            $queryParams['PromoteByPhone.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone_not_ends_with);
        }
        // query params
        if ($promote_by_phone_in !== null) {
            $queryParams['PromoteByPhone.In'] = ObjectSerializer::toQueryValue($promote_by_phone_in);
        }
        // query params
        if ($promote_by_phone_between !== null) {
            $queryParams['PromoteByPhone.Between'] = ObjectSerializer::toQueryValue($promote_by_phone_between);
        }
        // query params
        if ($promote_by_fax_not_equal !== null) {
            $queryParams['PromoteByFax.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_not_equal);
        }
        // query params
        if ($promote_by_fax_less !== null) {
            $queryParams['PromoteByFax.Less'] = ObjectSerializer::toQueryValue($promote_by_fax_less);
        }
        // query params
        if ($promote_by_fax_less_or_equal !== null) {
            $queryParams['PromoteByFax.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_less_or_equal);
        }
        // query params
        if ($promote_by_fax_greater !== null) {
            $queryParams['PromoteByFax.Greater'] = ObjectSerializer::toQueryValue($promote_by_fax_greater);
        }
        // query params
        if ($promote_by_fax_greater_or_equal !== null) {
            $queryParams['PromoteByFax.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_fax_greater_or_equal);
        }
        // query params
        if ($promote_by_fax_is_null !== null) {
            $queryParams['PromoteByFax.IsNull'] = ObjectSerializer::toQueryValue($promote_by_fax_is_null);
        }
        // query params
        if ($promote_by_fax_is_not_null !== null) {
            $queryParams['PromoteByFax.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_fax_is_not_null);
        }
        // query params
        if ($promote_by_fax_like !== null) {
            $queryParams['PromoteByFax.Like'] = ObjectSerializer::toQueryValue($promote_by_fax_like);
        }
        // query params
        if ($promote_by_fax_not_like !== null) {
            $queryParams['PromoteByFax.NotLike'] = ObjectSerializer::toQueryValue($promote_by_fax_not_like);
        }
        // query params
        if ($promote_by_fax_contains !== null) {
            $queryParams['PromoteByFax.Contains'] = ObjectSerializer::toQueryValue($promote_by_fax_contains);
        }
        // query params
        if ($promote_by_fax_not_contains !== null) {
            $queryParams['PromoteByFax.NotContains'] = ObjectSerializer::toQueryValue($promote_by_fax_not_contains);
        }
        // query params
        if ($promote_by_fax_starts_with !== null) {
            $queryParams['PromoteByFax.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_starts_with);
        }
        // query params
        if ($promote_by_fax_not_starts_with !== null) {
            $queryParams['PromoteByFax.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_not_starts_with);
        }
        // query params
        if ($promote_by_fax_ends_with !== null) {
            $queryParams['PromoteByFax.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_ends_with);
        }
        // query params
        if ($promote_by_fax_not_ends_with !== null) {
            $queryParams['PromoteByFax.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_fax_not_ends_with);
        }
        // query params
        if ($promote_by_fax_in !== null) {
            $queryParams['PromoteByFax.In'] = ObjectSerializer::toQueryValue($promote_by_fax_in);
        }
        // query params
        if ($promote_by_fax_between !== null) {
            $queryParams['PromoteByFax.Between'] = ObjectSerializer::toQueryValue($promote_by_fax_between);
        }
        // query params
        if ($promote_by_email_not_equal !== null) {
            $queryParams['PromoteByEmail.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_email_not_equal);
        }
        // query params
        if ($promote_by_email_less !== null) {
            $queryParams['PromoteByEmail.Less'] = ObjectSerializer::toQueryValue($promote_by_email_less);
        }
        // query params
        if ($promote_by_email_less_or_equal !== null) {
            $queryParams['PromoteByEmail.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_email_less_or_equal);
        }
        // query params
        if ($promote_by_email_greater !== null) {
            $queryParams['PromoteByEmail.Greater'] = ObjectSerializer::toQueryValue($promote_by_email_greater);
        }
        // query params
        if ($promote_by_email_greater_or_equal !== null) {
            $queryParams['PromoteByEmail.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_email_greater_or_equal);
        }
        // query params
        if ($promote_by_email_is_null !== null) {
            $queryParams['PromoteByEmail.IsNull'] = ObjectSerializer::toQueryValue($promote_by_email_is_null);
        }
        // query params
        if ($promote_by_email_is_not_null !== null) {
            $queryParams['PromoteByEmail.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_email_is_not_null);
        }
        // query params
        if ($promote_by_email_like !== null) {
            $queryParams['PromoteByEmail.Like'] = ObjectSerializer::toQueryValue($promote_by_email_like);
        }
        // query params
        if ($promote_by_email_not_like !== null) {
            $queryParams['PromoteByEmail.NotLike'] = ObjectSerializer::toQueryValue($promote_by_email_not_like);
        }
        // query params
        if ($promote_by_email_contains !== null) {
            $queryParams['PromoteByEmail.Contains'] = ObjectSerializer::toQueryValue($promote_by_email_contains);
        }
        // query params
        if ($promote_by_email_not_contains !== null) {
            $queryParams['PromoteByEmail.NotContains'] = ObjectSerializer::toQueryValue($promote_by_email_not_contains);
        }
        // query params
        if ($promote_by_email_starts_with !== null) {
            $queryParams['PromoteByEmail.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_email_starts_with);
        }
        // query params
        if ($promote_by_email_not_starts_with !== null) {
            $queryParams['PromoteByEmail.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_email_not_starts_with);
        }
        // query params
        if ($promote_by_email_ends_with !== null) {
            $queryParams['PromoteByEmail.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_email_ends_with);
        }
        // query params
        if ($promote_by_email_not_ends_with !== null) {
            $queryParams['PromoteByEmail.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_email_not_ends_with);
        }
        // query params
        if ($promote_by_email_in !== null) {
            $queryParams['PromoteByEmail.In'] = ObjectSerializer::toQueryValue($promote_by_email_in);
        }
        // query params
        if ($promote_by_email_between !== null) {
            $queryParams['PromoteByEmail.Between'] = ObjectSerializer::toQueryValue($promote_by_email_between);
        }
        // query params
        if ($promote_by_mail_not_equal !== null) {
            $queryParams['PromoteByMail.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_not_equal);
        }
        // query params
        if ($promote_by_mail_less !== null) {
            $queryParams['PromoteByMail.Less'] = ObjectSerializer::toQueryValue($promote_by_mail_less);
        }
        // query params
        if ($promote_by_mail_less_or_equal !== null) {
            $queryParams['PromoteByMail.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_less_or_equal);
        }
        // query params
        if ($promote_by_mail_greater !== null) {
            $queryParams['PromoteByMail.Greater'] = ObjectSerializer::toQueryValue($promote_by_mail_greater);
        }
        // query params
        if ($promote_by_mail_greater_or_equal !== null) {
            $queryParams['PromoteByMail.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_mail_greater_or_equal);
        }
        // query params
        if ($promote_by_mail_is_null !== null) {
            $queryParams['PromoteByMail.IsNull'] = ObjectSerializer::toQueryValue($promote_by_mail_is_null);
        }
        // query params
        if ($promote_by_mail_is_not_null !== null) {
            $queryParams['PromoteByMail.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_mail_is_not_null);
        }
        // query params
        if ($promote_by_mail_like !== null) {
            $queryParams['PromoteByMail.Like'] = ObjectSerializer::toQueryValue($promote_by_mail_like);
        }
        // query params
        if ($promote_by_mail_not_like !== null) {
            $queryParams['PromoteByMail.NotLike'] = ObjectSerializer::toQueryValue($promote_by_mail_not_like);
        }
        // query params
        if ($promote_by_mail_contains !== null) {
            $queryParams['PromoteByMail.Contains'] = ObjectSerializer::toQueryValue($promote_by_mail_contains);
        }
        // query params
        if ($promote_by_mail_not_contains !== null) {
            $queryParams['PromoteByMail.NotContains'] = ObjectSerializer::toQueryValue($promote_by_mail_not_contains);
        }
        // query params
        if ($promote_by_mail_starts_with !== null) {
            $queryParams['PromoteByMail.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_starts_with);
        }
        // query params
        if ($promote_by_mail_not_starts_with !== null) {
            $queryParams['PromoteByMail.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_not_starts_with);
        }
        // query params
        if ($promote_by_mail_ends_with !== null) {
            $queryParams['PromoteByMail.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_ends_with);
        }
        // query params
        if ($promote_by_mail_not_ends_with !== null) {
            $queryParams['PromoteByMail.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_mail_not_ends_with);
        }
        // query params
        if ($promote_by_mail_in !== null) {
            $queryParams['PromoteByMail.In'] = ObjectSerializer::toQueryValue($promote_by_mail_in);
        }
        // query params
        if ($promote_by_mail_between !== null) {
            $queryParams['PromoteByMail.Between'] = ObjectSerializer::toQueryValue($promote_by_mail_between);
        }
        // query params
        if ($promote_by_sms_not_equal !== null) {
            $queryParams['PromoteBySms.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_not_equal);
        }
        // query params
        if ($promote_by_sms_less !== null) {
            $queryParams['PromoteBySms.Less'] = ObjectSerializer::toQueryValue($promote_by_sms_less);
        }
        // query params
        if ($promote_by_sms_less_or_equal !== null) {
            $queryParams['PromoteBySms.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_less_or_equal);
        }
        // query params
        if ($promote_by_sms_greater !== null) {
            $queryParams['PromoteBySms.Greater'] = ObjectSerializer::toQueryValue($promote_by_sms_greater);
        }
        // query params
        if ($promote_by_sms_greater_or_equal !== null) {
            $queryParams['PromoteBySms.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_sms_greater_or_equal);
        }
        // query params
        if ($promote_by_sms_is_null !== null) {
            $queryParams['PromoteBySms.IsNull'] = ObjectSerializer::toQueryValue($promote_by_sms_is_null);
        }
        // query params
        if ($promote_by_sms_is_not_null !== null) {
            $queryParams['PromoteBySms.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_sms_is_not_null);
        }
        // query params
        if ($promote_by_sms_like !== null) {
            $queryParams['PromoteBySms.Like'] = ObjectSerializer::toQueryValue($promote_by_sms_like);
        }
        // query params
        if ($promote_by_sms_not_like !== null) {
            $queryParams['PromoteBySms.NotLike'] = ObjectSerializer::toQueryValue($promote_by_sms_not_like);
        }
        // query params
        if ($promote_by_sms_contains !== null) {
            $queryParams['PromoteBySms.Contains'] = ObjectSerializer::toQueryValue($promote_by_sms_contains);
        }
        // query params
        if ($promote_by_sms_not_contains !== null) {
            $queryParams['PromoteBySms.NotContains'] = ObjectSerializer::toQueryValue($promote_by_sms_not_contains);
        }
        // query params
        if ($promote_by_sms_starts_with !== null) {
            $queryParams['PromoteBySms.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_starts_with);
        }
        // query params
        if ($promote_by_sms_not_starts_with !== null) {
            $queryParams['PromoteBySms.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_not_starts_with);
        }
        // query params
        if ($promote_by_sms_ends_with !== null) {
            $queryParams['PromoteBySms.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_ends_with);
        }
        // query params
        if ($promote_by_sms_not_ends_with !== null) {
            $queryParams['PromoteBySms.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_sms_not_ends_with);
        }
        // query params
        if ($promote_by_sms_in !== null) {
            $queryParams['PromoteBySms.In'] = ObjectSerializer::toQueryValue($promote_by_sms_in);
        }
        // query params
        if ($promote_by_sms_between !== null) {
            $queryParams['PromoteBySms.Between'] = ObjectSerializer::toQueryValue($promote_by_sms_between);
        }
        // query params
        if ($promote_by_phone1_not_equal !== null) {
            $queryParams['PromoteByPhone1.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_equal);
        }
        // query params
        if ($promote_by_phone1_less !== null) {
            $queryParams['PromoteByPhone1.Less'] = ObjectSerializer::toQueryValue($promote_by_phone1_less);
        }
        // query params
        if ($promote_by_phone1_less_or_equal !== null) {
            $queryParams['PromoteByPhone1.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_less_or_equal);
        }
        // query params
        if ($promote_by_phone1_greater !== null) {
            $queryParams['PromoteByPhone1.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone1_greater);
        }
        // query params
        if ($promote_by_phone1_greater_or_equal !== null) {
            $queryParams['PromoteByPhone1.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone1_greater_or_equal);
        }
        // query params
        if ($promote_by_phone1_is_null !== null) {
            $queryParams['PromoteByPhone1.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone1_is_null);
        }
        // query params
        if ($promote_by_phone1_is_not_null !== null) {
            $queryParams['PromoteByPhone1.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone1_is_not_null);
        }
        // query params
        if ($promote_by_phone1_like !== null) {
            $queryParams['PromoteByPhone1.Like'] = ObjectSerializer::toQueryValue($promote_by_phone1_like);
        }
        // query params
        if ($promote_by_phone1_not_like !== null) {
            $queryParams['PromoteByPhone1.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_like);
        }
        // query params
        if ($promote_by_phone1_contains !== null) {
            $queryParams['PromoteByPhone1.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone1_contains);
        }
        // query params
        if ($promote_by_phone1_not_contains !== null) {
            $queryParams['PromoteByPhone1.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_contains);
        }
        // query params
        if ($promote_by_phone1_starts_with !== null) {
            $queryParams['PromoteByPhone1.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_starts_with);
        }
        // query params
        if ($promote_by_phone1_not_starts_with !== null) {
            $queryParams['PromoteByPhone1.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_starts_with);
        }
        // query params
        if ($promote_by_phone1_ends_with !== null) {
            $queryParams['PromoteByPhone1.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_ends_with);
        }
        // query params
        if ($promote_by_phone1_not_ends_with !== null) {
            $queryParams['PromoteByPhone1.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone1_not_ends_with);
        }
        // query params
        if ($promote_by_phone1_in !== null) {
            $queryParams['PromoteByPhone1.In'] = ObjectSerializer::toQueryValue($promote_by_phone1_in);
        }
        // query params
        if ($promote_by_phone1_between !== null) {
            $queryParams['PromoteByPhone1.Between'] = ObjectSerializer::toQueryValue($promote_by_phone1_between);
        }
        // query params
        if ($promote_by_phone2_not_equal !== null) {
            $queryParams['PromoteByPhone2.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_equal);
        }
        // query params
        if ($promote_by_phone2_less !== null) {
            $queryParams['PromoteByPhone2.Less'] = ObjectSerializer::toQueryValue($promote_by_phone2_less);
        }
        // query params
        if ($promote_by_phone2_less_or_equal !== null) {
            $queryParams['PromoteByPhone2.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_less_or_equal);
        }
        // query params
        if ($promote_by_phone2_greater !== null) {
            $queryParams['PromoteByPhone2.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone2_greater);
        }
        // query params
        if ($promote_by_phone2_greater_or_equal !== null) {
            $queryParams['PromoteByPhone2.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone2_greater_or_equal);
        }
        // query params
        if ($promote_by_phone2_is_null !== null) {
            $queryParams['PromoteByPhone2.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone2_is_null);
        }
        // query params
        if ($promote_by_phone2_is_not_null !== null) {
            $queryParams['PromoteByPhone2.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone2_is_not_null);
        }
        // query params
        if ($promote_by_phone2_like !== null) {
            $queryParams['PromoteByPhone2.Like'] = ObjectSerializer::toQueryValue($promote_by_phone2_like);
        }
        // query params
        if ($promote_by_phone2_not_like !== null) {
            $queryParams['PromoteByPhone2.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_like);
        }
        // query params
        if ($promote_by_phone2_contains !== null) {
            $queryParams['PromoteByPhone2.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone2_contains);
        }
        // query params
        if ($promote_by_phone2_not_contains !== null) {
            $queryParams['PromoteByPhone2.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_contains);
        }
        // query params
        if ($promote_by_phone2_starts_with !== null) {
            $queryParams['PromoteByPhone2.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_starts_with);
        }
        // query params
        if ($promote_by_phone2_not_starts_with !== null) {
            $queryParams['PromoteByPhone2.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_starts_with);
        }
        // query params
        if ($promote_by_phone2_ends_with !== null) {
            $queryParams['PromoteByPhone2.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_ends_with);
        }
        // query params
        if ($promote_by_phone2_not_ends_with !== null) {
            $queryParams['PromoteByPhone2.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone2_not_ends_with);
        }
        // query params
        if ($promote_by_phone2_in !== null) {
            $queryParams['PromoteByPhone2.In'] = ObjectSerializer::toQueryValue($promote_by_phone2_in);
        }
        // query params
        if ($promote_by_phone2_between !== null) {
            $queryParams['PromoteByPhone2.Between'] = ObjectSerializer::toQueryValue($promote_by_phone2_between);
        }
        // query params
        if ($promote_by_phone3_not_equal !== null) {
            $queryParams['PromoteByPhone3.NotEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_equal);
        }
        // query params
        if ($promote_by_phone3_less !== null) {
            $queryParams['PromoteByPhone3.Less'] = ObjectSerializer::toQueryValue($promote_by_phone3_less);
        }
        // query params
        if ($promote_by_phone3_less_or_equal !== null) {
            $queryParams['PromoteByPhone3.LessOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_less_or_equal);
        }
        // query params
        if ($promote_by_phone3_greater !== null) {
            $queryParams['PromoteByPhone3.Greater'] = ObjectSerializer::toQueryValue($promote_by_phone3_greater);
        }
        // query params
        if ($promote_by_phone3_greater_or_equal !== null) {
            $queryParams['PromoteByPhone3.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promote_by_phone3_greater_or_equal);
        }
        // query params
        if ($promote_by_phone3_is_null !== null) {
            $queryParams['PromoteByPhone3.IsNull'] = ObjectSerializer::toQueryValue($promote_by_phone3_is_null);
        }
        // query params
        if ($promote_by_phone3_is_not_null !== null) {
            $queryParams['PromoteByPhone3.IsNotNull'] = ObjectSerializer::toQueryValue($promote_by_phone3_is_not_null);
        }
        // query params
        if ($promote_by_phone3_like !== null) {
            $queryParams['PromoteByPhone3.Like'] = ObjectSerializer::toQueryValue($promote_by_phone3_like);
        }
        // query params
        if ($promote_by_phone3_not_like !== null) {
            $queryParams['PromoteByPhone3.NotLike'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_like);
        }
        // query params
        if ($promote_by_phone3_contains !== null) {
            $queryParams['PromoteByPhone3.Contains'] = ObjectSerializer::toQueryValue($promote_by_phone3_contains);
        }
        // query params
        if ($promote_by_phone3_not_contains !== null) {
            $queryParams['PromoteByPhone3.NotContains'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_contains);
        }
        // query params
        if ($promote_by_phone3_starts_with !== null) {
            $queryParams['PromoteByPhone3.StartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_starts_with);
        }
        // query params
        if ($promote_by_phone3_not_starts_with !== null) {
            $queryParams['PromoteByPhone3.NotStartsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_starts_with);
        }
        // query params
        if ($promote_by_phone3_ends_with !== null) {
            $queryParams['PromoteByPhone3.EndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_ends_with);
        }
        // query params
        if ($promote_by_phone3_not_ends_with !== null) {
            $queryParams['PromoteByPhone3.NotEndsWith'] = ObjectSerializer::toQueryValue($promote_by_phone3_not_ends_with);
        }
        // query params
        if ($promote_by_phone3_in !== null) {
            $queryParams['PromoteByPhone3.In'] = ObjectSerializer::toQueryValue($promote_by_phone3_in);
        }
        // query params
        if ($promote_by_phone3_between !== null) {
            $queryParams['PromoteByPhone3.Between'] = ObjectSerializer::toQueryValue($promote_by_phone3_between);
        }
        // query params
        if ($title_not_equal !== null) {
            $queryParams['Title.NotEqual'] = ObjectSerializer::toQueryValue($title_not_equal);
        }
        // query params
        if ($title_less !== null) {
            $queryParams['Title.Less'] = ObjectSerializer::toQueryValue($title_less);
        }
        // query params
        if ($title_less_or_equal !== null) {
            $queryParams['Title.LessOrEqual'] = ObjectSerializer::toQueryValue($title_less_or_equal);
        }
        // query params
        if ($title_greater !== null) {
            $queryParams['Title.Greater'] = ObjectSerializer::toQueryValue($title_greater);
        }
        // query params
        if ($title_greater_or_equal !== null) {
            $queryParams['Title.GreaterOrEqual'] = ObjectSerializer::toQueryValue($title_greater_or_equal);
        }
        // query params
        if ($title_is_null !== null) {
            $queryParams['Title.IsNull'] = ObjectSerializer::toQueryValue($title_is_null);
        }
        // query params
        if ($title_is_not_null !== null) {
            $queryParams['Title.IsNotNull'] = ObjectSerializer::toQueryValue($title_is_not_null);
        }
        // query params
        if ($title_like !== null) {
            $queryParams['Title.Like'] = ObjectSerializer::toQueryValue($title_like);
        }
        // query params
        if ($title_not_like !== null) {
            $queryParams['Title.NotLike'] = ObjectSerializer::toQueryValue($title_not_like);
        }
        // query params
        if ($title_contains !== null) {
            $queryParams['Title.Contains'] = ObjectSerializer::toQueryValue($title_contains);
        }
        // query params
        if ($title_not_contains !== null) {
            $queryParams['Title.NotContains'] = ObjectSerializer::toQueryValue($title_not_contains);
        }
        // query params
        if ($title_starts_with !== null) {
            $queryParams['Title.StartsWith'] = ObjectSerializer::toQueryValue($title_starts_with);
        }
        // query params
        if ($title_not_starts_with !== null) {
            $queryParams['Title.NotStartsWith'] = ObjectSerializer::toQueryValue($title_not_starts_with);
        }
        // query params
        if ($title_ends_with !== null) {
            $queryParams['Title.EndsWith'] = ObjectSerializer::toQueryValue($title_ends_with);
        }
        // query params
        if ($title_not_ends_with !== null) {
            $queryParams['Title.NotEndsWith'] = ObjectSerializer::toQueryValue($title_not_ends_with);
        }
        // query params
        if ($title_in !== null) {
            $queryParams['Title.In'] = ObjectSerializer::toQueryValue($title_in);
        }
        // query params
        if ($title_between !== null) {
            $queryParams['Title.Between'] = ObjectSerializer::toQueryValue($title_between);
        }
        // query params
        if ($first_name_not_equal !== null) {
            $queryParams['FirstName.NotEqual'] = ObjectSerializer::toQueryValue($first_name_not_equal);
        }
        // query params
        if ($first_name_less !== null) {
            $queryParams['FirstName.Less'] = ObjectSerializer::toQueryValue($first_name_less);
        }
        // query params
        if ($first_name_less_or_equal !== null) {
            $queryParams['FirstName.LessOrEqual'] = ObjectSerializer::toQueryValue($first_name_less_or_equal);
        }
        // query params
        if ($first_name_greater !== null) {
            $queryParams['FirstName.Greater'] = ObjectSerializer::toQueryValue($first_name_greater);
        }
        // query params
        if ($first_name_greater_or_equal !== null) {
            $queryParams['FirstName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($first_name_greater_or_equal);
        }
        // query params
        if ($first_name_is_null !== null) {
            $queryParams['FirstName.IsNull'] = ObjectSerializer::toQueryValue($first_name_is_null);
        }
        // query params
        if ($first_name_is_not_null !== null) {
            $queryParams['FirstName.IsNotNull'] = ObjectSerializer::toQueryValue($first_name_is_not_null);
        }
        // query params
        if ($first_name_like !== null) {
            $queryParams['FirstName.Like'] = ObjectSerializer::toQueryValue($first_name_like);
        }
        // query params
        if ($first_name_not_like !== null) {
            $queryParams['FirstName.NotLike'] = ObjectSerializer::toQueryValue($first_name_not_like);
        }
        // query params
        if ($first_name_contains !== null) {
            $queryParams['FirstName.Contains'] = ObjectSerializer::toQueryValue($first_name_contains);
        }
        // query params
        if ($first_name_not_contains !== null) {
            $queryParams['FirstName.NotContains'] = ObjectSerializer::toQueryValue($first_name_not_contains);
        }
        // query params
        if ($first_name_starts_with !== null) {
            $queryParams['FirstName.StartsWith'] = ObjectSerializer::toQueryValue($first_name_starts_with);
        }
        // query params
        if ($first_name_not_starts_with !== null) {
            $queryParams['FirstName.NotStartsWith'] = ObjectSerializer::toQueryValue($first_name_not_starts_with);
        }
        // query params
        if ($first_name_ends_with !== null) {
            $queryParams['FirstName.EndsWith'] = ObjectSerializer::toQueryValue($first_name_ends_with);
        }
        // query params
        if ($first_name_not_ends_with !== null) {
            $queryParams['FirstName.NotEndsWith'] = ObjectSerializer::toQueryValue($first_name_not_ends_with);
        }
        // query params
        if ($first_name_in !== null) {
            $queryParams['FirstName.In'] = ObjectSerializer::toQueryValue($first_name_in);
        }
        // query params
        if ($first_name_between !== null) {
            $queryParams['FirstName.Between'] = ObjectSerializer::toQueryValue($first_name_between);
        }
        // query params
        if ($middle_initial_not_equal !== null) {
            $queryParams['MiddleInitial.NotEqual'] = ObjectSerializer::toQueryValue($middle_initial_not_equal);
        }
        // query params
        if ($middle_initial_less !== null) {
            $queryParams['MiddleInitial.Less'] = ObjectSerializer::toQueryValue($middle_initial_less);
        }
        // query params
        if ($middle_initial_less_or_equal !== null) {
            $queryParams['MiddleInitial.LessOrEqual'] = ObjectSerializer::toQueryValue($middle_initial_less_or_equal);
        }
        // query params
        if ($middle_initial_greater !== null) {
            $queryParams['MiddleInitial.Greater'] = ObjectSerializer::toQueryValue($middle_initial_greater);
        }
        // query params
        if ($middle_initial_greater_or_equal !== null) {
            $queryParams['MiddleInitial.GreaterOrEqual'] = ObjectSerializer::toQueryValue($middle_initial_greater_or_equal);
        }
        // query params
        if ($middle_initial_is_null !== null) {
            $queryParams['MiddleInitial.IsNull'] = ObjectSerializer::toQueryValue($middle_initial_is_null);
        }
        // query params
        if ($middle_initial_is_not_null !== null) {
            $queryParams['MiddleInitial.IsNotNull'] = ObjectSerializer::toQueryValue($middle_initial_is_not_null);
        }
        // query params
        if ($middle_initial_like !== null) {
            $queryParams['MiddleInitial.Like'] = ObjectSerializer::toQueryValue($middle_initial_like);
        }
        // query params
        if ($middle_initial_not_like !== null) {
            $queryParams['MiddleInitial.NotLike'] = ObjectSerializer::toQueryValue($middle_initial_not_like);
        }
        // query params
        if ($middle_initial_contains !== null) {
            $queryParams['MiddleInitial.Contains'] = ObjectSerializer::toQueryValue($middle_initial_contains);
        }
        // query params
        if ($middle_initial_not_contains !== null) {
            $queryParams['MiddleInitial.NotContains'] = ObjectSerializer::toQueryValue($middle_initial_not_contains);
        }
        // query params
        if ($middle_initial_starts_with !== null) {
            $queryParams['MiddleInitial.StartsWith'] = ObjectSerializer::toQueryValue($middle_initial_starts_with);
        }
        // query params
        if ($middle_initial_not_starts_with !== null) {
            $queryParams['MiddleInitial.NotStartsWith'] = ObjectSerializer::toQueryValue($middle_initial_not_starts_with);
        }
        // query params
        if ($middle_initial_ends_with !== null) {
            $queryParams['MiddleInitial.EndsWith'] = ObjectSerializer::toQueryValue($middle_initial_ends_with);
        }
        // query params
        if ($middle_initial_not_ends_with !== null) {
            $queryParams['MiddleInitial.NotEndsWith'] = ObjectSerializer::toQueryValue($middle_initial_not_ends_with);
        }
        // query params
        if ($middle_initial_in !== null) {
            $queryParams['MiddleInitial.In'] = ObjectSerializer::toQueryValue($middle_initial_in);
        }
        // query params
        if ($middle_initial_between !== null) {
            $queryParams['MiddleInitial.Between'] = ObjectSerializer::toQueryValue($middle_initial_between);
        }
        // query params
        if ($last_name_not_equal !== null) {
            $queryParams['LastName.NotEqual'] = ObjectSerializer::toQueryValue($last_name_not_equal);
        }
        // query params
        if ($last_name_less !== null) {
            $queryParams['LastName.Less'] = ObjectSerializer::toQueryValue($last_name_less);
        }
        // query params
        if ($last_name_less_or_equal !== null) {
            $queryParams['LastName.LessOrEqual'] = ObjectSerializer::toQueryValue($last_name_less_or_equal);
        }
        // query params
        if ($last_name_greater !== null) {
            $queryParams['LastName.Greater'] = ObjectSerializer::toQueryValue($last_name_greater);
        }
        // query params
        if ($last_name_greater_or_equal !== null) {
            $queryParams['LastName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_name_greater_or_equal);
        }
        // query params
        if ($last_name_is_null !== null) {
            $queryParams['LastName.IsNull'] = ObjectSerializer::toQueryValue($last_name_is_null);
        }
        // query params
        if ($last_name_is_not_null !== null) {
            $queryParams['LastName.IsNotNull'] = ObjectSerializer::toQueryValue($last_name_is_not_null);
        }
        // query params
        if ($last_name_like !== null) {
            $queryParams['LastName.Like'] = ObjectSerializer::toQueryValue($last_name_like);
        }
        // query params
        if ($last_name_not_like !== null) {
            $queryParams['LastName.NotLike'] = ObjectSerializer::toQueryValue($last_name_not_like);
        }
        // query params
        if ($last_name_contains !== null) {
            $queryParams['LastName.Contains'] = ObjectSerializer::toQueryValue($last_name_contains);
        }
        // query params
        if ($last_name_not_contains !== null) {
            $queryParams['LastName.NotContains'] = ObjectSerializer::toQueryValue($last_name_not_contains);
        }
        // query params
        if ($last_name_starts_with !== null) {
            $queryParams['LastName.StartsWith'] = ObjectSerializer::toQueryValue($last_name_starts_with);
        }
        // query params
        if ($last_name_not_starts_with !== null) {
            $queryParams['LastName.NotStartsWith'] = ObjectSerializer::toQueryValue($last_name_not_starts_with);
        }
        // query params
        if ($last_name_ends_with !== null) {
            $queryParams['LastName.EndsWith'] = ObjectSerializer::toQueryValue($last_name_ends_with);
        }
        // query params
        if ($last_name_not_ends_with !== null) {
            $queryParams['LastName.NotEndsWith'] = ObjectSerializer::toQueryValue($last_name_not_ends_with);
        }
        // query params
        if ($last_name_in !== null) {
            $queryParams['LastName.In'] = ObjectSerializer::toQueryValue($last_name_in);
        }
        // query params
        if ($last_name_between !== null) {
            $queryParams['LastName.Between'] = ObjectSerializer::toQueryValue($last_name_between);
        }
        // query params
        if ($suffix_not_equal !== null) {
            $queryParams['Suffix.NotEqual'] = ObjectSerializer::toQueryValue($suffix_not_equal);
        }
        // query params
        if ($suffix_less !== null) {
            $queryParams['Suffix.Less'] = ObjectSerializer::toQueryValue($suffix_less);
        }
        // query params
        if ($suffix_less_or_equal !== null) {
            $queryParams['Suffix.LessOrEqual'] = ObjectSerializer::toQueryValue($suffix_less_or_equal);
        }
        // query params
        if ($suffix_greater !== null) {
            $queryParams['Suffix.Greater'] = ObjectSerializer::toQueryValue($suffix_greater);
        }
        // query params
        if ($suffix_greater_or_equal !== null) {
            $queryParams['Suffix.GreaterOrEqual'] = ObjectSerializer::toQueryValue($suffix_greater_or_equal);
        }
        // query params
        if ($suffix_is_null !== null) {
            $queryParams['Suffix.IsNull'] = ObjectSerializer::toQueryValue($suffix_is_null);
        }
        // query params
        if ($suffix_is_not_null !== null) {
            $queryParams['Suffix.IsNotNull'] = ObjectSerializer::toQueryValue($suffix_is_not_null);
        }
        // query params
        if ($suffix_like !== null) {
            $queryParams['Suffix.Like'] = ObjectSerializer::toQueryValue($suffix_like);
        }
        // query params
        if ($suffix_not_like !== null) {
            $queryParams['Suffix.NotLike'] = ObjectSerializer::toQueryValue($suffix_not_like);
        }
        // query params
        if ($suffix_contains !== null) {
            $queryParams['Suffix.Contains'] = ObjectSerializer::toQueryValue($suffix_contains);
        }
        // query params
        if ($suffix_not_contains !== null) {
            $queryParams['Suffix.NotContains'] = ObjectSerializer::toQueryValue($suffix_not_contains);
        }
        // query params
        if ($suffix_starts_with !== null) {
            $queryParams['Suffix.StartsWith'] = ObjectSerializer::toQueryValue($suffix_starts_with);
        }
        // query params
        if ($suffix_not_starts_with !== null) {
            $queryParams['Suffix.NotStartsWith'] = ObjectSerializer::toQueryValue($suffix_not_starts_with);
        }
        // query params
        if ($suffix_ends_with !== null) {
            $queryParams['Suffix.EndsWith'] = ObjectSerializer::toQueryValue($suffix_ends_with);
        }
        // query params
        if ($suffix_not_ends_with !== null) {
            $queryParams['Suffix.NotEndsWith'] = ObjectSerializer::toQueryValue($suffix_not_ends_with);
        }
        // query params
        if ($suffix_in !== null) {
            $queryParams['Suffix.In'] = ObjectSerializer::toQueryValue($suffix_in);
        }
        // query params
        if ($suffix_between !== null) {
            $queryParams['Suffix.Between'] = ObjectSerializer::toQueryValue($suffix_between);
        }
        // query params
        if ($job_title_not_equal !== null) {
            $queryParams['JobTitle.NotEqual'] = ObjectSerializer::toQueryValue($job_title_not_equal);
        }
        // query params
        if ($job_title_less !== null) {
            $queryParams['JobTitle.Less'] = ObjectSerializer::toQueryValue($job_title_less);
        }
        // query params
        if ($job_title_less_or_equal !== null) {
            $queryParams['JobTitle.LessOrEqual'] = ObjectSerializer::toQueryValue($job_title_less_or_equal);
        }
        // query params
        if ($job_title_greater !== null) {
            $queryParams['JobTitle.Greater'] = ObjectSerializer::toQueryValue($job_title_greater);
        }
        // query params
        if ($job_title_greater_or_equal !== null) {
            $queryParams['JobTitle.GreaterOrEqual'] = ObjectSerializer::toQueryValue($job_title_greater_or_equal);
        }
        // query params
        if ($job_title_is_null !== null) {
            $queryParams['JobTitle.IsNull'] = ObjectSerializer::toQueryValue($job_title_is_null);
        }
        // query params
        if ($job_title_is_not_null !== null) {
            $queryParams['JobTitle.IsNotNull'] = ObjectSerializer::toQueryValue($job_title_is_not_null);
        }
        // query params
        if ($job_title_like !== null) {
            $queryParams['JobTitle.Like'] = ObjectSerializer::toQueryValue($job_title_like);
        }
        // query params
        if ($job_title_not_like !== null) {
            $queryParams['JobTitle.NotLike'] = ObjectSerializer::toQueryValue($job_title_not_like);
        }
        // query params
        if ($job_title_contains !== null) {
            $queryParams['JobTitle.Contains'] = ObjectSerializer::toQueryValue($job_title_contains);
        }
        // query params
        if ($job_title_not_contains !== null) {
            $queryParams['JobTitle.NotContains'] = ObjectSerializer::toQueryValue($job_title_not_contains);
        }
        // query params
        if ($job_title_starts_with !== null) {
            $queryParams['JobTitle.StartsWith'] = ObjectSerializer::toQueryValue($job_title_starts_with);
        }
        // query params
        if ($job_title_not_starts_with !== null) {
            $queryParams['JobTitle.NotStartsWith'] = ObjectSerializer::toQueryValue($job_title_not_starts_with);
        }
        // query params
        if ($job_title_ends_with !== null) {
            $queryParams['JobTitle.EndsWith'] = ObjectSerializer::toQueryValue($job_title_ends_with);
        }
        // query params
        if ($job_title_not_ends_with !== null) {
            $queryParams['JobTitle.NotEndsWith'] = ObjectSerializer::toQueryValue($job_title_not_ends_with);
        }
        // query params
        if ($job_title_in !== null) {
            $queryParams['JobTitle.In'] = ObjectSerializer::toQueryValue($job_title_in);
        }
        // query params
        if ($job_title_between !== null) {
            $queryParams['JobTitle.Between'] = ObjectSerializer::toQueryValue($job_title_between);
        }
        // query params
        if ($job_position_code_not_equal !== null) {
            $queryParams['JobPositionCode.NotEqual'] = ObjectSerializer::toQueryValue($job_position_code_not_equal);
        }
        // query params
        if ($job_position_code_less !== null) {
            $queryParams['JobPositionCode.Less'] = ObjectSerializer::toQueryValue($job_position_code_less);
        }
        // query params
        if ($job_position_code_less_or_equal !== null) {
            $queryParams['JobPositionCode.LessOrEqual'] = ObjectSerializer::toQueryValue($job_position_code_less_or_equal);
        }
        // query params
        if ($job_position_code_greater !== null) {
            $queryParams['JobPositionCode.Greater'] = ObjectSerializer::toQueryValue($job_position_code_greater);
        }
        // query params
        if ($job_position_code_greater_or_equal !== null) {
            $queryParams['JobPositionCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($job_position_code_greater_or_equal);
        }
        // query params
        if ($job_position_code_is_null !== null) {
            $queryParams['JobPositionCode.IsNull'] = ObjectSerializer::toQueryValue($job_position_code_is_null);
        }
        // query params
        if ($job_position_code_is_not_null !== null) {
            $queryParams['JobPositionCode.IsNotNull'] = ObjectSerializer::toQueryValue($job_position_code_is_not_null);
        }
        // query params
        if ($job_position_code_like !== null) {
            $queryParams['JobPositionCode.Like'] = ObjectSerializer::toQueryValue($job_position_code_like);
        }
        // query params
        if ($job_position_code_not_like !== null) {
            $queryParams['JobPositionCode.NotLike'] = ObjectSerializer::toQueryValue($job_position_code_not_like);
        }
        // query params
        if ($job_position_code_contains !== null) {
            $queryParams['JobPositionCode.Contains'] = ObjectSerializer::toQueryValue($job_position_code_contains);
        }
        // query params
        if ($job_position_code_not_contains !== null) {
            $queryParams['JobPositionCode.NotContains'] = ObjectSerializer::toQueryValue($job_position_code_not_contains);
        }
        // query params
        if ($job_position_code_starts_with !== null) {
            $queryParams['JobPositionCode.StartsWith'] = ObjectSerializer::toQueryValue($job_position_code_starts_with);
        }
        // query params
        if ($job_position_code_not_starts_with !== null) {
            $queryParams['JobPositionCode.NotStartsWith'] = ObjectSerializer::toQueryValue($job_position_code_not_starts_with);
        }
        // query params
        if ($job_position_code_ends_with !== null) {
            $queryParams['JobPositionCode.EndsWith'] = ObjectSerializer::toQueryValue($job_position_code_ends_with);
        }
        // query params
        if ($job_position_code_not_ends_with !== null) {
            $queryParams['JobPositionCode.NotEndsWith'] = ObjectSerializer::toQueryValue($job_position_code_not_ends_with);
        }
        // query params
        if ($job_position_code_in !== null) {
            $queryParams['JobPositionCode.In'] = ObjectSerializer::toQueryValue($job_position_code_in);
        }
        // query params
        if ($job_position_code_between !== null) {
            $queryParams['JobPositionCode.Between'] = ObjectSerializer::toQueryValue($job_position_code_between);
        }
        // query params
        if ($communication_preference_not_equal !== null) {
            $queryParams['CommunicationPreference.NotEqual'] = ObjectSerializer::toQueryValue($communication_preference_not_equal);
        }
        // query params
        if ($communication_preference_less !== null) {
            $queryParams['CommunicationPreference.Less'] = ObjectSerializer::toQueryValue($communication_preference_less);
        }
        // query params
        if ($communication_preference_less_or_equal !== null) {
            $queryParams['CommunicationPreference.LessOrEqual'] = ObjectSerializer::toQueryValue($communication_preference_less_or_equal);
        }
        // query params
        if ($communication_preference_greater !== null) {
            $queryParams['CommunicationPreference.Greater'] = ObjectSerializer::toQueryValue($communication_preference_greater);
        }
        // query params
        if ($communication_preference_greater_or_equal !== null) {
            $queryParams['CommunicationPreference.GreaterOrEqual'] = ObjectSerializer::toQueryValue($communication_preference_greater_or_equal);
        }
        // query params
        if ($communication_preference_is_null !== null) {
            $queryParams['CommunicationPreference.IsNull'] = ObjectSerializer::toQueryValue($communication_preference_is_null);
        }
        // query params
        if ($communication_preference_is_not_null !== null) {
            $queryParams['CommunicationPreference.IsNotNull'] = ObjectSerializer::toQueryValue($communication_preference_is_not_null);
        }
        // query params
        if ($communication_preference_like !== null) {
            $queryParams['CommunicationPreference.Like'] = ObjectSerializer::toQueryValue($communication_preference_like);
        }
        // query params
        if ($communication_preference_not_like !== null) {
            $queryParams['CommunicationPreference.NotLike'] = ObjectSerializer::toQueryValue($communication_preference_not_like);
        }
        // query params
        if ($communication_preference_contains !== null) {
            $queryParams['CommunicationPreference.Contains'] = ObjectSerializer::toQueryValue($communication_preference_contains);
        }
        // query params
        if ($communication_preference_not_contains !== null) {
            $queryParams['CommunicationPreference.NotContains'] = ObjectSerializer::toQueryValue($communication_preference_not_contains);
        }
        // query params
        if ($communication_preference_starts_with !== null) {
            $queryParams['CommunicationPreference.StartsWith'] = ObjectSerializer::toQueryValue($communication_preference_starts_with);
        }
        // query params
        if ($communication_preference_not_starts_with !== null) {
            $queryParams['CommunicationPreference.NotStartsWith'] = ObjectSerializer::toQueryValue($communication_preference_not_starts_with);
        }
        // query params
        if ($communication_preference_ends_with !== null) {
            $queryParams['CommunicationPreference.EndsWith'] = ObjectSerializer::toQueryValue($communication_preference_ends_with);
        }
        // query params
        if ($communication_preference_not_ends_with !== null) {
            $queryParams['CommunicationPreference.NotEndsWith'] = ObjectSerializer::toQueryValue($communication_preference_not_ends_with);
        }
        // query params
        if ($communication_preference_in !== null) {
            $queryParams['CommunicationPreference.In'] = ObjectSerializer::toQueryValue($communication_preference_in);
        }
        // query params
        if ($communication_preference_between !== null) {
            $queryParams['CommunicationPreference.Between'] = ObjectSerializer::toQueryValue($communication_preference_between);
        }
        // query params
        if ($source_promotion_not_equal !== null) {
            $queryParams['SourcePromotion.NotEqual'] = ObjectSerializer::toQueryValue($source_promotion_not_equal);
        }
        // query params
        if ($source_promotion_less !== null) {
            $queryParams['SourcePromotion.Less'] = ObjectSerializer::toQueryValue($source_promotion_less);
        }
        // query params
        if ($source_promotion_less_or_equal !== null) {
            $queryParams['SourcePromotion.LessOrEqual'] = ObjectSerializer::toQueryValue($source_promotion_less_or_equal);
        }
        // query params
        if ($source_promotion_greater !== null) {
            $queryParams['SourcePromotion.Greater'] = ObjectSerializer::toQueryValue($source_promotion_greater);
        }
        // query params
        if ($source_promotion_greater_or_equal !== null) {
            $queryParams['SourcePromotion.GreaterOrEqual'] = ObjectSerializer::toQueryValue($source_promotion_greater_or_equal);
        }
        // query params
        if ($source_promotion_is_null !== null) {
            $queryParams['SourcePromotion.IsNull'] = ObjectSerializer::toQueryValue($source_promotion_is_null);
        }
        // query params
        if ($source_promotion_is_not_null !== null) {
            $queryParams['SourcePromotion.IsNotNull'] = ObjectSerializer::toQueryValue($source_promotion_is_not_null);
        }
        // query params
        if ($source_promotion_like !== null) {
            $queryParams['SourcePromotion.Like'] = ObjectSerializer::toQueryValue($source_promotion_like);
        }
        // query params
        if ($source_promotion_not_like !== null) {
            $queryParams['SourcePromotion.NotLike'] = ObjectSerializer::toQueryValue($source_promotion_not_like);
        }
        // query params
        if ($source_promotion_contains !== null) {
            $queryParams['SourcePromotion.Contains'] = ObjectSerializer::toQueryValue($source_promotion_contains);
        }
        // query params
        if ($source_promotion_not_contains !== null) {
            $queryParams['SourcePromotion.NotContains'] = ObjectSerializer::toQueryValue($source_promotion_not_contains);
        }
        // query params
        if ($source_promotion_starts_with !== null) {
            $queryParams['SourcePromotion.StartsWith'] = ObjectSerializer::toQueryValue($source_promotion_starts_with);
        }
        // query params
        if ($source_promotion_not_starts_with !== null) {
            $queryParams['SourcePromotion.NotStartsWith'] = ObjectSerializer::toQueryValue($source_promotion_not_starts_with);
        }
        // query params
        if ($source_promotion_ends_with !== null) {
            $queryParams['SourcePromotion.EndsWith'] = ObjectSerializer::toQueryValue($source_promotion_ends_with);
        }
        // query params
        if ($source_promotion_not_ends_with !== null) {
            $queryParams['SourcePromotion.NotEndsWith'] = ObjectSerializer::toQueryValue($source_promotion_not_ends_with);
        }
        // query params
        if ($source_promotion_in !== null) {
            $queryParams['SourcePromotion.In'] = ObjectSerializer::toQueryValue($source_promotion_in);
        }
        // query params
        if ($source_promotion_between !== null) {
            $queryParams['SourcePromotion.Between'] = ObjectSerializer::toQueryValue($source_promotion_between);
        }
        // query params
        if ($address_code_not_equal !== null) {
            $queryParams['AddressCode.NotEqual'] = ObjectSerializer::toQueryValue($address_code_not_equal);
        }
        // query params
        if ($address_code_less !== null) {
            $queryParams['AddressCode.Less'] = ObjectSerializer::toQueryValue($address_code_less);
        }
        // query params
        if ($address_code_less_or_equal !== null) {
            $queryParams['AddressCode.LessOrEqual'] = ObjectSerializer::toQueryValue($address_code_less_or_equal);
        }
        // query params
        if ($address_code_greater !== null) {
            $queryParams['AddressCode.Greater'] = ObjectSerializer::toQueryValue($address_code_greater);
        }
        // query params
        if ($address_code_greater_or_equal !== null) {
            $queryParams['AddressCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($address_code_greater_or_equal);
        }
        // query params
        if ($address_code_is_null !== null) {
            $queryParams['AddressCode.IsNull'] = ObjectSerializer::toQueryValue($address_code_is_null);
        }
        // query params
        if ($address_code_is_not_null !== null) {
            $queryParams['AddressCode.IsNotNull'] = ObjectSerializer::toQueryValue($address_code_is_not_null);
        }
        // query params
        if ($address_code_like !== null) {
            $queryParams['AddressCode.Like'] = ObjectSerializer::toQueryValue($address_code_like);
        }
        // query params
        if ($address_code_not_like !== null) {
            $queryParams['AddressCode.NotLike'] = ObjectSerializer::toQueryValue($address_code_not_like);
        }
        // query params
        if ($address_code_contains !== null) {
            $queryParams['AddressCode.Contains'] = ObjectSerializer::toQueryValue($address_code_contains);
        }
        // query params
        if ($address_code_not_contains !== null) {
            $queryParams['AddressCode.NotContains'] = ObjectSerializer::toQueryValue($address_code_not_contains);
        }
        // query params
        if ($address_code_starts_with !== null) {
            $queryParams['AddressCode.StartsWith'] = ObjectSerializer::toQueryValue($address_code_starts_with);
        }
        // query params
        if ($address_code_not_starts_with !== null) {
            $queryParams['AddressCode.NotStartsWith'] = ObjectSerializer::toQueryValue($address_code_not_starts_with);
        }
        // query params
        if ($address_code_ends_with !== null) {
            $queryParams['AddressCode.EndsWith'] = ObjectSerializer::toQueryValue($address_code_ends_with);
        }
        // query params
        if ($address_code_not_ends_with !== null) {
            $queryParams['AddressCode.NotEndsWith'] = ObjectSerializer::toQueryValue($address_code_not_ends_with);
        }
        // query params
        if ($address_code_in !== null) {
            $queryParams['AddressCode.In'] = ObjectSerializer::toQueryValue($address_code_in);
        }
        // query params
        if ($address_code_between !== null) {
            $queryParams['AddressCode.Between'] = ObjectSerializer::toQueryValue($address_code_between);
        }
        // query params
        if ($default_currency_not_equal !== null) {
            $queryParams['DefaultCurrency.NotEqual'] = ObjectSerializer::toQueryValue($default_currency_not_equal);
        }
        // query params
        if ($default_currency_less !== null) {
            $queryParams['DefaultCurrency.Less'] = ObjectSerializer::toQueryValue($default_currency_less);
        }
        // query params
        if ($default_currency_less_or_equal !== null) {
            $queryParams['DefaultCurrency.LessOrEqual'] = ObjectSerializer::toQueryValue($default_currency_less_or_equal);
        }
        // query params
        if ($default_currency_greater !== null) {
            $queryParams['DefaultCurrency.Greater'] = ObjectSerializer::toQueryValue($default_currency_greater);
        }
        // query params
        if ($default_currency_greater_or_equal !== null) {
            $queryParams['DefaultCurrency.GreaterOrEqual'] = ObjectSerializer::toQueryValue($default_currency_greater_or_equal);
        }
        // query params
        if ($default_currency_is_null !== null) {
            $queryParams['DefaultCurrency.IsNull'] = ObjectSerializer::toQueryValue($default_currency_is_null);
        }
        // query params
        if ($default_currency_is_not_null !== null) {
            $queryParams['DefaultCurrency.IsNotNull'] = ObjectSerializer::toQueryValue($default_currency_is_not_null);
        }
        // query params
        if ($default_currency_like !== null) {
            $queryParams['DefaultCurrency.Like'] = ObjectSerializer::toQueryValue($default_currency_like);
        }
        // query params
        if ($default_currency_not_like !== null) {
            $queryParams['DefaultCurrency.NotLike'] = ObjectSerializer::toQueryValue($default_currency_not_like);
        }
        // query params
        if ($default_currency_contains !== null) {
            $queryParams['DefaultCurrency.Contains'] = ObjectSerializer::toQueryValue($default_currency_contains);
        }
        // query params
        if ($default_currency_not_contains !== null) {
            $queryParams['DefaultCurrency.NotContains'] = ObjectSerializer::toQueryValue($default_currency_not_contains);
        }
        // query params
        if ($default_currency_starts_with !== null) {
            $queryParams['DefaultCurrency.StartsWith'] = ObjectSerializer::toQueryValue($default_currency_starts_with);
        }
        // query params
        if ($default_currency_not_starts_with !== null) {
            $queryParams['DefaultCurrency.NotStartsWith'] = ObjectSerializer::toQueryValue($default_currency_not_starts_with);
        }
        // query params
        if ($default_currency_ends_with !== null) {
            $queryParams['DefaultCurrency.EndsWith'] = ObjectSerializer::toQueryValue($default_currency_ends_with);
        }
        // query params
        if ($default_currency_not_ends_with !== null) {
            $queryParams['DefaultCurrency.NotEndsWith'] = ObjectSerializer::toQueryValue($default_currency_not_ends_with);
        }
        // query params
        if ($default_currency_in !== null) {
            $queryParams['DefaultCurrency.In'] = ObjectSerializer::toQueryValue($default_currency_in);
        }
        // query params
        if ($default_currency_between !== null) {
            $queryParams['DefaultCurrency.Between'] = ObjectSerializer::toQueryValue($default_currency_between);
        }
        // query params
        if ($department_not_equal !== null) {
            $queryParams['Department.NotEqual'] = ObjectSerializer::toQueryValue($department_not_equal);
        }
        // query params
        if ($department_less !== null) {
            $queryParams['Department.Less'] = ObjectSerializer::toQueryValue($department_less);
        }
        // query params
        if ($department_less_or_equal !== null) {
            $queryParams['Department.LessOrEqual'] = ObjectSerializer::toQueryValue($department_less_or_equal);
        }
        // query params
        if ($department_greater !== null) {
            $queryParams['Department.Greater'] = ObjectSerializer::toQueryValue($department_greater);
        }
        // query params
        if ($department_greater_or_equal !== null) {
            $queryParams['Department.GreaterOrEqual'] = ObjectSerializer::toQueryValue($department_greater_or_equal);
        }
        // query params
        if ($department_is_null !== null) {
            $queryParams['Department.IsNull'] = ObjectSerializer::toQueryValue($department_is_null);
        }
        // query params
        if ($department_is_not_null !== null) {
            $queryParams['Department.IsNotNull'] = ObjectSerializer::toQueryValue($department_is_not_null);
        }
        // query params
        if ($department_like !== null) {
            $queryParams['Department.Like'] = ObjectSerializer::toQueryValue($department_like);
        }
        // query params
        if ($department_not_like !== null) {
            $queryParams['Department.NotLike'] = ObjectSerializer::toQueryValue($department_not_like);
        }
        // query params
        if ($department_contains !== null) {
            $queryParams['Department.Contains'] = ObjectSerializer::toQueryValue($department_contains);
        }
        // query params
        if ($department_not_contains !== null) {
            $queryParams['Department.NotContains'] = ObjectSerializer::toQueryValue($department_not_contains);
        }
        // query params
        if ($department_starts_with !== null) {
            $queryParams['Department.StartsWith'] = ObjectSerializer::toQueryValue($department_starts_with);
        }
        // query params
        if ($department_not_starts_with !== null) {
            $queryParams['Department.NotStartsWith'] = ObjectSerializer::toQueryValue($department_not_starts_with);
        }
        // query params
        if ($department_ends_with !== null) {
            $queryParams['Department.EndsWith'] = ObjectSerializer::toQueryValue($department_ends_with);
        }
        // query params
        if ($department_not_ends_with !== null) {
            $queryParams['Department.NotEndsWith'] = ObjectSerializer::toQueryValue($department_not_ends_with);
        }
        // query params
        if ($department_in !== null) {
            $queryParams['Department.In'] = ObjectSerializer::toQueryValue($department_in);
        }
        // query params
        if ($department_between !== null) {
            $queryParams['Department.Between'] = ObjectSerializer::toQueryValue($department_between);
        }
        // query params
        if ($county_not_equal !== null) {
            $queryParams['County.NotEqual'] = ObjectSerializer::toQueryValue($county_not_equal);
        }
        // query params
        if ($county_less !== null) {
            $queryParams['County.Less'] = ObjectSerializer::toQueryValue($county_less);
        }
        // query params
        if ($county_less_or_equal !== null) {
            $queryParams['County.LessOrEqual'] = ObjectSerializer::toQueryValue($county_less_or_equal);
        }
        // query params
        if ($county_greater !== null) {
            $queryParams['County.Greater'] = ObjectSerializer::toQueryValue($county_greater);
        }
        // query params
        if ($county_greater_or_equal !== null) {
            $queryParams['County.GreaterOrEqual'] = ObjectSerializer::toQueryValue($county_greater_or_equal);
        }
        // query params
        if ($county_is_null !== null) {
            $queryParams['County.IsNull'] = ObjectSerializer::toQueryValue($county_is_null);
        }
        // query params
        if ($county_is_not_null !== null) {
            $queryParams['County.IsNotNull'] = ObjectSerializer::toQueryValue($county_is_not_null);
        }
        // query params
        if ($county_like !== null) {
            $queryParams['County.Like'] = ObjectSerializer::toQueryValue($county_like);
        }
        // query params
        if ($county_not_like !== null) {
            $queryParams['County.NotLike'] = ObjectSerializer::toQueryValue($county_not_like);
        }
        // query params
        if ($county_contains !== null) {
            $queryParams['County.Contains'] = ObjectSerializer::toQueryValue($county_contains);
        }
        // query params
        if ($county_not_contains !== null) {
            $queryParams['County.NotContains'] = ObjectSerializer::toQueryValue($county_not_contains);
        }
        // query params
        if ($county_starts_with !== null) {
            $queryParams['County.StartsWith'] = ObjectSerializer::toQueryValue($county_starts_with);
        }
        // query params
        if ($county_not_starts_with !== null) {
            $queryParams['County.NotStartsWith'] = ObjectSerializer::toQueryValue($county_not_starts_with);
        }
        // query params
        if ($county_ends_with !== null) {
            $queryParams['County.EndsWith'] = ObjectSerializer::toQueryValue($county_ends_with);
        }
        // query params
        if ($county_not_ends_with !== null) {
            $queryParams['County.NotEndsWith'] = ObjectSerializer::toQueryValue($county_not_ends_with);
        }
        // query params
        if ($county_in !== null) {
            $queryParams['County.In'] = ObjectSerializer::toQueryValue($county_in);
        }
        // query params
        if ($county_between !== null) {
            $queryParams['County.Between'] = ObjectSerializer::toQueryValue($county_between);
        }
        // query params
        if ($pin_code_not_equal !== null) {
            $queryParams['PinCode.NotEqual'] = ObjectSerializer::toQueryValue($pin_code_not_equal);
        }
        // query params
        if ($pin_code_less !== null) {
            $queryParams['PinCode.Less'] = ObjectSerializer::toQueryValue($pin_code_less);
        }
        // query params
        if ($pin_code_less_or_equal !== null) {
            $queryParams['PinCode.LessOrEqual'] = ObjectSerializer::toQueryValue($pin_code_less_or_equal);
        }
        // query params
        if ($pin_code_greater !== null) {
            $queryParams['PinCode.Greater'] = ObjectSerializer::toQueryValue($pin_code_greater);
        }
        // query params
        if ($pin_code_greater_or_equal !== null) {
            $queryParams['PinCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($pin_code_greater_or_equal);
        }
        // query params
        if ($pin_code_is_null !== null) {
            $queryParams['PinCode.IsNull'] = ObjectSerializer::toQueryValue($pin_code_is_null);
        }
        // query params
        if ($pin_code_is_not_null !== null) {
            $queryParams['PinCode.IsNotNull'] = ObjectSerializer::toQueryValue($pin_code_is_not_null);
        }
        // query params
        if ($pin_code_like !== null) {
            $queryParams['PinCode.Like'] = ObjectSerializer::toQueryValue($pin_code_like);
        }
        // query params
        if ($pin_code_not_like !== null) {
            $queryParams['PinCode.NotLike'] = ObjectSerializer::toQueryValue($pin_code_not_like);
        }
        // query params
        if ($pin_code_contains !== null) {
            $queryParams['PinCode.Contains'] = ObjectSerializer::toQueryValue($pin_code_contains);
        }
        // query params
        if ($pin_code_not_contains !== null) {
            $queryParams['PinCode.NotContains'] = ObjectSerializer::toQueryValue($pin_code_not_contains);
        }
        // query params
        if ($pin_code_starts_with !== null) {
            $queryParams['PinCode.StartsWith'] = ObjectSerializer::toQueryValue($pin_code_starts_with);
        }
        // query params
        if ($pin_code_not_starts_with !== null) {
            $queryParams['PinCode.NotStartsWith'] = ObjectSerializer::toQueryValue($pin_code_not_starts_with);
        }
        // query params
        if ($pin_code_ends_with !== null) {
            $queryParams['PinCode.EndsWith'] = ObjectSerializer::toQueryValue($pin_code_ends_with);
        }
        // query params
        if ($pin_code_not_ends_with !== null) {
            $queryParams['PinCode.NotEndsWith'] = ObjectSerializer::toQueryValue($pin_code_not_ends_with);
        }
        // query params
        if ($pin_code_in !== null) {
            $queryParams['PinCode.In'] = ObjectSerializer::toQueryValue($pin_code_in);
        }
        // query params
        if ($pin_code_between !== null) {
            $queryParams['PinCode.Between'] = ObjectSerializer::toQueryValue($pin_code_between);
        }
        // query params
        if ($social_security_number_not_equal !== null) {
            $queryParams['SocialSecurityNumber.NotEqual'] = ObjectSerializer::toQueryValue($social_security_number_not_equal);
        }
        // query params
        if ($social_security_number_less !== null) {
            $queryParams['SocialSecurityNumber.Less'] = ObjectSerializer::toQueryValue($social_security_number_less);
        }
        // query params
        if ($social_security_number_less_or_equal !== null) {
            $queryParams['SocialSecurityNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($social_security_number_less_or_equal);
        }
        // query params
        if ($social_security_number_greater !== null) {
            $queryParams['SocialSecurityNumber.Greater'] = ObjectSerializer::toQueryValue($social_security_number_greater);
        }
        // query params
        if ($social_security_number_greater_or_equal !== null) {
            $queryParams['SocialSecurityNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($social_security_number_greater_or_equal);
        }
        // query params
        if ($social_security_number_is_null !== null) {
            $queryParams['SocialSecurityNumber.IsNull'] = ObjectSerializer::toQueryValue($social_security_number_is_null);
        }
        // query params
        if ($social_security_number_is_not_null !== null) {
            $queryParams['SocialSecurityNumber.IsNotNull'] = ObjectSerializer::toQueryValue($social_security_number_is_not_null);
        }
        // query params
        if ($social_security_number_like !== null) {
            $queryParams['SocialSecurityNumber.Like'] = ObjectSerializer::toQueryValue($social_security_number_like);
        }
        // query params
        if ($social_security_number_not_like !== null) {
            $queryParams['SocialSecurityNumber.NotLike'] = ObjectSerializer::toQueryValue($social_security_number_not_like);
        }
        // query params
        if ($social_security_number_contains !== null) {
            $queryParams['SocialSecurityNumber.Contains'] = ObjectSerializer::toQueryValue($social_security_number_contains);
        }
        // query params
        if ($social_security_number_not_contains !== null) {
            $queryParams['SocialSecurityNumber.NotContains'] = ObjectSerializer::toQueryValue($social_security_number_not_contains);
        }
        // query params
        if ($social_security_number_starts_with !== null) {
            $queryParams['SocialSecurityNumber.StartsWith'] = ObjectSerializer::toQueryValue($social_security_number_starts_with);
        }
        // query params
        if ($social_security_number_not_starts_with !== null) {
            $queryParams['SocialSecurityNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($social_security_number_not_starts_with);
        }
        // query params
        if ($social_security_number_ends_with !== null) {
            $queryParams['SocialSecurityNumber.EndsWith'] = ObjectSerializer::toQueryValue($social_security_number_ends_with);
        }
        // query params
        if ($social_security_number_not_ends_with !== null) {
            $queryParams['SocialSecurityNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($social_security_number_not_ends_with);
        }
        // query params
        if ($social_security_number_in !== null) {
            $queryParams['SocialSecurityNumber.In'] = ObjectSerializer::toQueryValue($social_security_number_in);
        }
        // query params
        if ($social_security_number_between !== null) {
            $queryParams['SocialSecurityNumber.Between'] = ObjectSerializer::toQueryValue($social_security_number_between);
        }
        // query params
        if ($street_name_not_equal !== null) {
            $queryParams['StreetName.NotEqual'] = ObjectSerializer::toQueryValue($street_name_not_equal);
        }
        // query params
        if ($street_name_less !== null) {
            $queryParams['StreetName.Less'] = ObjectSerializer::toQueryValue($street_name_less);
        }
        // query params
        if ($street_name_less_or_equal !== null) {
            $queryParams['StreetName.LessOrEqual'] = ObjectSerializer::toQueryValue($street_name_less_or_equal);
        }
        // query params
        if ($street_name_greater !== null) {
            $queryParams['StreetName.Greater'] = ObjectSerializer::toQueryValue($street_name_greater);
        }
        // query params
        if ($street_name_greater_or_equal !== null) {
            $queryParams['StreetName.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street_name_greater_or_equal);
        }
        // query params
        if ($street_name_is_null !== null) {
            $queryParams['StreetName.IsNull'] = ObjectSerializer::toQueryValue($street_name_is_null);
        }
        // query params
        if ($street_name_is_not_null !== null) {
            $queryParams['StreetName.IsNotNull'] = ObjectSerializer::toQueryValue($street_name_is_not_null);
        }
        // query params
        if ($street_name_like !== null) {
            $queryParams['StreetName.Like'] = ObjectSerializer::toQueryValue($street_name_like);
        }
        // query params
        if ($street_name_not_like !== null) {
            $queryParams['StreetName.NotLike'] = ObjectSerializer::toQueryValue($street_name_not_like);
        }
        // query params
        if ($street_name_contains !== null) {
            $queryParams['StreetName.Contains'] = ObjectSerializer::toQueryValue($street_name_contains);
        }
        // query params
        if ($street_name_not_contains !== null) {
            $queryParams['StreetName.NotContains'] = ObjectSerializer::toQueryValue($street_name_not_contains);
        }
        // query params
        if ($street_name_starts_with !== null) {
            $queryParams['StreetName.StartsWith'] = ObjectSerializer::toQueryValue($street_name_starts_with);
        }
        // query params
        if ($street_name_not_starts_with !== null) {
            $queryParams['StreetName.NotStartsWith'] = ObjectSerializer::toQueryValue($street_name_not_starts_with);
        }
        // query params
        if ($street_name_ends_with !== null) {
            $queryParams['StreetName.EndsWith'] = ObjectSerializer::toQueryValue($street_name_ends_with);
        }
        // query params
        if ($street_name_not_ends_with !== null) {
            $queryParams['StreetName.NotEndsWith'] = ObjectSerializer::toQueryValue($street_name_not_ends_with);
        }
        // query params
        if ($street_name_in !== null) {
            $queryParams['StreetName.In'] = ObjectSerializer::toQueryValue($street_name_in);
        }
        // query params
        if ($street_name_between !== null) {
            $queryParams['StreetName.Between'] = ObjectSerializer::toQueryValue($street_name_between);
        }
        // query params
        if ($street_type_not_equal !== null) {
            $queryParams['StreetType.NotEqual'] = ObjectSerializer::toQueryValue($street_type_not_equal);
        }
        // query params
        if ($street_type_less !== null) {
            $queryParams['StreetType.Less'] = ObjectSerializer::toQueryValue($street_type_less);
        }
        // query params
        if ($street_type_less_or_equal !== null) {
            $queryParams['StreetType.LessOrEqual'] = ObjectSerializer::toQueryValue($street_type_less_or_equal);
        }
        // query params
        if ($street_type_greater !== null) {
            $queryParams['StreetType.Greater'] = ObjectSerializer::toQueryValue($street_type_greater);
        }
        // query params
        if ($street_type_greater_or_equal !== null) {
            $queryParams['StreetType.GreaterOrEqual'] = ObjectSerializer::toQueryValue($street_type_greater_or_equal);
        }
        // query params
        if ($street_type_is_null !== null) {
            $queryParams['StreetType.IsNull'] = ObjectSerializer::toQueryValue($street_type_is_null);
        }
        // query params
        if ($street_type_is_not_null !== null) {
            $queryParams['StreetType.IsNotNull'] = ObjectSerializer::toQueryValue($street_type_is_not_null);
        }
        // query params
        if ($street_type_like !== null) {
            $queryParams['StreetType.Like'] = ObjectSerializer::toQueryValue($street_type_like);
        }
        // query params
        if ($street_type_not_like !== null) {
            $queryParams['StreetType.NotLike'] = ObjectSerializer::toQueryValue($street_type_not_like);
        }
        // query params
        if ($street_type_contains !== null) {
            $queryParams['StreetType.Contains'] = ObjectSerializer::toQueryValue($street_type_contains);
        }
        // query params
        if ($street_type_not_contains !== null) {
            $queryParams['StreetType.NotContains'] = ObjectSerializer::toQueryValue($street_type_not_contains);
        }
        // query params
        if ($street_type_starts_with !== null) {
            $queryParams['StreetType.StartsWith'] = ObjectSerializer::toQueryValue($street_type_starts_with);
        }
        // query params
        if ($street_type_not_starts_with !== null) {
            $queryParams['StreetType.NotStartsWith'] = ObjectSerializer::toQueryValue($street_type_not_starts_with);
        }
        // query params
        if ($street_type_ends_with !== null) {
            $queryParams['StreetType.EndsWith'] = ObjectSerializer::toQueryValue($street_type_ends_with);
        }
        // query params
        if ($street_type_not_ends_with !== null) {
            $queryParams['StreetType.NotEndsWith'] = ObjectSerializer::toQueryValue($street_type_not_ends_with);
        }
        // query params
        if ($street_type_in !== null) {
            $queryParams['StreetType.In'] = ObjectSerializer::toQueryValue($street_type_in);
        }
        // query params
        if ($street_type_between !== null) {
            $queryParams['StreetType.Between'] = ObjectSerializer::toQueryValue($street_type_between);
        }
        // query params
        if ($last_updated_on_not_equal !== null) {
            $queryParams['LastUpdatedOn.NotEqual'] = ObjectSerializer::toQueryValue($last_updated_on_not_equal);
        }
        // query params
        if ($last_updated_on_less !== null) {
            $queryParams['LastUpdatedOn.Less'] = ObjectSerializer::toQueryValue($last_updated_on_less);
        }
        // query params
        if ($last_updated_on_less_or_equal !== null) {
            $queryParams['LastUpdatedOn.LessOrEqual'] = ObjectSerializer::toQueryValue($last_updated_on_less_or_equal);
        }
        // query params
        if ($last_updated_on_greater !== null) {
            $queryParams['LastUpdatedOn.Greater'] = ObjectSerializer::toQueryValue($last_updated_on_greater);
        }
        // query params
        if ($last_updated_on_greater_or_equal !== null) {
            $queryParams['LastUpdatedOn.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_updated_on_greater_or_equal);
        }
        // query params
        if ($last_updated_on_is_null !== null) {
            $queryParams['LastUpdatedOn.IsNull'] = ObjectSerializer::toQueryValue($last_updated_on_is_null);
        }
        // query params
        if ($last_updated_on_is_not_null !== null) {
            $queryParams['LastUpdatedOn.IsNotNull'] = ObjectSerializer::toQueryValue($last_updated_on_is_not_null);
        }
        // query params
        if ($last_updated_on_like !== null) {
            $queryParams['LastUpdatedOn.Like'] = ObjectSerializer::toQueryValue($last_updated_on_like);
        }
        // query params
        if ($last_updated_on_not_like !== null) {
            $queryParams['LastUpdatedOn.NotLike'] = ObjectSerializer::toQueryValue($last_updated_on_not_like);
        }
        // query params
        if ($last_updated_on_contains !== null) {
            $queryParams['LastUpdatedOn.Contains'] = ObjectSerializer::toQueryValue($last_updated_on_contains);
        }
        // query params
        if ($last_updated_on_not_contains !== null) {
            $queryParams['LastUpdatedOn.NotContains'] = ObjectSerializer::toQueryValue($last_updated_on_not_contains);
        }
        // query params
        if ($last_updated_on_starts_with !== null) {
            $queryParams['LastUpdatedOn.StartsWith'] = ObjectSerializer::toQueryValue($last_updated_on_starts_with);
        }
        // query params
        if ($last_updated_on_not_starts_with !== null) {
            $queryParams['LastUpdatedOn.NotStartsWith'] = ObjectSerializer::toQueryValue($last_updated_on_not_starts_with);
        }
        // query params
        if ($last_updated_on_ends_with !== null) {
            $queryParams['LastUpdatedOn.EndsWith'] = ObjectSerializer::toQueryValue($last_updated_on_ends_with);
        }
        // query params
        if ($last_updated_on_not_ends_with !== null) {
            $queryParams['LastUpdatedOn.NotEndsWith'] = ObjectSerializer::toQueryValue($last_updated_on_not_ends_with);
        }
        // query params
        if ($last_updated_on_in !== null) {
            $queryParams['LastUpdatedOn.In'] = ObjectSerializer::toQueryValue($last_updated_on_in);
        }
        // query params
        if ($last_updated_on_between !== null) {
            $queryParams['LastUpdatedOn.Between'] = ObjectSerializer::toQueryValue($last_updated_on_between);
        }
        // query params
        if ($item_number_not_equal !== null) {
            $queryParams['ItemNumber.NotEqual'] = ObjectSerializer::toQueryValue($item_number_not_equal);
        }
        // query params
        if ($item_number_less !== null) {
            $queryParams['ItemNumber.Less'] = ObjectSerializer::toQueryValue($item_number_less);
        }
        // query params
        if ($item_number_less_or_equal !== null) {
            $queryParams['ItemNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($item_number_less_or_equal);
        }
        // query params
        if ($item_number_greater !== null) {
            $queryParams['ItemNumber.Greater'] = ObjectSerializer::toQueryValue($item_number_greater);
        }
        // query params
        if ($item_number_greater_or_equal !== null) {
            $queryParams['ItemNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($item_number_greater_or_equal);
        }
        // query params
        if ($item_number_is_null !== null) {
            $queryParams['ItemNumber.IsNull'] = ObjectSerializer::toQueryValue($item_number_is_null);
        }
        // query params
        if ($item_number_is_not_null !== null) {
            $queryParams['ItemNumber.IsNotNull'] = ObjectSerializer::toQueryValue($item_number_is_not_null);
        }
        // query params
        if ($item_number_like !== null) {
            $queryParams['ItemNumber.Like'] = ObjectSerializer::toQueryValue($item_number_like);
        }
        // query params
        if ($item_number_not_like !== null) {
            $queryParams['ItemNumber.NotLike'] = ObjectSerializer::toQueryValue($item_number_not_like);
        }
        // query params
        if ($item_number_contains !== null) {
            $queryParams['ItemNumber.Contains'] = ObjectSerializer::toQueryValue($item_number_contains);
        }
        // query params
        if ($item_number_not_contains !== null) {
            $queryParams['ItemNumber.NotContains'] = ObjectSerializer::toQueryValue($item_number_not_contains);
        }
        // query params
        if ($item_number_starts_with !== null) {
            $queryParams['ItemNumber.StartsWith'] = ObjectSerializer::toQueryValue($item_number_starts_with);
        }
        // query params
        if ($item_number_not_starts_with !== null) {
            $queryParams['ItemNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($item_number_not_starts_with);
        }
        // query params
        if ($item_number_ends_with !== null) {
            $queryParams['ItemNumber.EndsWith'] = ObjectSerializer::toQueryValue($item_number_ends_with);
        }
        // query params
        if ($item_number_not_ends_with !== null) {
            $queryParams['ItemNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($item_number_not_ends_with);
        }
        // query params
        if ($item_number_in !== null) {
            $queryParams['ItemNumber.In'] = ObjectSerializer::toQueryValue($item_number_in);
        }
        // query params
        if ($item_number_between !== null) {
            $queryParams['ItemNumber.Between'] = ObjectSerializer::toQueryValue($item_number_between);
        }
        // query params
        if ($last_name_soundex_not_equal !== null) {
            $queryParams['LastNameSoundex.NotEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_not_equal);
        }
        // query params
        if ($last_name_soundex_less !== null) {
            $queryParams['LastNameSoundex.Less'] = ObjectSerializer::toQueryValue($last_name_soundex_less);
        }
        // query params
        if ($last_name_soundex_less_or_equal !== null) {
            $queryParams['LastNameSoundex.LessOrEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_less_or_equal);
        }
        // query params
        if ($last_name_soundex_greater !== null) {
            $queryParams['LastNameSoundex.Greater'] = ObjectSerializer::toQueryValue($last_name_soundex_greater);
        }
        // query params
        if ($last_name_soundex_greater_or_equal !== null) {
            $queryParams['LastNameSoundex.GreaterOrEqual'] = ObjectSerializer::toQueryValue($last_name_soundex_greater_or_equal);
        }
        // query params
        if ($last_name_soundex_is_null !== null) {
            $queryParams['LastNameSoundex.IsNull'] = ObjectSerializer::toQueryValue($last_name_soundex_is_null);
        }
        // query params
        if ($last_name_soundex_is_not_null !== null) {
            $queryParams['LastNameSoundex.IsNotNull'] = ObjectSerializer::toQueryValue($last_name_soundex_is_not_null);
        }
        // query params
        if ($last_name_soundex_like !== null) {
            $queryParams['LastNameSoundex.Like'] = ObjectSerializer::toQueryValue($last_name_soundex_like);
        }
        // query params
        if ($last_name_soundex_not_like !== null) {
            $queryParams['LastNameSoundex.NotLike'] = ObjectSerializer::toQueryValue($last_name_soundex_not_like);
        }
        // query params
        if ($last_name_soundex_contains !== null) {
            $queryParams['LastNameSoundex.Contains'] = ObjectSerializer::toQueryValue($last_name_soundex_contains);
        }
        // query params
        if ($last_name_soundex_not_contains !== null) {
            $queryParams['LastNameSoundex.NotContains'] = ObjectSerializer::toQueryValue($last_name_soundex_not_contains);
        }
        // query params
        if ($last_name_soundex_starts_with !== null) {
            $queryParams['LastNameSoundex.StartsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_starts_with);
        }
        // query params
        if ($last_name_soundex_not_starts_with !== null) {
            $queryParams['LastNameSoundex.NotStartsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_not_starts_with);
        }
        // query params
        if ($last_name_soundex_ends_with !== null) {
            $queryParams['LastNameSoundex.EndsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_ends_with);
        }
        // query params
        if ($last_name_soundex_not_ends_with !== null) {
            $queryParams['LastNameSoundex.NotEndsWith'] = ObjectSerializer::toQueryValue($last_name_soundex_not_ends_with);
        }
        // query params
        if ($last_name_soundex_in !== null) {
            $queryParams['LastNameSoundex.In'] = ObjectSerializer::toQueryValue($last_name_soundex_in);
        }
        // query params
        if ($last_name_soundex_between !== null) {
            $queryParams['LastNameSoundex.Between'] = ObjectSerializer::toQueryValue($last_name_soundex_between);
        }
        // query params
        if ($company_name_soundex_not_equal !== null) {
            $queryParams['CompanyNameSoundex.NotEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_not_equal);
        }
        // query params
        if ($company_name_soundex_less !== null) {
            $queryParams['CompanyNameSoundex.Less'] = ObjectSerializer::toQueryValue($company_name_soundex_less);
        }
        // query params
        if ($company_name_soundex_less_or_equal !== null) {
            $queryParams['CompanyNameSoundex.LessOrEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_less_or_equal);
        }
        // query params
        if ($company_name_soundex_greater !== null) {
            $queryParams['CompanyNameSoundex.Greater'] = ObjectSerializer::toQueryValue($company_name_soundex_greater);
        }
        // query params
        if ($company_name_soundex_greater_or_equal !== null) {
            $queryParams['CompanyNameSoundex.GreaterOrEqual'] = ObjectSerializer::toQueryValue($company_name_soundex_greater_or_equal);
        }
        // query params
        if ($company_name_soundex_is_null !== null) {
            $queryParams['CompanyNameSoundex.IsNull'] = ObjectSerializer::toQueryValue($company_name_soundex_is_null);
        }
        // query params
        if ($company_name_soundex_is_not_null !== null) {
            $queryParams['CompanyNameSoundex.IsNotNull'] = ObjectSerializer::toQueryValue($company_name_soundex_is_not_null);
        }
        // query params
        if ($company_name_soundex_like !== null) {
            $queryParams['CompanyNameSoundex.Like'] = ObjectSerializer::toQueryValue($company_name_soundex_like);
        }
        // query params
        if ($company_name_soundex_not_like !== null) {
            $queryParams['CompanyNameSoundex.NotLike'] = ObjectSerializer::toQueryValue($company_name_soundex_not_like);
        }
        // query params
        if ($company_name_soundex_contains !== null) {
            $queryParams['CompanyNameSoundex.Contains'] = ObjectSerializer::toQueryValue($company_name_soundex_contains);
        }
        // query params
        if ($company_name_soundex_not_contains !== null) {
            $queryParams['CompanyNameSoundex.NotContains'] = ObjectSerializer::toQueryValue($company_name_soundex_not_contains);
        }
        // query params
        if ($company_name_soundex_starts_with !== null) {
            $queryParams['CompanyNameSoundex.StartsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_starts_with);
        }
        // query params
        if ($company_name_soundex_not_starts_with !== null) {
            $queryParams['CompanyNameSoundex.NotStartsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_not_starts_with);
        }
        // query params
        if ($company_name_soundex_ends_with !== null) {
            $queryParams['CompanyNameSoundex.EndsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_ends_with);
        }
        // query params
        if ($company_name_soundex_not_ends_with !== null) {
            $queryParams['CompanyNameSoundex.NotEndsWith'] = ObjectSerializer::toQueryValue($company_name_soundex_not_ends_with);
        }
        // query params
        if ($company_name_soundex_in !== null) {
            $queryParams['CompanyNameSoundex.In'] = ObjectSerializer::toQueryValue($company_name_soundex_in);
        }
        // query params
        if ($company_name_soundex_between !== null) {
            $queryParams['CompanyNameSoundex.Between'] = ObjectSerializer::toQueryValue($company_name_soundex_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearchAvailableCredits
     *
     * Gets the unapplied credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $credit_reason_code Filter on CRD-RSN using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $credit_reason_code_not_equal Filter on CRD-RSN using &#39;NotEqual&#39; operator (optional)
     * @param  string $credit_reason_code_less Filter on CRD-RSN using &#39;Less&#39; operator (optional)
     * @param  string $credit_reason_code_less_or_equal Filter on CRD-RSN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_greater Filter on CRD-RSN using &#39;Greater&#39; operator (optional)
     * @param  string $credit_reason_code_greater_or_equal Filter on CRD-RSN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_is_null Filter on CRD-RSN using &#39;IsNull&#39; operator (optional)
     * @param  string $credit_reason_code_is_not_null Filter on CRD-RSN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $credit_reason_code_like Filter on CRD-RSN using &#39;Like&#39; operator (optional)
     * @param  string $credit_reason_code_not_like Filter on CRD-RSN using &#39;NotLike&#39; operator (optional)
     * @param  string $credit_reason_code_contains Filter on CRD-RSN using &#39;Contains&#39; operator (optional)
     * @param  string $credit_reason_code_not_contains Filter on CRD-RSN using &#39;NotContains&#39; operator (optional)
     * @param  string $credit_reason_code_starts_with Filter on CRD-RSN using &#39;StartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_starts_with Filter on CRD-RSN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_ends_with Filter on CRD-RSN using &#39;EndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_ends_with Filter on CRD-RSN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_in Filter on CRD-RSN using &#39;In&#39; operator (optional)
     * @param  string $credit_reason_code_between Filter on CRD-RSN using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\UnappliedCredit[]
     */
    public function customerSearchAvailableCredits($customer_number, $credit_reason_code = null, $billing_organization_code = null, $credit_reason_code_not_equal = null, $credit_reason_code_less = null, $credit_reason_code_less_or_equal = null, $credit_reason_code_greater = null, $credit_reason_code_greater_or_equal = null, $credit_reason_code_is_null = null, $credit_reason_code_is_not_null = null, $credit_reason_code_like = null, $credit_reason_code_not_like = null, $credit_reason_code_contains = null, $credit_reason_code_not_contains = null, $credit_reason_code_starts_with = null, $credit_reason_code_not_starts_with = null, $credit_reason_code_ends_with = null, $credit_reason_code_not_ends_with = null, $credit_reason_code_in = null, $credit_reason_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        list($response) = $this->customerSearchAvailableCreditsWithHttpInfo($customer_number, $credit_reason_code, $billing_organization_code, $credit_reason_code_not_equal, $credit_reason_code_less, $credit_reason_code_less_or_equal, $credit_reason_code_greater, $credit_reason_code_greater_or_equal, $credit_reason_code_is_null, $credit_reason_code_is_not_null, $credit_reason_code_like, $credit_reason_code_not_like, $credit_reason_code_contains, $credit_reason_code_not_contains, $credit_reason_code_starts_with, $credit_reason_code_not_starts_with, $credit_reason_code_ends_with, $credit_reason_code_not_ends_with, $credit_reason_code_in, $credit_reason_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);
        return $response;
    }

    /**
     * Operation customerSearchAvailableCreditsWithHttpInfo
     *
     * Gets the unapplied credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $credit_reason_code Filter on CRD-RSN using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $credit_reason_code_not_equal Filter on CRD-RSN using &#39;NotEqual&#39; operator (optional)
     * @param  string $credit_reason_code_less Filter on CRD-RSN using &#39;Less&#39; operator (optional)
     * @param  string $credit_reason_code_less_or_equal Filter on CRD-RSN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_greater Filter on CRD-RSN using &#39;Greater&#39; operator (optional)
     * @param  string $credit_reason_code_greater_or_equal Filter on CRD-RSN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_is_null Filter on CRD-RSN using &#39;IsNull&#39; operator (optional)
     * @param  string $credit_reason_code_is_not_null Filter on CRD-RSN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $credit_reason_code_like Filter on CRD-RSN using &#39;Like&#39; operator (optional)
     * @param  string $credit_reason_code_not_like Filter on CRD-RSN using &#39;NotLike&#39; operator (optional)
     * @param  string $credit_reason_code_contains Filter on CRD-RSN using &#39;Contains&#39; operator (optional)
     * @param  string $credit_reason_code_not_contains Filter on CRD-RSN using &#39;NotContains&#39; operator (optional)
     * @param  string $credit_reason_code_starts_with Filter on CRD-RSN using &#39;StartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_starts_with Filter on CRD-RSN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_ends_with Filter on CRD-RSN using &#39;EndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_ends_with Filter on CRD-RSN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_in Filter on CRD-RSN using &#39;In&#39; operator (optional)
     * @param  string $credit_reason_code_between Filter on CRD-RSN using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\UnappliedCredit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchAvailableCreditsWithHttpInfo($customer_number, $credit_reason_code = null, $billing_organization_code = null, $credit_reason_code_not_equal = null, $credit_reason_code_less = null, $credit_reason_code_less_or_equal = null, $credit_reason_code_greater = null, $credit_reason_code_greater_or_equal = null, $credit_reason_code_is_null = null, $credit_reason_code_is_not_null = null, $credit_reason_code_like = null, $credit_reason_code_not_like = null, $credit_reason_code_contains = null, $credit_reason_code_not_contains = null, $credit_reason_code_starts_with = null, $credit_reason_code_not_starts_with = null, $credit_reason_code_ends_with = null, $credit_reason_code_not_ends_with = null, $credit_reason_code_in = null, $credit_reason_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\UnappliedCredit[]';
        $request = $this->customerSearchAvailableCreditsRequest($customer_number, $credit_reason_code, $billing_organization_code, $credit_reason_code_not_equal, $credit_reason_code_less, $credit_reason_code_less_or_equal, $credit_reason_code_greater, $credit_reason_code_greater_or_equal, $credit_reason_code_is_null, $credit_reason_code_is_not_null, $credit_reason_code_like, $credit_reason_code_not_like, $credit_reason_code_contains, $credit_reason_code_not_contains, $credit_reason_code_starts_with, $credit_reason_code_not_starts_with, $credit_reason_code_ends_with, $credit_reason_code_not_ends_with, $credit_reason_code_in, $credit_reason_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\UnappliedCredit[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchAvailableCreditsAsync
     *
     * Gets the unapplied credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $credit_reason_code Filter on CRD-RSN using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $credit_reason_code_not_equal Filter on CRD-RSN using &#39;NotEqual&#39; operator (optional)
     * @param  string $credit_reason_code_less Filter on CRD-RSN using &#39;Less&#39; operator (optional)
     * @param  string $credit_reason_code_less_or_equal Filter on CRD-RSN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_greater Filter on CRD-RSN using &#39;Greater&#39; operator (optional)
     * @param  string $credit_reason_code_greater_or_equal Filter on CRD-RSN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_is_null Filter on CRD-RSN using &#39;IsNull&#39; operator (optional)
     * @param  string $credit_reason_code_is_not_null Filter on CRD-RSN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $credit_reason_code_like Filter on CRD-RSN using &#39;Like&#39; operator (optional)
     * @param  string $credit_reason_code_not_like Filter on CRD-RSN using &#39;NotLike&#39; operator (optional)
     * @param  string $credit_reason_code_contains Filter on CRD-RSN using &#39;Contains&#39; operator (optional)
     * @param  string $credit_reason_code_not_contains Filter on CRD-RSN using &#39;NotContains&#39; operator (optional)
     * @param  string $credit_reason_code_starts_with Filter on CRD-RSN using &#39;StartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_starts_with Filter on CRD-RSN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_ends_with Filter on CRD-RSN using &#39;EndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_ends_with Filter on CRD-RSN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_in Filter on CRD-RSN using &#39;In&#39; operator (optional)
     * @param  string $credit_reason_code_between Filter on CRD-RSN using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAvailableCreditsAsync($customer_number, $credit_reason_code = null, $billing_organization_code = null, $credit_reason_code_not_equal = null, $credit_reason_code_less = null, $credit_reason_code_less_or_equal = null, $credit_reason_code_greater = null, $credit_reason_code_greater_or_equal = null, $credit_reason_code_is_null = null, $credit_reason_code_is_not_null = null, $credit_reason_code_like = null, $credit_reason_code_not_like = null, $credit_reason_code_contains = null, $credit_reason_code_not_contains = null, $credit_reason_code_starts_with = null, $credit_reason_code_not_starts_with = null, $credit_reason_code_ends_with = null, $credit_reason_code_not_ends_with = null, $credit_reason_code_in = null, $credit_reason_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        return $this->customerSearchAvailableCreditsAsyncWithHttpInfo($customer_number, $credit_reason_code, $billing_organization_code, $credit_reason_code_not_equal, $credit_reason_code_less, $credit_reason_code_less_or_equal, $credit_reason_code_greater, $credit_reason_code_greater_or_equal, $credit_reason_code_is_null, $credit_reason_code_is_not_null, $credit_reason_code_like, $credit_reason_code_not_like, $credit_reason_code_contains, $credit_reason_code_not_contains, $credit_reason_code_starts_with, $credit_reason_code_not_starts_with, $credit_reason_code_ends_with, $credit_reason_code_not_ends_with, $credit_reason_code_in, $credit_reason_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerSearchAvailableCreditsAsyncWithHttpInfo
     *
     * Gets the unapplied credits available on the customers account.
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $credit_reason_code Filter on CRD-RSN using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $credit_reason_code_not_equal Filter on CRD-RSN using &#39;NotEqual&#39; operator (optional)
     * @param  string $credit_reason_code_less Filter on CRD-RSN using &#39;Less&#39; operator (optional)
     * @param  string $credit_reason_code_less_or_equal Filter on CRD-RSN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_greater Filter on CRD-RSN using &#39;Greater&#39; operator (optional)
     * @param  string $credit_reason_code_greater_or_equal Filter on CRD-RSN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_is_null Filter on CRD-RSN using &#39;IsNull&#39; operator (optional)
     * @param  string $credit_reason_code_is_not_null Filter on CRD-RSN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $credit_reason_code_like Filter on CRD-RSN using &#39;Like&#39; operator (optional)
     * @param  string $credit_reason_code_not_like Filter on CRD-RSN using &#39;NotLike&#39; operator (optional)
     * @param  string $credit_reason_code_contains Filter on CRD-RSN using &#39;Contains&#39; operator (optional)
     * @param  string $credit_reason_code_not_contains Filter on CRD-RSN using &#39;NotContains&#39; operator (optional)
     * @param  string $credit_reason_code_starts_with Filter on CRD-RSN using &#39;StartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_starts_with Filter on CRD-RSN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_ends_with Filter on CRD-RSN using &#39;EndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_ends_with Filter on CRD-RSN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_in Filter on CRD-RSN using &#39;In&#39; operator (optional)
     * @param  string $credit_reason_code_between Filter on CRD-RSN using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAvailableCreditsAsyncWithHttpInfo($customer_number, $credit_reason_code = null, $billing_organization_code = null, $credit_reason_code_not_equal = null, $credit_reason_code_less = null, $credit_reason_code_less_or_equal = null, $credit_reason_code_greater = null, $credit_reason_code_greater_or_equal = null, $credit_reason_code_is_null = null, $credit_reason_code_is_not_null = null, $credit_reason_code_like = null, $credit_reason_code_not_like = null, $credit_reason_code_contains = null, $credit_reason_code_not_contains = null, $credit_reason_code_starts_with = null, $credit_reason_code_not_starts_with = null, $credit_reason_code_ends_with = null, $credit_reason_code_not_ends_with = null, $credit_reason_code_in = null, $credit_reason_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\UnappliedCredit[]';
        $request = $this->customerSearchAvailableCreditsRequest($customer_number, $credit_reason_code, $billing_organization_code, $credit_reason_code_not_equal, $credit_reason_code_less, $credit_reason_code_less_or_equal, $credit_reason_code_greater, $credit_reason_code_greater_or_equal, $credit_reason_code_is_null, $credit_reason_code_is_not_null, $credit_reason_code_like, $credit_reason_code_not_like, $credit_reason_code_contains, $credit_reason_code_not_contains, $credit_reason_code_starts_with, $credit_reason_code_not_starts_with, $credit_reason_code_ends_with, $credit_reason_code_not_ends_with, $credit_reason_code_in, $credit_reason_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerSearchAvailableCredits'
     *
     * @param  string $customer_number An Advantage customer number. (required)
     * @param  string $credit_reason_code Filter on CRD-RSN using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $credit_reason_code_not_equal Filter on CRD-RSN using &#39;NotEqual&#39; operator (optional)
     * @param  string $credit_reason_code_less Filter on CRD-RSN using &#39;Less&#39; operator (optional)
     * @param  string $credit_reason_code_less_or_equal Filter on CRD-RSN using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_greater Filter on CRD-RSN using &#39;Greater&#39; operator (optional)
     * @param  string $credit_reason_code_greater_or_equal Filter on CRD-RSN using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $credit_reason_code_is_null Filter on CRD-RSN using &#39;IsNull&#39; operator (optional)
     * @param  string $credit_reason_code_is_not_null Filter on CRD-RSN using &#39;IsNotNull&#39; operator (optional)
     * @param  string $credit_reason_code_like Filter on CRD-RSN using &#39;Like&#39; operator (optional)
     * @param  string $credit_reason_code_not_like Filter on CRD-RSN using &#39;NotLike&#39; operator (optional)
     * @param  string $credit_reason_code_contains Filter on CRD-RSN using &#39;Contains&#39; operator (optional)
     * @param  string $credit_reason_code_not_contains Filter on CRD-RSN using &#39;NotContains&#39; operator (optional)
     * @param  string $credit_reason_code_starts_with Filter on CRD-RSN using &#39;StartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_starts_with Filter on CRD-RSN using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $credit_reason_code_ends_with Filter on CRD-RSN using &#39;EndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_not_ends_with Filter on CRD-RSN using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $credit_reason_code_in Filter on CRD-RSN using &#39;In&#39; operator (optional)
     * @param  string $credit_reason_code_between Filter on CRD-RSN using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchAvailableCreditsRequest($customer_number, $credit_reason_code = null, $billing_organization_code = null, $credit_reason_code_not_equal = null, $credit_reason_code_less = null, $credit_reason_code_less_or_equal = null, $credit_reason_code_greater = null, $credit_reason_code_greater_or_equal = null, $credit_reason_code_is_null = null, $credit_reason_code_is_not_null = null, $credit_reason_code_like = null, $credit_reason_code_not_like = null, $credit_reason_code_contains = null, $credit_reason_code_not_contains = null, $credit_reason_code_starts_with = null, $credit_reason_code_not_starts_with = null, $credit_reason_code_ends_with = null, $credit_reason_code_not_ends_with = null, $credit_reason_code_in = null, $credit_reason_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerSearchAvailableCredits'
            );
        }

        $resourcePath = '/customers/{customerNumber}/available-credits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($credit_reason_code !== null) {
            $queryParams['CreditReasonCode'] = ObjectSerializer::toQueryValue($credit_reason_code);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($credit_reason_code_not_equal !== null) {
            $queryParams['CreditReasonCode.NotEqual'] = ObjectSerializer::toQueryValue($credit_reason_code_not_equal);
        }
        // query params
        if ($credit_reason_code_less !== null) {
            $queryParams['CreditReasonCode.Less'] = ObjectSerializer::toQueryValue($credit_reason_code_less);
        }
        // query params
        if ($credit_reason_code_less_or_equal !== null) {
            $queryParams['CreditReasonCode.LessOrEqual'] = ObjectSerializer::toQueryValue($credit_reason_code_less_or_equal);
        }
        // query params
        if ($credit_reason_code_greater !== null) {
            $queryParams['CreditReasonCode.Greater'] = ObjectSerializer::toQueryValue($credit_reason_code_greater);
        }
        // query params
        if ($credit_reason_code_greater_or_equal !== null) {
            $queryParams['CreditReasonCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($credit_reason_code_greater_or_equal);
        }
        // query params
        if ($credit_reason_code_is_null !== null) {
            $queryParams['CreditReasonCode.IsNull'] = ObjectSerializer::toQueryValue($credit_reason_code_is_null);
        }
        // query params
        if ($credit_reason_code_is_not_null !== null) {
            $queryParams['CreditReasonCode.IsNotNull'] = ObjectSerializer::toQueryValue($credit_reason_code_is_not_null);
        }
        // query params
        if ($credit_reason_code_like !== null) {
            $queryParams['CreditReasonCode.Like'] = ObjectSerializer::toQueryValue($credit_reason_code_like);
        }
        // query params
        if ($credit_reason_code_not_like !== null) {
            $queryParams['CreditReasonCode.NotLike'] = ObjectSerializer::toQueryValue($credit_reason_code_not_like);
        }
        // query params
        if ($credit_reason_code_contains !== null) {
            $queryParams['CreditReasonCode.Contains'] = ObjectSerializer::toQueryValue($credit_reason_code_contains);
        }
        // query params
        if ($credit_reason_code_not_contains !== null) {
            $queryParams['CreditReasonCode.NotContains'] = ObjectSerializer::toQueryValue($credit_reason_code_not_contains);
        }
        // query params
        if ($credit_reason_code_starts_with !== null) {
            $queryParams['CreditReasonCode.StartsWith'] = ObjectSerializer::toQueryValue($credit_reason_code_starts_with);
        }
        // query params
        if ($credit_reason_code_not_starts_with !== null) {
            $queryParams['CreditReasonCode.NotStartsWith'] = ObjectSerializer::toQueryValue($credit_reason_code_not_starts_with);
        }
        // query params
        if ($credit_reason_code_ends_with !== null) {
            $queryParams['CreditReasonCode.EndsWith'] = ObjectSerializer::toQueryValue($credit_reason_code_ends_with);
        }
        // query params
        if ($credit_reason_code_not_ends_with !== null) {
            $queryParams['CreditReasonCode.NotEndsWith'] = ObjectSerializer::toQueryValue($credit_reason_code_not_ends_with);
        }
        // query params
        if ($credit_reason_code_in !== null) {
            $queryParams['CreditReasonCode.In'] = ObjectSerializer::toQueryValue($credit_reason_code_in);
        }
        // query params
        if ($credit_reason_code_between !== null) {
            $queryParams['CreditReasonCode.Between'] = ObjectSerializer::toQueryValue($credit_reason_code_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearchOrderedForProducts
     *
     * @param  string $customer_number customer_number (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultPurchaseHistoryItem
     */
    public function customerSearchOrderedForProducts($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        list($response) = $this->customerSearchOrderedForProductsWithHttpInfo($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);
        return $response;
    }

    /**
     * Operation customerSearchOrderedForProductsWithHttpInfo
     *
     * @param  string $customer_number (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultPurchaseHistoryItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchOrderedForProductsWithHttpInfo($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPurchaseHistoryItem';
        $request = $this->customerSearchOrderedForProductsRequest($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultPurchaseHistoryItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchOrderedForProductsAsync
     *
     * 
     *
     * @param  string $customer_number (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchOrderedForProductsAsync($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        return $this->customerSearchOrderedForProductsAsyncWithHttpInfo($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerSearchOrderedForProductsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $customer_number (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchOrderedForProductsAsyncWithHttpInfo($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPurchaseHistoryItem';
        $request = $this->customerSearchOrderedForProductsRequest($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerSearchOrderedForProducts'
     *
     * @param  string $customer_number (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchOrderedForProductsRequest($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerSearchOrderedForProducts'
            );
        }

        $resourcePath = '/customers/{customerNumber}/ordered-for-products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['ItemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($product_format_code !== null) {
            $queryParams['ProductFormatCode'] = ObjectSerializer::toQueryValue($product_format_code);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($order_date !== null) {
            $queryParams['OrderDate'] = ObjectSerializer::toQueryValue($order_date);
        }
        // query params
        if ($bill_to_customer !== null) {
            $queryParams['BillToCustomer'] = ObjectSerializer::toQueryValue($bill_to_customer);
        }
        // query params
        if ($ship_to_customer !== null) {
            $queryParams['ShipToCustomer'] = ObjectSerializer::toQueryValue($ship_to_customer);
        }
        // query params
        if ($item_number_not_equal !== null) {
            $queryParams['ItemNumber.NotEqual'] = ObjectSerializer::toQueryValue($item_number_not_equal);
        }
        // query params
        if ($item_number_less !== null) {
            $queryParams['ItemNumber.Less'] = ObjectSerializer::toQueryValue($item_number_less);
        }
        // query params
        if ($item_number_less_or_equal !== null) {
            $queryParams['ItemNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($item_number_less_or_equal);
        }
        // query params
        if ($item_number_greater !== null) {
            $queryParams['ItemNumber.Greater'] = ObjectSerializer::toQueryValue($item_number_greater);
        }
        // query params
        if ($item_number_greater_or_equal !== null) {
            $queryParams['ItemNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($item_number_greater_or_equal);
        }
        // query params
        if ($item_number_is_null !== null) {
            $queryParams['ItemNumber.IsNull'] = ObjectSerializer::toQueryValue($item_number_is_null);
        }
        // query params
        if ($item_number_is_not_null !== null) {
            $queryParams['ItemNumber.IsNotNull'] = ObjectSerializer::toQueryValue($item_number_is_not_null);
        }
        // query params
        if ($item_number_like !== null) {
            $queryParams['ItemNumber.Like'] = ObjectSerializer::toQueryValue($item_number_like);
        }
        // query params
        if ($item_number_not_like !== null) {
            $queryParams['ItemNumber.NotLike'] = ObjectSerializer::toQueryValue($item_number_not_like);
        }
        // query params
        if ($item_number_contains !== null) {
            $queryParams['ItemNumber.Contains'] = ObjectSerializer::toQueryValue($item_number_contains);
        }
        // query params
        if ($item_number_not_contains !== null) {
            $queryParams['ItemNumber.NotContains'] = ObjectSerializer::toQueryValue($item_number_not_contains);
        }
        // query params
        if ($item_number_starts_with !== null) {
            $queryParams['ItemNumber.StartsWith'] = ObjectSerializer::toQueryValue($item_number_starts_with);
        }
        // query params
        if ($item_number_not_starts_with !== null) {
            $queryParams['ItemNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($item_number_not_starts_with);
        }
        // query params
        if ($item_number_ends_with !== null) {
            $queryParams['ItemNumber.EndsWith'] = ObjectSerializer::toQueryValue($item_number_ends_with);
        }
        // query params
        if ($item_number_not_ends_with !== null) {
            $queryParams['ItemNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($item_number_not_ends_with);
        }
        // query params
        if ($item_number_in !== null) {
            $queryParams['ItemNumber.In'] = ObjectSerializer::toQueryValue($item_number_in);
        }
        // query params
        if ($item_number_between !== null) {
            $queryParams['ItemNumber.Between'] = ObjectSerializer::toQueryValue($item_number_between);
        }
        // query params
        if ($product_format_code_not_equal !== null) {
            $queryParams['ProductFormatCode.NotEqual'] = ObjectSerializer::toQueryValue($product_format_code_not_equal);
        }
        // query params
        if ($product_format_code_less !== null) {
            $queryParams['ProductFormatCode.Less'] = ObjectSerializer::toQueryValue($product_format_code_less);
        }
        // query params
        if ($product_format_code_less_or_equal !== null) {
            $queryParams['ProductFormatCode.LessOrEqual'] = ObjectSerializer::toQueryValue($product_format_code_less_or_equal);
        }
        // query params
        if ($product_format_code_greater !== null) {
            $queryParams['ProductFormatCode.Greater'] = ObjectSerializer::toQueryValue($product_format_code_greater);
        }
        // query params
        if ($product_format_code_greater_or_equal !== null) {
            $queryParams['ProductFormatCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($product_format_code_greater_or_equal);
        }
        // query params
        if ($product_format_code_is_null !== null) {
            $queryParams['ProductFormatCode.IsNull'] = ObjectSerializer::toQueryValue($product_format_code_is_null);
        }
        // query params
        if ($product_format_code_is_not_null !== null) {
            $queryParams['ProductFormatCode.IsNotNull'] = ObjectSerializer::toQueryValue($product_format_code_is_not_null);
        }
        // query params
        if ($product_format_code_like !== null) {
            $queryParams['ProductFormatCode.Like'] = ObjectSerializer::toQueryValue($product_format_code_like);
        }
        // query params
        if ($product_format_code_not_like !== null) {
            $queryParams['ProductFormatCode.NotLike'] = ObjectSerializer::toQueryValue($product_format_code_not_like);
        }
        // query params
        if ($product_format_code_contains !== null) {
            $queryParams['ProductFormatCode.Contains'] = ObjectSerializer::toQueryValue($product_format_code_contains);
        }
        // query params
        if ($product_format_code_not_contains !== null) {
            $queryParams['ProductFormatCode.NotContains'] = ObjectSerializer::toQueryValue($product_format_code_not_contains);
        }
        // query params
        if ($product_format_code_starts_with !== null) {
            $queryParams['ProductFormatCode.StartsWith'] = ObjectSerializer::toQueryValue($product_format_code_starts_with);
        }
        // query params
        if ($product_format_code_not_starts_with !== null) {
            $queryParams['ProductFormatCode.NotStartsWith'] = ObjectSerializer::toQueryValue($product_format_code_not_starts_with);
        }
        // query params
        if ($product_format_code_ends_with !== null) {
            $queryParams['ProductFormatCode.EndsWith'] = ObjectSerializer::toQueryValue($product_format_code_ends_with);
        }
        // query params
        if ($product_format_code_not_ends_with !== null) {
            $queryParams['ProductFormatCode.NotEndsWith'] = ObjectSerializer::toQueryValue($product_format_code_not_ends_with);
        }
        // query params
        if ($product_format_code_in !== null) {
            $queryParams['ProductFormatCode.In'] = ObjectSerializer::toQueryValue($product_format_code_in);
        }
        // query params
        if ($product_format_code_between !== null) {
            $queryParams['ProductFormatCode.Between'] = ObjectSerializer::toQueryValue($product_format_code_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }
        // query params
        if ($order_date_not_equal !== null) {
            $queryParams['OrderDate.NotEqual'] = ObjectSerializer::toQueryValue($order_date_not_equal);
        }
        // query params
        if ($order_date_less !== null) {
            $queryParams['OrderDate.Less'] = ObjectSerializer::toQueryValue($order_date_less);
        }
        // query params
        if ($order_date_less_or_equal !== null) {
            $queryParams['OrderDate.LessOrEqual'] = ObjectSerializer::toQueryValue($order_date_less_or_equal);
        }
        // query params
        if ($order_date_greater !== null) {
            $queryParams['OrderDate.Greater'] = ObjectSerializer::toQueryValue($order_date_greater);
        }
        // query params
        if ($order_date_greater_or_equal !== null) {
            $queryParams['OrderDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_date_greater_or_equal);
        }
        // query params
        if ($order_date_is_null !== null) {
            $queryParams['OrderDate.IsNull'] = ObjectSerializer::toQueryValue($order_date_is_null);
        }
        // query params
        if ($order_date_is_not_null !== null) {
            $queryParams['OrderDate.IsNotNull'] = ObjectSerializer::toQueryValue($order_date_is_not_null);
        }
        // query params
        if ($order_date_like !== null) {
            $queryParams['OrderDate.Like'] = ObjectSerializer::toQueryValue($order_date_like);
        }
        // query params
        if ($order_date_not_like !== null) {
            $queryParams['OrderDate.NotLike'] = ObjectSerializer::toQueryValue($order_date_not_like);
        }
        // query params
        if ($order_date_contains !== null) {
            $queryParams['OrderDate.Contains'] = ObjectSerializer::toQueryValue($order_date_contains);
        }
        // query params
        if ($order_date_not_contains !== null) {
            $queryParams['OrderDate.NotContains'] = ObjectSerializer::toQueryValue($order_date_not_contains);
        }
        // query params
        if ($order_date_starts_with !== null) {
            $queryParams['OrderDate.StartsWith'] = ObjectSerializer::toQueryValue($order_date_starts_with);
        }
        // query params
        if ($order_date_not_starts_with !== null) {
            $queryParams['OrderDate.NotStartsWith'] = ObjectSerializer::toQueryValue($order_date_not_starts_with);
        }
        // query params
        if ($order_date_ends_with !== null) {
            $queryParams['OrderDate.EndsWith'] = ObjectSerializer::toQueryValue($order_date_ends_with);
        }
        // query params
        if ($order_date_not_ends_with !== null) {
            $queryParams['OrderDate.NotEndsWith'] = ObjectSerializer::toQueryValue($order_date_not_ends_with);
        }
        // query params
        if ($order_date_in !== null) {
            $queryParams['OrderDate.In'] = ObjectSerializer::toQueryValue($order_date_in);
        }
        // query params
        if ($order_date_between !== null) {
            $queryParams['OrderDate.Between'] = ObjectSerializer::toQueryValue($order_date_between);
        }
        // query params
        if ($bill_to_customer_not_equal !== null) {
            $queryParams['BillToCustomer.NotEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_not_equal);
        }
        // query params
        if ($bill_to_customer_less !== null) {
            $queryParams['BillToCustomer.Less'] = ObjectSerializer::toQueryValue($bill_to_customer_less);
        }
        // query params
        if ($bill_to_customer_less_or_equal !== null) {
            $queryParams['BillToCustomer.LessOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_less_or_equal);
        }
        // query params
        if ($bill_to_customer_greater !== null) {
            $queryParams['BillToCustomer.Greater'] = ObjectSerializer::toQueryValue($bill_to_customer_greater);
        }
        // query params
        if ($bill_to_customer_greater_or_equal !== null) {
            $queryParams['BillToCustomer.GreaterOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_greater_or_equal);
        }
        // query params
        if ($bill_to_customer_is_null !== null) {
            $queryParams['BillToCustomer.IsNull'] = ObjectSerializer::toQueryValue($bill_to_customer_is_null);
        }
        // query params
        if ($bill_to_customer_is_not_null !== null) {
            $queryParams['BillToCustomer.IsNotNull'] = ObjectSerializer::toQueryValue($bill_to_customer_is_not_null);
        }
        // query params
        if ($bill_to_customer_like !== null) {
            $queryParams['BillToCustomer.Like'] = ObjectSerializer::toQueryValue($bill_to_customer_like);
        }
        // query params
        if ($bill_to_customer_not_like !== null) {
            $queryParams['BillToCustomer.NotLike'] = ObjectSerializer::toQueryValue($bill_to_customer_not_like);
        }
        // query params
        if ($bill_to_customer_contains !== null) {
            $queryParams['BillToCustomer.Contains'] = ObjectSerializer::toQueryValue($bill_to_customer_contains);
        }
        // query params
        if ($bill_to_customer_not_contains !== null) {
            $queryParams['BillToCustomer.NotContains'] = ObjectSerializer::toQueryValue($bill_to_customer_not_contains);
        }
        // query params
        if ($bill_to_customer_starts_with !== null) {
            $queryParams['BillToCustomer.StartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_starts_with);
        }
        // query params
        if ($bill_to_customer_not_starts_with !== null) {
            $queryParams['BillToCustomer.NotStartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_not_starts_with);
        }
        // query params
        if ($bill_to_customer_ends_with !== null) {
            $queryParams['BillToCustomer.EndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_ends_with);
        }
        // query params
        if ($bill_to_customer_not_ends_with !== null) {
            $queryParams['BillToCustomer.NotEndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_not_ends_with);
        }
        // query params
        if ($bill_to_customer_in !== null) {
            $queryParams['BillToCustomer.In'] = ObjectSerializer::toQueryValue($bill_to_customer_in);
        }
        // query params
        if ($bill_to_customer_between !== null) {
            $queryParams['BillToCustomer.Between'] = ObjectSerializer::toQueryValue($bill_to_customer_between);
        }
        // query params
        if ($ship_to_customer_not_equal !== null) {
            $queryParams['ShipToCustomer.NotEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_not_equal);
        }
        // query params
        if ($ship_to_customer_less !== null) {
            $queryParams['ShipToCustomer.Less'] = ObjectSerializer::toQueryValue($ship_to_customer_less);
        }
        // query params
        if ($ship_to_customer_less_or_equal !== null) {
            $queryParams['ShipToCustomer.LessOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_less_or_equal);
        }
        // query params
        if ($ship_to_customer_greater !== null) {
            $queryParams['ShipToCustomer.Greater'] = ObjectSerializer::toQueryValue($ship_to_customer_greater);
        }
        // query params
        if ($ship_to_customer_greater_or_equal !== null) {
            $queryParams['ShipToCustomer.GreaterOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_greater_or_equal);
        }
        // query params
        if ($ship_to_customer_is_null !== null) {
            $queryParams['ShipToCustomer.IsNull'] = ObjectSerializer::toQueryValue($ship_to_customer_is_null);
        }
        // query params
        if ($ship_to_customer_is_not_null !== null) {
            $queryParams['ShipToCustomer.IsNotNull'] = ObjectSerializer::toQueryValue($ship_to_customer_is_not_null);
        }
        // query params
        if ($ship_to_customer_like !== null) {
            $queryParams['ShipToCustomer.Like'] = ObjectSerializer::toQueryValue($ship_to_customer_like);
        }
        // query params
        if ($ship_to_customer_not_like !== null) {
            $queryParams['ShipToCustomer.NotLike'] = ObjectSerializer::toQueryValue($ship_to_customer_not_like);
        }
        // query params
        if ($ship_to_customer_contains !== null) {
            $queryParams['ShipToCustomer.Contains'] = ObjectSerializer::toQueryValue($ship_to_customer_contains);
        }
        // query params
        if ($ship_to_customer_not_contains !== null) {
            $queryParams['ShipToCustomer.NotContains'] = ObjectSerializer::toQueryValue($ship_to_customer_not_contains);
        }
        // query params
        if ($ship_to_customer_starts_with !== null) {
            $queryParams['ShipToCustomer.StartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_starts_with);
        }
        // query params
        if ($ship_to_customer_not_starts_with !== null) {
            $queryParams['ShipToCustomer.NotStartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_not_starts_with);
        }
        // query params
        if ($ship_to_customer_ends_with !== null) {
            $queryParams['ShipToCustomer.EndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_ends_with);
        }
        // query params
        if ($ship_to_customer_not_ends_with !== null) {
            $queryParams['ShipToCustomer.NotEndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_not_ends_with);
        }
        // query params
        if ($ship_to_customer_in !== null) {
            $queryParams['ShipToCustomer.In'] = ObjectSerializer::toQueryValue($ship_to_customer_in);
        }
        // query params
        if ($ship_to_customer_between !== null) {
            $queryParams['ShipToCustomer.Between'] = ObjectSerializer::toQueryValue($ship_to_customer_between);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearchOrderedProducts
     *
     * Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultPurchaseHistoryItem
     */
    public function customerSearchOrderedProducts($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        list($response) = $this->customerSearchOrderedProductsWithHttpInfo($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);
        return $response;
    }

    /**
     * Operation customerSearchOrderedProductsWithHttpInfo
     *
     * Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultPurchaseHistoryItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchOrderedProductsWithHttpInfo($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPurchaseHistoryItem';
        $request = $this->customerSearchOrderedProductsRequest($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultPurchaseHistoryItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchOrderedProductsAsync
     *
     * Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchOrderedProductsAsync($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        return $this->customerSearchOrderedProductsAsyncWithHttpInfo($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerSearchOrderedProductsAsyncWithHttpInfo
     *
     * Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change.
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchOrderedProductsAsyncWithHttpInfo($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPurchaseHistoryItem';
        $request = $this->customerSearchOrderedProductsRequest($customer_number, $pager_skip, $pager_take, $item_number, $product_format_code, $billing_organization_code, $order_date, $bill_to_customer, $ship_to_customer, $item_number_not_equal, $item_number_less, $item_number_less_or_equal, $item_number_greater, $item_number_greater_or_equal, $item_number_is_null, $item_number_is_not_null, $item_number_like, $item_number_not_like, $item_number_contains, $item_number_not_contains, $item_number_starts_with, $item_number_not_starts_with, $item_number_ends_with, $item_number_not_ends_with, $item_number_in, $item_number_between, $product_format_code_not_equal, $product_format_code_less, $product_format_code_less_or_equal, $product_format_code_greater, $product_format_code_greater_or_equal, $product_format_code_is_null, $product_format_code_is_not_null, $product_format_code_like, $product_format_code_not_like, $product_format_code_contains, $product_format_code_not_contains, $product_format_code_starts_with, $product_format_code_not_starts_with, $product_format_code_ends_with, $product_format_code_not_ends_with, $product_format_code_in, $product_format_code_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between, $order_date_not_equal, $order_date_less, $order_date_less_or_equal, $order_date_greater, $order_date_greater_or_equal, $order_date_is_null, $order_date_is_not_null, $order_date_like, $order_date_not_like, $order_date_contains, $order_date_not_contains, $order_date_starts_with, $order_date_not_starts_with, $order_date_ends_with, $order_date_not_ends_with, $order_date_in, $order_date_between, $bill_to_customer_not_equal, $bill_to_customer_less, $bill_to_customer_less_or_equal, $bill_to_customer_greater, $bill_to_customer_greater_or_equal, $bill_to_customer_is_null, $bill_to_customer_is_not_null, $bill_to_customer_like, $bill_to_customer_not_like, $bill_to_customer_contains, $bill_to_customer_not_contains, $bill_to_customer_starts_with, $bill_to_customer_not_starts_with, $bill_to_customer_ends_with, $bill_to_customer_not_ends_with, $bill_to_customer_in, $bill_to_customer_between, $ship_to_customer_not_equal, $ship_to_customer_less, $ship_to_customer_less_or_equal, $ship_to_customer_greater, $ship_to_customer_greater_or_equal, $ship_to_customer_is_null, $ship_to_customer_is_not_null, $ship_to_customer_like, $ship_to_customer_not_like, $ship_to_customer_contains, $ship_to_customer_not_contains, $ship_to_customer_starts_with, $ship_to_customer_not_starts_with, $ship_to_customer_ends_with, $ship_to_customer_not_ends_with, $ship_to_customer_in, $ship_to_customer_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerSearchOrderedProducts'
     *
     * @param  string $customer_number The Advantage customer number. (required)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $item_number Filter on ITM-NUM using &#39;Equal&#39; operator (optional)
     * @param  string $product_format_code Filter on FOR-MAT using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_date Filter on ORDR-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $ship_to_customer Filter on SHP-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $item_number_not_equal Filter on ITM-NUM using &#39;NotEqual&#39; operator (optional)
     * @param  string $item_number_less Filter on ITM-NUM using &#39;Less&#39; operator (optional)
     * @param  string $item_number_less_or_equal Filter on ITM-NUM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $item_number_greater Filter on ITM-NUM using &#39;Greater&#39; operator (optional)
     * @param  string $item_number_greater_or_equal Filter on ITM-NUM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $item_number_is_null Filter on ITM-NUM using &#39;IsNull&#39; operator (optional)
     * @param  string $item_number_is_not_null Filter on ITM-NUM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $item_number_like Filter on ITM-NUM using &#39;Like&#39; operator (optional)
     * @param  string $item_number_not_like Filter on ITM-NUM using &#39;NotLike&#39; operator (optional)
     * @param  string $item_number_contains Filter on ITM-NUM using &#39;Contains&#39; operator (optional)
     * @param  string $item_number_not_contains Filter on ITM-NUM using &#39;NotContains&#39; operator (optional)
     * @param  string $item_number_starts_with Filter on ITM-NUM using &#39;StartsWith&#39; operator (optional)
     * @param  string $item_number_not_starts_with Filter on ITM-NUM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $item_number_ends_with Filter on ITM-NUM using &#39;EndsWith&#39; operator (optional)
     * @param  string $item_number_not_ends_with Filter on ITM-NUM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $item_number_in Filter on ITM-NUM using &#39;In&#39; operator (optional)
     * @param  string $item_number_between Filter on ITM-NUM using &#39;Between&#39; operator (optional)
     * @param  string $product_format_code_not_equal Filter on FOR-MAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $product_format_code_less Filter on FOR-MAT using &#39;Less&#39; operator (optional)
     * @param  string $product_format_code_less_or_equal Filter on FOR-MAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $product_format_code_greater Filter on FOR-MAT using &#39;Greater&#39; operator (optional)
     * @param  string $product_format_code_greater_or_equal Filter on FOR-MAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $product_format_code_is_null Filter on FOR-MAT using &#39;IsNull&#39; operator (optional)
     * @param  string $product_format_code_is_not_null Filter on FOR-MAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $product_format_code_like Filter on FOR-MAT using &#39;Like&#39; operator (optional)
     * @param  string $product_format_code_not_like Filter on FOR-MAT using &#39;NotLike&#39; operator (optional)
     * @param  string $product_format_code_contains Filter on FOR-MAT using &#39;Contains&#39; operator (optional)
     * @param  string $product_format_code_not_contains Filter on FOR-MAT using &#39;NotContains&#39; operator (optional)
     * @param  string $product_format_code_starts_with Filter on FOR-MAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $product_format_code_not_starts_with Filter on FOR-MAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $product_format_code_ends_with Filter on FOR-MAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $product_format_code_not_ends_with Filter on FOR-MAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $product_format_code_in Filter on FOR-MAT using &#39;In&#39; operator (optional)
     * @param  string $product_format_code_between Filter on FOR-MAT using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     * @param  string $order_date_not_equal Filter on ORDR-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_date_less Filter on ORDR-DTE using &#39;Less&#39; operator (optional)
     * @param  string $order_date_less_or_equal Filter on ORDR-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_date_greater Filter on ORDR-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $order_date_greater_or_equal Filter on ORDR-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_date_is_null Filter on ORDR-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $order_date_is_not_null Filter on ORDR-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_date_like Filter on ORDR-DTE using &#39;Like&#39; operator (optional)
     * @param  string $order_date_not_like Filter on ORDR-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $order_date_contains Filter on ORDR-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $order_date_not_contains Filter on ORDR-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $order_date_starts_with Filter on ORDR-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_date_not_starts_with Filter on ORDR-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_date_ends_with Filter on ORDR-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_date_not_ends_with Filter on ORDR-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_date_in Filter on ORDR-DTE using &#39;In&#39; operator (optional)
     * @param  string $order_date_between Filter on ORDR-DTE using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $ship_to_customer_not_equal Filter on SHP-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $ship_to_customer_less Filter on SHP-CTM using &#39;Less&#39; operator (optional)
     * @param  string $ship_to_customer_less_or_equal Filter on SHP-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_greater Filter on SHP-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $ship_to_customer_greater_or_equal Filter on SHP-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $ship_to_customer_is_null Filter on SHP-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $ship_to_customer_is_not_null Filter on SHP-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $ship_to_customer_like Filter on SHP-CTM using &#39;Like&#39; operator (optional)
     * @param  string $ship_to_customer_not_like Filter on SHP-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $ship_to_customer_contains Filter on SHP-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $ship_to_customer_not_contains Filter on SHP-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $ship_to_customer_starts_with Filter on SHP-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_starts_with Filter on SHP-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $ship_to_customer_ends_with Filter on SHP-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_not_ends_with Filter on SHP-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $ship_to_customer_in Filter on SHP-CTM using &#39;In&#39; operator (optional)
     * @param  string $ship_to_customer_between Filter on SHP-CTM using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchOrderedProductsRequest($customer_number, $pager_skip = null, $pager_take = null, $item_number = null, $product_format_code = null, $billing_organization_code = null, $order_date = null, $bill_to_customer = null, $ship_to_customer = null, $item_number_not_equal = null, $item_number_less = null, $item_number_less_or_equal = null, $item_number_greater = null, $item_number_greater_or_equal = null, $item_number_is_null = null, $item_number_is_not_null = null, $item_number_like = null, $item_number_not_like = null, $item_number_contains = null, $item_number_not_contains = null, $item_number_starts_with = null, $item_number_not_starts_with = null, $item_number_ends_with = null, $item_number_not_ends_with = null, $item_number_in = null, $item_number_between = null, $product_format_code_not_equal = null, $product_format_code_less = null, $product_format_code_less_or_equal = null, $product_format_code_greater = null, $product_format_code_greater_or_equal = null, $product_format_code_is_null = null, $product_format_code_is_not_null = null, $product_format_code_like = null, $product_format_code_not_like = null, $product_format_code_contains = null, $product_format_code_not_contains = null, $product_format_code_starts_with = null, $product_format_code_not_starts_with = null, $product_format_code_ends_with = null, $product_format_code_not_ends_with = null, $product_format_code_in = null, $product_format_code_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null, $order_date_not_equal = null, $order_date_less = null, $order_date_less_or_equal = null, $order_date_greater = null, $order_date_greater_or_equal = null, $order_date_is_null = null, $order_date_is_not_null = null, $order_date_like = null, $order_date_not_like = null, $order_date_contains = null, $order_date_not_contains = null, $order_date_starts_with = null, $order_date_not_starts_with = null, $order_date_ends_with = null, $order_date_not_ends_with = null, $order_date_in = null, $order_date_between = null, $bill_to_customer_not_equal = null, $bill_to_customer_less = null, $bill_to_customer_less_or_equal = null, $bill_to_customer_greater = null, $bill_to_customer_greater_or_equal = null, $bill_to_customer_is_null = null, $bill_to_customer_is_not_null = null, $bill_to_customer_like = null, $bill_to_customer_not_like = null, $bill_to_customer_contains = null, $bill_to_customer_not_contains = null, $bill_to_customer_starts_with = null, $bill_to_customer_not_starts_with = null, $bill_to_customer_ends_with = null, $bill_to_customer_not_ends_with = null, $bill_to_customer_in = null, $bill_to_customer_between = null, $ship_to_customer_not_equal = null, $ship_to_customer_less = null, $ship_to_customer_less_or_equal = null, $ship_to_customer_greater = null, $ship_to_customer_greater_or_equal = null, $ship_to_customer_is_null = null, $ship_to_customer_is_not_null = null, $ship_to_customer_like = null, $ship_to_customer_not_like = null, $ship_to_customer_contains = null, $ship_to_customer_not_contains = null, $ship_to_customer_starts_with = null, $ship_to_customer_not_starts_with = null, $ship_to_customer_ends_with = null, $ship_to_customer_not_ends_with = null, $ship_to_customer_in = null, $ship_to_customer_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerSearchOrderedProducts'
            );
        }

        $resourcePath = '/customers/{customerNumber}/ordered-products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['ItemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($product_format_code !== null) {
            $queryParams['ProductFormatCode'] = ObjectSerializer::toQueryValue($product_format_code);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($order_date !== null) {
            $queryParams['OrderDate'] = ObjectSerializer::toQueryValue($order_date);
        }
        // query params
        if ($bill_to_customer !== null) {
            $queryParams['BillToCustomer'] = ObjectSerializer::toQueryValue($bill_to_customer);
        }
        // query params
        if ($ship_to_customer !== null) {
            $queryParams['ShipToCustomer'] = ObjectSerializer::toQueryValue($ship_to_customer);
        }
        // query params
        if ($item_number_not_equal !== null) {
            $queryParams['ItemNumber.NotEqual'] = ObjectSerializer::toQueryValue($item_number_not_equal);
        }
        // query params
        if ($item_number_less !== null) {
            $queryParams['ItemNumber.Less'] = ObjectSerializer::toQueryValue($item_number_less);
        }
        // query params
        if ($item_number_less_or_equal !== null) {
            $queryParams['ItemNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($item_number_less_or_equal);
        }
        // query params
        if ($item_number_greater !== null) {
            $queryParams['ItemNumber.Greater'] = ObjectSerializer::toQueryValue($item_number_greater);
        }
        // query params
        if ($item_number_greater_or_equal !== null) {
            $queryParams['ItemNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($item_number_greater_or_equal);
        }
        // query params
        if ($item_number_is_null !== null) {
            $queryParams['ItemNumber.IsNull'] = ObjectSerializer::toQueryValue($item_number_is_null);
        }
        // query params
        if ($item_number_is_not_null !== null) {
            $queryParams['ItemNumber.IsNotNull'] = ObjectSerializer::toQueryValue($item_number_is_not_null);
        }
        // query params
        if ($item_number_like !== null) {
            $queryParams['ItemNumber.Like'] = ObjectSerializer::toQueryValue($item_number_like);
        }
        // query params
        if ($item_number_not_like !== null) {
            $queryParams['ItemNumber.NotLike'] = ObjectSerializer::toQueryValue($item_number_not_like);
        }
        // query params
        if ($item_number_contains !== null) {
            $queryParams['ItemNumber.Contains'] = ObjectSerializer::toQueryValue($item_number_contains);
        }
        // query params
        if ($item_number_not_contains !== null) {
            $queryParams['ItemNumber.NotContains'] = ObjectSerializer::toQueryValue($item_number_not_contains);
        }
        // query params
        if ($item_number_starts_with !== null) {
            $queryParams['ItemNumber.StartsWith'] = ObjectSerializer::toQueryValue($item_number_starts_with);
        }
        // query params
        if ($item_number_not_starts_with !== null) {
            $queryParams['ItemNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($item_number_not_starts_with);
        }
        // query params
        if ($item_number_ends_with !== null) {
            $queryParams['ItemNumber.EndsWith'] = ObjectSerializer::toQueryValue($item_number_ends_with);
        }
        // query params
        if ($item_number_not_ends_with !== null) {
            $queryParams['ItemNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($item_number_not_ends_with);
        }
        // query params
        if ($item_number_in !== null) {
            $queryParams['ItemNumber.In'] = ObjectSerializer::toQueryValue($item_number_in);
        }
        // query params
        if ($item_number_between !== null) {
            $queryParams['ItemNumber.Between'] = ObjectSerializer::toQueryValue($item_number_between);
        }
        // query params
        if ($product_format_code_not_equal !== null) {
            $queryParams['ProductFormatCode.NotEqual'] = ObjectSerializer::toQueryValue($product_format_code_not_equal);
        }
        // query params
        if ($product_format_code_less !== null) {
            $queryParams['ProductFormatCode.Less'] = ObjectSerializer::toQueryValue($product_format_code_less);
        }
        // query params
        if ($product_format_code_less_or_equal !== null) {
            $queryParams['ProductFormatCode.LessOrEqual'] = ObjectSerializer::toQueryValue($product_format_code_less_or_equal);
        }
        // query params
        if ($product_format_code_greater !== null) {
            $queryParams['ProductFormatCode.Greater'] = ObjectSerializer::toQueryValue($product_format_code_greater);
        }
        // query params
        if ($product_format_code_greater_or_equal !== null) {
            $queryParams['ProductFormatCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($product_format_code_greater_or_equal);
        }
        // query params
        if ($product_format_code_is_null !== null) {
            $queryParams['ProductFormatCode.IsNull'] = ObjectSerializer::toQueryValue($product_format_code_is_null);
        }
        // query params
        if ($product_format_code_is_not_null !== null) {
            $queryParams['ProductFormatCode.IsNotNull'] = ObjectSerializer::toQueryValue($product_format_code_is_not_null);
        }
        // query params
        if ($product_format_code_like !== null) {
            $queryParams['ProductFormatCode.Like'] = ObjectSerializer::toQueryValue($product_format_code_like);
        }
        // query params
        if ($product_format_code_not_like !== null) {
            $queryParams['ProductFormatCode.NotLike'] = ObjectSerializer::toQueryValue($product_format_code_not_like);
        }
        // query params
        if ($product_format_code_contains !== null) {
            $queryParams['ProductFormatCode.Contains'] = ObjectSerializer::toQueryValue($product_format_code_contains);
        }
        // query params
        if ($product_format_code_not_contains !== null) {
            $queryParams['ProductFormatCode.NotContains'] = ObjectSerializer::toQueryValue($product_format_code_not_contains);
        }
        // query params
        if ($product_format_code_starts_with !== null) {
            $queryParams['ProductFormatCode.StartsWith'] = ObjectSerializer::toQueryValue($product_format_code_starts_with);
        }
        // query params
        if ($product_format_code_not_starts_with !== null) {
            $queryParams['ProductFormatCode.NotStartsWith'] = ObjectSerializer::toQueryValue($product_format_code_not_starts_with);
        }
        // query params
        if ($product_format_code_ends_with !== null) {
            $queryParams['ProductFormatCode.EndsWith'] = ObjectSerializer::toQueryValue($product_format_code_ends_with);
        }
        // query params
        if ($product_format_code_not_ends_with !== null) {
            $queryParams['ProductFormatCode.NotEndsWith'] = ObjectSerializer::toQueryValue($product_format_code_not_ends_with);
        }
        // query params
        if ($product_format_code_in !== null) {
            $queryParams['ProductFormatCode.In'] = ObjectSerializer::toQueryValue($product_format_code_in);
        }
        // query params
        if ($product_format_code_between !== null) {
            $queryParams['ProductFormatCode.Between'] = ObjectSerializer::toQueryValue($product_format_code_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }
        // query params
        if ($order_date_not_equal !== null) {
            $queryParams['OrderDate.NotEqual'] = ObjectSerializer::toQueryValue($order_date_not_equal);
        }
        // query params
        if ($order_date_less !== null) {
            $queryParams['OrderDate.Less'] = ObjectSerializer::toQueryValue($order_date_less);
        }
        // query params
        if ($order_date_less_or_equal !== null) {
            $queryParams['OrderDate.LessOrEqual'] = ObjectSerializer::toQueryValue($order_date_less_or_equal);
        }
        // query params
        if ($order_date_greater !== null) {
            $queryParams['OrderDate.Greater'] = ObjectSerializer::toQueryValue($order_date_greater);
        }
        // query params
        if ($order_date_greater_or_equal !== null) {
            $queryParams['OrderDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_date_greater_or_equal);
        }
        // query params
        if ($order_date_is_null !== null) {
            $queryParams['OrderDate.IsNull'] = ObjectSerializer::toQueryValue($order_date_is_null);
        }
        // query params
        if ($order_date_is_not_null !== null) {
            $queryParams['OrderDate.IsNotNull'] = ObjectSerializer::toQueryValue($order_date_is_not_null);
        }
        // query params
        if ($order_date_like !== null) {
            $queryParams['OrderDate.Like'] = ObjectSerializer::toQueryValue($order_date_like);
        }
        // query params
        if ($order_date_not_like !== null) {
            $queryParams['OrderDate.NotLike'] = ObjectSerializer::toQueryValue($order_date_not_like);
        }
        // query params
        if ($order_date_contains !== null) {
            $queryParams['OrderDate.Contains'] = ObjectSerializer::toQueryValue($order_date_contains);
        }
        // query params
        if ($order_date_not_contains !== null) {
            $queryParams['OrderDate.NotContains'] = ObjectSerializer::toQueryValue($order_date_not_contains);
        }
        // query params
        if ($order_date_starts_with !== null) {
            $queryParams['OrderDate.StartsWith'] = ObjectSerializer::toQueryValue($order_date_starts_with);
        }
        // query params
        if ($order_date_not_starts_with !== null) {
            $queryParams['OrderDate.NotStartsWith'] = ObjectSerializer::toQueryValue($order_date_not_starts_with);
        }
        // query params
        if ($order_date_ends_with !== null) {
            $queryParams['OrderDate.EndsWith'] = ObjectSerializer::toQueryValue($order_date_ends_with);
        }
        // query params
        if ($order_date_not_ends_with !== null) {
            $queryParams['OrderDate.NotEndsWith'] = ObjectSerializer::toQueryValue($order_date_not_ends_with);
        }
        // query params
        if ($order_date_in !== null) {
            $queryParams['OrderDate.In'] = ObjectSerializer::toQueryValue($order_date_in);
        }
        // query params
        if ($order_date_between !== null) {
            $queryParams['OrderDate.Between'] = ObjectSerializer::toQueryValue($order_date_between);
        }
        // query params
        if ($bill_to_customer_not_equal !== null) {
            $queryParams['BillToCustomer.NotEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_not_equal);
        }
        // query params
        if ($bill_to_customer_less !== null) {
            $queryParams['BillToCustomer.Less'] = ObjectSerializer::toQueryValue($bill_to_customer_less);
        }
        // query params
        if ($bill_to_customer_less_or_equal !== null) {
            $queryParams['BillToCustomer.LessOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_less_or_equal);
        }
        // query params
        if ($bill_to_customer_greater !== null) {
            $queryParams['BillToCustomer.Greater'] = ObjectSerializer::toQueryValue($bill_to_customer_greater);
        }
        // query params
        if ($bill_to_customer_greater_or_equal !== null) {
            $queryParams['BillToCustomer.GreaterOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_greater_or_equal);
        }
        // query params
        if ($bill_to_customer_is_null !== null) {
            $queryParams['BillToCustomer.IsNull'] = ObjectSerializer::toQueryValue($bill_to_customer_is_null);
        }
        // query params
        if ($bill_to_customer_is_not_null !== null) {
            $queryParams['BillToCustomer.IsNotNull'] = ObjectSerializer::toQueryValue($bill_to_customer_is_not_null);
        }
        // query params
        if ($bill_to_customer_like !== null) {
            $queryParams['BillToCustomer.Like'] = ObjectSerializer::toQueryValue($bill_to_customer_like);
        }
        // query params
        if ($bill_to_customer_not_like !== null) {
            $queryParams['BillToCustomer.NotLike'] = ObjectSerializer::toQueryValue($bill_to_customer_not_like);
        }
        // query params
        if ($bill_to_customer_contains !== null) {
            $queryParams['BillToCustomer.Contains'] = ObjectSerializer::toQueryValue($bill_to_customer_contains);
        }
        // query params
        if ($bill_to_customer_not_contains !== null) {
            $queryParams['BillToCustomer.NotContains'] = ObjectSerializer::toQueryValue($bill_to_customer_not_contains);
        }
        // query params
        if ($bill_to_customer_starts_with !== null) {
            $queryParams['BillToCustomer.StartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_starts_with);
        }
        // query params
        if ($bill_to_customer_not_starts_with !== null) {
            $queryParams['BillToCustomer.NotStartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_not_starts_with);
        }
        // query params
        if ($bill_to_customer_ends_with !== null) {
            $queryParams['BillToCustomer.EndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_ends_with);
        }
        // query params
        if ($bill_to_customer_not_ends_with !== null) {
            $queryParams['BillToCustomer.NotEndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_not_ends_with);
        }
        // query params
        if ($bill_to_customer_in !== null) {
            $queryParams['BillToCustomer.In'] = ObjectSerializer::toQueryValue($bill_to_customer_in);
        }
        // query params
        if ($bill_to_customer_between !== null) {
            $queryParams['BillToCustomer.Between'] = ObjectSerializer::toQueryValue($bill_to_customer_between);
        }
        // query params
        if ($ship_to_customer_not_equal !== null) {
            $queryParams['ShipToCustomer.NotEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_not_equal);
        }
        // query params
        if ($ship_to_customer_less !== null) {
            $queryParams['ShipToCustomer.Less'] = ObjectSerializer::toQueryValue($ship_to_customer_less);
        }
        // query params
        if ($ship_to_customer_less_or_equal !== null) {
            $queryParams['ShipToCustomer.LessOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_less_or_equal);
        }
        // query params
        if ($ship_to_customer_greater !== null) {
            $queryParams['ShipToCustomer.Greater'] = ObjectSerializer::toQueryValue($ship_to_customer_greater);
        }
        // query params
        if ($ship_to_customer_greater_or_equal !== null) {
            $queryParams['ShipToCustomer.GreaterOrEqual'] = ObjectSerializer::toQueryValue($ship_to_customer_greater_or_equal);
        }
        // query params
        if ($ship_to_customer_is_null !== null) {
            $queryParams['ShipToCustomer.IsNull'] = ObjectSerializer::toQueryValue($ship_to_customer_is_null);
        }
        // query params
        if ($ship_to_customer_is_not_null !== null) {
            $queryParams['ShipToCustomer.IsNotNull'] = ObjectSerializer::toQueryValue($ship_to_customer_is_not_null);
        }
        // query params
        if ($ship_to_customer_like !== null) {
            $queryParams['ShipToCustomer.Like'] = ObjectSerializer::toQueryValue($ship_to_customer_like);
        }
        // query params
        if ($ship_to_customer_not_like !== null) {
            $queryParams['ShipToCustomer.NotLike'] = ObjectSerializer::toQueryValue($ship_to_customer_not_like);
        }
        // query params
        if ($ship_to_customer_contains !== null) {
            $queryParams['ShipToCustomer.Contains'] = ObjectSerializer::toQueryValue($ship_to_customer_contains);
        }
        // query params
        if ($ship_to_customer_not_contains !== null) {
            $queryParams['ShipToCustomer.NotContains'] = ObjectSerializer::toQueryValue($ship_to_customer_not_contains);
        }
        // query params
        if ($ship_to_customer_starts_with !== null) {
            $queryParams['ShipToCustomer.StartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_starts_with);
        }
        // query params
        if ($ship_to_customer_not_starts_with !== null) {
            $queryParams['ShipToCustomer.NotStartsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_not_starts_with);
        }
        // query params
        if ($ship_to_customer_ends_with !== null) {
            $queryParams['ShipToCustomer.EndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_ends_with);
        }
        // query params
        if ($ship_to_customer_not_ends_with !== null) {
            $queryParams['ShipToCustomer.NotEndsWith'] = ObjectSerializer::toQueryValue($ship_to_customer_not_ends_with);
        }
        // query params
        if ($ship_to_customer_in !== null) {
            $queryParams['ShipToCustomer.In'] = ObjectSerializer::toQueryValue($ship_to_customer_in);
        }
        // query params
        if ($ship_to_customer_between !== null) {
            $queryParams['ShipToCustomer.Between'] = ObjectSerializer::toQueryValue($ship_to_customer_between);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerUpdate
     *
     * Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.  If it does exist, is updated with the information provided.  In the case of an address update:  If the address is a temporary address that is currently in effect, changes to the  address will not become effective until the CDS750 address swapping process runs.  In the case of a new address:  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerUpdateRequest $customer_update_request A CustomerUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customerUpdate($customer_number, $customer_update_request)
    {
        $this->customerUpdateWithHttpInfo($customer_number, $customer_update_request);
    }

    /**
     * Operation customerUpdateWithHttpInfo
     *
     * Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.  If it does exist, is updated with the information provided.  In the case of an address update:  If the address is a temporary address that is currently in effect, changes to the  address will not become effective until the CDS750 address swapping process runs.  In the case of a new address:  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerUpdateRequest $customer_update_request A CustomerUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerUpdateWithHttpInfo($customer_number, $customer_update_request)
    {
        $returnType = '';
        $request = $this->customerUpdateRequest($customer_number, $customer_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customerUpdateAsync
     *
     * Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.  If it does exist, is updated with the information provided.  In the case of an address update:  If the address is a temporary address that is currently in effect, changes to the  address will not become effective until the CDS750 address swapping process runs.  In the case of a new address:  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerUpdateRequest $customer_update_request A CustomerUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateAsync($customer_number, $customer_update_request)
    {
        return $this->customerUpdateAsyncWithHttpInfo($customer_number, $customer_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerUpdateAsyncWithHttpInfo
     *
     * Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.  If it does exist, is updated with the information provided.  In the case of an address update:  If the address is a temporary address that is currently in effect, changes to the  address will not become effective until the CDS750 address swapping process runs.  In the case of a new address:  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerUpdateRequest $customer_update_request A CustomerUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateAsyncWithHttpInfo($customer_number, $customer_update_request)
    {
        $returnType = '';
        $request = $this->customerUpdateRequest($customer_number, $customer_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerUpdate'
     *
     * @param  string $customer_number The Advantage customer number of the customer to update. (required)
     * @param  \Advantage\Client\Model\CustomerUpdateRequest $customer_update_request A CustomerUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerUpdateRequest($customer_number, $customer_update_request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerUpdate'
            );
        }
        // verify the required parameter 'customer_update_request' is set
        if ($customer_update_request === null || (is_array($customer_update_request) && count($customer_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_update_request when calling customerUpdate'
            );
        }

        $resourcePath = '/customers/{customerNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_update_request)) {
            $_tempBody = $customer_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerUpdateCustomerAddress
     *
     * Update a customer address
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $address_code Address Code (required)
     * @param  \Advantage\Client\Model\CustomerAddressUpdateRequest $customer_address_update_request Customer Address Update Request object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAddress
     */
    public function customerUpdateCustomerAddress($customer_number, $address_code, $customer_address_update_request)
    {
        list($response) = $this->customerUpdateCustomerAddressWithHttpInfo($customer_number, $address_code, $customer_address_update_request);
        return $response;
    }

    /**
     * Operation customerUpdateCustomerAddressWithHttpInfo
     *
     * Update a customer address
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $address_code Address Code (required)
     * @param  \Advantage\Client\Model\CustomerAddressUpdateRequest $customer_address_update_request Customer Address Update Request object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerUpdateCustomerAddressWithHttpInfo($customer_number, $address_code, $customer_address_update_request)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerUpdateCustomerAddressRequest($customer_number, $address_code, $customer_address_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerUpdateCustomerAddressAsync
     *
     * Update a customer address
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $address_code Address Code (required)
     * @param  \Advantage\Client\Model\CustomerAddressUpdateRequest $customer_address_update_request Customer Address Update Request object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateCustomerAddressAsync($customer_number, $address_code, $customer_address_update_request)
    {
        return $this->customerUpdateCustomerAddressAsyncWithHttpInfo($customer_number, $address_code, $customer_address_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerUpdateCustomerAddressAsyncWithHttpInfo
     *
     * Update a customer address
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $address_code Address Code (required)
     * @param  \Advantage\Client\Model\CustomerAddressUpdateRequest $customer_address_update_request Customer Address Update Request object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateCustomerAddressAsyncWithHttpInfo($customer_number, $address_code, $customer_address_update_request)
    {
        $returnType = '\Advantage\Client\Model\CustomerAddress';
        $request = $this->customerUpdateCustomerAddressRequest($customer_number, $address_code, $customer_address_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerUpdateCustomerAddress'
     *
     * @param  string $customer_number Customer Number (required)
     * @param  string $address_code Address Code (required)
     * @param  \Advantage\Client\Model\CustomerAddressUpdateRequest $customer_address_update_request Customer Address Update Request object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerUpdateCustomerAddressRequest($customer_number, $address_code, $customer_address_update_request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerUpdateCustomerAddress'
            );
        }
        // verify the required parameter 'address_code' is set
        if ($address_code === null || (is_array($address_code) && count($address_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_code when calling customerUpdateCustomerAddress'
            );
        }
        // verify the required parameter 'customer_address_update_request' is set
        if ($customer_address_update_request === null || (is_array($customer_address_update_request) && count($customer_address_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_address_update_request when calling customerUpdateCustomerAddress'
            );
        }

        $resourcePath = '/customers/{customerNumber}/addresses/{addressCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($address_code !== null) {
            $resourcePath = str_replace(
                '{' . 'addressCode' . '}',
                ObjectSerializer::toPathValue($address_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_address_update_request)) {
            $_tempBody = $customer_address_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerValidateLastName
     *
     * Validate that a customer number identifies a customer with the specified last name (surname).  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  string $last_name The last name of the customer to validate against. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customerValidateLastName($customer_number, $last_name)
    {
        $this->customerValidateLastNameWithHttpInfo($customer_number, $last_name);
    }

    /**
     * Operation customerValidateLastNameWithHttpInfo
     *
     * Validate that a customer number identifies a customer with the specified last name (surname).  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  string $last_name The last name of the customer to validate against. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerValidateLastNameWithHttpInfo($customer_number, $last_name)
    {
        $returnType = '';
        $request = $this->customerValidateLastNameRequest($customer_number, $last_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customerValidateLastNameAsync
     *
     * Validate that a customer number identifies a customer with the specified last name (surname).  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  string $last_name The last name of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerValidateLastNameAsync($customer_number, $last_name)
    {
        return $this->customerValidateLastNameAsyncWithHttpInfo($customer_number, $last_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerValidateLastNameAsyncWithHttpInfo
     *
     * Validate that a customer number identifies a customer with the specified last name (surname).  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  string $last_name The last name of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerValidateLastNameAsyncWithHttpInfo($customer_number, $last_name)
    {
        $returnType = '';
        $request = $this->customerValidateLastNameRequest($customer_number, $last_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerValidateLastName'
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  string $last_name The last name of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerValidateLastNameRequest($customer_number, $last_name)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerValidateLastName'
            );
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling customerValidateLastName'
            );
        }

        $resourcePath = '/customers/{customerNumber}/last-name/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($last_name)) {
            $_tempBody = $last_name;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerValidatePostalCode
     *
     * Validate that a customer number identifies a customer with the specified country and postal code.  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  \Advantage\Client\Model\ValidateAccountPostalCodeRequest $request The country code and postal code of the customer to validate against. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customerValidatePostalCode($customer_number, $request)
    {
        $this->customerValidatePostalCodeWithHttpInfo($customer_number, $request);
    }

    /**
     * Operation customerValidatePostalCodeWithHttpInfo
     *
     * Validate that a customer number identifies a customer with the specified country and postal code.  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  \Advantage\Client\Model\ValidateAccountPostalCodeRequest $request The country code and postal code of the customer to validate against. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerValidatePostalCodeWithHttpInfo($customer_number, $request)
    {
        $returnType = '';
        $request = $this->customerValidatePostalCodeRequest($customer_number, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customerValidatePostalCodeAsync
     *
     * Validate that a customer number identifies a customer with the specified country and postal code.  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  \Advantage\Client\Model\ValidateAccountPostalCodeRequest $request The country code and postal code of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerValidatePostalCodeAsync($customer_number, $request)
    {
        return $this->customerValidatePostalCodeAsyncWithHttpInfo($customer_number, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerValidatePostalCodeAsyncWithHttpInfo
     *
     * Validate that a customer number identifies a customer with the specified country and postal code.  A 404 Not Found status is returned if validation fails.
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  \Advantage\Client\Model\ValidateAccountPostalCodeRequest $request The country code and postal code of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerValidatePostalCodeAsyncWithHttpInfo($customer_number, $request)
    {
        $returnType = '';
        $request = $this->customerValidatePostalCodeRequest($customer_number, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerValidatePostalCode'
     *
     * @param  string $customer_number The advantage customer number to validate against. (required)
     * @param  \Advantage\Client\Model\ValidateAccountPostalCodeRequest $request The country code and postal code of the customer to validate against. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerValidatePostalCodeRequest($customer_number, $request)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerValidatePostalCode'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling customerValidatePostalCode'
            );
        }

        $resourcePath = '/customers/{customerNumber}/postal-code/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
