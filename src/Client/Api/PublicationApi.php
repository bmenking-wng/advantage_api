<?php
/**
 * PublicationApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * PublicationApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation publicationGetAutoRenewalChains
     *
     * Get the available auto-renewal chains for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s auto-renewal               chains will be returned. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultSubscriptionAutoRenewalChain
     */
    public function publicationGetAutoRenewalChains($publication_code)
    {
        list($response) = $this->publicationGetAutoRenewalChainsWithHttpInfo($publication_code);
        return $response;
    }

    /**
     * Operation publicationGetAutoRenewalChainsWithHttpInfo
     *
     * Get the available auto-renewal chains for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s auto-renewal               chains will be returned. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultSubscriptionAutoRenewalChain, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetAutoRenewalChainsWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscriptionAutoRenewalChain';
        $request = $this->publicationGetAutoRenewalChainsRequest($publication_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultSubscriptionAutoRenewalChain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetAutoRenewalChainsAsync
     *
     * Get the available auto-renewal chains for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s auto-renewal               chains will be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetAutoRenewalChainsAsync($publication_code)
    {
        return $this->publicationGetAutoRenewalChainsAsyncWithHttpInfo($publication_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetAutoRenewalChainsAsyncWithHttpInfo
     *
     * Get the available auto-renewal chains for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s auto-renewal               chains will be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetAutoRenewalChainsAsyncWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSubscriptionAutoRenewalChain';
        $request = $this->publicationGetAutoRenewalChainsRequest($publication_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetAutoRenewalChains'
     *
     * @param  string $publication_code The publication code of the publication who&#39;s auto-renewal               chains will be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetAutoRenewalChainsRequest($publication_code)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetAutoRenewalChains'
            );
        }

        $resourcePath = '/publications/{publicationCode}/auto-renewal-chains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationGetDeliveryMethods
     *
     * Get the valid delivery codes for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s delivery codes are to be returned. (required)
     * @param  string $billing_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $billing_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $billing_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $billing_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $billing_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $billing_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $billing_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultDeliveryMethod
     */
    public function publicationGetDeliveryMethods($publication_code, $billing_currency = null, $promotion_code = null, $customer_number = null, $billing_currency_not_equal = null, $billing_currency_less = null, $billing_currency_less_or_equal = null, $billing_currency_greater = null, $billing_currency_greater_or_equal = null, $billing_currency_is_null = null, $billing_currency_is_not_null = null, $billing_currency_like = null, $billing_currency_not_like = null, $billing_currency_contains = null, $billing_currency_not_contains = null, $billing_currency_starts_with = null, $billing_currency_not_starts_with = null, $billing_currency_ends_with = null, $billing_currency_not_ends_with = null, $billing_currency_in = null, $billing_currency_between = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null)
    {
        list($response) = $this->publicationGetDeliveryMethodsWithHttpInfo($publication_code, $billing_currency, $promotion_code, $customer_number, $billing_currency_not_equal, $billing_currency_less, $billing_currency_less_or_equal, $billing_currency_greater, $billing_currency_greater_or_equal, $billing_currency_is_null, $billing_currency_is_not_null, $billing_currency_like, $billing_currency_not_like, $billing_currency_contains, $billing_currency_not_contains, $billing_currency_starts_with, $billing_currency_not_starts_with, $billing_currency_ends_with, $billing_currency_not_ends_with, $billing_currency_in, $billing_currency_between, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between);
        return $response;
    }

    /**
     * Operation publicationGetDeliveryMethodsWithHttpInfo
     *
     * Get the valid delivery codes for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s delivery codes are to be returned. (required)
     * @param  string $billing_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $billing_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $billing_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $billing_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $billing_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $billing_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $billing_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultDeliveryMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetDeliveryMethodsWithHttpInfo($publication_code, $billing_currency = null, $promotion_code = null, $customer_number = null, $billing_currency_not_equal = null, $billing_currency_less = null, $billing_currency_less_or_equal = null, $billing_currency_greater = null, $billing_currency_greater_or_equal = null, $billing_currency_is_null = null, $billing_currency_is_not_null = null, $billing_currency_like = null, $billing_currency_not_like = null, $billing_currency_contains = null, $billing_currency_not_contains = null, $billing_currency_starts_with = null, $billing_currency_not_starts_with = null, $billing_currency_ends_with = null, $billing_currency_not_ends_with = null, $billing_currency_in = null, $billing_currency_between = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultDeliveryMethod';
        $request = $this->publicationGetDeliveryMethodsRequest($publication_code, $billing_currency, $promotion_code, $customer_number, $billing_currency_not_equal, $billing_currency_less, $billing_currency_less_or_equal, $billing_currency_greater, $billing_currency_greater_or_equal, $billing_currency_is_null, $billing_currency_is_not_null, $billing_currency_like, $billing_currency_not_like, $billing_currency_contains, $billing_currency_not_contains, $billing_currency_starts_with, $billing_currency_not_starts_with, $billing_currency_ends_with, $billing_currency_not_ends_with, $billing_currency_in, $billing_currency_between, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultDeliveryMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetDeliveryMethodsAsync
     *
     * Get the valid delivery codes for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s delivery codes are to be returned. (required)
     * @param  string $billing_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $billing_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $billing_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $billing_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $billing_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $billing_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $billing_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetDeliveryMethodsAsync($publication_code, $billing_currency = null, $promotion_code = null, $customer_number = null, $billing_currency_not_equal = null, $billing_currency_less = null, $billing_currency_less_or_equal = null, $billing_currency_greater = null, $billing_currency_greater_or_equal = null, $billing_currency_is_null = null, $billing_currency_is_not_null = null, $billing_currency_like = null, $billing_currency_not_like = null, $billing_currency_contains = null, $billing_currency_not_contains = null, $billing_currency_starts_with = null, $billing_currency_not_starts_with = null, $billing_currency_ends_with = null, $billing_currency_not_ends_with = null, $billing_currency_in = null, $billing_currency_between = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null)
    {
        return $this->publicationGetDeliveryMethodsAsyncWithHttpInfo($publication_code, $billing_currency, $promotion_code, $customer_number, $billing_currency_not_equal, $billing_currency_less, $billing_currency_less_or_equal, $billing_currency_greater, $billing_currency_greater_or_equal, $billing_currency_is_null, $billing_currency_is_not_null, $billing_currency_like, $billing_currency_not_like, $billing_currency_contains, $billing_currency_not_contains, $billing_currency_starts_with, $billing_currency_not_starts_with, $billing_currency_ends_with, $billing_currency_not_ends_with, $billing_currency_in, $billing_currency_between, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetDeliveryMethodsAsyncWithHttpInfo
     *
     * Get the valid delivery codes for a publication.
     *
     * @param  string $publication_code The publication code of the publication who&#39;s delivery codes are to be returned. (required)
     * @param  string $billing_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $billing_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $billing_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $billing_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $billing_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $billing_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $billing_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetDeliveryMethodsAsyncWithHttpInfo($publication_code, $billing_currency = null, $promotion_code = null, $customer_number = null, $billing_currency_not_equal = null, $billing_currency_less = null, $billing_currency_less_or_equal = null, $billing_currency_greater = null, $billing_currency_greater_or_equal = null, $billing_currency_is_null = null, $billing_currency_is_not_null = null, $billing_currency_like = null, $billing_currency_not_like = null, $billing_currency_contains = null, $billing_currency_not_contains = null, $billing_currency_starts_with = null, $billing_currency_not_starts_with = null, $billing_currency_ends_with = null, $billing_currency_not_ends_with = null, $billing_currency_in = null, $billing_currency_between = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultDeliveryMethod';
        $request = $this->publicationGetDeliveryMethodsRequest($publication_code, $billing_currency, $promotion_code, $customer_number, $billing_currency_not_equal, $billing_currency_less, $billing_currency_less_or_equal, $billing_currency_greater, $billing_currency_greater_or_equal, $billing_currency_is_null, $billing_currency_is_not_null, $billing_currency_like, $billing_currency_not_like, $billing_currency_contains, $billing_currency_not_contains, $billing_currency_starts_with, $billing_currency_not_starts_with, $billing_currency_ends_with, $billing_currency_not_ends_with, $billing_currency_in, $billing_currency_between, $promotion_code_not_equal, $promotion_code_less, $promotion_code_less_or_equal, $promotion_code_greater, $promotion_code_greater_or_equal, $promotion_code_is_null, $promotion_code_is_not_null, $promotion_code_like, $promotion_code_not_like, $promotion_code_contains, $promotion_code_not_contains, $promotion_code_starts_with, $promotion_code_not_starts_with, $promotion_code_ends_with, $promotion_code_not_ends_with, $promotion_code_in, $promotion_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetDeliveryMethods'
     *
     * @param  string $publication_code The publication code of the publication who&#39;s delivery codes are to be returned. (required)
     * @param  string $billing_currency Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $promotion_code Filter on PMO-CDE using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $billing_currency_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_currency_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $billing_currency_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_currency_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $billing_currency_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_currency_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_currency_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_currency_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $billing_currency_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_currency_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $billing_currency_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_currency_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_currency_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_currency_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_currency_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_currency_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $billing_currency_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $promotion_code_not_equal Filter on PMO-CDE using &#39;NotEqual&#39; operator (optional)
     * @param  string $promotion_code_less Filter on PMO-CDE using &#39;Less&#39; operator (optional)
     * @param  string $promotion_code_less_or_equal Filter on PMO-CDE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $promotion_code_greater Filter on PMO-CDE using &#39;Greater&#39; operator (optional)
     * @param  string $promotion_code_greater_or_equal Filter on PMO-CDE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $promotion_code_is_null Filter on PMO-CDE using &#39;IsNull&#39; operator (optional)
     * @param  string $promotion_code_is_not_null Filter on PMO-CDE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $promotion_code_like Filter on PMO-CDE using &#39;Like&#39; operator (optional)
     * @param  string $promotion_code_not_like Filter on PMO-CDE using &#39;NotLike&#39; operator (optional)
     * @param  string $promotion_code_contains Filter on PMO-CDE using &#39;Contains&#39; operator (optional)
     * @param  string $promotion_code_not_contains Filter on PMO-CDE using &#39;NotContains&#39; operator (optional)
     * @param  string $promotion_code_starts_with Filter on PMO-CDE using &#39;StartsWith&#39; operator (optional)
     * @param  string $promotion_code_not_starts_with Filter on PMO-CDE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $promotion_code_ends_with Filter on PMO-CDE using &#39;EndsWith&#39; operator (optional)
     * @param  string $promotion_code_not_ends_with Filter on PMO-CDE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $promotion_code_in Filter on PMO-CDE using &#39;In&#39; operator (optional)
     * @param  string $promotion_code_between Filter on PMO-CDE using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetDeliveryMethodsRequest($publication_code, $billing_currency = null, $promotion_code = null, $customer_number = null, $billing_currency_not_equal = null, $billing_currency_less = null, $billing_currency_less_or_equal = null, $billing_currency_greater = null, $billing_currency_greater_or_equal = null, $billing_currency_is_null = null, $billing_currency_is_not_null = null, $billing_currency_like = null, $billing_currency_not_like = null, $billing_currency_contains = null, $billing_currency_not_contains = null, $billing_currency_starts_with = null, $billing_currency_not_starts_with = null, $billing_currency_ends_with = null, $billing_currency_not_ends_with = null, $billing_currency_in = null, $billing_currency_between = null, $promotion_code_not_equal = null, $promotion_code_less = null, $promotion_code_less_or_equal = null, $promotion_code_greater = null, $promotion_code_greater_or_equal = null, $promotion_code_is_null = null, $promotion_code_is_not_null = null, $promotion_code_like = null, $promotion_code_not_like = null, $promotion_code_contains = null, $promotion_code_not_contains = null, $promotion_code_starts_with = null, $promotion_code_not_starts_with = null, $promotion_code_ends_with = null, $promotion_code_not_ends_with = null, $promotion_code_in = null, $promotion_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetDeliveryMethods'
            );
        }

        $resourcePath = '/publications/{publicationCode}/delivery-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($billing_currency !== null) {
            $queryParams['BillingCurrency'] = ObjectSerializer::toQueryValue($billing_currency);
        }
        // query params
        if ($promotion_code !== null) {
            $queryParams['PromotionCode'] = ObjectSerializer::toQueryValue($promotion_code);
        }
        // query params
        if ($customer_number !== null) {
            $queryParams['CustomerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($billing_currency_not_equal !== null) {
            $queryParams['BillingCurrency.NotEqual'] = ObjectSerializer::toQueryValue($billing_currency_not_equal);
        }
        // query params
        if ($billing_currency_less !== null) {
            $queryParams['BillingCurrency.Less'] = ObjectSerializer::toQueryValue($billing_currency_less);
        }
        // query params
        if ($billing_currency_less_or_equal !== null) {
            $queryParams['BillingCurrency.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_currency_less_or_equal);
        }
        // query params
        if ($billing_currency_greater !== null) {
            $queryParams['BillingCurrency.Greater'] = ObjectSerializer::toQueryValue($billing_currency_greater);
        }
        // query params
        if ($billing_currency_greater_or_equal !== null) {
            $queryParams['BillingCurrency.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_currency_greater_or_equal);
        }
        // query params
        if ($billing_currency_is_null !== null) {
            $queryParams['BillingCurrency.IsNull'] = ObjectSerializer::toQueryValue($billing_currency_is_null);
        }
        // query params
        if ($billing_currency_is_not_null !== null) {
            $queryParams['BillingCurrency.IsNotNull'] = ObjectSerializer::toQueryValue($billing_currency_is_not_null);
        }
        // query params
        if ($billing_currency_like !== null) {
            $queryParams['BillingCurrency.Like'] = ObjectSerializer::toQueryValue($billing_currency_like);
        }
        // query params
        if ($billing_currency_not_like !== null) {
            $queryParams['BillingCurrency.NotLike'] = ObjectSerializer::toQueryValue($billing_currency_not_like);
        }
        // query params
        if ($billing_currency_contains !== null) {
            $queryParams['BillingCurrency.Contains'] = ObjectSerializer::toQueryValue($billing_currency_contains);
        }
        // query params
        if ($billing_currency_not_contains !== null) {
            $queryParams['BillingCurrency.NotContains'] = ObjectSerializer::toQueryValue($billing_currency_not_contains);
        }
        // query params
        if ($billing_currency_starts_with !== null) {
            $queryParams['BillingCurrency.StartsWith'] = ObjectSerializer::toQueryValue($billing_currency_starts_with);
        }
        // query params
        if ($billing_currency_not_starts_with !== null) {
            $queryParams['BillingCurrency.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_currency_not_starts_with);
        }
        // query params
        if ($billing_currency_ends_with !== null) {
            $queryParams['BillingCurrency.EndsWith'] = ObjectSerializer::toQueryValue($billing_currency_ends_with);
        }
        // query params
        if ($billing_currency_not_ends_with !== null) {
            $queryParams['BillingCurrency.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_currency_not_ends_with);
        }
        // query params
        if ($billing_currency_in !== null) {
            $queryParams['BillingCurrency.In'] = ObjectSerializer::toQueryValue($billing_currency_in);
        }
        // query params
        if ($billing_currency_between !== null) {
            $queryParams['BillingCurrency.Between'] = ObjectSerializer::toQueryValue($billing_currency_between);
        }
        // query params
        if ($promotion_code_not_equal !== null) {
            $queryParams['PromotionCode.NotEqual'] = ObjectSerializer::toQueryValue($promotion_code_not_equal);
        }
        // query params
        if ($promotion_code_less !== null) {
            $queryParams['PromotionCode.Less'] = ObjectSerializer::toQueryValue($promotion_code_less);
        }
        // query params
        if ($promotion_code_less_or_equal !== null) {
            $queryParams['PromotionCode.LessOrEqual'] = ObjectSerializer::toQueryValue($promotion_code_less_or_equal);
        }
        // query params
        if ($promotion_code_greater !== null) {
            $queryParams['PromotionCode.Greater'] = ObjectSerializer::toQueryValue($promotion_code_greater);
        }
        // query params
        if ($promotion_code_greater_or_equal !== null) {
            $queryParams['PromotionCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($promotion_code_greater_or_equal);
        }
        // query params
        if ($promotion_code_is_null !== null) {
            $queryParams['PromotionCode.IsNull'] = ObjectSerializer::toQueryValue($promotion_code_is_null);
        }
        // query params
        if ($promotion_code_is_not_null !== null) {
            $queryParams['PromotionCode.IsNotNull'] = ObjectSerializer::toQueryValue($promotion_code_is_not_null);
        }
        // query params
        if ($promotion_code_like !== null) {
            $queryParams['PromotionCode.Like'] = ObjectSerializer::toQueryValue($promotion_code_like);
        }
        // query params
        if ($promotion_code_not_like !== null) {
            $queryParams['PromotionCode.NotLike'] = ObjectSerializer::toQueryValue($promotion_code_not_like);
        }
        // query params
        if ($promotion_code_contains !== null) {
            $queryParams['PromotionCode.Contains'] = ObjectSerializer::toQueryValue($promotion_code_contains);
        }
        // query params
        if ($promotion_code_not_contains !== null) {
            $queryParams['PromotionCode.NotContains'] = ObjectSerializer::toQueryValue($promotion_code_not_contains);
        }
        // query params
        if ($promotion_code_starts_with !== null) {
            $queryParams['PromotionCode.StartsWith'] = ObjectSerializer::toQueryValue($promotion_code_starts_with);
        }
        // query params
        if ($promotion_code_not_starts_with !== null) {
            $queryParams['PromotionCode.NotStartsWith'] = ObjectSerializer::toQueryValue($promotion_code_not_starts_with);
        }
        // query params
        if ($promotion_code_ends_with !== null) {
            $queryParams['PromotionCode.EndsWith'] = ObjectSerializer::toQueryValue($promotion_code_ends_with);
        }
        // query params
        if ($promotion_code_not_ends_with !== null) {
            $queryParams['PromotionCode.NotEndsWith'] = ObjectSerializer::toQueryValue($promotion_code_not_ends_with);
        }
        // query params
        if ($promotion_code_in !== null) {
            $queryParams['PromotionCode.In'] = ObjectSerializer::toQueryValue($promotion_code_in);
        }
        // query params
        if ($promotion_code_between !== null) {
            $queryParams['PromotionCode.Between'] = ObjectSerializer::toQueryValue($promotion_code_between);
        }
        // query params
        if ($customer_number_not_equal !== null) {
            $queryParams['CustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($customer_number_not_equal);
        }
        // query params
        if ($customer_number_less !== null) {
            $queryParams['CustomerNumber.Less'] = ObjectSerializer::toQueryValue($customer_number_less);
        }
        // query params
        if ($customer_number_less_or_equal !== null) {
            $queryParams['CustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_number_less_or_equal);
        }
        // query params
        if ($customer_number_greater !== null) {
            $queryParams['CustomerNumber.Greater'] = ObjectSerializer::toQueryValue($customer_number_greater);
        }
        // query params
        if ($customer_number_greater_or_equal !== null) {
            $queryParams['CustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_number_greater_or_equal);
        }
        // query params
        if ($customer_number_is_null !== null) {
            $queryParams['CustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($customer_number_is_null);
        }
        // query params
        if ($customer_number_is_not_null !== null) {
            $queryParams['CustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($customer_number_is_not_null);
        }
        // query params
        if ($customer_number_like !== null) {
            $queryParams['CustomerNumber.Like'] = ObjectSerializer::toQueryValue($customer_number_like);
        }
        // query params
        if ($customer_number_not_like !== null) {
            $queryParams['CustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($customer_number_not_like);
        }
        // query params
        if ($customer_number_contains !== null) {
            $queryParams['CustomerNumber.Contains'] = ObjectSerializer::toQueryValue($customer_number_contains);
        }
        // query params
        if ($customer_number_not_contains !== null) {
            $queryParams['CustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($customer_number_not_contains);
        }
        // query params
        if ($customer_number_starts_with !== null) {
            $queryParams['CustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($customer_number_starts_with);
        }
        // query params
        if ($customer_number_not_starts_with !== null) {
            $queryParams['CustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_number_not_starts_with);
        }
        // query params
        if ($customer_number_ends_with !== null) {
            $queryParams['CustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($customer_number_ends_with);
        }
        // query params
        if ($customer_number_not_ends_with !== null) {
            $queryParams['CustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_number_not_ends_with);
        }
        // query params
        if ($customer_number_in !== null) {
            $queryParams['CustomerNumber.In'] = ObjectSerializer::toQueryValue($customer_number_in);
        }
        // query params
        if ($customer_number_between !== null) {
            $queryParams['CustomerNumber.Between'] = ObjectSerializer::toQueryValue($customer_number_between);
        }

        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationGetIssue
     *
     * Gets information about a particular issue for a publication.
     *
     * @param  string $publication_code The publication code of the desired publication. (required)
     * @param  \DateTime $issue_date The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Issue
     */
    public function publicationGetIssue($publication_code, $issue_date)
    {
        list($response) = $this->publicationGetIssueWithHttpInfo($publication_code, $issue_date);
        return $response;
    }

    /**
     * Operation publicationGetIssueWithHttpInfo
     *
     * Gets information about a particular issue for a publication.
     *
     * @param  string $publication_code The publication code of the desired publication. (required)
     * @param  \DateTime $issue_date The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetIssueWithHttpInfo($publication_code, $issue_date)
    {
        $returnType = '\Advantage\Client\Model\Issue';
        $request = $this->publicationGetIssueRequest($publication_code, $issue_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetIssueAsync
     *
     * Gets information about a particular issue for a publication.
     *
     * @param  string $publication_code The publication code of the desired publication. (required)
     * @param  \DateTime $issue_date The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssueAsync($publication_code, $issue_date)
    {
        return $this->publicationGetIssueAsyncWithHttpInfo($publication_code, $issue_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetIssueAsyncWithHttpInfo
     *
     * Gets information about a particular issue for a publication.
     *
     * @param  string $publication_code The publication code of the desired publication. (required)
     * @param  \DateTime $issue_date The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssueAsyncWithHttpInfo($publication_code, $issue_date)
    {
        $returnType = '\Advantage\Client\Model\Issue';
        $request = $this->publicationGetIssueRequest($publication_code, $issue_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetIssue'
     *
     * @param  string $publication_code The publication code of the desired publication. (required)
     * @param  \DateTime $issue_date The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetIssueRequest($publication_code, $issue_date)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetIssue'
            );
        }
        // verify the required parameter 'issue_date' is set
        if ($issue_date === null || (is_array($issue_date) && count($issue_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_date when calling publicationGetIssue'
            );
        }

        $resourcePath = '/publications/{publicationCode}/issues/{issueDate}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }
        // path params
        if ($issue_date !== null) {
            $resourcePath = str_replace(
                '{' . 'issueDate' . '}',
                ObjectSerializer::toPathValue($issue_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationGetIssueGroups
     *
     * Get the valid issue groups.
     *
     * @param  string $publication_code publication_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultIssueGroup
     */
    public function publicationGetIssueGroups($publication_code)
    {
        list($response) = $this->publicationGetIssueGroupsWithHttpInfo($publication_code);
        return $response;
    }

    /**
     * Operation publicationGetIssueGroupsWithHttpInfo
     *
     * Get the valid issue groups.
     *
     * @param  string $publication_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultIssueGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetIssueGroupsWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssueGroup';
        $request = $this->publicationGetIssueGroupsRequest($publication_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultIssueGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetIssueGroupsAsync
     *
     * Get the valid issue groups.
     *
     * @param  string $publication_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssueGroupsAsync($publication_code)
    {
        return $this->publicationGetIssueGroupsAsyncWithHttpInfo($publication_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetIssueGroupsAsyncWithHttpInfo
     *
     * Get the valid issue groups.
     *
     * @param  string $publication_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssueGroupsAsyncWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssueGroup';
        $request = $this->publicationGetIssueGroupsRequest($publication_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetIssueGroups'
     *
     * @param  string $publication_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetIssueGroupsRequest($publication_code)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetIssueGroups'
            );
        }

        $resourcePath = '/publications/{publicationCode}/issue-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationGetIssues
     *
     * Get the issues of a publication.
     *
     * @param  string $publication_code The publication code of the desired issues&#39; publication. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultIssue
     */
    public function publicationGetIssues($publication_code)
    {
        list($response) = $this->publicationGetIssuesWithHttpInfo($publication_code);
        return $response;
    }

    /**
     * Operation publicationGetIssuesWithHttpInfo
     *
     * Get the issues of a publication.
     *
     * @param  string $publication_code The publication code of the desired issues&#39; publication. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultIssue, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetIssuesWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssue';
        $request = $this->publicationGetIssuesRequest($publication_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultIssue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetIssuesAsync
     *
     * Get the issues of a publication.
     *
     * @param  string $publication_code The publication code of the desired issues&#39; publication. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssuesAsync($publication_code)
    {
        return $this->publicationGetIssuesAsyncWithHttpInfo($publication_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetIssuesAsyncWithHttpInfo
     *
     * Get the issues of a publication.
     *
     * @param  string $publication_code The publication code of the desired issues&#39; publication. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssuesAsyncWithHttpInfo($publication_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssue';
        $request = $this->publicationGetIssuesRequest($publication_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetIssues'
     *
     * @param  string $publication_code The publication code of the desired issues&#39; publication. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetIssuesRequest($publication_code)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetIssues'
            );
        }

        $resourcePath = '/publications/{publicationCode}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationGetIssues_0
     *
     * Get the issues of a publication with-in the given issue group.
     *
     * @param  string $publication_code The publication code (required)
     * @param  string $issue_group_code The publication issue group (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultIssue
     */
    public function publicationGetIssues_0($publication_code, $issue_group_code)
    {
        list($response) = $this->publicationGetIssues_0WithHttpInfo($publication_code, $issue_group_code);
        return $response;
    }

    /**
     * Operation publicationGetIssues_0WithHttpInfo
     *
     * Get the issues of a publication with-in the given issue group.
     *
     * @param  string $publication_code The publication code (required)
     * @param  string $issue_group_code The publication issue group (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultIssue, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationGetIssues_0WithHttpInfo($publication_code, $issue_group_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssue';
        $request = $this->publicationGetIssues_0Request($publication_code, $issue_group_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultIssue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationGetIssues_0Async
     *
     * Get the issues of a publication with-in the given issue group.
     *
     * @param  string $publication_code The publication code (required)
     * @param  string $issue_group_code The publication issue group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssues_0Async($publication_code, $issue_group_code)
    {
        return $this->publicationGetIssues_0AsyncWithHttpInfo($publication_code, $issue_group_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationGetIssues_0AsyncWithHttpInfo
     *
     * Get the issues of a publication with-in the given issue group.
     *
     * @param  string $publication_code The publication code (required)
     * @param  string $issue_group_code The publication issue group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationGetIssues_0AsyncWithHttpInfo($publication_code, $issue_group_code)
    {
        $returnType = '\Advantage\Client\Model\SearchResultIssue';
        $request = $this->publicationGetIssues_0Request($publication_code, $issue_group_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationGetIssues_0'
     *
     * @param  string $publication_code The publication code (required)
     * @param  string $issue_group_code The publication issue group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationGetIssues_0Request($publication_code, $issue_group_code)
    {
        // verify the required parameter 'publication_code' is set
        if ($publication_code === null || (is_array($publication_code) && count($publication_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publication_code when calling publicationGetIssues_0'
            );
        }
        // verify the required parameter 'issue_group_code' is set
        if ($issue_group_code === null || (is_array($issue_group_code) && count($issue_group_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_group_code when calling publicationGetIssues_0'
            );
        }

        $resourcePath = '/publications/{publicationCode}/issue-groups/{issueGroupCode}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($publication_code !== null) {
            $resourcePath = str_replace(
                '{' . 'publicationCode' . '}',
                ObjectSerializer::toPathValue($publication_code),
                $resourcePath
            );
        }
        // path params
        if ($issue_group_code !== null) {
            $resourcePath = str_replace(
                '{' . 'issueGroupCode' . '}',
                ObjectSerializer::toPathValue($issue_group_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
