<?php
/**
 * ConferenceRegistrationApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * ConferenceRegistrationApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferenceRegistrationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation conferenceRegistrationCancel
     *
     * Cancel a conference registration for the given registration Id. All attendees under the registration will be cancelled.
     *
     * @param  string $registration_id The registrationId of the conference registration to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelConferenceRegistrationRequest $cancel_request The request object for the cancel (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function conferenceRegistrationCancel($registration_id, $cancel_request)
    {
        $this->conferenceRegistrationCancelWithHttpInfo($registration_id, $cancel_request);
    }

    /**
     * Operation conferenceRegistrationCancelWithHttpInfo
     *
     * Cancel a conference registration for the given registration Id. All attendees under the registration will be cancelled.
     *
     * @param  string $registration_id The registrationId of the conference registration to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelConferenceRegistrationRequest $cancel_request The request object for the cancel (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function conferenceRegistrationCancelWithHttpInfo($registration_id, $cancel_request)
    {
        $returnType = '';
        $request = $this->conferenceRegistrationCancelRequest($registration_id, $cancel_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation conferenceRegistrationCancelAsync
     *
     * Cancel a conference registration for the given registration Id. All attendees under the registration will be cancelled.
     *
     * @param  string $registration_id The registrationId of the conference registration to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelConferenceRegistrationRequest $cancel_request The request object for the cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationCancelAsync($registration_id, $cancel_request)
    {
        return $this->conferenceRegistrationCancelAsyncWithHttpInfo($registration_id, $cancel_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conferenceRegistrationCancelAsyncWithHttpInfo
     *
     * Cancel a conference registration for the given registration Id. All attendees under the registration will be cancelled.
     *
     * @param  string $registration_id The registrationId of the conference registration to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelConferenceRegistrationRequest $cancel_request The request object for the cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationCancelAsyncWithHttpInfo($registration_id, $cancel_request)
    {
        $returnType = '';
        $request = $this->conferenceRegistrationCancelRequest($registration_id, $cancel_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conferenceRegistrationCancel'
     *
     * @param  string $registration_id The registrationId of the conference registration to be canceled. (required)
     * @param  \Advantage\Client\Model\CancelConferenceRegistrationRequest $cancel_request The request object for the cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conferenceRegistrationCancelRequest($registration_id, $cancel_request)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null || (is_array($registration_id) && count($registration_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registration_id when calling conferenceRegistrationCancel'
            );
        }
        // verify the required parameter 'cancel_request' is set
        if ($cancel_request === null || (is_array($cancel_request) && count($cancel_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_request when calling conferenceRegistrationCancel'
            );
        }

        $resourcePath = '/conference-registrations/{registrationId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                '{' . 'registrationId' . '}',
                ObjectSerializer::toPathValue($registration_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cancel_request)) {
            $_tempBody = $cancel_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conferenceRegistrationGet
     *
     * Gets a specific conference registration by ID
     *
     * @param  string $registration_id  (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ConferenceRegistration
     */
    public function conferenceRegistrationGet($registration_id)
    {
        list($response) = $this->conferenceRegistrationGetWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation conferenceRegistrationGetWithHttpInfo
     *
     * Gets a specific conference registration by ID
     *
     * @param  string $registration_id  (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ConferenceRegistration, HTTP status code, HTTP response headers (array of strings)
     */
    public function conferenceRegistrationGetWithHttpInfo($registration_id)
    {
        $returnType = '\Advantage\Client\Model\ConferenceRegistration';
        $request = $this->conferenceRegistrationGetRequest($registration_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ConferenceRegistration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conferenceRegistrationGetAsync
     *
     * Gets a specific conference registration by ID
     *
     * @param  string $registration_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationGetAsync($registration_id)
    {
        return $this->conferenceRegistrationGetAsyncWithHttpInfo($registration_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conferenceRegistrationGetAsyncWithHttpInfo
     *
     * Gets a specific conference registration by ID
     *
     * @param  string $registration_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationGetAsyncWithHttpInfo($registration_id)
    {
        $returnType = '\Advantage\Client\Model\ConferenceRegistration';
        $request = $this->conferenceRegistrationGetRequest($registration_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conferenceRegistrationGet'
     *
     * @param  string $registration_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conferenceRegistrationGetRequest($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null || (is_array($registration_id) && count($registration_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registration_id when calling conferenceRegistrationGet'
            );
        }

        $resourcePath = '/conference-registrations/{registrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                '{' . 'registrationId' . '}',
                ObjectSerializer::toPathValue($registration_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conferenceRegistrationSearch
     *
     * Gets the list of conference registrations based on search criteria
     *
     * @param  string $attendee_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $conference_id Filter on CONF-ID using &#39;Equal&#39; operator (optional)
     * @param  string $location_id Filter on CONF-LOC using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $attendee_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $attendee_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $attendee_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $attendee_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $attendee_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $attendee_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $attendee_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $attendee_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $attendee_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $attendee_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $conference_id_not_equal Filter on CONF-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $conference_id_less Filter on CONF-ID using &#39;Less&#39; operator (optional)
     * @param  string $conference_id_less_or_equal Filter on CONF-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $conference_id_greater Filter on CONF-ID using &#39;Greater&#39; operator (optional)
     * @param  string $conference_id_greater_or_equal Filter on CONF-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $conference_id_is_null Filter on CONF-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $conference_id_is_not_null Filter on CONF-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $conference_id_like Filter on CONF-ID using &#39;Like&#39; operator (optional)
     * @param  string $conference_id_not_like Filter on CONF-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $conference_id_contains Filter on CONF-ID using &#39;Contains&#39; operator (optional)
     * @param  string $conference_id_not_contains Filter on CONF-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $conference_id_starts_with Filter on CONF-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $conference_id_not_starts_with Filter on CONF-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $conference_id_ends_with Filter on CONF-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $conference_id_not_ends_with Filter on CONF-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $conference_id_in Filter on CONF-ID using &#39;In&#39; operator (optional)
     * @param  string $conference_id_between Filter on CONF-ID using &#39;Between&#39; operator (optional)
     * @param  string $location_id_not_equal Filter on CONF-LOC using &#39;NotEqual&#39; operator (optional)
     * @param  string $location_id_less Filter on CONF-LOC using &#39;Less&#39; operator (optional)
     * @param  string $location_id_less_or_equal Filter on CONF-LOC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $location_id_greater Filter on CONF-LOC using &#39;Greater&#39; operator (optional)
     * @param  string $location_id_greater_or_equal Filter on CONF-LOC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $location_id_is_null Filter on CONF-LOC using &#39;IsNull&#39; operator (optional)
     * @param  string $location_id_is_not_null Filter on CONF-LOC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $location_id_like Filter on CONF-LOC using &#39;Like&#39; operator (optional)
     * @param  string $location_id_not_like Filter on CONF-LOC using &#39;NotLike&#39; operator (optional)
     * @param  string $location_id_contains Filter on CONF-LOC using &#39;Contains&#39; operator (optional)
     * @param  string $location_id_not_contains Filter on CONF-LOC using &#39;NotContains&#39; operator (optional)
     * @param  string $location_id_starts_with Filter on CONF-LOC using &#39;StartsWith&#39; operator (optional)
     * @param  string $location_id_not_starts_with Filter on CONF-LOC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $location_id_ends_with Filter on CONF-LOC using &#39;EndsWith&#39; operator (optional)
     * @param  string $location_id_not_ends_with Filter on CONF-LOC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $location_id_in Filter on CONF-LOC using &#39;In&#39; operator (optional)
     * @param  string $location_id_between Filter on CONF-LOC using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultConferenceRegistration
     */
    public function conferenceRegistrationSearch($attendee_customer_number = null, $bill_to_customer_number = null, $conference_id = null, $location_id = null, $billing_organization_code = null, $attendee_customer_number_not_equal = null, $attendee_customer_number_less = null, $attendee_customer_number_less_or_equal = null, $attendee_customer_number_greater = null, $attendee_customer_number_greater_or_equal = null, $attendee_customer_number_is_null = null, $attendee_customer_number_is_not_null = null, $attendee_customer_number_like = null, $attendee_customer_number_not_like = null, $attendee_customer_number_contains = null, $attendee_customer_number_not_contains = null, $attendee_customer_number_starts_with = null, $attendee_customer_number_not_starts_with = null, $attendee_customer_number_ends_with = null, $attendee_customer_number_not_ends_with = null, $attendee_customer_number_in = null, $attendee_customer_number_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $conference_id_not_equal = null, $conference_id_less = null, $conference_id_less_or_equal = null, $conference_id_greater = null, $conference_id_greater_or_equal = null, $conference_id_is_null = null, $conference_id_is_not_null = null, $conference_id_like = null, $conference_id_not_like = null, $conference_id_contains = null, $conference_id_not_contains = null, $conference_id_starts_with = null, $conference_id_not_starts_with = null, $conference_id_ends_with = null, $conference_id_not_ends_with = null, $conference_id_in = null, $conference_id_between = null, $location_id_not_equal = null, $location_id_less = null, $location_id_less_or_equal = null, $location_id_greater = null, $location_id_greater_or_equal = null, $location_id_is_null = null, $location_id_is_not_null = null, $location_id_like = null, $location_id_not_like = null, $location_id_contains = null, $location_id_not_contains = null, $location_id_starts_with = null, $location_id_not_starts_with = null, $location_id_ends_with = null, $location_id_not_ends_with = null, $location_id_in = null, $location_id_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        list($response) = $this->conferenceRegistrationSearchWithHttpInfo($attendee_customer_number, $bill_to_customer_number, $conference_id, $location_id, $billing_organization_code, $attendee_customer_number_not_equal, $attendee_customer_number_less, $attendee_customer_number_less_or_equal, $attendee_customer_number_greater, $attendee_customer_number_greater_or_equal, $attendee_customer_number_is_null, $attendee_customer_number_is_not_null, $attendee_customer_number_like, $attendee_customer_number_not_like, $attendee_customer_number_contains, $attendee_customer_number_not_contains, $attendee_customer_number_starts_with, $attendee_customer_number_not_starts_with, $attendee_customer_number_ends_with, $attendee_customer_number_not_ends_with, $attendee_customer_number_in, $attendee_customer_number_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $conference_id_not_equal, $conference_id_less, $conference_id_less_or_equal, $conference_id_greater, $conference_id_greater_or_equal, $conference_id_is_null, $conference_id_is_not_null, $conference_id_like, $conference_id_not_like, $conference_id_contains, $conference_id_not_contains, $conference_id_starts_with, $conference_id_not_starts_with, $conference_id_ends_with, $conference_id_not_ends_with, $conference_id_in, $conference_id_between, $location_id_not_equal, $location_id_less, $location_id_less_or_equal, $location_id_greater, $location_id_greater_or_equal, $location_id_is_null, $location_id_is_not_null, $location_id_like, $location_id_not_like, $location_id_contains, $location_id_not_contains, $location_id_starts_with, $location_id_not_starts_with, $location_id_ends_with, $location_id_not_ends_with, $location_id_in, $location_id_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);
        return $response;
    }

    /**
     * Operation conferenceRegistrationSearchWithHttpInfo
     *
     * Gets the list of conference registrations based on search criteria
     *
     * @param  string $attendee_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $conference_id Filter on CONF-ID using &#39;Equal&#39; operator (optional)
     * @param  string $location_id Filter on CONF-LOC using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $attendee_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $attendee_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $attendee_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $attendee_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $attendee_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $attendee_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $attendee_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $attendee_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $attendee_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $attendee_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $conference_id_not_equal Filter on CONF-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $conference_id_less Filter on CONF-ID using &#39;Less&#39; operator (optional)
     * @param  string $conference_id_less_or_equal Filter on CONF-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $conference_id_greater Filter on CONF-ID using &#39;Greater&#39; operator (optional)
     * @param  string $conference_id_greater_or_equal Filter on CONF-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $conference_id_is_null Filter on CONF-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $conference_id_is_not_null Filter on CONF-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $conference_id_like Filter on CONF-ID using &#39;Like&#39; operator (optional)
     * @param  string $conference_id_not_like Filter on CONF-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $conference_id_contains Filter on CONF-ID using &#39;Contains&#39; operator (optional)
     * @param  string $conference_id_not_contains Filter on CONF-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $conference_id_starts_with Filter on CONF-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $conference_id_not_starts_with Filter on CONF-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $conference_id_ends_with Filter on CONF-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $conference_id_not_ends_with Filter on CONF-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $conference_id_in Filter on CONF-ID using &#39;In&#39; operator (optional)
     * @param  string $conference_id_between Filter on CONF-ID using &#39;Between&#39; operator (optional)
     * @param  string $location_id_not_equal Filter on CONF-LOC using &#39;NotEqual&#39; operator (optional)
     * @param  string $location_id_less Filter on CONF-LOC using &#39;Less&#39; operator (optional)
     * @param  string $location_id_less_or_equal Filter on CONF-LOC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $location_id_greater Filter on CONF-LOC using &#39;Greater&#39; operator (optional)
     * @param  string $location_id_greater_or_equal Filter on CONF-LOC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $location_id_is_null Filter on CONF-LOC using &#39;IsNull&#39; operator (optional)
     * @param  string $location_id_is_not_null Filter on CONF-LOC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $location_id_like Filter on CONF-LOC using &#39;Like&#39; operator (optional)
     * @param  string $location_id_not_like Filter on CONF-LOC using &#39;NotLike&#39; operator (optional)
     * @param  string $location_id_contains Filter on CONF-LOC using &#39;Contains&#39; operator (optional)
     * @param  string $location_id_not_contains Filter on CONF-LOC using &#39;NotContains&#39; operator (optional)
     * @param  string $location_id_starts_with Filter on CONF-LOC using &#39;StartsWith&#39; operator (optional)
     * @param  string $location_id_not_starts_with Filter on CONF-LOC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $location_id_ends_with Filter on CONF-LOC using &#39;EndsWith&#39; operator (optional)
     * @param  string $location_id_not_ends_with Filter on CONF-LOC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $location_id_in Filter on CONF-LOC using &#39;In&#39; operator (optional)
     * @param  string $location_id_between Filter on CONF-LOC using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultConferenceRegistration, HTTP status code, HTTP response headers (array of strings)
     */
    public function conferenceRegistrationSearchWithHttpInfo($attendee_customer_number = null, $bill_to_customer_number = null, $conference_id = null, $location_id = null, $billing_organization_code = null, $attendee_customer_number_not_equal = null, $attendee_customer_number_less = null, $attendee_customer_number_less_or_equal = null, $attendee_customer_number_greater = null, $attendee_customer_number_greater_or_equal = null, $attendee_customer_number_is_null = null, $attendee_customer_number_is_not_null = null, $attendee_customer_number_like = null, $attendee_customer_number_not_like = null, $attendee_customer_number_contains = null, $attendee_customer_number_not_contains = null, $attendee_customer_number_starts_with = null, $attendee_customer_number_not_starts_with = null, $attendee_customer_number_ends_with = null, $attendee_customer_number_not_ends_with = null, $attendee_customer_number_in = null, $attendee_customer_number_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $conference_id_not_equal = null, $conference_id_less = null, $conference_id_less_or_equal = null, $conference_id_greater = null, $conference_id_greater_or_equal = null, $conference_id_is_null = null, $conference_id_is_not_null = null, $conference_id_like = null, $conference_id_not_like = null, $conference_id_contains = null, $conference_id_not_contains = null, $conference_id_starts_with = null, $conference_id_not_starts_with = null, $conference_id_ends_with = null, $conference_id_not_ends_with = null, $conference_id_in = null, $conference_id_between = null, $location_id_not_equal = null, $location_id_less = null, $location_id_less_or_equal = null, $location_id_greater = null, $location_id_greater_or_equal = null, $location_id_is_null = null, $location_id_is_not_null = null, $location_id_like = null, $location_id_not_like = null, $location_id_contains = null, $location_id_not_contains = null, $location_id_starts_with = null, $location_id_not_starts_with = null, $location_id_ends_with = null, $location_id_not_ends_with = null, $location_id_in = null, $location_id_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultConferenceRegistration';
        $request = $this->conferenceRegistrationSearchRequest($attendee_customer_number, $bill_to_customer_number, $conference_id, $location_id, $billing_organization_code, $attendee_customer_number_not_equal, $attendee_customer_number_less, $attendee_customer_number_less_or_equal, $attendee_customer_number_greater, $attendee_customer_number_greater_or_equal, $attendee_customer_number_is_null, $attendee_customer_number_is_not_null, $attendee_customer_number_like, $attendee_customer_number_not_like, $attendee_customer_number_contains, $attendee_customer_number_not_contains, $attendee_customer_number_starts_with, $attendee_customer_number_not_starts_with, $attendee_customer_number_ends_with, $attendee_customer_number_not_ends_with, $attendee_customer_number_in, $attendee_customer_number_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $conference_id_not_equal, $conference_id_less, $conference_id_less_or_equal, $conference_id_greater, $conference_id_greater_or_equal, $conference_id_is_null, $conference_id_is_not_null, $conference_id_like, $conference_id_not_like, $conference_id_contains, $conference_id_not_contains, $conference_id_starts_with, $conference_id_not_starts_with, $conference_id_ends_with, $conference_id_not_ends_with, $conference_id_in, $conference_id_between, $location_id_not_equal, $location_id_less, $location_id_less_or_equal, $location_id_greater, $location_id_greater_or_equal, $location_id_is_null, $location_id_is_not_null, $location_id_like, $location_id_not_like, $location_id_contains, $location_id_not_contains, $location_id_starts_with, $location_id_not_starts_with, $location_id_ends_with, $location_id_not_ends_with, $location_id_in, $location_id_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultConferenceRegistration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conferenceRegistrationSearchAsync
     *
     * Gets the list of conference registrations based on search criteria
     *
     * @param  string $attendee_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $conference_id Filter on CONF-ID using &#39;Equal&#39; operator (optional)
     * @param  string $location_id Filter on CONF-LOC using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $attendee_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $attendee_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $attendee_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $attendee_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $attendee_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $attendee_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $attendee_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $attendee_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $attendee_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $attendee_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $conference_id_not_equal Filter on CONF-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $conference_id_less Filter on CONF-ID using &#39;Less&#39; operator (optional)
     * @param  string $conference_id_less_or_equal Filter on CONF-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $conference_id_greater Filter on CONF-ID using &#39;Greater&#39; operator (optional)
     * @param  string $conference_id_greater_or_equal Filter on CONF-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $conference_id_is_null Filter on CONF-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $conference_id_is_not_null Filter on CONF-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $conference_id_like Filter on CONF-ID using &#39;Like&#39; operator (optional)
     * @param  string $conference_id_not_like Filter on CONF-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $conference_id_contains Filter on CONF-ID using &#39;Contains&#39; operator (optional)
     * @param  string $conference_id_not_contains Filter on CONF-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $conference_id_starts_with Filter on CONF-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $conference_id_not_starts_with Filter on CONF-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $conference_id_ends_with Filter on CONF-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $conference_id_not_ends_with Filter on CONF-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $conference_id_in Filter on CONF-ID using &#39;In&#39; operator (optional)
     * @param  string $conference_id_between Filter on CONF-ID using &#39;Between&#39; operator (optional)
     * @param  string $location_id_not_equal Filter on CONF-LOC using &#39;NotEqual&#39; operator (optional)
     * @param  string $location_id_less Filter on CONF-LOC using &#39;Less&#39; operator (optional)
     * @param  string $location_id_less_or_equal Filter on CONF-LOC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $location_id_greater Filter on CONF-LOC using &#39;Greater&#39; operator (optional)
     * @param  string $location_id_greater_or_equal Filter on CONF-LOC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $location_id_is_null Filter on CONF-LOC using &#39;IsNull&#39; operator (optional)
     * @param  string $location_id_is_not_null Filter on CONF-LOC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $location_id_like Filter on CONF-LOC using &#39;Like&#39; operator (optional)
     * @param  string $location_id_not_like Filter on CONF-LOC using &#39;NotLike&#39; operator (optional)
     * @param  string $location_id_contains Filter on CONF-LOC using &#39;Contains&#39; operator (optional)
     * @param  string $location_id_not_contains Filter on CONF-LOC using &#39;NotContains&#39; operator (optional)
     * @param  string $location_id_starts_with Filter on CONF-LOC using &#39;StartsWith&#39; operator (optional)
     * @param  string $location_id_not_starts_with Filter on CONF-LOC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $location_id_ends_with Filter on CONF-LOC using &#39;EndsWith&#39; operator (optional)
     * @param  string $location_id_not_ends_with Filter on CONF-LOC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $location_id_in Filter on CONF-LOC using &#39;In&#39; operator (optional)
     * @param  string $location_id_between Filter on CONF-LOC using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationSearchAsync($attendee_customer_number = null, $bill_to_customer_number = null, $conference_id = null, $location_id = null, $billing_organization_code = null, $attendee_customer_number_not_equal = null, $attendee_customer_number_less = null, $attendee_customer_number_less_or_equal = null, $attendee_customer_number_greater = null, $attendee_customer_number_greater_or_equal = null, $attendee_customer_number_is_null = null, $attendee_customer_number_is_not_null = null, $attendee_customer_number_like = null, $attendee_customer_number_not_like = null, $attendee_customer_number_contains = null, $attendee_customer_number_not_contains = null, $attendee_customer_number_starts_with = null, $attendee_customer_number_not_starts_with = null, $attendee_customer_number_ends_with = null, $attendee_customer_number_not_ends_with = null, $attendee_customer_number_in = null, $attendee_customer_number_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $conference_id_not_equal = null, $conference_id_less = null, $conference_id_less_or_equal = null, $conference_id_greater = null, $conference_id_greater_or_equal = null, $conference_id_is_null = null, $conference_id_is_not_null = null, $conference_id_like = null, $conference_id_not_like = null, $conference_id_contains = null, $conference_id_not_contains = null, $conference_id_starts_with = null, $conference_id_not_starts_with = null, $conference_id_ends_with = null, $conference_id_not_ends_with = null, $conference_id_in = null, $conference_id_between = null, $location_id_not_equal = null, $location_id_less = null, $location_id_less_or_equal = null, $location_id_greater = null, $location_id_greater_or_equal = null, $location_id_is_null = null, $location_id_is_not_null = null, $location_id_like = null, $location_id_not_like = null, $location_id_contains = null, $location_id_not_contains = null, $location_id_starts_with = null, $location_id_not_starts_with = null, $location_id_ends_with = null, $location_id_not_ends_with = null, $location_id_in = null, $location_id_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        return $this->conferenceRegistrationSearchAsyncWithHttpInfo($attendee_customer_number, $bill_to_customer_number, $conference_id, $location_id, $billing_organization_code, $attendee_customer_number_not_equal, $attendee_customer_number_less, $attendee_customer_number_less_or_equal, $attendee_customer_number_greater, $attendee_customer_number_greater_or_equal, $attendee_customer_number_is_null, $attendee_customer_number_is_not_null, $attendee_customer_number_like, $attendee_customer_number_not_like, $attendee_customer_number_contains, $attendee_customer_number_not_contains, $attendee_customer_number_starts_with, $attendee_customer_number_not_starts_with, $attendee_customer_number_ends_with, $attendee_customer_number_not_ends_with, $attendee_customer_number_in, $attendee_customer_number_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $conference_id_not_equal, $conference_id_less, $conference_id_less_or_equal, $conference_id_greater, $conference_id_greater_or_equal, $conference_id_is_null, $conference_id_is_not_null, $conference_id_like, $conference_id_not_like, $conference_id_contains, $conference_id_not_contains, $conference_id_starts_with, $conference_id_not_starts_with, $conference_id_ends_with, $conference_id_not_ends_with, $conference_id_in, $conference_id_between, $location_id_not_equal, $location_id_less, $location_id_less_or_equal, $location_id_greater, $location_id_greater_or_equal, $location_id_is_null, $location_id_is_not_null, $location_id_like, $location_id_not_like, $location_id_contains, $location_id_not_contains, $location_id_starts_with, $location_id_not_starts_with, $location_id_ends_with, $location_id_not_ends_with, $location_id_in, $location_id_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conferenceRegistrationSearchAsyncWithHttpInfo
     *
     * Gets the list of conference registrations based on search criteria
     *
     * @param  string $attendee_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $conference_id Filter on CONF-ID using &#39;Equal&#39; operator (optional)
     * @param  string $location_id Filter on CONF-LOC using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $attendee_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $attendee_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $attendee_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $attendee_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $attendee_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $attendee_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $attendee_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $attendee_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $attendee_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $attendee_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $conference_id_not_equal Filter on CONF-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $conference_id_less Filter on CONF-ID using &#39;Less&#39; operator (optional)
     * @param  string $conference_id_less_or_equal Filter on CONF-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $conference_id_greater Filter on CONF-ID using &#39;Greater&#39; operator (optional)
     * @param  string $conference_id_greater_or_equal Filter on CONF-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $conference_id_is_null Filter on CONF-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $conference_id_is_not_null Filter on CONF-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $conference_id_like Filter on CONF-ID using &#39;Like&#39; operator (optional)
     * @param  string $conference_id_not_like Filter on CONF-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $conference_id_contains Filter on CONF-ID using &#39;Contains&#39; operator (optional)
     * @param  string $conference_id_not_contains Filter on CONF-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $conference_id_starts_with Filter on CONF-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $conference_id_not_starts_with Filter on CONF-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $conference_id_ends_with Filter on CONF-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $conference_id_not_ends_with Filter on CONF-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $conference_id_in Filter on CONF-ID using &#39;In&#39; operator (optional)
     * @param  string $conference_id_between Filter on CONF-ID using &#39;Between&#39; operator (optional)
     * @param  string $location_id_not_equal Filter on CONF-LOC using &#39;NotEqual&#39; operator (optional)
     * @param  string $location_id_less Filter on CONF-LOC using &#39;Less&#39; operator (optional)
     * @param  string $location_id_less_or_equal Filter on CONF-LOC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $location_id_greater Filter on CONF-LOC using &#39;Greater&#39; operator (optional)
     * @param  string $location_id_greater_or_equal Filter on CONF-LOC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $location_id_is_null Filter on CONF-LOC using &#39;IsNull&#39; operator (optional)
     * @param  string $location_id_is_not_null Filter on CONF-LOC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $location_id_like Filter on CONF-LOC using &#39;Like&#39; operator (optional)
     * @param  string $location_id_not_like Filter on CONF-LOC using &#39;NotLike&#39; operator (optional)
     * @param  string $location_id_contains Filter on CONF-LOC using &#39;Contains&#39; operator (optional)
     * @param  string $location_id_not_contains Filter on CONF-LOC using &#39;NotContains&#39; operator (optional)
     * @param  string $location_id_starts_with Filter on CONF-LOC using &#39;StartsWith&#39; operator (optional)
     * @param  string $location_id_not_starts_with Filter on CONF-LOC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $location_id_ends_with Filter on CONF-LOC using &#39;EndsWith&#39; operator (optional)
     * @param  string $location_id_not_ends_with Filter on CONF-LOC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $location_id_in Filter on CONF-LOC using &#39;In&#39; operator (optional)
     * @param  string $location_id_between Filter on CONF-LOC using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conferenceRegistrationSearchAsyncWithHttpInfo($attendee_customer_number = null, $bill_to_customer_number = null, $conference_id = null, $location_id = null, $billing_organization_code = null, $attendee_customer_number_not_equal = null, $attendee_customer_number_less = null, $attendee_customer_number_less_or_equal = null, $attendee_customer_number_greater = null, $attendee_customer_number_greater_or_equal = null, $attendee_customer_number_is_null = null, $attendee_customer_number_is_not_null = null, $attendee_customer_number_like = null, $attendee_customer_number_not_like = null, $attendee_customer_number_contains = null, $attendee_customer_number_not_contains = null, $attendee_customer_number_starts_with = null, $attendee_customer_number_not_starts_with = null, $attendee_customer_number_ends_with = null, $attendee_customer_number_not_ends_with = null, $attendee_customer_number_in = null, $attendee_customer_number_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $conference_id_not_equal = null, $conference_id_less = null, $conference_id_less_or_equal = null, $conference_id_greater = null, $conference_id_greater_or_equal = null, $conference_id_is_null = null, $conference_id_is_not_null = null, $conference_id_like = null, $conference_id_not_like = null, $conference_id_contains = null, $conference_id_not_contains = null, $conference_id_starts_with = null, $conference_id_not_starts_with = null, $conference_id_ends_with = null, $conference_id_not_ends_with = null, $conference_id_in = null, $conference_id_between = null, $location_id_not_equal = null, $location_id_less = null, $location_id_less_or_equal = null, $location_id_greater = null, $location_id_greater_or_equal = null, $location_id_is_null = null, $location_id_is_not_null = null, $location_id_like = null, $location_id_not_like = null, $location_id_contains = null, $location_id_not_contains = null, $location_id_starts_with = null, $location_id_not_starts_with = null, $location_id_ends_with = null, $location_id_not_ends_with = null, $location_id_in = null, $location_id_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultConferenceRegistration';
        $request = $this->conferenceRegistrationSearchRequest($attendee_customer_number, $bill_to_customer_number, $conference_id, $location_id, $billing_organization_code, $attendee_customer_number_not_equal, $attendee_customer_number_less, $attendee_customer_number_less_or_equal, $attendee_customer_number_greater, $attendee_customer_number_greater_or_equal, $attendee_customer_number_is_null, $attendee_customer_number_is_not_null, $attendee_customer_number_like, $attendee_customer_number_not_like, $attendee_customer_number_contains, $attendee_customer_number_not_contains, $attendee_customer_number_starts_with, $attendee_customer_number_not_starts_with, $attendee_customer_number_ends_with, $attendee_customer_number_not_ends_with, $attendee_customer_number_in, $attendee_customer_number_between, $bill_to_customer_number_not_equal, $bill_to_customer_number_less, $bill_to_customer_number_less_or_equal, $bill_to_customer_number_greater, $bill_to_customer_number_greater_or_equal, $bill_to_customer_number_is_null, $bill_to_customer_number_is_not_null, $bill_to_customer_number_like, $bill_to_customer_number_not_like, $bill_to_customer_number_contains, $bill_to_customer_number_not_contains, $bill_to_customer_number_starts_with, $bill_to_customer_number_not_starts_with, $bill_to_customer_number_ends_with, $bill_to_customer_number_not_ends_with, $bill_to_customer_number_in, $bill_to_customer_number_between, $conference_id_not_equal, $conference_id_less, $conference_id_less_or_equal, $conference_id_greater, $conference_id_greater_or_equal, $conference_id_is_null, $conference_id_is_not_null, $conference_id_like, $conference_id_not_like, $conference_id_contains, $conference_id_not_contains, $conference_id_starts_with, $conference_id_not_starts_with, $conference_id_ends_with, $conference_id_not_ends_with, $conference_id_in, $conference_id_between, $location_id_not_equal, $location_id_less, $location_id_less_or_equal, $location_id_greater, $location_id_greater_or_equal, $location_id_is_null, $location_id_is_not_null, $location_id_like, $location_id_not_like, $location_id_contains, $location_id_not_contains, $location_id_starts_with, $location_id_not_starts_with, $location_id_ends_with, $location_id_not_ends_with, $location_id_in, $location_id_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conferenceRegistrationSearch'
     *
     * @param  string $attendee_customer_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $bill_to_customer_number Filter on BIL-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $conference_id Filter on CONF-ID using &#39;Equal&#39; operator (optional)
     * @param  string $location_id Filter on CONF-LOC using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $attendee_customer_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $attendee_customer_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $attendee_customer_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $attendee_customer_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $attendee_customer_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $attendee_customer_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $attendee_customer_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $attendee_customer_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $attendee_customer_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $attendee_customer_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $attendee_customer_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $attendee_customer_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_equal Filter on BIL-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_less Filter on BIL-CTM using &#39;Less&#39; operator (optional)
     * @param  string $bill_to_customer_number_less_or_equal Filter on BIL-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater Filter on BIL-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $bill_to_customer_number_greater_or_equal Filter on BIL-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_null Filter on BIL-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_is_not_null Filter on BIL-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $bill_to_customer_number_like Filter on BIL-CTM using &#39;Like&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_like Filter on BIL-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $bill_to_customer_number_contains Filter on BIL-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_contains Filter on BIL-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $bill_to_customer_number_starts_with Filter on BIL-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_starts_with Filter on BIL-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_ends_with Filter on BIL-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_not_ends_with Filter on BIL-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $bill_to_customer_number_in Filter on BIL-CTM using &#39;In&#39; operator (optional)
     * @param  string $bill_to_customer_number_between Filter on BIL-CTM using &#39;Between&#39; operator (optional)
     * @param  string $conference_id_not_equal Filter on CONF-ID using &#39;NotEqual&#39; operator (optional)
     * @param  string $conference_id_less Filter on CONF-ID using &#39;Less&#39; operator (optional)
     * @param  string $conference_id_less_or_equal Filter on CONF-ID using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $conference_id_greater Filter on CONF-ID using &#39;Greater&#39; operator (optional)
     * @param  string $conference_id_greater_or_equal Filter on CONF-ID using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $conference_id_is_null Filter on CONF-ID using &#39;IsNull&#39; operator (optional)
     * @param  string $conference_id_is_not_null Filter on CONF-ID using &#39;IsNotNull&#39; operator (optional)
     * @param  string $conference_id_like Filter on CONF-ID using &#39;Like&#39; operator (optional)
     * @param  string $conference_id_not_like Filter on CONF-ID using &#39;NotLike&#39; operator (optional)
     * @param  string $conference_id_contains Filter on CONF-ID using &#39;Contains&#39; operator (optional)
     * @param  string $conference_id_not_contains Filter on CONF-ID using &#39;NotContains&#39; operator (optional)
     * @param  string $conference_id_starts_with Filter on CONF-ID using &#39;StartsWith&#39; operator (optional)
     * @param  string $conference_id_not_starts_with Filter on CONF-ID using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $conference_id_ends_with Filter on CONF-ID using &#39;EndsWith&#39; operator (optional)
     * @param  string $conference_id_not_ends_with Filter on CONF-ID using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $conference_id_in Filter on CONF-ID using &#39;In&#39; operator (optional)
     * @param  string $conference_id_between Filter on CONF-ID using &#39;Between&#39; operator (optional)
     * @param  string $location_id_not_equal Filter on CONF-LOC using &#39;NotEqual&#39; operator (optional)
     * @param  string $location_id_less Filter on CONF-LOC using &#39;Less&#39; operator (optional)
     * @param  string $location_id_less_or_equal Filter on CONF-LOC using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $location_id_greater Filter on CONF-LOC using &#39;Greater&#39; operator (optional)
     * @param  string $location_id_greater_or_equal Filter on CONF-LOC using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $location_id_is_null Filter on CONF-LOC using &#39;IsNull&#39; operator (optional)
     * @param  string $location_id_is_not_null Filter on CONF-LOC using &#39;IsNotNull&#39; operator (optional)
     * @param  string $location_id_like Filter on CONF-LOC using &#39;Like&#39; operator (optional)
     * @param  string $location_id_not_like Filter on CONF-LOC using &#39;NotLike&#39; operator (optional)
     * @param  string $location_id_contains Filter on CONF-LOC using &#39;Contains&#39; operator (optional)
     * @param  string $location_id_not_contains Filter on CONF-LOC using &#39;NotContains&#39; operator (optional)
     * @param  string $location_id_starts_with Filter on CONF-LOC using &#39;StartsWith&#39; operator (optional)
     * @param  string $location_id_not_starts_with Filter on CONF-LOC using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $location_id_ends_with Filter on CONF-LOC using &#39;EndsWith&#39; operator (optional)
     * @param  string $location_id_not_ends_with Filter on CONF-LOC using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $location_id_in Filter on CONF-LOC using &#39;In&#39; operator (optional)
     * @param  string $location_id_between Filter on CONF-LOC using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conferenceRegistrationSearchRequest($attendee_customer_number = null, $bill_to_customer_number = null, $conference_id = null, $location_id = null, $billing_organization_code = null, $attendee_customer_number_not_equal = null, $attendee_customer_number_less = null, $attendee_customer_number_less_or_equal = null, $attendee_customer_number_greater = null, $attendee_customer_number_greater_or_equal = null, $attendee_customer_number_is_null = null, $attendee_customer_number_is_not_null = null, $attendee_customer_number_like = null, $attendee_customer_number_not_like = null, $attendee_customer_number_contains = null, $attendee_customer_number_not_contains = null, $attendee_customer_number_starts_with = null, $attendee_customer_number_not_starts_with = null, $attendee_customer_number_ends_with = null, $attendee_customer_number_not_ends_with = null, $attendee_customer_number_in = null, $attendee_customer_number_between = null, $bill_to_customer_number_not_equal = null, $bill_to_customer_number_less = null, $bill_to_customer_number_less_or_equal = null, $bill_to_customer_number_greater = null, $bill_to_customer_number_greater_or_equal = null, $bill_to_customer_number_is_null = null, $bill_to_customer_number_is_not_null = null, $bill_to_customer_number_like = null, $bill_to_customer_number_not_like = null, $bill_to_customer_number_contains = null, $bill_to_customer_number_not_contains = null, $bill_to_customer_number_starts_with = null, $bill_to_customer_number_not_starts_with = null, $bill_to_customer_number_ends_with = null, $bill_to_customer_number_not_ends_with = null, $bill_to_customer_number_in = null, $bill_to_customer_number_between = null, $conference_id_not_equal = null, $conference_id_less = null, $conference_id_less_or_equal = null, $conference_id_greater = null, $conference_id_greater_or_equal = null, $conference_id_is_null = null, $conference_id_is_not_null = null, $conference_id_like = null, $conference_id_not_like = null, $conference_id_contains = null, $conference_id_not_contains = null, $conference_id_starts_with = null, $conference_id_not_starts_with = null, $conference_id_ends_with = null, $conference_id_not_ends_with = null, $conference_id_in = null, $conference_id_between = null, $location_id_not_equal = null, $location_id_less = null, $location_id_less_or_equal = null, $location_id_greater = null, $location_id_greater_or_equal = null, $location_id_is_null = null, $location_id_is_not_null = null, $location_id_like = null, $location_id_not_like = null, $location_id_contains = null, $location_id_not_contains = null, $location_id_starts_with = null, $location_id_not_starts_with = null, $location_id_ends_with = null, $location_id_not_ends_with = null, $location_id_in = null, $location_id_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {

        $resourcePath = '/conference-registrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attendee_customer_number !== null) {
            $queryParams['AttendeeCustomerNumber'] = ObjectSerializer::toQueryValue($attendee_customer_number);
        }
        // query params
        if ($bill_to_customer_number !== null) {
            $queryParams['BillToCustomerNumber'] = ObjectSerializer::toQueryValue($bill_to_customer_number);
        }
        // query params
        if ($conference_id !== null) {
            $queryParams['ConferenceId'] = ObjectSerializer::toQueryValue($conference_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['LocationId'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($attendee_customer_number_not_equal !== null) {
            $queryParams['AttendeeCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($attendee_customer_number_not_equal);
        }
        // query params
        if ($attendee_customer_number_less !== null) {
            $queryParams['AttendeeCustomerNumber.Less'] = ObjectSerializer::toQueryValue($attendee_customer_number_less);
        }
        // query params
        if ($attendee_customer_number_less_or_equal !== null) {
            $queryParams['AttendeeCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($attendee_customer_number_less_or_equal);
        }
        // query params
        if ($attendee_customer_number_greater !== null) {
            $queryParams['AttendeeCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($attendee_customer_number_greater);
        }
        // query params
        if ($attendee_customer_number_greater_or_equal !== null) {
            $queryParams['AttendeeCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($attendee_customer_number_greater_or_equal);
        }
        // query params
        if ($attendee_customer_number_is_null !== null) {
            $queryParams['AttendeeCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($attendee_customer_number_is_null);
        }
        // query params
        if ($attendee_customer_number_is_not_null !== null) {
            $queryParams['AttendeeCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($attendee_customer_number_is_not_null);
        }
        // query params
        if ($attendee_customer_number_like !== null) {
            $queryParams['AttendeeCustomerNumber.Like'] = ObjectSerializer::toQueryValue($attendee_customer_number_like);
        }
        // query params
        if ($attendee_customer_number_not_like !== null) {
            $queryParams['AttendeeCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($attendee_customer_number_not_like);
        }
        // query params
        if ($attendee_customer_number_contains !== null) {
            $queryParams['AttendeeCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($attendee_customer_number_contains);
        }
        // query params
        if ($attendee_customer_number_not_contains !== null) {
            $queryParams['AttendeeCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($attendee_customer_number_not_contains);
        }
        // query params
        if ($attendee_customer_number_starts_with !== null) {
            $queryParams['AttendeeCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($attendee_customer_number_starts_with);
        }
        // query params
        if ($attendee_customer_number_not_starts_with !== null) {
            $queryParams['AttendeeCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($attendee_customer_number_not_starts_with);
        }
        // query params
        if ($attendee_customer_number_ends_with !== null) {
            $queryParams['AttendeeCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($attendee_customer_number_ends_with);
        }
        // query params
        if ($attendee_customer_number_not_ends_with !== null) {
            $queryParams['AttendeeCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($attendee_customer_number_not_ends_with);
        }
        // query params
        if ($attendee_customer_number_in !== null) {
            $queryParams['AttendeeCustomerNumber.In'] = ObjectSerializer::toQueryValue($attendee_customer_number_in);
        }
        // query params
        if ($attendee_customer_number_between !== null) {
            $queryParams['AttendeeCustomerNumber.Between'] = ObjectSerializer::toQueryValue($attendee_customer_number_between);
        }
        // query params
        if ($bill_to_customer_number_not_equal !== null) {
            $queryParams['BillToCustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_equal);
        }
        // query params
        if ($bill_to_customer_number_less !== null) {
            $queryParams['BillToCustomerNumber.Less'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less);
        }
        // query params
        if ($bill_to_customer_number_less_or_equal !== null) {
            $queryParams['BillToCustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_less_or_equal);
        }
        // query params
        if ($bill_to_customer_number_greater !== null) {
            $queryParams['BillToCustomerNumber.Greater'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater);
        }
        // query params
        if ($bill_to_customer_number_greater_or_equal !== null) {
            $queryParams['BillToCustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($bill_to_customer_number_greater_or_equal);
        }
        // query params
        if ($bill_to_customer_number_is_null !== null) {
            $queryParams['BillToCustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_null);
        }
        // query params
        if ($bill_to_customer_number_is_not_null !== null) {
            $queryParams['BillToCustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($bill_to_customer_number_is_not_null);
        }
        // query params
        if ($bill_to_customer_number_like !== null) {
            $queryParams['BillToCustomerNumber.Like'] = ObjectSerializer::toQueryValue($bill_to_customer_number_like);
        }
        // query params
        if ($bill_to_customer_number_not_like !== null) {
            $queryParams['BillToCustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_like);
        }
        // query params
        if ($bill_to_customer_number_contains !== null) {
            $queryParams['BillToCustomerNumber.Contains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_contains);
        }
        // query params
        if ($bill_to_customer_number_not_contains !== null) {
            $queryParams['BillToCustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_contains);
        }
        // query params
        if ($bill_to_customer_number_starts_with !== null) {
            $queryParams['BillToCustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_starts_with);
        }
        // query params
        if ($bill_to_customer_number_not_starts_with !== null) {
            $queryParams['BillToCustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_starts_with);
        }
        // query params
        if ($bill_to_customer_number_ends_with !== null) {
            $queryParams['BillToCustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_ends_with);
        }
        // query params
        if ($bill_to_customer_number_not_ends_with !== null) {
            $queryParams['BillToCustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($bill_to_customer_number_not_ends_with);
        }
        // query params
        if ($bill_to_customer_number_in !== null) {
            $queryParams['BillToCustomerNumber.In'] = ObjectSerializer::toQueryValue($bill_to_customer_number_in);
        }
        // query params
        if ($bill_to_customer_number_between !== null) {
            $queryParams['BillToCustomerNumber.Between'] = ObjectSerializer::toQueryValue($bill_to_customer_number_between);
        }
        // query params
        if ($conference_id_not_equal !== null) {
            $queryParams['ConferenceId.NotEqual'] = ObjectSerializer::toQueryValue($conference_id_not_equal);
        }
        // query params
        if ($conference_id_less !== null) {
            $queryParams['ConferenceId.Less'] = ObjectSerializer::toQueryValue($conference_id_less);
        }
        // query params
        if ($conference_id_less_or_equal !== null) {
            $queryParams['ConferenceId.LessOrEqual'] = ObjectSerializer::toQueryValue($conference_id_less_or_equal);
        }
        // query params
        if ($conference_id_greater !== null) {
            $queryParams['ConferenceId.Greater'] = ObjectSerializer::toQueryValue($conference_id_greater);
        }
        // query params
        if ($conference_id_greater_or_equal !== null) {
            $queryParams['ConferenceId.GreaterOrEqual'] = ObjectSerializer::toQueryValue($conference_id_greater_or_equal);
        }
        // query params
        if ($conference_id_is_null !== null) {
            $queryParams['ConferenceId.IsNull'] = ObjectSerializer::toQueryValue($conference_id_is_null);
        }
        // query params
        if ($conference_id_is_not_null !== null) {
            $queryParams['ConferenceId.IsNotNull'] = ObjectSerializer::toQueryValue($conference_id_is_not_null);
        }
        // query params
        if ($conference_id_like !== null) {
            $queryParams['ConferenceId.Like'] = ObjectSerializer::toQueryValue($conference_id_like);
        }
        // query params
        if ($conference_id_not_like !== null) {
            $queryParams['ConferenceId.NotLike'] = ObjectSerializer::toQueryValue($conference_id_not_like);
        }
        // query params
        if ($conference_id_contains !== null) {
            $queryParams['ConferenceId.Contains'] = ObjectSerializer::toQueryValue($conference_id_contains);
        }
        // query params
        if ($conference_id_not_contains !== null) {
            $queryParams['ConferenceId.NotContains'] = ObjectSerializer::toQueryValue($conference_id_not_contains);
        }
        // query params
        if ($conference_id_starts_with !== null) {
            $queryParams['ConferenceId.StartsWith'] = ObjectSerializer::toQueryValue($conference_id_starts_with);
        }
        // query params
        if ($conference_id_not_starts_with !== null) {
            $queryParams['ConferenceId.NotStartsWith'] = ObjectSerializer::toQueryValue($conference_id_not_starts_with);
        }
        // query params
        if ($conference_id_ends_with !== null) {
            $queryParams['ConferenceId.EndsWith'] = ObjectSerializer::toQueryValue($conference_id_ends_with);
        }
        // query params
        if ($conference_id_not_ends_with !== null) {
            $queryParams['ConferenceId.NotEndsWith'] = ObjectSerializer::toQueryValue($conference_id_not_ends_with);
        }
        // query params
        if ($conference_id_in !== null) {
            $queryParams['ConferenceId.In'] = ObjectSerializer::toQueryValue($conference_id_in);
        }
        // query params
        if ($conference_id_between !== null) {
            $queryParams['ConferenceId.Between'] = ObjectSerializer::toQueryValue($conference_id_between);
        }
        // query params
        if ($location_id_not_equal !== null) {
            $queryParams['LocationId.NotEqual'] = ObjectSerializer::toQueryValue($location_id_not_equal);
        }
        // query params
        if ($location_id_less !== null) {
            $queryParams['LocationId.Less'] = ObjectSerializer::toQueryValue($location_id_less);
        }
        // query params
        if ($location_id_less_or_equal !== null) {
            $queryParams['LocationId.LessOrEqual'] = ObjectSerializer::toQueryValue($location_id_less_or_equal);
        }
        // query params
        if ($location_id_greater !== null) {
            $queryParams['LocationId.Greater'] = ObjectSerializer::toQueryValue($location_id_greater);
        }
        // query params
        if ($location_id_greater_or_equal !== null) {
            $queryParams['LocationId.GreaterOrEqual'] = ObjectSerializer::toQueryValue($location_id_greater_or_equal);
        }
        // query params
        if ($location_id_is_null !== null) {
            $queryParams['LocationId.IsNull'] = ObjectSerializer::toQueryValue($location_id_is_null);
        }
        // query params
        if ($location_id_is_not_null !== null) {
            $queryParams['LocationId.IsNotNull'] = ObjectSerializer::toQueryValue($location_id_is_not_null);
        }
        // query params
        if ($location_id_like !== null) {
            $queryParams['LocationId.Like'] = ObjectSerializer::toQueryValue($location_id_like);
        }
        // query params
        if ($location_id_not_like !== null) {
            $queryParams['LocationId.NotLike'] = ObjectSerializer::toQueryValue($location_id_not_like);
        }
        // query params
        if ($location_id_contains !== null) {
            $queryParams['LocationId.Contains'] = ObjectSerializer::toQueryValue($location_id_contains);
        }
        // query params
        if ($location_id_not_contains !== null) {
            $queryParams['LocationId.NotContains'] = ObjectSerializer::toQueryValue($location_id_not_contains);
        }
        // query params
        if ($location_id_starts_with !== null) {
            $queryParams['LocationId.StartsWith'] = ObjectSerializer::toQueryValue($location_id_starts_with);
        }
        // query params
        if ($location_id_not_starts_with !== null) {
            $queryParams['LocationId.NotStartsWith'] = ObjectSerializer::toQueryValue($location_id_not_starts_with);
        }
        // query params
        if ($location_id_ends_with !== null) {
            $queryParams['LocationId.EndsWith'] = ObjectSerializer::toQueryValue($location_id_ends_with);
        }
        // query params
        if ($location_id_not_ends_with !== null) {
            $queryParams['LocationId.NotEndsWith'] = ObjectSerializer::toQueryValue($location_id_not_ends_with);
        }
        // query params
        if ($location_id_in !== null) {
            $queryParams['LocationId.In'] = ObjectSerializer::toQueryValue($location_id_in);
        }
        // query params
        if ($location_id_between !== null) {
            $queryParams['LocationId.Between'] = ObjectSerializer::toQueryValue($location_id_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
