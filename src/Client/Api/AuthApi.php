<?php
/**
 * AuthApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * AuthApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authByAthens
     *
     * Gets the authorizations for a customer, validated by Athens.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with an Athens ID. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authByAthens($authentication_group, $credentials, $host_code)
    {
        list($response) = $this->authByAthensWithHttpInfo($authentication_group, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authByAthensWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by Athens.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with an Athens ID. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authByAthensWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByAthensRequest($authentication_group, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authByAthensAsync
     *
     * Gets the authorizations for a customer, validated by Athens.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with an Athens ID. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByAthensAsync($authentication_group, $credentials, $host_code)
    {
        return $this->authByAthensAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authByAthensAsyncWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by Athens.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with an Athens ID. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByAthensAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByAthensRequest($authentication_group, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authByAthens'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with an Athens ID. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authByAthensRequest($authentication_group, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authByAthens'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authByAthens'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authByAthens'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/athens/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authByEmail
     *
     * Gets the authorizations for a customer, validated by email and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $email_address The user&#39;s Email address. (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authByEmail($authentication_group, $email_address, $credentials, $host_code)
    {
        list($response) = $this->authByEmailWithHttpInfo($authentication_group, $email_address, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authByEmailWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by email and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $email_address The user&#39;s Email address. (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authByEmailWithHttpInfo($authentication_group, $email_address, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByEmailRequest($authentication_group, $email_address, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authByEmailAsync
     *
     * Gets the authorizations for a customer, validated by email and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $email_address The user&#39;s Email address. (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByEmailAsync($authentication_group, $email_address, $credentials, $host_code)
    {
        return $this->authByEmailAsyncWithHttpInfo($authentication_group, $email_address, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authByEmailAsyncWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by email and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $email_address The user&#39;s Email address. (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByEmailAsyncWithHttpInfo($authentication_group, $email_address, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByEmailRequest($authentication_group, $email_address, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authByEmail'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $email_address The user&#39;s Email address. (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authByEmailRequest($authentication_group, $email_address, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authByEmail'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling authByEmail'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authByEmail'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authByEmail'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/email/{emailAddress}/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($email_address !== null) {
            $resourcePath = str_replace(
                '{' . 'emailAddress' . '}',
                ObjectSerializer::toPathValue($email_address),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authByIp
     *
     * Gets the authorizations for a customer, validated by IP address.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with an IP address. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authByIp($authentication_group, $credentials, $host_code)
    {
        list($response) = $this->authByIpWithHttpInfo($authentication_group, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authByIpWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by IP address.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with an IP address. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authByIpWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByIpRequest($authentication_group, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authByIpAsync
     *
     * Gets the authorizations for a customer, validated by IP address.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with an IP address. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByIpAsync($authentication_group, $credentials, $host_code)
    {
        return $this->authByIpAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authByIpAsyncWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by IP address.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with an IP address. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByIpAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByIpRequest($authentication_group, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authByIp'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with an IP address. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authByIpRequest($authentication_group, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authByIp'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authByIp'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authByIp'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/ip/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authByShibboleth
     *
     * Gets the authorizations for a customer, validated by Shibboleth.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with a Shibboleth institution ID code. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authByShibboleth($authentication_group, $credentials, $host_code)
    {
        list($response) = $this->authByShibbolethWithHttpInfo($authentication_group, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authByShibbolethWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by Shibboleth.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with a Shibboleth institution ID code. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authByShibbolethWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByShibbolethRequest($authentication_group, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authByShibbolethAsync
     *
     * Gets the authorizations for a customer, validated by Shibboleth.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with a Shibboleth institution ID code. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByShibbolethAsync($authentication_group, $credentials, $host_code)
    {
        return $this->authByShibbolethAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authByShibbolethAsyncWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by Shibboleth.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with a Shibboleth institution ID code. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByShibbolethAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByShibbolethRequest($authentication_group, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authByShibboleth'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials A IdBasedLoginCredentials object populated with a Shibboleth institution ID code. (required)
     * @param  string $host_code Content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authByShibbolethRequest($authentication_group, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authByShibboleth'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authByShibboleth'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authByShibboleth'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/shibboleth/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authBySingleSignOn
     *
     * Get the authorizations for a customer, validated by single sign on.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with a single sign on ID. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authBySingleSignOn($authentication_group, $credentials, $host_code)
    {
        list($response) = $this->authBySingleSignOnWithHttpInfo($authentication_group, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authBySingleSignOnWithHttpInfo
     *
     * Get the authorizations for a customer, validated by single sign on.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with a single sign on ID. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authBySingleSignOnWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authBySingleSignOnRequest($authentication_group, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authBySingleSignOnAsync
     *
     * Get the authorizations for a customer, validated by single sign on.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with a single sign on ID. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authBySingleSignOnAsync($authentication_group, $credentials, $host_code)
    {
        return $this->authBySingleSignOnAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authBySingleSignOnAsyncWithHttpInfo
     *
     * Get the authorizations for a customer, validated by single sign on.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with a single sign on ID. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authBySingleSignOnAsyncWithHttpInfo($authentication_group, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authBySingleSignOnRequest($authentication_group, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authBySingleSignOn'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  \Advantage\Client\Model\IdBasedLoginCredentials $credentials An IdBasedLoginCredentials object populated with a single sign on ID. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authBySingleSignOnRequest($authentication_group, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authBySingleSignOn'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authBySingleSignOn'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authBySingleSignOn'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/single-sign-on/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authByUsername
     *
     * Gets the authorizations for a customer, validated by username and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $username The Username (sometimes referred to as a login.) (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AuthResponse
     */
    public function authByUsername($authentication_group, $username, $credentials, $host_code)
    {
        list($response) = $this->authByUsernameWithHttpInfo($authentication_group, $username, $credentials, $host_code);
        return $response;
    }

    /**
     * Operation authByUsernameWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by username and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $username The Username (sometimes referred to as a login.) (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AuthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authByUsernameWithHttpInfo($authentication_group, $username, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByUsernameRequest($authentication_group, $username, $credentials, $host_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authByUsernameAsync
     *
     * Gets the authorizations for a customer, validated by username and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $username The Username (sometimes referred to as a login.) (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByUsernameAsync($authentication_group, $username, $credentials, $host_code)
    {
        return $this->authByUsernameAsyncWithHttpInfo($authentication_group, $username, $credentials, $host_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authByUsernameAsyncWithHttpInfo
     *
     * Gets the authorizations for a customer, validated by username and password.
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $username The Username (sometimes referred to as a login.) (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authByUsernameAsyncWithHttpInfo($authentication_group, $username, $credentials, $host_code)
    {
        $returnType = '\Advantage\Client\Model\AuthResponse';
        $request = $this->authByUsernameRequest($authentication_group, $username, $credentials, $host_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authByUsername'
     *
     * @param  string $authentication_group The Advantage authentication group within which to search. (required)
     * @param  string $username The Username (sometimes referred to as a login.) (required)
     * @param  \Advantage\Client\Model\LoginCredentials $credentials A LoginCredentials object populated with a password. (required)
     * @param  string $host_code The content host code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authByUsernameRequest($authentication_group, $username, $credentials, $host_code)
    {
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authByUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling authByUsername'
            );
        }
        // verify the required parameter 'credentials' is set
        if ($credentials === null || (is_array($credentials) && count($credentials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credentials when calling authByUsername'
            );
        }
        // verify the required parameter 'host_code' is set
        if ($host_code === null || (is_array($host_code) && count($host_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host_code when calling authByUsername'
            );
        }

        $resourcePath = '/auth/{authenticationGroup}/username/{username}/{hostCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($host_code !== null) {
            $resourcePath = str_replace(
                '{' . 'hostCode' . '}',
                ObjectSerializer::toPathValue($host_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authGetCustomerAuthentications
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAuthentications
     */
    public function authGetCustomerAuthentications($customer_number)
    {
        list($response) = $this->authGetCustomerAuthenticationsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation authGetCustomerAuthenticationsWithHttpInfo
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAuthentications, HTTP status code, HTTP response headers (array of strings)
     */
    public function authGetCustomerAuthenticationsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAuthentications';
        $request = $this->authGetCustomerAuthenticationsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAuthentications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authGetCustomerAuthenticationsAsync
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authGetCustomerAuthenticationsAsync($customer_number)
    {
        return $this->authGetCustomerAuthenticationsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authGetCustomerAuthenticationsAsyncWithHttpInfo
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authGetCustomerAuthenticationsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\CustomerAuthentications';
        $request = $this->authGetCustomerAuthenticationsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authGetCustomerAuthentications'
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authGetCustomerAuthenticationsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling authGetCustomerAuthentications'
            );
        }

        $resourcePath = '/customers/{customerNumber}/authentications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authGetCustomerAuthentications_0
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     * @param  string $authentication_group Authentication group to look for authentication information in. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\CustomerAuthentications
     */
    public function authGetCustomerAuthentications_0($customer_number, $authentication_group)
    {
        list($response) = $this->authGetCustomerAuthentications_0WithHttpInfo($customer_number, $authentication_group);
        return $response;
    }

    /**
     * Operation authGetCustomerAuthentications_0WithHttpInfo
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     * @param  string $authentication_group Authentication group to look for authentication information in. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\CustomerAuthentications, HTTP status code, HTTP response headers (array of strings)
     */
    public function authGetCustomerAuthentications_0WithHttpInfo($customer_number, $authentication_group)
    {
        $returnType = '\Advantage\Client\Model\CustomerAuthentications';
        $request = $this->authGetCustomerAuthentications_0Request($customer_number, $authentication_group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\CustomerAuthentications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authGetCustomerAuthentications_0Async
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     * @param  string $authentication_group Authentication group to look for authentication information in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authGetCustomerAuthentications_0Async($customer_number, $authentication_group)
    {
        return $this->authGetCustomerAuthentications_0AsyncWithHttpInfo($customer_number, $authentication_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authGetCustomerAuthentications_0AsyncWithHttpInfo
     *
     * Finds and returns authentication information for a given customer number.
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     * @param  string $authentication_group Authentication group to look for authentication information in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authGetCustomerAuthentications_0AsyncWithHttpInfo($customer_number, $authentication_group)
    {
        $returnType = '\Advantage\Client\Model\CustomerAuthentications';
        $request = $this->authGetCustomerAuthentications_0Request($customer_number, $authentication_group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authGetCustomerAuthentications_0'
     *
     * @param  string $customer_number The Advantage customer number to find authentication information for. (required)
     * @param  string $authentication_group Authentication group to look for authentication information in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authGetCustomerAuthentications_0Request($customer_number, $authentication_group)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling authGetCustomerAuthentications_0'
            );
        }
        // verify the required parameter 'authentication_group' is set
        if ($authentication_group === null || (is_array($authentication_group) && count($authentication_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_group when calling authGetCustomerAuthentications_0'
            );
        }

        $resourcePath = '/customers/{customerNumber}/authentications/authentication-group/{authenticationGroup}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($authentication_group !== null) {
            $resourcePath = str_replace(
                '{' . 'authenticationGroup' . '}',
                ObjectSerializer::toPathValue($authentication_group),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
