<?php
/**
 * PromotionChoiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * PromotionChoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionChoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation promotionChoiceCreateChoices
     *
     * Create a new promotion choice or many new promotion choices. All promotion choices created in this way  must be for the same promotion (i.e. same promotion code.)
     *
     * @param  string $promotion_code The promotion code the choice(s) belongs to. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceCreateRequest[] $promotion_choice_create_requests An array of PromotionChoiceCreateRequest objects. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function promotionChoiceCreateChoices($promotion_code, $promotion_choice_create_requests)
    {
        $this->promotionChoiceCreateChoicesWithHttpInfo($promotion_code, $promotion_choice_create_requests);
    }

    /**
     * Operation promotionChoiceCreateChoicesWithHttpInfo
     *
     * Create a new promotion choice or many new promotion choices. All promotion choices created in this way  must be for the same promotion (i.e. same promotion code.)
     *
     * @param  string $promotion_code The promotion code the choice(s) belongs to. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceCreateRequest[] $promotion_choice_create_requests An array of PromotionChoiceCreateRequest objects. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceCreateChoicesWithHttpInfo($promotion_code, $promotion_choice_create_requests)
    {
        $returnType = '';
        $request = $this->promotionChoiceCreateChoicesRequest($promotion_code, $promotion_choice_create_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceCreateChoicesAsync
     *
     * Create a new promotion choice or many new promotion choices. All promotion choices created in this way  must be for the same promotion (i.e. same promotion code.)
     *
     * @param  string $promotion_code The promotion code the choice(s) belongs to. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceCreateRequest[] $promotion_choice_create_requests An array of PromotionChoiceCreateRequest objects. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceCreateChoicesAsync($promotion_code, $promotion_choice_create_requests)
    {
        return $this->promotionChoiceCreateChoicesAsyncWithHttpInfo($promotion_code, $promotion_choice_create_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceCreateChoicesAsyncWithHttpInfo
     *
     * Create a new promotion choice or many new promotion choices. All promotion choices created in this way  must be for the same promotion (i.e. same promotion code.)
     *
     * @param  string $promotion_code The promotion code the choice(s) belongs to. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceCreateRequest[] $promotion_choice_create_requests An array of PromotionChoiceCreateRequest objects. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceCreateChoicesAsyncWithHttpInfo($promotion_code, $promotion_choice_create_requests)
    {
        $returnType = '';
        $request = $this->promotionChoiceCreateChoicesRequest($promotion_code, $promotion_choice_create_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceCreateChoices'
     *
     * @param  string $promotion_code The promotion code the choice(s) belongs to. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceCreateRequest[] $promotion_choice_create_requests An array of PromotionChoiceCreateRequest objects. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceCreateChoicesRequest($promotion_code, $promotion_choice_create_requests)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceCreateChoices'
            );
        }
        // verify the required parameter 'promotion_choice_create_requests' is set
        if ($promotion_choice_create_requests === null || (is_array($promotion_choice_create_requests) && count($promotion_choice_create_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_choice_create_requests when calling promotionChoiceCreateChoices'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($promotion_choice_create_requests)) {
            $_tempBody = $promotion_choice_create_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceDeleteChoice
     *
     * Delete a specific promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion the promotion-choice-item belongs to. (required)
     * @param  string $item_number Item number of the promotion-choice-item. (required)
     * @param  string $choice_code The promotion choice ID of the promotion-choice-item to delete. (required)
     * @param  string $currency_code The billing currency of the promotion-choice-item to delete. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function promotionChoiceDeleteChoice($promotion_code, $item_number, $choice_code, $currency_code)
    {
        $this->promotionChoiceDeleteChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code);
    }

    /**
     * Operation promotionChoiceDeleteChoiceWithHttpInfo
     *
     * Delete a specific promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion the promotion-choice-item belongs to. (required)
     * @param  string $item_number Item number of the promotion-choice-item. (required)
     * @param  string $choice_code The promotion choice ID of the promotion-choice-item to delete. (required)
     * @param  string $currency_code The billing currency of the promotion-choice-item to delete. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceDeleteChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
    {
        $returnType = '';
        $request = $this->promotionChoiceDeleteChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceDeleteChoiceAsync
     *
     * Delete a specific promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion the promotion-choice-item belongs to. (required)
     * @param  string $item_number Item number of the promotion-choice-item. (required)
     * @param  string $choice_code The promotion choice ID of the promotion-choice-item to delete. (required)
     * @param  string $currency_code The billing currency of the promotion-choice-item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceDeleteChoiceAsync($promotion_code, $item_number, $choice_code, $currency_code)
    {
        return $this->promotionChoiceDeleteChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceDeleteChoiceAsyncWithHttpInfo
     *
     * Delete a specific promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion the promotion-choice-item belongs to. (required)
     * @param  string $item_number Item number of the promotion-choice-item. (required)
     * @param  string $choice_code The promotion choice ID of the promotion-choice-item to delete. (required)
     * @param  string $currency_code The billing currency of the promotion-choice-item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceDeleteChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
    {
        $returnType = '';
        $request = $this->promotionChoiceDeleteChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceDeleteChoice'
     *
     * @param  string $promotion_code The promotion code of the promotion the promotion-choice-item belongs to. (required)
     * @param  string $item_number Item number of the promotion-choice-item. (required)
     * @param  string $choice_code The promotion choice ID of the promotion-choice-item to delete. (required)
     * @param  string $currency_code The billing currency of the promotion-choice-item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceDeleteChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceDeleteChoice'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceDeleteChoice'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling promotionChoiceDeleteChoice'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling promotionChoiceDeleteChoice'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetChoice
     *
     * Get a specific promotion choice for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (required)
     * @param  bool $allow_inactive_promotion Allow the promotion for the choice to be inactive (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PromotionChoice
     */
    public function promotionChoiceGetChoice($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
    {
        list($response) = $this->promotionChoiceGetChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion);
        return $response;
    }

    /**
     * Operation promotionChoiceGetChoiceWithHttpInfo
     *
     * Get a specific promotion choice for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (required)
     * @param  bool $allow_inactive_promotion Allow the promotion for the choice to be inactive (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PromotionChoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
    {
        $returnType = '\Advantage\Client\Model\PromotionChoice';
        $request = $this->promotionChoiceGetChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PromotionChoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetChoiceAsync
     *
     * Get a specific promotion choice for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (required)
     * @param  bool $allow_inactive_promotion Allow the promotion for the choice to be inactive (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoiceAsync($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
    {
        return $this->promotionChoiceGetChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetChoiceAsyncWithHttpInfo
     *
     * Get a specific promotion choice for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (required)
     * @param  bool $allow_inactive_promotion Allow the promotion for the choice to be inactive (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
    {
        $returnType = '\Advantage\Client\Model\PromotionChoice';
        $request = $this->promotionChoiceGetChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetChoice'
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (required)
     * @param  bool $allow_inactive_promotion Allow the promotion for the choice to be inactive (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $allow_inactive_promotion)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetChoice'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceGetChoice'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling promotionChoiceGetChoice'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling promotionChoiceGetChoice'
            );
        }
        // verify the required parameter 'allow_inactive_promotion' is set
        if ($allow_inactive_promotion === null || (is_array($allow_inactive_promotion) && count($allow_inactive_promotion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allow_inactive_promotion when calling promotionChoiceGetChoice'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($allow_inactive_promotion !== null) {
            $queryParams['allowInactivePromotion'] = ObjectSerializer::toQueryValue($allow_inactive_promotion);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetChoicesByProduct
     *
     * Get the information for the possible promotion choices for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultPromotionChoice
     */
    public function promotionChoiceGetChoicesByProduct($promotion_code, $item_number, $currency_code = null)
    {
        list($response) = $this->promotionChoiceGetChoicesByProductWithHttpInfo($promotion_code, $item_number, $currency_code);
        return $response;
    }

    /**
     * Operation promotionChoiceGetChoicesByProductWithHttpInfo
     *
     * Get the information for the possible promotion choices for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultPromotionChoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetChoicesByProductWithHttpInfo($promotion_code, $item_number, $currency_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPromotionChoice';
        $request = $this->promotionChoiceGetChoicesByProductRequest($promotion_code, $item_number, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultPromotionChoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetChoicesByProductAsync
     *
     * Get the information for the possible promotion choices for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoicesByProductAsync($promotion_code, $item_number, $currency_code = null)
    {
        return $this->promotionChoiceGetChoicesByProductAsyncWithHttpInfo($promotion_code, $item_number, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetChoicesByProductAsyncWithHttpInfo
     *
     * Get the information for the possible promotion choices for a product.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoicesByProductAsyncWithHttpInfo($promotion_code, $item_number, $currency_code = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultPromotionChoice';
        $request = $this->promotionChoiceGetChoicesByProductRequest($promotion_code, $item_number, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetChoicesByProduct'
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $currency_code The optional currency for the order. Not supplying this argument means promotion              choices across all currencies will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetChoicesByProductRequest($promotion_code, $item_number, $currency_code = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetChoicesByProduct'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceGetChoicesByProduct'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetChoicesByPromotion
     *
     * Get all promotion choices for a given promotion that match the searchAgument. The result of the search can  be limited to N at a time.
     *
     * @param  string $promotion_code The Advantage promotion code that holds all the choices (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on promotion choice (optional)
     * @param  string $filter_currency_code The currency to limit results by (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultWithCountPromotionChoice
     */
    public function promotionChoiceGetChoicesByPromotion($promotion_code, $filter_search = null, $filter_currency_code = null, $pager_skip = null, $pager_take = null)
    {
        list($response) = $this->promotionChoiceGetChoicesByPromotionWithHttpInfo($promotion_code, $filter_search, $filter_currency_code, $pager_skip, $pager_take);
        return $response;
    }

    /**
     * Operation promotionChoiceGetChoicesByPromotionWithHttpInfo
     *
     * Get all promotion choices for a given promotion that match the searchAgument. The result of the search can  be limited to N at a time.
     *
     * @param  string $promotion_code The Advantage promotion code that holds all the choices (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on promotion choice (optional)
     * @param  string $filter_currency_code The currency to limit results by (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultWithCountPromotionChoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetChoicesByPromotionWithHttpInfo($promotion_code, $filter_search = null, $filter_currency_code = null, $pager_skip = null, $pager_take = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountPromotionChoice';
        $request = $this->promotionChoiceGetChoicesByPromotionRequest($promotion_code, $filter_search, $filter_currency_code, $pager_skip, $pager_take);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultWithCountPromotionChoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetChoicesByPromotionAsync
     *
     * Get all promotion choices for a given promotion that match the searchAgument. The result of the search can  be limited to N at a time.
     *
     * @param  string $promotion_code The Advantage promotion code that holds all the choices (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on promotion choice (optional)
     * @param  string $filter_currency_code The currency to limit results by (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoicesByPromotionAsync($promotion_code, $filter_search = null, $filter_currency_code = null, $pager_skip = null, $pager_take = null)
    {
        return $this->promotionChoiceGetChoicesByPromotionAsyncWithHttpInfo($promotion_code, $filter_search, $filter_currency_code, $pager_skip, $pager_take)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetChoicesByPromotionAsyncWithHttpInfo
     *
     * Get all promotion choices for a given promotion that match the searchAgument. The result of the search can  be limited to N at a time.
     *
     * @param  string $promotion_code The Advantage promotion code that holds all the choices (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on promotion choice (optional)
     * @param  string $filter_currency_code The currency to limit results by (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetChoicesByPromotionAsyncWithHttpInfo($promotion_code, $filter_search = null, $filter_currency_code = null, $pager_skip = null, $pager_take = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountPromotionChoice';
        $request = $this->promotionChoiceGetChoicesByPromotionRequest($promotion_code, $filter_search, $filter_currency_code, $pager_skip, $pager_take);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetChoicesByPromotion'
     *
     * @param  string $promotion_code The Advantage promotion code that holds all the choices (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box). This term will be compared to several   fields on promotion choice (optional)
     * @param  string $filter_currency_code The currency to limit results by (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetChoicesByPromotionRequest($promotion_code, $filter_search = null, $filter_currency_code = null, $pager_skip = null, $pager_take = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetChoicesByPromotion'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter.search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_currency_code !== null) {
            $queryParams['filter.currencyCode'] = ObjectSerializer::toQueryValue($filter_currency_code);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetPostage
     *
     * Get the calculated postage amount for the delivery code on the promotion item.  This method throws an exception if the promotion choice or delivery code is not found.
     *
     * @param  string $promotion_code Uniquely identifies a promotion. (Advantage field: PMO-CDE) (required)
     * @param  string $item_number Code uniquely identifying a publication (Advantage field: PUB-CDE) (required)
     * @param  string $choice_code Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC) (required)
     * @param  string $currency_code Billing currency of the promotion item. (Advantage field: BIL-CUR) (required)
     * @param  string $country Code uniquely identifying a country (Advantage field: CUN-CDE)             This method requires a valid country code, but the parameter has been made optional so that it&#39;s possible             to pass in an empty string in cases where that happens to be a valid code. (optional)
     * @param  int $term The subscription length (number of issues); zero for one year (optional)
     * @param  \DateTime $effective_date Effective date of the postage calculation; default is next issue date (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PromotionChoicePostage
     */
    public function promotionChoiceGetPostage($promotion_code, $item_number, $choice_code, $currency_code, $country = null, $term = null, $effective_date = null)
    {
        list($response) = $this->promotionChoiceGetPostageWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $country, $term, $effective_date);
        return $response;
    }

    /**
     * Operation promotionChoiceGetPostageWithHttpInfo
     *
     * Get the calculated postage amount for the delivery code on the promotion item.  This method throws an exception if the promotion choice or delivery code is not found.
     *
     * @param  string $promotion_code Uniquely identifies a promotion. (Advantage field: PMO-CDE) (required)
     * @param  string $item_number Code uniquely identifying a publication (Advantage field: PUB-CDE) (required)
     * @param  string $choice_code Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC) (required)
     * @param  string $currency_code Billing currency of the promotion item. (Advantage field: BIL-CUR) (required)
     * @param  string $country Code uniquely identifying a country (Advantage field: CUN-CDE)             This method requires a valid country code, but the parameter has been made optional so that it&#39;s possible             to pass in an empty string in cases where that happens to be a valid code. (optional)
     * @param  int $term The subscription length (number of issues); zero for one year (optional)
     * @param  \DateTime $effective_date Effective date of the postage calculation; default is next issue date (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PromotionChoicePostage, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetPostageWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $country = null, $term = null, $effective_date = null)
    {
        $returnType = '\Advantage\Client\Model\PromotionChoicePostage';
        $request = $this->promotionChoiceGetPostageRequest($promotion_code, $item_number, $choice_code, $currency_code, $country, $term, $effective_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PromotionChoicePostage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetPostageAsync
     *
     * Get the calculated postage amount for the delivery code on the promotion item.  This method throws an exception if the promotion choice or delivery code is not found.
     *
     * @param  string $promotion_code Uniquely identifies a promotion. (Advantage field: PMO-CDE) (required)
     * @param  string $item_number Code uniquely identifying a publication (Advantage field: PUB-CDE) (required)
     * @param  string $choice_code Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC) (required)
     * @param  string $currency_code Billing currency of the promotion item. (Advantage field: BIL-CUR) (required)
     * @param  string $country Code uniquely identifying a country (Advantage field: CUN-CDE)             This method requires a valid country code, but the parameter has been made optional so that it&#39;s possible             to pass in an empty string in cases where that happens to be a valid code. (optional)
     * @param  int $term The subscription length (number of issues); zero for one year (optional)
     * @param  \DateTime $effective_date Effective date of the postage calculation; default is next issue date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetPostageAsync($promotion_code, $item_number, $choice_code, $currency_code, $country = null, $term = null, $effective_date = null)
    {
        return $this->promotionChoiceGetPostageAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $country, $term, $effective_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetPostageAsyncWithHttpInfo
     *
     * Get the calculated postage amount for the delivery code on the promotion item.  This method throws an exception if the promotion choice or delivery code is not found.
     *
     * @param  string $promotion_code Uniquely identifies a promotion. (Advantage field: PMO-CDE) (required)
     * @param  string $item_number Code uniquely identifying a publication (Advantage field: PUB-CDE) (required)
     * @param  string $choice_code Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC) (required)
     * @param  string $currency_code Billing currency of the promotion item. (Advantage field: BIL-CUR) (required)
     * @param  string $country Code uniquely identifying a country (Advantage field: CUN-CDE)             This method requires a valid country code, but the parameter has been made optional so that it&#39;s possible             to pass in an empty string in cases where that happens to be a valid code. (optional)
     * @param  int $term The subscription length (number of issues); zero for one year (optional)
     * @param  \DateTime $effective_date Effective date of the postage calculation; default is next issue date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetPostageAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $country = null, $term = null, $effective_date = null)
    {
        $returnType = '\Advantage\Client\Model\PromotionChoicePostage';
        $request = $this->promotionChoiceGetPostageRequest($promotion_code, $item_number, $choice_code, $currency_code, $country, $term, $effective_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetPostage'
     *
     * @param  string $promotion_code Uniquely identifies a promotion. (Advantage field: PMO-CDE) (required)
     * @param  string $item_number Code uniquely identifying a publication (Advantage field: PUB-CDE) (required)
     * @param  string $choice_code Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC) (required)
     * @param  string $currency_code Billing currency of the promotion item. (Advantage field: BIL-CUR) (required)
     * @param  string $country Code uniquely identifying a country (Advantage field: CUN-CDE)             This method requires a valid country code, but the parameter has been made optional so that it&#39;s possible             to pass in an empty string in cases where that happens to be a valid code. (optional)
     * @param  int $term The subscription length (number of issues); zero for one year (optional)
     * @param  \DateTime $effective_date Effective date of the postage calculation; default is next issue date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetPostageRequest($promotion_code, $item_number, $choice_code, $currency_code, $country = null, $term = null, $effective_date = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetPostage'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceGetPostage'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling promotionChoiceGetPostage'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling promotionChoiceGetPostage'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}/postage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($effective_date !== null) {
            $queryParams['effectiveDate'] = ObjectSerializer::toQueryValue($effective_date);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetValidPaymentMethods
     *
     * Get a list of valid payment methods for a given promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency for the order. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentMethod[]
     */
    public function promotionChoiceGetValidPaymentMethods($promotion_code, $item_number, $choice_code, $currency_code)
    {
        list($response) = $this->promotionChoiceGetValidPaymentMethodsWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code);
        return $response;
    }

    /**
     * Operation promotionChoiceGetValidPaymentMethodsWithHttpInfo
     *
     * Get a list of valid payment methods for a given promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency for the order. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetValidPaymentMethodsWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethod[]';
        $request = $this->promotionChoiceGetValidPaymentMethodsRequest($promotion_code, $item_number, $choice_code, $currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetValidPaymentMethodsAsync
     *
     * Get a list of valid payment methods for a given promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency for the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetValidPaymentMethodsAsync($promotion_code, $item_number, $choice_code, $currency_code)
    {
        return $this->promotionChoiceGetValidPaymentMethodsAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetValidPaymentMethodsAsyncWithHttpInfo
     *
     * Get a list of valid payment methods for a given promotion choice.
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency for the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetValidPaymentMethodsAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethod[]';
        $request = $this->promotionChoiceGetValidPaymentMethodsRequest($promotion_code, $item_number, $choice_code, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetValidPaymentMethods'
     *
     * @param  string $promotion_code The promotion code of the promotion. (required)
     * @param  string $item_number The item number of the product. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency for the order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetValidPaymentMethodsRequest($promotion_code, $item_number, $choice_code, $currency_code)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetValidPaymentMethods'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceGetValidPaymentMethods'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling promotionChoiceGetValidPaymentMethods'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling promotionChoiceGetValidPaymentMethods'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}/payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceGetValidPromotionChoices
     *
     * Get a list of valid promotion choices.
     *
     * @param  string $promotion_code Promotion code to look up offer and currency (required)
     * @param  string $item_number Item number (required)
     * @param  string $customer_number Customer number to look up currency (required)
     * @param  string $currency billing currency (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultFieldValidValue
     */
    public function promotionChoiceGetValidPromotionChoices($promotion_code, $item_number, $customer_number, $currency = null)
    {
        list($response) = $this->promotionChoiceGetValidPromotionChoicesWithHttpInfo($promotion_code, $item_number, $customer_number, $currency);
        return $response;
    }

    /**
     * Operation promotionChoiceGetValidPromotionChoicesWithHttpInfo
     *
     * Get a list of valid promotion choices.
     *
     * @param  string $promotion_code Promotion code to look up offer and currency (required)
     * @param  string $item_number Item number (required)
     * @param  string $customer_number Customer number to look up currency (required)
     * @param  string $currency billing currency (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultFieldValidValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceGetValidPromotionChoicesWithHttpInfo($promotion_code, $item_number, $customer_number, $currency = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultFieldValidValue';
        $request = $this->promotionChoiceGetValidPromotionChoicesRequest($promotion_code, $item_number, $customer_number, $currency);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultFieldValidValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceGetValidPromotionChoicesAsync
     *
     * Get a list of valid promotion choices.
     *
     * @param  string $promotion_code Promotion code to look up offer and currency (required)
     * @param  string $item_number Item number (required)
     * @param  string $customer_number Customer number to look up currency (required)
     * @param  string $currency billing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetValidPromotionChoicesAsync($promotion_code, $item_number, $customer_number, $currency = null)
    {
        return $this->promotionChoiceGetValidPromotionChoicesAsyncWithHttpInfo($promotion_code, $item_number, $customer_number, $currency)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceGetValidPromotionChoicesAsyncWithHttpInfo
     *
     * Get a list of valid promotion choices.
     *
     * @param  string $promotion_code Promotion code to look up offer and currency (required)
     * @param  string $item_number Item number (required)
     * @param  string $customer_number Customer number to look up currency (required)
     * @param  string $currency billing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceGetValidPromotionChoicesAsyncWithHttpInfo($promotion_code, $item_number, $customer_number, $currency = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultFieldValidValue';
        $request = $this->promotionChoiceGetValidPromotionChoicesRequest($promotion_code, $item_number, $customer_number, $currency);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceGetValidPromotionChoices'
     *
     * @param  string $promotion_code Promotion code to look up offer and currency (required)
     * @param  string $item_number Item number (required)
     * @param  string $customer_number Customer number to look up currency (required)
     * @param  string $currency billing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceGetValidPromotionChoicesRequest($promotion_code, $item_number, $customer_number, $currency = null)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceGetValidPromotionChoices'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceGetValidPromotionChoices'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling promotionChoiceGetValidPromotionChoices'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/valid-values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_number !== null) {
            $queryParams['itemNumber'] = ObjectSerializer::toQueryValue($item_number);
        }
        // query params
        if ($customer_number !== null) {
            $queryParams['customerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency);
        }

        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation promotionChoiceUpdateChoice
     *
     * Update a new promotion item choice.
     *
     * @param  string $promotion_code The promotion code the choice belongs to. (required)
     * @param  string $item_number The item number of the product for the promotion item choice. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency that applies for the promotion item choice. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceIn $promotion_choice_update_request A PromotionChoiceUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function promotionChoiceUpdateChoice($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
    {
        $this->promotionChoiceUpdateChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request);
    }

    /**
     * Operation promotionChoiceUpdateChoiceWithHttpInfo
     *
     * Update a new promotion item choice.
     *
     * @param  string $promotion_code The promotion code the choice belongs to. (required)
     * @param  string $item_number The item number of the product for the promotion item choice. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency that applies for the promotion item choice. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceIn $promotion_choice_update_request A PromotionChoiceUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function promotionChoiceUpdateChoiceWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
    {
        $returnType = '';
        $request = $this->promotionChoiceUpdateChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation promotionChoiceUpdateChoiceAsync
     *
     * Update a new promotion item choice.
     *
     * @param  string $promotion_code The promotion code the choice belongs to. (required)
     * @param  string $item_number The item number of the product for the promotion item choice. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency that applies for the promotion item choice. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceIn $promotion_choice_update_request A PromotionChoiceUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceUpdateChoiceAsync($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
    {
        return $this->promotionChoiceUpdateChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation promotionChoiceUpdateChoiceAsyncWithHttpInfo
     *
     * Update a new promotion item choice.
     *
     * @param  string $promotion_code The promotion code the choice belongs to. (required)
     * @param  string $item_number The item number of the product for the promotion item choice. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency that applies for the promotion item choice. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceIn $promotion_choice_update_request A PromotionChoiceUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promotionChoiceUpdateChoiceAsyncWithHttpInfo($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
    {
        $returnType = '';
        $request = $this->promotionChoiceUpdateChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'promotionChoiceUpdateChoice'
     *
     * @param  string $promotion_code The promotion code the choice belongs to. (required)
     * @param  string $item_number The item number of the product for the promotion item choice. (required)
     * @param  string $choice_code The choice code for the promotion item choice. (required)
     * @param  string $currency_code The currency that applies for the promotion item choice. (required)
     * @param  \Advantage\Client\Model\PromotionChoiceIn $promotion_choice_update_request A PromotionChoiceUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function promotionChoiceUpdateChoiceRequest($promotion_code, $item_number, $choice_code, $currency_code, $promotion_choice_update_request)
    {
        // verify the required parameter 'promotion_code' is set
        if ($promotion_code === null || (is_array($promotion_code) && count($promotion_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_code when calling promotionChoiceUpdateChoice'
            );
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling promotionChoiceUpdateChoice'
            );
        }
        // verify the required parameter 'choice_code' is set
        if ($choice_code === null || (is_array($choice_code) && count($choice_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice_code when calling promotionChoiceUpdateChoice'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling promotionChoiceUpdateChoice'
            );
        }
        // verify the required parameter 'promotion_choice_update_request' is set
        if ($promotion_choice_update_request === null || (is_array($promotion_choice_update_request) && count($promotion_choice_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_choice_update_request when calling promotionChoiceUpdateChoice'
            );
        }

        $resourcePath = '/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($promotion_code !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionCode' . '}',
                ObjectSerializer::toPathValue($promotion_code),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($choice_code !== null) {
            $resourcePath = str_replace(
                '{' . 'choiceCode' . '}',
                ObjectSerializer::toPathValue($choice_code),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($promotion_choice_update_request)) {
            $_tempBody = $promotion_choice_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
