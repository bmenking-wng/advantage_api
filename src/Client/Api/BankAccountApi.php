<?php
/**
 * BankAccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * BankAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bankAccountCreateOrUpdate
     *
     * Saves (creates) a bank account for a customer to use with direct debit payments.    If the bank account is already on file it will be updated.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedPaymentResponse
     */
    public function bankAccountCreateOrUpdate($customer_number, $billing_organization, $billing_currency_code, $bank_account)
    {
        list($response) = $this->bankAccountCreateOrUpdateWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $bank_account);
        return $response;
    }

    /**
     * Operation bankAccountCreateOrUpdateWithHttpInfo
     *
     * Saves (creates) a bank account for a customer to use with direct debit payments.    If the bank account is already on file it will be updated.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountCreateOrUpdateWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $bank_account)
    {
        $returnType = '\Advantage\Client\Model\SavedPaymentResponse';
        $request = $this->bankAccountCreateOrUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $bank_account);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountCreateOrUpdateAsync
     *
     * Saves (creates) a bank account for a customer to use with direct debit payments.    If the bank account is already on file it will be updated.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountCreateOrUpdateAsync($customer_number, $billing_organization, $billing_currency_code, $bank_account)
    {
        return $this->bankAccountCreateOrUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $bank_account)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountCreateOrUpdateAsyncWithHttpInfo
     *
     * Saves (creates) a bank account for a customer to use with direct debit payments.    If the bank account is already on file it will be updated.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountCreateOrUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $bank_account)
    {
        $returnType = '\Advantage\Client\Model\SavedPaymentResponse';
        $request = $this->bankAccountCreateOrUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $bank_account);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountCreateOrUpdate'
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountCreateOrUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $bank_account)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountCreateOrUpdate'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountCreateOrUpdate'
            );
        }
        // verify the required parameter 'billing_currency_code' is set
        if ($billing_currency_code === null || (is_array($billing_currency_code) && count($billing_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency_code when calling bankAccountCreateOrUpdate'
            );
        }
        // verify the required parameter 'bank_account' is set
        if ($bank_account === null || (is_array($bank_account) && count($bank_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account when calling bankAccountCreateOrUpdate'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrencyCode' . '}',
                ObjectSerializer::toPathValue($billing_currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bank_account)) {
            $_tempBody = $bank_account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountGet
     *
     * Find and return the given saved direct debit payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedBankAccount
     */
    public function bankAccountGet($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
    {
        list($response) = $this->bankAccountGetWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation bankAccountGetWithHttpInfo
     *
     * Find and return the given saved direct debit payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedBankAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountGetWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount';
        $request = $this->bankAccountGetRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedBankAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountGetAsync
     *
     * Find and return the given saved direct debit payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetAsync($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
    {
        return $this->bankAccountGetAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountGetAsyncWithHttpInfo
     *
     * Find and return the given saved direct debit payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount';
        $request = $this->bankAccountGetRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountGet'
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountGetRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountGet'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountGet'
            );
        }
        // verify the required parameter 'billing_currency_code' is set
        if ($billing_currency_code === null || (is_array($billing_currency_code) && count($billing_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency_code when calling bankAccountGet'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling bankAccountGet'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}/{electronicPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrencyCode' . '}',
                ObjectSerializer::toPathValue($billing_currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountGetEligibleUses
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved bank account.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved bank account are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved bank account (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentMethodEligibleUses
     */
    public function bankAccountGetEligibleUses($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        list($response) = $this->bankAccountGetEligibleUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation bankAccountGetEligibleUsesWithHttpInfo
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved bank account.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved bank account are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved bank account (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentMethodEligibleUses, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountGetEligibleUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodEligibleUses';
        $request = $this->bankAccountGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentMethodEligibleUses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountGetEligibleUsesAsync
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved bank account.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved bank account are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved bank account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetEligibleUsesAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        return $this->bankAccountGetEligibleUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountGetEligibleUsesAsyncWithHttpInfo
     *
     * Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved bank account.  Only subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.  Eligible subscriptions and agreements that are already auto-charged with the specified saved bank account are also included.
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved bank account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetEligibleUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodEligibleUses';
        $request = $this->bankAccountGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountGetEligibleUses'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization  (required)
     * @param  string $currency_code  (required)
     * @param  string $electronic_payment_id The electronic payment ID of the saved bank account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountGetEligibleUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountGetEligibleUses'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountGetEligibleUses'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling bankAccountGetEligibleUses'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling bankAccountGetEligibleUses'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{currencyCode}/{electronicPaymentId}/eligible-uses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountGetUses
     *
     * Gets the subscriptions and agreements that currently use a given direct debit. orders not currently support for bank accounts
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentMethodUses
     */
    public function bankAccountGetUses($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        list($response) = $this->bankAccountGetUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id);
        return $response;
    }

    /**
     * Operation bankAccountGetUsesWithHttpInfo
     *
     * Gets the subscriptions and agreements that currently use a given direct debit. orders not currently support for bank accounts
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentMethodUses, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountGetUsesWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodUses';
        $request = $this->bankAccountGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentMethodUses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountGetUsesAsync
     *
     * Gets the subscriptions and agreements that currently use a given direct debit. orders not currently support for bank accounts
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetUsesAsync($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        return $this->bankAccountGetUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountGetUsesAsyncWithHttpInfo
     *
     * Gets the subscriptions and agreements that currently use a given direct debit. orders not currently support for bank accounts
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetUsesAsyncWithHttpInfo($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        $returnType = '\Advantage\Client\Model\PaymentMethodUses';
        $request = $this->bankAccountGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountGetUses'
     *
     * @param  string $customer_number The Advantage customer number of the card holder. (required)
     * @param  string $billing_organization The card&#39;s billing organization. (required)
     * @param  string $currency_code The card&#39;s billing currency. (An Advantage currency code.) (required)
     * @param  string $electronic_payment_id The electronic payment ID of the card to update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountGetUsesRequest($customer_number, $billing_organization, $currency_code, $electronic_payment_id)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountGetUses'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountGetUses'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling bankAccountGetUses'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling bankAccountGetUses'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{currencyCode}/{electronicPaymentId}/uses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyCode' . '}',
                ObjectSerializer::toPathValue($currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountGetValidDirectDebitTypes
     *
     * Gets the available direct debit payment codes for a given organization and currency
     *
     * @param  string $billing_organization Billing organization (required)
     * @param  string $billing_currency Billing currency code (required)
     * @param  bool $web_enabled_only True to find only credit cards that are \&quot;web enabled\&quot; (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\DirectDebitPaymentMethod[]
     */
    public function bankAccountGetValidDirectDebitTypes($billing_organization, $billing_currency, $web_enabled_only)
    {
        list($response) = $this->bankAccountGetValidDirectDebitTypesWithHttpInfo($billing_organization, $billing_currency, $web_enabled_only);
        return $response;
    }

    /**
     * Operation bankAccountGetValidDirectDebitTypesWithHttpInfo
     *
     * Gets the available direct debit payment codes for a given organization and currency
     *
     * @param  string $billing_organization Billing organization (required)
     * @param  string $billing_currency Billing currency code (required)
     * @param  bool $web_enabled_only True to find only credit cards that are \&quot;web enabled\&quot; (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\DirectDebitPaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountGetValidDirectDebitTypesWithHttpInfo($billing_organization, $billing_currency, $web_enabled_only)
    {
        $returnType = '\Advantage\Client\Model\DirectDebitPaymentMethod[]';
        $request = $this->bankAccountGetValidDirectDebitTypesRequest($billing_organization, $billing_currency, $web_enabled_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\DirectDebitPaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountGetValidDirectDebitTypesAsync
     *
     * Gets the available direct debit payment codes for a given organization and currency
     *
     * @param  string $billing_organization Billing organization (required)
     * @param  string $billing_currency Billing currency code (required)
     * @param  bool $web_enabled_only True to find only credit cards that are \&quot;web enabled\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetValidDirectDebitTypesAsync($billing_organization, $billing_currency, $web_enabled_only)
    {
        return $this->bankAccountGetValidDirectDebitTypesAsyncWithHttpInfo($billing_organization, $billing_currency, $web_enabled_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountGetValidDirectDebitTypesAsyncWithHttpInfo
     *
     * Gets the available direct debit payment codes for a given organization and currency
     *
     * @param  string $billing_organization Billing organization (required)
     * @param  string $billing_currency Billing currency code (required)
     * @param  bool $web_enabled_only True to find only credit cards that are \&quot;web enabled\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGetValidDirectDebitTypesAsyncWithHttpInfo($billing_organization, $billing_currency, $web_enabled_only)
    {
        $returnType = '\Advantage\Client\Model\DirectDebitPaymentMethod[]';
        $request = $this->bankAccountGetValidDirectDebitTypesRequest($billing_organization, $billing_currency, $web_enabled_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountGetValidDirectDebitTypes'
     *
     * @param  string $billing_organization Billing organization (required)
     * @param  string $billing_currency Billing currency code (required)
     * @param  bool $web_enabled_only True to find only credit cards that are \&quot;web enabled\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountGetValidDirectDebitTypesRequest($billing_organization, $billing_currency, $web_enabled_only)
    {
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountGetValidDirectDebitTypes'
            );
        }
        // verify the required parameter 'billing_currency' is set
        if ($billing_currency === null || (is_array($billing_currency) && count($billing_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency when calling bankAccountGetValidDirectDebitTypes'
            );
        }
        // verify the required parameter 'web_enabled_only' is set
        if ($web_enabled_only === null || (is_array($web_enabled_only) && count($web_enabled_only) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web_enabled_only when calling bankAccountGetValidDirectDebitTypes'
            );
        }

        $resourcePath = '/payment-methods/direct-debit/{billingOrganization}/{billingCurrency}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($web_enabled_only !== null) {
            $queryParams['webEnabledOnly'] = ObjectSerializer::toQueryValue($web_enabled_only);
        }

        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrency' . '}',
                ObjectSerializer::toPathValue($billing_currency),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountGet_0
     *
     * Find and return all saved direct debit payment methods for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer to search for. (required)
     * @param  string $billing_organization The valid billing organization for the direct debits, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debits, if none is provided the default is used. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedBankAccount[]
     */
    public function bankAccountGet_0($customer_number, $billing_organization, $billing_currency_code)
    {
        list($response) = $this->bankAccountGet_0WithHttpInfo($customer_number, $billing_organization, $billing_currency_code);
        return $response;
    }

    /**
     * Operation bankAccountGet_0WithHttpInfo
     *
     * Find and return all saved direct debit payment methods for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer to search for. (required)
     * @param  string $billing_organization The valid billing organization for the direct debits, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debits, if none is provided the default is used. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedBankAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountGet_0WithHttpInfo($customer_number, $billing_organization, $billing_currency_code)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount[]';
        $request = $this->bankAccountGet_0Request($customer_number, $billing_organization, $billing_currency_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedBankAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountGet_0Async
     *
     * Find and return all saved direct debit payment methods for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer to search for. (required)
     * @param  string $billing_organization The valid billing organization for the direct debits, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debits, if none is provided the default is used. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGet_0Async($customer_number, $billing_organization, $billing_currency_code)
    {
        return $this->bankAccountGet_0AsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountGet_0AsyncWithHttpInfo
     *
     * Find and return all saved direct debit payment methods for the given customer.
     *
     * @param  string $customer_number The Advantage customer number of the customer to search for. (required)
     * @param  string $billing_organization The valid billing organization for the direct debits, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debits, if none is provided the default is used. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountGet_0AsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount[]';
        $request = $this->bankAccountGet_0Request($customer_number, $billing_organization, $billing_currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountGet_0'
     *
     * @param  string $customer_number The Advantage customer number of the customer to search for. (required)
     * @param  string $billing_organization The valid billing organization for the direct debits, if none is provided the default is used. (required)
     * @param  string $billing_currency_code The billing currency for the direct debits, if none is provided the default is used. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountGet_0Request($customer_number, $billing_organization, $billing_currency_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountGet_0'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountGet_0'
            );
        }
        // verify the required parameter 'billing_currency_code' is set
        if ($billing_currency_code === null || (is_array($billing_currency_code) && count($billing_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency_code when calling bankAccountGet_0'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrencyCode' . '}',
                ObjectSerializer::toPathValue($billing_currency_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountUpdate
     *
     * Update a direct debit (bank account) payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method. If none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit. If none provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method to update. (required)
     * @param  \Advantage\Client\Model\DirectDebitUpdateRequest $update A DirectDebitUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SavedBankAccount
     */
    public function bankAccountUpdate($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
    {
        list($response) = $this->bankAccountUpdateWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update);
        return $response;
    }

    /**
     * Operation bankAccountUpdateWithHttpInfo
     *
     * Update a direct debit (bank account) payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method. If none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit. If none provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method to update. (required)
     * @param  \Advantage\Client\Model\DirectDebitUpdateRequest $update A DirectDebitUpdateRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SavedBankAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountUpdateWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount';
        $request = $this->bankAccountUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SavedBankAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountUpdateAsync
     *
     * Update a direct debit (bank account) payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method. If none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit. If none provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method to update. (required)
     * @param  \Advantage\Client\Model\DirectDebitUpdateRequest $update A DirectDebitUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountUpdateAsync($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
    {
        return $this->bankAccountUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountUpdateAsyncWithHttpInfo
     *
     * Update a direct debit (bank account) payment method.
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method. If none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit. If none provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method to update. (required)
     * @param  \Advantage\Client\Model\DirectDebitUpdateRequest $update A DirectDebitUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountUpdateAsyncWithHttpInfo($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
    {
        $returnType = '\Advantage\Client\Model\SavedBankAccount';
        $request = $this->bankAccountUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountUpdate'
     *
     * @param  string $customer_number The Advantage customer number of the bank account holder. (required)
     * @param  string $billing_organization The valid billing organization for the direct debit payment method. If none is provided the default is used. (required)
     * @param  string $billing_currency_code The currency for the direct debit. If none provided the default is used. (required)
     * @param  string $electronic_payment_id The electronic payment ID of the direct debit payment method to update. (required)
     * @param  \Advantage\Client\Model\DirectDebitUpdateRequest $update A DirectDebitUpdateRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountUpdateRequest($customer_number, $billing_organization, $billing_currency_code, $electronic_payment_id, $update)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling bankAccountUpdate'
            );
        }
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountUpdate'
            );
        }
        // verify the required parameter 'billing_currency_code' is set
        if ($billing_currency_code === null || (is_array($billing_currency_code) && count($billing_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency_code when calling bankAccountUpdate'
            );
        }
        // verify the required parameter 'electronic_payment_id' is set
        if ($electronic_payment_id === null || (is_array($electronic_payment_id) && count($electronic_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_payment_id when calling bankAccountUpdate'
            );
        }
        // verify the required parameter 'update' is set
        if ($update === null || (is_array($update) && count($update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update when calling bankAccountUpdate'
            );
        }

        $resourcePath = '/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}/{electronicPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency_code !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrencyCode' . '}',
                ObjectSerializer::toPathValue($billing_currency_code),
                $resourcePath
            );
        }
        // path params
        if ($electronic_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'electronicPaymentId' . '}',
                ObjectSerializer::toPathValue($electronic_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update)) {
            $_tempBody = $update;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountValidate
     *
     * Validates provided bank account information.
     *
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bankAccountValidate($billing_organization, $billing_currency, $bank_account)
    {
        $this->bankAccountValidateWithHttpInfo($billing_organization, $billing_currency, $bank_account);
    }

    /**
     * Operation bankAccountValidateWithHttpInfo
     *
     * Validates provided bank account information.
     *
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountValidateWithHttpInfo($billing_organization, $billing_currency, $bank_account)
    {
        $returnType = '';
        $request = $this->bankAccountValidateRequest($billing_organization, $billing_currency, $bank_account);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountValidateAsync
     *
     * Validates provided bank account information.
     *
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountValidateAsync($billing_organization, $billing_currency, $bank_account)
    {
        return $this->bankAccountValidateAsyncWithHttpInfo($billing_organization, $billing_currency, $bank_account)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountValidateAsyncWithHttpInfo
     *
     * Validates provided bank account information.
     *
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountValidateAsyncWithHttpInfo($billing_organization, $billing_currency, $bank_account)
    {
        $returnType = '';
        $request = $this->bankAccountValidateRequest($billing_organization, $billing_currency, $bank_account);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountValidate'
     *
     * @param  string $billing_organization The valid billing organization for the direct debit payment method, if none is provided the default is used. (required)
     * @param  string $billing_currency The currency for the direct debit, if none provided the default is used. (required)
     * @param  \Advantage\Client\Model\BankAccountCreateRequest $bank_account The direct debit payment information for the new bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountValidateRequest($billing_organization, $billing_currency, $bank_account)
    {
        // verify the required parameter 'billing_organization' is set
        if ($billing_organization === null || (is_array($billing_organization) && count($billing_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_organization when calling bankAccountValidate'
            );
        }
        // verify the required parameter 'billing_currency' is set
        if ($billing_currency === null || (is_array($billing_currency) && count($billing_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_currency when calling bankAccountValidate'
            );
        }
        // verify the required parameter 'bank_account' is set
        if ($bank_account === null || (is_array($bank_account) && count($bank_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account when calling bankAccountValidate'
            );
        }

        $resourcePath = '/bank-accounts/validate/{billingOrganization}/{billingCurrency}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($billing_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'billingOrganization' . '}',
                ObjectSerializer::toPathValue($billing_organization),
                $resourcePath
            );
        }
        // path params
        if ($billing_currency !== null) {
            $resourcePath = str_replace(
                '{' . 'billingCurrency' . '}',
                ObjectSerializer::toPathValue($billing_currency),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bank_account)) {
            $_tempBody = $bank_account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
