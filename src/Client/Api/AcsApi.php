<?php
/**
 * AcsApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * AcsApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acsCreateSupportLog
     *
     * Creates a new client support log
     *
     * @param  \Advantage\Client\Model\SupportLogCreateRequest $support_log_create_request A SupportLogCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SupportLogCreateResponse
     */
    public function acsCreateSupportLog($support_log_create_request)
    {
        list($response) = $this->acsCreateSupportLogWithHttpInfo($support_log_create_request);
        return $response;
    }

    /**
     * Operation acsCreateSupportLogWithHttpInfo
     *
     * Creates a new client support log
     *
     * @param  \Advantage\Client\Model\SupportLogCreateRequest $support_log_create_request A SupportLogCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SupportLogCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsCreateSupportLogWithHttpInfo($support_log_create_request)
    {
        $returnType = '\Advantage\Client\Model\SupportLogCreateResponse';
        $request = $this->acsCreateSupportLogRequest($support_log_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SupportLogCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsCreateSupportLogAsync
     *
     * Creates a new client support log
     *
     * @param  \Advantage\Client\Model\SupportLogCreateRequest $support_log_create_request A SupportLogCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsCreateSupportLogAsync($support_log_create_request)
    {
        return $this->acsCreateSupportLogAsyncWithHttpInfo($support_log_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsCreateSupportLogAsyncWithHttpInfo
     *
     * Creates a new client support log
     *
     * @param  \Advantage\Client\Model\SupportLogCreateRequest $support_log_create_request A SupportLogCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsCreateSupportLogAsyncWithHttpInfo($support_log_create_request)
    {
        $returnType = '\Advantage\Client\Model\SupportLogCreateResponse';
        $request = $this->acsCreateSupportLogRequest($support_log_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsCreateSupportLog'
     *
     * @param  \Advantage\Client\Model\SupportLogCreateRequest $support_log_create_request A SupportLogCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsCreateSupportLogRequest($support_log_create_request)
    {
        // verify the required parameter 'support_log_create_request' is set
        if ($support_log_create_request === null || (is_array($support_log_create_request) && count($support_log_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $support_log_create_request when calling acsCreateSupportLog'
            );
        }

        $resourcePath = '/acs/support-logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($support_log_create_request)) {
            $_tempBody = $support_log_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsCreateSupportLogComment
     *
     * Creates a new CSL comment
     *
     * @param  string $csl_number CSL number of the support log to add a comment to (required)
     * @param  \Advantage\Client\Model\SupportLogCommentCreateRequest $support_log_comment_create_request A SupportLogCommentCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SupportLogCommentCreateResponse
     */
    public function acsCreateSupportLogComment($csl_number, $support_log_comment_create_request)
    {
        list($response) = $this->acsCreateSupportLogCommentWithHttpInfo($csl_number, $support_log_comment_create_request);
        return $response;
    }

    /**
     * Operation acsCreateSupportLogCommentWithHttpInfo
     *
     * Creates a new CSL comment
     *
     * @param  string $csl_number CSL number of the support log to add a comment to (required)
     * @param  \Advantage\Client\Model\SupportLogCommentCreateRequest $support_log_comment_create_request A SupportLogCommentCreateRequest object (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SupportLogCommentCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsCreateSupportLogCommentWithHttpInfo($csl_number, $support_log_comment_create_request)
    {
        $returnType = '\Advantage\Client\Model\SupportLogCommentCreateResponse';
        $request = $this->acsCreateSupportLogCommentRequest($csl_number, $support_log_comment_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SupportLogCommentCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsCreateSupportLogCommentAsync
     *
     * Creates a new CSL comment
     *
     * @param  string $csl_number CSL number of the support log to add a comment to (required)
     * @param  \Advantage\Client\Model\SupportLogCommentCreateRequest $support_log_comment_create_request A SupportLogCommentCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsCreateSupportLogCommentAsync($csl_number, $support_log_comment_create_request)
    {
        return $this->acsCreateSupportLogCommentAsyncWithHttpInfo($csl_number, $support_log_comment_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsCreateSupportLogCommentAsyncWithHttpInfo
     *
     * Creates a new CSL comment
     *
     * @param  string $csl_number CSL number of the support log to add a comment to (required)
     * @param  \Advantage\Client\Model\SupportLogCommentCreateRequest $support_log_comment_create_request A SupportLogCommentCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsCreateSupportLogCommentAsyncWithHttpInfo($csl_number, $support_log_comment_create_request)
    {
        $returnType = '\Advantage\Client\Model\SupportLogCommentCreateResponse';
        $request = $this->acsCreateSupportLogCommentRequest($csl_number, $support_log_comment_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsCreateSupportLogComment'
     *
     * @param  string $csl_number CSL number of the support log to add a comment to (required)
     * @param  \Advantage\Client\Model\SupportLogCommentCreateRequest $support_log_comment_create_request A SupportLogCommentCreateRequest object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsCreateSupportLogCommentRequest($csl_number, $support_log_comment_create_request)
    {
        // verify the required parameter 'csl_number' is set
        if ($csl_number === null || (is_array($csl_number) && count($csl_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csl_number when calling acsCreateSupportLogComment'
            );
        }
        // verify the required parameter 'support_log_comment_create_request' is set
        if ($support_log_comment_create_request === null || (is_array($support_log_comment_create_request) && count($support_log_comment_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $support_log_comment_create_request when calling acsCreateSupportLogComment'
            );
        }

        $resourcePath = '/acs/support-logs/{cslNumber}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($csl_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cslNumber' . '}',
                ObjectSerializer::toPathValue($csl_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($support_log_comment_create_request)) {
            $_tempBody = $support_log_comment_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClient
     *
     * Gets client information given
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Client
     */
    public function acsGetClient($customer_number)
    {
        list($response) = $this->acsGetClientWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation acsGetClientWithHttpInfo
     *
     * Gets client information given
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\Client';
        $request = $this->acsGetClientRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientAsync
     *
     * Gets client information given
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAsync($customer_number)
    {
        return $this->acsGetClientAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientAsyncWithHttpInfo
     *
     * Gets client information given
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\Client';
        $request = $this->acsGetClientRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClient'
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClient'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientArea
     *
     * Get an area for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $area_code The code that identifies a client area (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientArea
     */
    public function acsGetClientArea($customer_number, $area_code)
    {
        list($response) = $this->acsGetClientAreaWithHttpInfo($customer_number, $area_code);
        return $response;
    }

    /**
     * Operation acsGetClientAreaWithHttpInfo
     *
     * Get an area for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $area_code The code that identifies a client area (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientAreaWithHttpInfo($customer_number, $area_code)
    {
        $returnType = '\Advantage\Client\Model\ClientArea';
        $request = $this->acsGetClientAreaRequest($customer_number, $area_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientAreaAsync
     *
     * Get an area for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $area_code The code that identifies a client area (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAreaAsync($customer_number, $area_code)
    {
        return $this->acsGetClientAreaAsyncWithHttpInfo($customer_number, $area_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientAreaAsyncWithHttpInfo
     *
     * Get an area for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $area_code The code that identifies a client area (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAreaAsyncWithHttpInfo($customer_number, $area_code)
    {
        $returnType = '\Advantage\Client\Model\ClientArea';
        $request = $this->acsGetClientAreaRequest($customer_number, $area_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientArea'
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $area_code The code that identifies a client area (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientAreaRequest($customer_number, $area_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientArea'
            );
        }
        // verify the required parameter 'area_code' is set
        if ($area_code === null || (is_array($area_code) && count($area_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area_code when calling acsGetClientArea'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/areas/{areaCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($area_code !== null) {
            $resourcePath = str_replace(
                '{' . 'areaCode' . '}',
                ObjectSerializer::toPathValue($area_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientAreas
     *
     * Get all areas for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientArea[]
     */
    public function acsGetClientAreas($customer_number)
    {
        list($response) = $this->acsGetClientAreasWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation acsGetClientAreasWithHttpInfo
     *
     * Get all areas for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientArea[], HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientAreasWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientArea[]';
        $request = $this->acsGetClientAreasRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientArea[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientAreasAsync
     *
     * Get all areas for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAreasAsync($customer_number)
    {
        return $this->acsGetClientAreasAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientAreasAsyncWithHttpInfo
     *
     * Get all areas for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientAreasAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientArea[]';
        $request = $this->acsGetClientAreasRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientAreas'
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientAreasRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientAreas'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientByAbbreviation
     *
     * Gets client information given
     *
     * @param  string $client_abbreviation The client abbreviation (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Client
     */
    public function acsGetClientByAbbreviation($client_abbreviation)
    {
        list($response) = $this->acsGetClientByAbbreviationWithHttpInfo($client_abbreviation);
        return $response;
    }

    /**
     * Operation acsGetClientByAbbreviationWithHttpInfo
     *
     * Gets client information given
     *
     * @param  string $client_abbreviation The client abbreviation (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientByAbbreviationWithHttpInfo($client_abbreviation)
    {
        $returnType = '\Advantage\Client\Model\Client';
        $request = $this->acsGetClientByAbbreviationRequest($client_abbreviation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientByAbbreviationAsync
     *
     * Gets client information given
     *
     * @param  string $client_abbreviation The client abbreviation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientByAbbreviationAsync($client_abbreviation)
    {
        return $this->acsGetClientByAbbreviationAsyncWithHttpInfo($client_abbreviation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientByAbbreviationAsyncWithHttpInfo
     *
     * Gets client information given
     *
     * @param  string $client_abbreviation The client abbreviation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientByAbbreviationAsyncWithHttpInfo($client_abbreviation)
    {
        $returnType = '\Advantage\Client\Model\Client';
        $request = $this->acsGetClientByAbbreviationRequest($client_abbreviation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientByAbbreviation'
     *
     * @param  string $client_abbreviation The client abbreviation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientByAbbreviationRequest($client_abbreviation)
    {
        // verify the required parameter 'client_abbreviation' is set
        if ($client_abbreviation === null || (is_array($client_abbreviation) && count($client_abbreviation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_abbreviation when calling acsGetClientByAbbreviation'
            );
        }

        $resourcePath = '/acs/clients/by-abbreviation/{clientAbbreviation}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_abbreviation !== null) {
            $resourcePath = str_replace(
                '{' . 'clientAbbreviation' . '}',
                ObjectSerializer::toPathValue($client_abbreviation),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientContact
     *
     * Get information about a client contact person.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $contact_number The customer number of the contact person (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientContact
     */
    public function acsGetClientContact($customer_number, $contact_number)
    {
        list($response) = $this->acsGetClientContactWithHttpInfo($customer_number, $contact_number);
        return $response;
    }

    /**
     * Operation acsGetClientContactWithHttpInfo
     *
     * Get information about a client contact person.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $contact_number The customer number of the contact person (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientContact, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientContactWithHttpInfo($customer_number, $contact_number)
    {
        $returnType = '\Advantage\Client\Model\ClientContact';
        $request = $this->acsGetClientContactRequest($customer_number, $contact_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientContactAsync
     *
     * Get information about a client contact person.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $contact_number The customer number of the contact person (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientContactAsync($customer_number, $contact_number)
    {
        return $this->acsGetClientContactAsyncWithHttpInfo($customer_number, $contact_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientContactAsyncWithHttpInfo
     *
     * Get information about a client contact person.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $contact_number The customer number of the contact person (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientContactAsyncWithHttpInfo($customer_number, $contact_number)
    {
        $returnType = '\Advantage\Client\Model\ClientContact';
        $request = $this->acsGetClientContactRequest($customer_number, $contact_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientContact'
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $contact_number The customer number of the contact person (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientContactRequest($customer_number, $contact_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientContact'
            );
        }
        // verify the required parameter 'contact_number' is set
        if ($contact_number === null || (is_array($contact_number) && count($contact_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_number when calling acsGetClientContact'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/contacts/{contactNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($contact_number !== null) {
            $resourcePath = str_replace(
                '{' . 'contactNumber' . '}',
                ObjectSerializer::toPathValue($contact_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientContacts
     *
     * Get all contact people for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientContact[]
     */
    public function acsGetClientContacts($customer_number)
    {
        list($response) = $this->acsGetClientContactsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation acsGetClientContactsWithHttpInfo
     *
     * Get all contact people for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientContact[], HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientContactsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientContact[]';
        $request = $this->acsGetClientContactsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientContact[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientContactsAsync
     *
     * Get all contact people for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientContactsAsync($customer_number)
    {
        return $this->acsGetClientContactsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientContactsAsyncWithHttpInfo
     *
     * Get all contact people for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientContactsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientContact[]';
        $request = $this->acsGetClientContactsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientContacts'
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientContactsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientContacts'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientJob
     *
     * Get a job for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $job_code The code that identifies a client job (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientJob
     */
    public function acsGetClientJob($customer_number, $job_code)
    {
        list($response) = $this->acsGetClientJobWithHttpInfo($customer_number, $job_code);
        return $response;
    }

    /**
     * Operation acsGetClientJobWithHttpInfo
     *
     * Get a job for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $job_code The code that identifies a client job (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientJobWithHttpInfo($customer_number, $job_code)
    {
        $returnType = '\Advantage\Client\Model\ClientJob';
        $request = $this->acsGetClientJobRequest($customer_number, $job_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientJobAsync
     *
     * Get a job for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $job_code The code that identifies a client job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientJobAsync($customer_number, $job_code)
    {
        return $this->acsGetClientJobAsyncWithHttpInfo($customer_number, $job_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientJobAsyncWithHttpInfo
     *
     * Get a job for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $job_code The code that identifies a client job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientJobAsyncWithHttpInfo($customer_number, $job_code)
    {
        $returnType = '\Advantage\Client\Model\ClientJob';
        $request = $this->acsGetClientJobRequest($customer_number, $job_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientJob'
     *
     * @param  string $customer_number The customer number of the client (required)
     * @param  string $job_code The code that identifies a client job (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientJobRequest($customer_number, $job_code)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientJob'
            );
        }
        // verify the required parameter 'job_code' is set
        if ($job_code === null || (is_array($job_code) && count($job_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_code when calling acsGetClientJob'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/jobs/{jobCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }
        // path params
        if ($job_code !== null) {
            $resourcePath = str_replace(
                '{' . 'jobCode' . '}',
                ObjectSerializer::toPathValue($job_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClientJobs
     *
     * Get all jobs for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\ClientJob[]
     */
    public function acsGetClientJobs($customer_number)
    {
        list($response) = $this->acsGetClientJobsWithHttpInfo($customer_number);
        return $response;
    }

    /**
     * Operation acsGetClientJobsWithHttpInfo
     *
     * Get all jobs for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\ClientJob[], HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientJobsWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientJob[]';
        $request = $this->acsGetClientJobsRequest($customer_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\ClientJob[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientJobsAsync
     *
     * Get all jobs for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientJobsAsync($customer_number)
    {
        return $this->acsGetClientJobsAsyncWithHttpInfo($customer_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientJobsAsyncWithHttpInfo
     *
     * Get all jobs for a client.
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientJobsAsyncWithHttpInfo($customer_number)
    {
        $returnType = '\Advantage\Client\Model\ClientJob[]';
        $request = $this->acsGetClientJobsRequest($customer_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClientJobs'
     *
     * @param  string $customer_number The customer number of the client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientJobsRequest($customer_number)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling acsGetClientJobs'
            );
        }

        $resourcePath = '/acs/clients/{customerNumber}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetClients
     *
     * Get all active clients.
     *
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\Client[]
     */
    public function acsGetClients()
    {
        list($response) = $this->acsGetClientsWithHttpInfo();
        return $response;
    }

    /**
     * Operation acsGetClientsWithHttpInfo
     *
     * Get all active clients.
     *
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\Client[], HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetClientsWithHttpInfo()
    {
        $returnType = '\Advantage\Client\Model\Client[]';
        $request = $this->acsGetClientsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\Client[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetClientsAsync
     *
     * Get all active clients.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientsAsync()
    {
        return $this->acsGetClientsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetClientsAsyncWithHttpInfo
     *
     * Get all active clients.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetClientsAsyncWithHttpInfo()
    {
        $returnType = '\Advantage\Client\Model\Client[]';
        $request = $this->acsGetClientsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetClients'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetClientsRequest()
    {

        $resourcePath = '/acs/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetSupportLog
     *
     * Gets information about a client support log
     *
     * @param  string $csl_number The client support log number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SupportLog
     */
    public function acsGetSupportLog($csl_number)
    {
        list($response) = $this->acsGetSupportLogWithHttpInfo($csl_number);
        return $response;
    }

    /**
     * Operation acsGetSupportLogWithHttpInfo
     *
     * Gets information about a client support log
     *
     * @param  string $csl_number The client support log number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SupportLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetSupportLogWithHttpInfo($csl_number)
    {
        $returnType = '\Advantage\Client\Model\SupportLog';
        $request = $this->acsGetSupportLogRequest($csl_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SupportLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetSupportLogAsync
     *
     * Gets information about a client support log
     *
     * @param  string $csl_number The client support log number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetSupportLogAsync($csl_number)
    {
        return $this->acsGetSupportLogAsyncWithHttpInfo($csl_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetSupportLogAsyncWithHttpInfo
     *
     * Gets information about a client support log
     *
     * @param  string $csl_number The client support log number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetSupportLogAsyncWithHttpInfo($csl_number)
    {
        $returnType = '\Advantage\Client\Model\SupportLog';
        $request = $this->acsGetSupportLogRequest($csl_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetSupportLog'
     *
     * @param  string $csl_number The client support log number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetSupportLogRequest($csl_number)
    {
        // verify the required parameter 'csl_number' is set
        if ($csl_number === null || (is_array($csl_number) && count($csl_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csl_number when calling acsGetSupportLog'
            );
        }

        $resourcePath = '/acs/support-logs/{cslNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($csl_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cslNumber' . '}',
                ObjectSerializer::toPathValue($csl_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsGetSupportLogComments
     *
     * Get all comments for a client support log
     *
     * @param  string $csl_number The client support log (CSL) number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SupportLogComment[]
     */
    public function acsGetSupportLogComments($csl_number)
    {
        list($response) = $this->acsGetSupportLogCommentsWithHttpInfo($csl_number);
        return $response;
    }

    /**
     * Operation acsGetSupportLogCommentsWithHttpInfo
     *
     * Get all comments for a client support log
     *
     * @param  string $csl_number The client support log (CSL) number (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SupportLogComment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function acsGetSupportLogCommentsWithHttpInfo($csl_number)
    {
        $returnType = '\Advantage\Client\Model\SupportLogComment[]';
        $request = $this->acsGetSupportLogCommentsRequest($csl_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SupportLogComment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsGetSupportLogCommentsAsync
     *
     * Get all comments for a client support log
     *
     * @param  string $csl_number The client support log (CSL) number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetSupportLogCommentsAsync($csl_number)
    {
        return $this->acsGetSupportLogCommentsAsyncWithHttpInfo($csl_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsGetSupportLogCommentsAsyncWithHttpInfo
     *
     * Get all comments for a client support log
     *
     * @param  string $csl_number The client support log (CSL) number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsGetSupportLogCommentsAsyncWithHttpInfo($csl_number)
    {
        $returnType = '\Advantage\Client\Model\SupportLogComment[]';
        $request = $this->acsGetSupportLogCommentsRequest($csl_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsGetSupportLogComments'
     *
     * @param  string $csl_number The client support log (CSL) number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsGetSupportLogCommentsRequest($csl_number)
    {
        // verify the required parameter 'csl_number' is set
        if ($csl_number === null || (is_array($csl_number) && count($csl_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csl_number when calling acsGetSupportLogComments'
            );
        }

        $resourcePath = '/acs/support-logs/{cslNumber}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($csl_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cslNumber' . '}',
                ObjectSerializer::toPathValue($csl_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acsSearchSupportLogs
     *
     * Get information for client support logs matching a search argument.
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $activity_category Filter on ATV-CAT using &#39;Equal&#39; operator (optional)
     * @param  string $analyst_code Filter on CSL-ANT using &#39;Equal&#39; operator (optional)
     * @param  string $creation_date Filter on CNTC-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $client_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $engineer_code Filter on CSL-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $is_modification Filter on MOD-FLG using &#39;Equal&#39; operator (optional)
     * @param  string $job_code Filter on CSL-JOB using &#39;Equal&#39; operator (optional)
     * @param  string $lead_engineer_code Filter on LEAD-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $status_code Filter on CSL-STA using &#39;Equal&#39; operator (optional)
     * @param  string $update_date Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $activity_category_not_equal Filter on ATV-CAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $activity_category_less Filter on ATV-CAT using &#39;Less&#39; operator (optional)
     * @param  string $activity_category_less_or_equal Filter on ATV-CAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $activity_category_greater Filter on ATV-CAT using &#39;Greater&#39; operator (optional)
     * @param  string $activity_category_greater_or_equal Filter on ATV-CAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $activity_category_is_null Filter on ATV-CAT using &#39;IsNull&#39; operator (optional)
     * @param  string $activity_category_is_not_null Filter on ATV-CAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $activity_category_like Filter on ATV-CAT using &#39;Like&#39; operator (optional)
     * @param  string $activity_category_not_like Filter on ATV-CAT using &#39;NotLike&#39; operator (optional)
     * @param  string $activity_category_contains Filter on ATV-CAT using &#39;Contains&#39; operator (optional)
     * @param  string $activity_category_not_contains Filter on ATV-CAT using &#39;NotContains&#39; operator (optional)
     * @param  string $activity_category_starts_with Filter on ATV-CAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $activity_category_not_starts_with Filter on ATV-CAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $activity_category_ends_with Filter on ATV-CAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $activity_category_not_ends_with Filter on ATV-CAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $activity_category_in Filter on ATV-CAT using &#39;In&#39; operator (optional)
     * @param  string $activity_category_between Filter on ATV-CAT using &#39;Between&#39; operator (optional)
     * @param  string $analyst_code_not_equal Filter on CSL-ANT using &#39;NotEqual&#39; operator (optional)
     * @param  string $analyst_code_less Filter on CSL-ANT using &#39;Less&#39; operator (optional)
     * @param  string $analyst_code_less_or_equal Filter on CSL-ANT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $analyst_code_greater Filter on CSL-ANT using &#39;Greater&#39; operator (optional)
     * @param  string $analyst_code_greater_or_equal Filter on CSL-ANT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $analyst_code_is_null Filter on CSL-ANT using &#39;IsNull&#39; operator (optional)
     * @param  string $analyst_code_is_not_null Filter on CSL-ANT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $analyst_code_like Filter on CSL-ANT using &#39;Like&#39; operator (optional)
     * @param  string $analyst_code_not_like Filter on CSL-ANT using &#39;NotLike&#39; operator (optional)
     * @param  string $analyst_code_contains Filter on CSL-ANT using &#39;Contains&#39; operator (optional)
     * @param  string $analyst_code_not_contains Filter on CSL-ANT using &#39;NotContains&#39; operator (optional)
     * @param  string $analyst_code_starts_with Filter on CSL-ANT using &#39;StartsWith&#39; operator (optional)
     * @param  string $analyst_code_not_starts_with Filter on CSL-ANT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $analyst_code_ends_with Filter on CSL-ANT using &#39;EndsWith&#39; operator (optional)
     * @param  string $analyst_code_not_ends_with Filter on CSL-ANT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $analyst_code_in Filter on CSL-ANT using &#39;In&#39; operator (optional)
     * @param  string $analyst_code_between Filter on CSL-ANT using &#39;Between&#39; operator (optional)
     * @param  string $creation_date_not_equal Filter on CNTC-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $creation_date_less Filter on CNTC-DTE using &#39;Less&#39; operator (optional)
     * @param  string $creation_date_less_or_equal Filter on CNTC-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $creation_date_greater Filter on CNTC-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $creation_date_greater_or_equal Filter on CNTC-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $creation_date_is_null Filter on CNTC-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $creation_date_is_not_null Filter on CNTC-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $creation_date_like Filter on CNTC-DTE using &#39;Like&#39; operator (optional)
     * @param  string $creation_date_not_like Filter on CNTC-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $creation_date_contains Filter on CNTC-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $creation_date_not_contains Filter on CNTC-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $creation_date_starts_with Filter on CNTC-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $creation_date_not_starts_with Filter on CNTC-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $creation_date_ends_with Filter on CNTC-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $creation_date_not_ends_with Filter on CNTC-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $creation_date_in Filter on CNTC-DTE using &#39;In&#39; operator (optional)
     * @param  string $creation_date_between Filter on CNTC-DTE using &#39;Between&#39; operator (optional)
     * @param  string $client_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $client_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $client_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $client_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $client_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $client_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $client_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $client_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $client_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $client_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $client_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $client_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $client_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $client_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $client_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $client_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $client_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $engineer_code_not_equal Filter on CSL-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $engineer_code_less Filter on CSL-ENG using &#39;Less&#39; operator (optional)
     * @param  string $engineer_code_less_or_equal Filter on CSL-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $engineer_code_greater Filter on CSL-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $engineer_code_greater_or_equal Filter on CSL-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $engineer_code_is_null Filter on CSL-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $engineer_code_is_not_null Filter on CSL-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $engineer_code_like Filter on CSL-ENG using &#39;Like&#39; operator (optional)
     * @param  string $engineer_code_not_like Filter on CSL-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $engineer_code_contains Filter on CSL-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $engineer_code_not_contains Filter on CSL-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $engineer_code_starts_with Filter on CSL-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $engineer_code_not_starts_with Filter on CSL-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $engineer_code_ends_with Filter on CSL-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $engineer_code_not_ends_with Filter on CSL-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $engineer_code_in Filter on CSL-ENG using &#39;In&#39; operator (optional)
     * @param  string $engineer_code_between Filter on CSL-ENG using &#39;Between&#39; operator (optional)
     * @param  string $is_modification_not_equal Filter on MOD-FLG using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_modification_less Filter on MOD-FLG using &#39;Less&#39; operator (optional)
     * @param  string $is_modification_less_or_equal Filter on MOD-FLG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_modification_greater Filter on MOD-FLG using &#39;Greater&#39; operator (optional)
     * @param  string $is_modification_greater_or_equal Filter on MOD-FLG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_modification_is_null Filter on MOD-FLG using &#39;IsNull&#39; operator (optional)
     * @param  string $is_modification_is_not_null Filter on MOD-FLG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_modification_like Filter on MOD-FLG using &#39;Like&#39; operator (optional)
     * @param  string $is_modification_not_like Filter on MOD-FLG using &#39;NotLike&#39; operator (optional)
     * @param  string $is_modification_contains Filter on MOD-FLG using &#39;Contains&#39; operator (optional)
     * @param  string $is_modification_not_contains Filter on MOD-FLG using &#39;NotContains&#39; operator (optional)
     * @param  string $is_modification_starts_with Filter on MOD-FLG using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_modification_not_starts_with Filter on MOD-FLG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_modification_ends_with Filter on MOD-FLG using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_modification_not_ends_with Filter on MOD-FLG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_modification_in Filter on MOD-FLG using &#39;In&#39; operator (optional)
     * @param  string $is_modification_between Filter on MOD-FLG using &#39;Between&#39; operator (optional)
     * @param  string $job_code_not_equal Filter on CSL-JOB using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_code_less Filter on CSL-JOB using &#39;Less&#39; operator (optional)
     * @param  string $job_code_less_or_equal Filter on CSL-JOB using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_code_greater Filter on CSL-JOB using &#39;Greater&#39; operator (optional)
     * @param  string $job_code_greater_or_equal Filter on CSL-JOB using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_code_is_null Filter on CSL-JOB using &#39;IsNull&#39; operator (optional)
     * @param  string $job_code_is_not_null Filter on CSL-JOB using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_code_like Filter on CSL-JOB using &#39;Like&#39; operator (optional)
     * @param  string $job_code_not_like Filter on CSL-JOB using &#39;NotLike&#39; operator (optional)
     * @param  string $job_code_contains Filter on CSL-JOB using &#39;Contains&#39; operator (optional)
     * @param  string $job_code_not_contains Filter on CSL-JOB using &#39;NotContains&#39; operator (optional)
     * @param  string $job_code_starts_with Filter on CSL-JOB using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_code_not_starts_with Filter on CSL-JOB using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_code_ends_with Filter on CSL-JOB using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_code_not_ends_with Filter on CSL-JOB using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_code_in Filter on CSL-JOB using &#39;In&#39; operator (optional)
     * @param  string $job_code_between Filter on CSL-JOB using &#39;Between&#39; operator (optional)
     * @param  string $lead_engineer_code_not_equal Filter on LEAD-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_less Filter on LEAD-ENG using &#39;Less&#39; operator (optional)
     * @param  string $lead_engineer_code_less_or_equal Filter on LEAD-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_greater Filter on LEAD-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $lead_engineer_code_greater_or_equal Filter on LEAD-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_is_null Filter on LEAD-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $lead_engineer_code_is_not_null Filter on LEAD-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $lead_engineer_code_like Filter on LEAD-ENG using &#39;Like&#39; operator (optional)
     * @param  string $lead_engineer_code_not_like Filter on LEAD-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $lead_engineer_code_contains Filter on LEAD-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $lead_engineer_code_not_contains Filter on LEAD-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $lead_engineer_code_starts_with Filter on LEAD-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_starts_with Filter on LEAD-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_ends_with Filter on LEAD-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_ends_with Filter on LEAD-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_in Filter on LEAD-ENG using &#39;In&#39; operator (optional)
     * @param  string $lead_engineer_code_between Filter on LEAD-ENG using &#39;Between&#39; operator (optional)
     * @param  string $status_code_not_equal Filter on CSL-STA using &#39;NotEqual&#39; operator (optional)
     * @param  string $status_code_less Filter on CSL-STA using &#39;Less&#39; operator (optional)
     * @param  string $status_code_less_or_equal Filter on CSL-STA using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $status_code_greater Filter on CSL-STA using &#39;Greater&#39; operator (optional)
     * @param  string $status_code_greater_or_equal Filter on CSL-STA using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $status_code_is_null Filter on CSL-STA using &#39;IsNull&#39; operator (optional)
     * @param  string $status_code_is_not_null Filter on CSL-STA using &#39;IsNotNull&#39; operator (optional)
     * @param  string $status_code_like Filter on CSL-STA using &#39;Like&#39; operator (optional)
     * @param  string $status_code_not_like Filter on CSL-STA using &#39;NotLike&#39; operator (optional)
     * @param  string $status_code_contains Filter on CSL-STA using &#39;Contains&#39; operator (optional)
     * @param  string $status_code_not_contains Filter on CSL-STA using &#39;NotContains&#39; operator (optional)
     * @param  string $status_code_starts_with Filter on CSL-STA using &#39;StartsWith&#39; operator (optional)
     * @param  string $status_code_not_starts_with Filter on CSL-STA using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $status_code_ends_with Filter on CSL-STA using &#39;EndsWith&#39; operator (optional)
     * @param  string $status_code_not_ends_with Filter on CSL-STA using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $status_code_in Filter on CSL-STA using &#39;In&#39; operator (optional)
     * @param  string $status_code_between Filter on CSL-STA using &#39;Between&#39; operator (optional)
     * @param  string $update_date_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $update_date_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $update_date_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $update_date_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $update_date_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $update_date_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $update_date_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $update_date_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $update_date_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $update_date_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $update_date_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $update_date_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $update_date_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $update_date_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $update_date_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $update_date_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $update_date_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultSupportLog
     */
    public function acsSearchSupportLogs($pager_skip = null, $pager_take = null, $activity_category = null, $analyst_code = null, $creation_date = null, $client_number = null, $engineer_code = null, $is_modification = null, $job_code = null, $lead_engineer_code = null, $status_code = null, $update_date = null, $activity_category_not_equal = null, $activity_category_less = null, $activity_category_less_or_equal = null, $activity_category_greater = null, $activity_category_greater_or_equal = null, $activity_category_is_null = null, $activity_category_is_not_null = null, $activity_category_like = null, $activity_category_not_like = null, $activity_category_contains = null, $activity_category_not_contains = null, $activity_category_starts_with = null, $activity_category_not_starts_with = null, $activity_category_ends_with = null, $activity_category_not_ends_with = null, $activity_category_in = null, $activity_category_between = null, $analyst_code_not_equal = null, $analyst_code_less = null, $analyst_code_less_or_equal = null, $analyst_code_greater = null, $analyst_code_greater_or_equal = null, $analyst_code_is_null = null, $analyst_code_is_not_null = null, $analyst_code_like = null, $analyst_code_not_like = null, $analyst_code_contains = null, $analyst_code_not_contains = null, $analyst_code_starts_with = null, $analyst_code_not_starts_with = null, $analyst_code_ends_with = null, $analyst_code_not_ends_with = null, $analyst_code_in = null, $analyst_code_between = null, $creation_date_not_equal = null, $creation_date_less = null, $creation_date_less_or_equal = null, $creation_date_greater = null, $creation_date_greater_or_equal = null, $creation_date_is_null = null, $creation_date_is_not_null = null, $creation_date_like = null, $creation_date_not_like = null, $creation_date_contains = null, $creation_date_not_contains = null, $creation_date_starts_with = null, $creation_date_not_starts_with = null, $creation_date_ends_with = null, $creation_date_not_ends_with = null, $creation_date_in = null, $creation_date_between = null, $client_number_not_equal = null, $client_number_less = null, $client_number_less_or_equal = null, $client_number_greater = null, $client_number_greater_or_equal = null, $client_number_is_null = null, $client_number_is_not_null = null, $client_number_like = null, $client_number_not_like = null, $client_number_contains = null, $client_number_not_contains = null, $client_number_starts_with = null, $client_number_not_starts_with = null, $client_number_ends_with = null, $client_number_not_ends_with = null, $client_number_in = null, $client_number_between = null, $engineer_code_not_equal = null, $engineer_code_less = null, $engineer_code_less_or_equal = null, $engineer_code_greater = null, $engineer_code_greater_or_equal = null, $engineer_code_is_null = null, $engineer_code_is_not_null = null, $engineer_code_like = null, $engineer_code_not_like = null, $engineer_code_contains = null, $engineer_code_not_contains = null, $engineer_code_starts_with = null, $engineer_code_not_starts_with = null, $engineer_code_ends_with = null, $engineer_code_not_ends_with = null, $engineer_code_in = null, $engineer_code_between = null, $is_modification_not_equal = null, $is_modification_less = null, $is_modification_less_or_equal = null, $is_modification_greater = null, $is_modification_greater_or_equal = null, $is_modification_is_null = null, $is_modification_is_not_null = null, $is_modification_like = null, $is_modification_not_like = null, $is_modification_contains = null, $is_modification_not_contains = null, $is_modification_starts_with = null, $is_modification_not_starts_with = null, $is_modification_ends_with = null, $is_modification_not_ends_with = null, $is_modification_in = null, $is_modification_between = null, $job_code_not_equal = null, $job_code_less = null, $job_code_less_or_equal = null, $job_code_greater = null, $job_code_greater_or_equal = null, $job_code_is_null = null, $job_code_is_not_null = null, $job_code_like = null, $job_code_not_like = null, $job_code_contains = null, $job_code_not_contains = null, $job_code_starts_with = null, $job_code_not_starts_with = null, $job_code_ends_with = null, $job_code_not_ends_with = null, $job_code_in = null, $job_code_between = null, $lead_engineer_code_not_equal = null, $lead_engineer_code_less = null, $lead_engineer_code_less_or_equal = null, $lead_engineer_code_greater = null, $lead_engineer_code_greater_or_equal = null, $lead_engineer_code_is_null = null, $lead_engineer_code_is_not_null = null, $lead_engineer_code_like = null, $lead_engineer_code_not_like = null, $lead_engineer_code_contains = null, $lead_engineer_code_not_contains = null, $lead_engineer_code_starts_with = null, $lead_engineer_code_not_starts_with = null, $lead_engineer_code_ends_with = null, $lead_engineer_code_not_ends_with = null, $lead_engineer_code_in = null, $lead_engineer_code_between = null, $status_code_not_equal = null, $status_code_less = null, $status_code_less_or_equal = null, $status_code_greater = null, $status_code_greater_or_equal = null, $status_code_is_null = null, $status_code_is_not_null = null, $status_code_like = null, $status_code_not_like = null, $status_code_contains = null, $status_code_not_contains = null, $status_code_starts_with = null, $status_code_not_starts_with = null, $status_code_ends_with = null, $status_code_not_ends_with = null, $status_code_in = null, $status_code_between = null, $update_date_not_equal = null, $update_date_less = null, $update_date_less_or_equal = null, $update_date_greater = null, $update_date_greater_or_equal = null, $update_date_is_null = null, $update_date_is_not_null = null, $update_date_like = null, $update_date_not_like = null, $update_date_contains = null, $update_date_not_contains = null, $update_date_starts_with = null, $update_date_not_starts_with = null, $update_date_ends_with = null, $update_date_not_ends_with = null, $update_date_in = null, $update_date_between = null)
    {
        list($response) = $this->acsSearchSupportLogsWithHttpInfo($pager_skip, $pager_take, $activity_category, $analyst_code, $creation_date, $client_number, $engineer_code, $is_modification, $job_code, $lead_engineer_code, $status_code, $update_date, $activity_category_not_equal, $activity_category_less, $activity_category_less_or_equal, $activity_category_greater, $activity_category_greater_or_equal, $activity_category_is_null, $activity_category_is_not_null, $activity_category_like, $activity_category_not_like, $activity_category_contains, $activity_category_not_contains, $activity_category_starts_with, $activity_category_not_starts_with, $activity_category_ends_with, $activity_category_not_ends_with, $activity_category_in, $activity_category_between, $analyst_code_not_equal, $analyst_code_less, $analyst_code_less_or_equal, $analyst_code_greater, $analyst_code_greater_or_equal, $analyst_code_is_null, $analyst_code_is_not_null, $analyst_code_like, $analyst_code_not_like, $analyst_code_contains, $analyst_code_not_contains, $analyst_code_starts_with, $analyst_code_not_starts_with, $analyst_code_ends_with, $analyst_code_not_ends_with, $analyst_code_in, $analyst_code_between, $creation_date_not_equal, $creation_date_less, $creation_date_less_or_equal, $creation_date_greater, $creation_date_greater_or_equal, $creation_date_is_null, $creation_date_is_not_null, $creation_date_like, $creation_date_not_like, $creation_date_contains, $creation_date_not_contains, $creation_date_starts_with, $creation_date_not_starts_with, $creation_date_ends_with, $creation_date_not_ends_with, $creation_date_in, $creation_date_between, $client_number_not_equal, $client_number_less, $client_number_less_or_equal, $client_number_greater, $client_number_greater_or_equal, $client_number_is_null, $client_number_is_not_null, $client_number_like, $client_number_not_like, $client_number_contains, $client_number_not_contains, $client_number_starts_with, $client_number_not_starts_with, $client_number_ends_with, $client_number_not_ends_with, $client_number_in, $client_number_between, $engineer_code_not_equal, $engineer_code_less, $engineer_code_less_or_equal, $engineer_code_greater, $engineer_code_greater_or_equal, $engineer_code_is_null, $engineer_code_is_not_null, $engineer_code_like, $engineer_code_not_like, $engineer_code_contains, $engineer_code_not_contains, $engineer_code_starts_with, $engineer_code_not_starts_with, $engineer_code_ends_with, $engineer_code_not_ends_with, $engineer_code_in, $engineer_code_between, $is_modification_not_equal, $is_modification_less, $is_modification_less_or_equal, $is_modification_greater, $is_modification_greater_or_equal, $is_modification_is_null, $is_modification_is_not_null, $is_modification_like, $is_modification_not_like, $is_modification_contains, $is_modification_not_contains, $is_modification_starts_with, $is_modification_not_starts_with, $is_modification_ends_with, $is_modification_not_ends_with, $is_modification_in, $is_modification_between, $job_code_not_equal, $job_code_less, $job_code_less_or_equal, $job_code_greater, $job_code_greater_or_equal, $job_code_is_null, $job_code_is_not_null, $job_code_like, $job_code_not_like, $job_code_contains, $job_code_not_contains, $job_code_starts_with, $job_code_not_starts_with, $job_code_ends_with, $job_code_not_ends_with, $job_code_in, $job_code_between, $lead_engineer_code_not_equal, $lead_engineer_code_less, $lead_engineer_code_less_or_equal, $lead_engineer_code_greater, $lead_engineer_code_greater_or_equal, $lead_engineer_code_is_null, $lead_engineer_code_is_not_null, $lead_engineer_code_like, $lead_engineer_code_not_like, $lead_engineer_code_contains, $lead_engineer_code_not_contains, $lead_engineer_code_starts_with, $lead_engineer_code_not_starts_with, $lead_engineer_code_ends_with, $lead_engineer_code_not_ends_with, $lead_engineer_code_in, $lead_engineer_code_between, $status_code_not_equal, $status_code_less, $status_code_less_or_equal, $status_code_greater, $status_code_greater_or_equal, $status_code_is_null, $status_code_is_not_null, $status_code_like, $status_code_not_like, $status_code_contains, $status_code_not_contains, $status_code_starts_with, $status_code_not_starts_with, $status_code_ends_with, $status_code_not_ends_with, $status_code_in, $status_code_between, $update_date_not_equal, $update_date_less, $update_date_less_or_equal, $update_date_greater, $update_date_greater_or_equal, $update_date_is_null, $update_date_is_not_null, $update_date_like, $update_date_not_like, $update_date_contains, $update_date_not_contains, $update_date_starts_with, $update_date_not_starts_with, $update_date_ends_with, $update_date_not_ends_with, $update_date_in, $update_date_between);
        return $response;
    }

    /**
     * Operation acsSearchSupportLogsWithHttpInfo
     *
     * Get information for client support logs matching a search argument.
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $activity_category Filter on ATV-CAT using &#39;Equal&#39; operator (optional)
     * @param  string $analyst_code Filter on CSL-ANT using &#39;Equal&#39; operator (optional)
     * @param  string $creation_date Filter on CNTC-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $client_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $engineer_code Filter on CSL-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $is_modification Filter on MOD-FLG using &#39;Equal&#39; operator (optional)
     * @param  string $job_code Filter on CSL-JOB using &#39;Equal&#39; operator (optional)
     * @param  string $lead_engineer_code Filter on LEAD-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $status_code Filter on CSL-STA using &#39;Equal&#39; operator (optional)
     * @param  string $update_date Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $activity_category_not_equal Filter on ATV-CAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $activity_category_less Filter on ATV-CAT using &#39;Less&#39; operator (optional)
     * @param  string $activity_category_less_or_equal Filter on ATV-CAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $activity_category_greater Filter on ATV-CAT using &#39;Greater&#39; operator (optional)
     * @param  string $activity_category_greater_or_equal Filter on ATV-CAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $activity_category_is_null Filter on ATV-CAT using &#39;IsNull&#39; operator (optional)
     * @param  string $activity_category_is_not_null Filter on ATV-CAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $activity_category_like Filter on ATV-CAT using &#39;Like&#39; operator (optional)
     * @param  string $activity_category_not_like Filter on ATV-CAT using &#39;NotLike&#39; operator (optional)
     * @param  string $activity_category_contains Filter on ATV-CAT using &#39;Contains&#39; operator (optional)
     * @param  string $activity_category_not_contains Filter on ATV-CAT using &#39;NotContains&#39; operator (optional)
     * @param  string $activity_category_starts_with Filter on ATV-CAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $activity_category_not_starts_with Filter on ATV-CAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $activity_category_ends_with Filter on ATV-CAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $activity_category_not_ends_with Filter on ATV-CAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $activity_category_in Filter on ATV-CAT using &#39;In&#39; operator (optional)
     * @param  string $activity_category_between Filter on ATV-CAT using &#39;Between&#39; operator (optional)
     * @param  string $analyst_code_not_equal Filter on CSL-ANT using &#39;NotEqual&#39; operator (optional)
     * @param  string $analyst_code_less Filter on CSL-ANT using &#39;Less&#39; operator (optional)
     * @param  string $analyst_code_less_or_equal Filter on CSL-ANT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $analyst_code_greater Filter on CSL-ANT using &#39;Greater&#39; operator (optional)
     * @param  string $analyst_code_greater_or_equal Filter on CSL-ANT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $analyst_code_is_null Filter on CSL-ANT using &#39;IsNull&#39; operator (optional)
     * @param  string $analyst_code_is_not_null Filter on CSL-ANT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $analyst_code_like Filter on CSL-ANT using &#39;Like&#39; operator (optional)
     * @param  string $analyst_code_not_like Filter on CSL-ANT using &#39;NotLike&#39; operator (optional)
     * @param  string $analyst_code_contains Filter on CSL-ANT using &#39;Contains&#39; operator (optional)
     * @param  string $analyst_code_not_contains Filter on CSL-ANT using &#39;NotContains&#39; operator (optional)
     * @param  string $analyst_code_starts_with Filter on CSL-ANT using &#39;StartsWith&#39; operator (optional)
     * @param  string $analyst_code_not_starts_with Filter on CSL-ANT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $analyst_code_ends_with Filter on CSL-ANT using &#39;EndsWith&#39; operator (optional)
     * @param  string $analyst_code_not_ends_with Filter on CSL-ANT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $analyst_code_in Filter on CSL-ANT using &#39;In&#39; operator (optional)
     * @param  string $analyst_code_between Filter on CSL-ANT using &#39;Between&#39; operator (optional)
     * @param  string $creation_date_not_equal Filter on CNTC-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $creation_date_less Filter on CNTC-DTE using &#39;Less&#39; operator (optional)
     * @param  string $creation_date_less_or_equal Filter on CNTC-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $creation_date_greater Filter on CNTC-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $creation_date_greater_or_equal Filter on CNTC-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $creation_date_is_null Filter on CNTC-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $creation_date_is_not_null Filter on CNTC-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $creation_date_like Filter on CNTC-DTE using &#39;Like&#39; operator (optional)
     * @param  string $creation_date_not_like Filter on CNTC-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $creation_date_contains Filter on CNTC-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $creation_date_not_contains Filter on CNTC-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $creation_date_starts_with Filter on CNTC-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $creation_date_not_starts_with Filter on CNTC-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $creation_date_ends_with Filter on CNTC-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $creation_date_not_ends_with Filter on CNTC-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $creation_date_in Filter on CNTC-DTE using &#39;In&#39; operator (optional)
     * @param  string $creation_date_between Filter on CNTC-DTE using &#39;Between&#39; operator (optional)
     * @param  string $client_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $client_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $client_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $client_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $client_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $client_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $client_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $client_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $client_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $client_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $client_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $client_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $client_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $client_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $client_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $client_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $client_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $engineer_code_not_equal Filter on CSL-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $engineer_code_less Filter on CSL-ENG using &#39;Less&#39; operator (optional)
     * @param  string $engineer_code_less_or_equal Filter on CSL-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $engineer_code_greater Filter on CSL-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $engineer_code_greater_or_equal Filter on CSL-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $engineer_code_is_null Filter on CSL-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $engineer_code_is_not_null Filter on CSL-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $engineer_code_like Filter on CSL-ENG using &#39;Like&#39; operator (optional)
     * @param  string $engineer_code_not_like Filter on CSL-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $engineer_code_contains Filter on CSL-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $engineer_code_not_contains Filter on CSL-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $engineer_code_starts_with Filter on CSL-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $engineer_code_not_starts_with Filter on CSL-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $engineer_code_ends_with Filter on CSL-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $engineer_code_not_ends_with Filter on CSL-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $engineer_code_in Filter on CSL-ENG using &#39;In&#39; operator (optional)
     * @param  string $engineer_code_between Filter on CSL-ENG using &#39;Between&#39; operator (optional)
     * @param  string $is_modification_not_equal Filter on MOD-FLG using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_modification_less Filter on MOD-FLG using &#39;Less&#39; operator (optional)
     * @param  string $is_modification_less_or_equal Filter on MOD-FLG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_modification_greater Filter on MOD-FLG using &#39;Greater&#39; operator (optional)
     * @param  string $is_modification_greater_or_equal Filter on MOD-FLG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_modification_is_null Filter on MOD-FLG using &#39;IsNull&#39; operator (optional)
     * @param  string $is_modification_is_not_null Filter on MOD-FLG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_modification_like Filter on MOD-FLG using &#39;Like&#39; operator (optional)
     * @param  string $is_modification_not_like Filter on MOD-FLG using &#39;NotLike&#39; operator (optional)
     * @param  string $is_modification_contains Filter on MOD-FLG using &#39;Contains&#39; operator (optional)
     * @param  string $is_modification_not_contains Filter on MOD-FLG using &#39;NotContains&#39; operator (optional)
     * @param  string $is_modification_starts_with Filter on MOD-FLG using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_modification_not_starts_with Filter on MOD-FLG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_modification_ends_with Filter on MOD-FLG using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_modification_not_ends_with Filter on MOD-FLG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_modification_in Filter on MOD-FLG using &#39;In&#39; operator (optional)
     * @param  string $is_modification_between Filter on MOD-FLG using &#39;Between&#39; operator (optional)
     * @param  string $job_code_not_equal Filter on CSL-JOB using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_code_less Filter on CSL-JOB using &#39;Less&#39; operator (optional)
     * @param  string $job_code_less_or_equal Filter on CSL-JOB using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_code_greater Filter on CSL-JOB using &#39;Greater&#39; operator (optional)
     * @param  string $job_code_greater_or_equal Filter on CSL-JOB using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_code_is_null Filter on CSL-JOB using &#39;IsNull&#39; operator (optional)
     * @param  string $job_code_is_not_null Filter on CSL-JOB using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_code_like Filter on CSL-JOB using &#39;Like&#39; operator (optional)
     * @param  string $job_code_not_like Filter on CSL-JOB using &#39;NotLike&#39; operator (optional)
     * @param  string $job_code_contains Filter on CSL-JOB using &#39;Contains&#39; operator (optional)
     * @param  string $job_code_not_contains Filter on CSL-JOB using &#39;NotContains&#39; operator (optional)
     * @param  string $job_code_starts_with Filter on CSL-JOB using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_code_not_starts_with Filter on CSL-JOB using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_code_ends_with Filter on CSL-JOB using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_code_not_ends_with Filter on CSL-JOB using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_code_in Filter on CSL-JOB using &#39;In&#39; operator (optional)
     * @param  string $job_code_between Filter on CSL-JOB using &#39;Between&#39; operator (optional)
     * @param  string $lead_engineer_code_not_equal Filter on LEAD-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_less Filter on LEAD-ENG using &#39;Less&#39; operator (optional)
     * @param  string $lead_engineer_code_less_or_equal Filter on LEAD-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_greater Filter on LEAD-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $lead_engineer_code_greater_or_equal Filter on LEAD-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_is_null Filter on LEAD-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $lead_engineer_code_is_not_null Filter on LEAD-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $lead_engineer_code_like Filter on LEAD-ENG using &#39;Like&#39; operator (optional)
     * @param  string $lead_engineer_code_not_like Filter on LEAD-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $lead_engineer_code_contains Filter on LEAD-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $lead_engineer_code_not_contains Filter on LEAD-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $lead_engineer_code_starts_with Filter on LEAD-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_starts_with Filter on LEAD-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_ends_with Filter on LEAD-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_ends_with Filter on LEAD-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_in Filter on LEAD-ENG using &#39;In&#39; operator (optional)
     * @param  string $lead_engineer_code_between Filter on LEAD-ENG using &#39;Between&#39; operator (optional)
     * @param  string $status_code_not_equal Filter on CSL-STA using &#39;NotEqual&#39; operator (optional)
     * @param  string $status_code_less Filter on CSL-STA using &#39;Less&#39; operator (optional)
     * @param  string $status_code_less_or_equal Filter on CSL-STA using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $status_code_greater Filter on CSL-STA using &#39;Greater&#39; operator (optional)
     * @param  string $status_code_greater_or_equal Filter on CSL-STA using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $status_code_is_null Filter on CSL-STA using &#39;IsNull&#39; operator (optional)
     * @param  string $status_code_is_not_null Filter on CSL-STA using &#39;IsNotNull&#39; operator (optional)
     * @param  string $status_code_like Filter on CSL-STA using &#39;Like&#39; operator (optional)
     * @param  string $status_code_not_like Filter on CSL-STA using &#39;NotLike&#39; operator (optional)
     * @param  string $status_code_contains Filter on CSL-STA using &#39;Contains&#39; operator (optional)
     * @param  string $status_code_not_contains Filter on CSL-STA using &#39;NotContains&#39; operator (optional)
     * @param  string $status_code_starts_with Filter on CSL-STA using &#39;StartsWith&#39; operator (optional)
     * @param  string $status_code_not_starts_with Filter on CSL-STA using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $status_code_ends_with Filter on CSL-STA using &#39;EndsWith&#39; operator (optional)
     * @param  string $status_code_not_ends_with Filter on CSL-STA using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $status_code_in Filter on CSL-STA using &#39;In&#39; operator (optional)
     * @param  string $status_code_between Filter on CSL-STA using &#39;Between&#39; operator (optional)
     * @param  string $update_date_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $update_date_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $update_date_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $update_date_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $update_date_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $update_date_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $update_date_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $update_date_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $update_date_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $update_date_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $update_date_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $update_date_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $update_date_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $update_date_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $update_date_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $update_date_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $update_date_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultSupportLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function acsSearchSupportLogsWithHttpInfo($pager_skip = null, $pager_take = null, $activity_category = null, $analyst_code = null, $creation_date = null, $client_number = null, $engineer_code = null, $is_modification = null, $job_code = null, $lead_engineer_code = null, $status_code = null, $update_date = null, $activity_category_not_equal = null, $activity_category_less = null, $activity_category_less_or_equal = null, $activity_category_greater = null, $activity_category_greater_or_equal = null, $activity_category_is_null = null, $activity_category_is_not_null = null, $activity_category_like = null, $activity_category_not_like = null, $activity_category_contains = null, $activity_category_not_contains = null, $activity_category_starts_with = null, $activity_category_not_starts_with = null, $activity_category_ends_with = null, $activity_category_not_ends_with = null, $activity_category_in = null, $activity_category_between = null, $analyst_code_not_equal = null, $analyst_code_less = null, $analyst_code_less_or_equal = null, $analyst_code_greater = null, $analyst_code_greater_or_equal = null, $analyst_code_is_null = null, $analyst_code_is_not_null = null, $analyst_code_like = null, $analyst_code_not_like = null, $analyst_code_contains = null, $analyst_code_not_contains = null, $analyst_code_starts_with = null, $analyst_code_not_starts_with = null, $analyst_code_ends_with = null, $analyst_code_not_ends_with = null, $analyst_code_in = null, $analyst_code_between = null, $creation_date_not_equal = null, $creation_date_less = null, $creation_date_less_or_equal = null, $creation_date_greater = null, $creation_date_greater_or_equal = null, $creation_date_is_null = null, $creation_date_is_not_null = null, $creation_date_like = null, $creation_date_not_like = null, $creation_date_contains = null, $creation_date_not_contains = null, $creation_date_starts_with = null, $creation_date_not_starts_with = null, $creation_date_ends_with = null, $creation_date_not_ends_with = null, $creation_date_in = null, $creation_date_between = null, $client_number_not_equal = null, $client_number_less = null, $client_number_less_or_equal = null, $client_number_greater = null, $client_number_greater_or_equal = null, $client_number_is_null = null, $client_number_is_not_null = null, $client_number_like = null, $client_number_not_like = null, $client_number_contains = null, $client_number_not_contains = null, $client_number_starts_with = null, $client_number_not_starts_with = null, $client_number_ends_with = null, $client_number_not_ends_with = null, $client_number_in = null, $client_number_between = null, $engineer_code_not_equal = null, $engineer_code_less = null, $engineer_code_less_or_equal = null, $engineer_code_greater = null, $engineer_code_greater_or_equal = null, $engineer_code_is_null = null, $engineer_code_is_not_null = null, $engineer_code_like = null, $engineer_code_not_like = null, $engineer_code_contains = null, $engineer_code_not_contains = null, $engineer_code_starts_with = null, $engineer_code_not_starts_with = null, $engineer_code_ends_with = null, $engineer_code_not_ends_with = null, $engineer_code_in = null, $engineer_code_between = null, $is_modification_not_equal = null, $is_modification_less = null, $is_modification_less_or_equal = null, $is_modification_greater = null, $is_modification_greater_or_equal = null, $is_modification_is_null = null, $is_modification_is_not_null = null, $is_modification_like = null, $is_modification_not_like = null, $is_modification_contains = null, $is_modification_not_contains = null, $is_modification_starts_with = null, $is_modification_not_starts_with = null, $is_modification_ends_with = null, $is_modification_not_ends_with = null, $is_modification_in = null, $is_modification_between = null, $job_code_not_equal = null, $job_code_less = null, $job_code_less_or_equal = null, $job_code_greater = null, $job_code_greater_or_equal = null, $job_code_is_null = null, $job_code_is_not_null = null, $job_code_like = null, $job_code_not_like = null, $job_code_contains = null, $job_code_not_contains = null, $job_code_starts_with = null, $job_code_not_starts_with = null, $job_code_ends_with = null, $job_code_not_ends_with = null, $job_code_in = null, $job_code_between = null, $lead_engineer_code_not_equal = null, $lead_engineer_code_less = null, $lead_engineer_code_less_or_equal = null, $lead_engineer_code_greater = null, $lead_engineer_code_greater_or_equal = null, $lead_engineer_code_is_null = null, $lead_engineer_code_is_not_null = null, $lead_engineer_code_like = null, $lead_engineer_code_not_like = null, $lead_engineer_code_contains = null, $lead_engineer_code_not_contains = null, $lead_engineer_code_starts_with = null, $lead_engineer_code_not_starts_with = null, $lead_engineer_code_ends_with = null, $lead_engineer_code_not_ends_with = null, $lead_engineer_code_in = null, $lead_engineer_code_between = null, $status_code_not_equal = null, $status_code_less = null, $status_code_less_or_equal = null, $status_code_greater = null, $status_code_greater_or_equal = null, $status_code_is_null = null, $status_code_is_not_null = null, $status_code_like = null, $status_code_not_like = null, $status_code_contains = null, $status_code_not_contains = null, $status_code_starts_with = null, $status_code_not_starts_with = null, $status_code_ends_with = null, $status_code_not_ends_with = null, $status_code_in = null, $status_code_between = null, $update_date_not_equal = null, $update_date_less = null, $update_date_less_or_equal = null, $update_date_greater = null, $update_date_greater_or_equal = null, $update_date_is_null = null, $update_date_is_not_null = null, $update_date_like = null, $update_date_not_like = null, $update_date_contains = null, $update_date_not_contains = null, $update_date_starts_with = null, $update_date_not_starts_with = null, $update_date_ends_with = null, $update_date_not_ends_with = null, $update_date_in = null, $update_date_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSupportLog';
        $request = $this->acsSearchSupportLogsRequest($pager_skip, $pager_take, $activity_category, $analyst_code, $creation_date, $client_number, $engineer_code, $is_modification, $job_code, $lead_engineer_code, $status_code, $update_date, $activity_category_not_equal, $activity_category_less, $activity_category_less_or_equal, $activity_category_greater, $activity_category_greater_or_equal, $activity_category_is_null, $activity_category_is_not_null, $activity_category_like, $activity_category_not_like, $activity_category_contains, $activity_category_not_contains, $activity_category_starts_with, $activity_category_not_starts_with, $activity_category_ends_with, $activity_category_not_ends_with, $activity_category_in, $activity_category_between, $analyst_code_not_equal, $analyst_code_less, $analyst_code_less_or_equal, $analyst_code_greater, $analyst_code_greater_or_equal, $analyst_code_is_null, $analyst_code_is_not_null, $analyst_code_like, $analyst_code_not_like, $analyst_code_contains, $analyst_code_not_contains, $analyst_code_starts_with, $analyst_code_not_starts_with, $analyst_code_ends_with, $analyst_code_not_ends_with, $analyst_code_in, $analyst_code_between, $creation_date_not_equal, $creation_date_less, $creation_date_less_or_equal, $creation_date_greater, $creation_date_greater_or_equal, $creation_date_is_null, $creation_date_is_not_null, $creation_date_like, $creation_date_not_like, $creation_date_contains, $creation_date_not_contains, $creation_date_starts_with, $creation_date_not_starts_with, $creation_date_ends_with, $creation_date_not_ends_with, $creation_date_in, $creation_date_between, $client_number_not_equal, $client_number_less, $client_number_less_or_equal, $client_number_greater, $client_number_greater_or_equal, $client_number_is_null, $client_number_is_not_null, $client_number_like, $client_number_not_like, $client_number_contains, $client_number_not_contains, $client_number_starts_with, $client_number_not_starts_with, $client_number_ends_with, $client_number_not_ends_with, $client_number_in, $client_number_between, $engineer_code_not_equal, $engineer_code_less, $engineer_code_less_or_equal, $engineer_code_greater, $engineer_code_greater_or_equal, $engineer_code_is_null, $engineer_code_is_not_null, $engineer_code_like, $engineer_code_not_like, $engineer_code_contains, $engineer_code_not_contains, $engineer_code_starts_with, $engineer_code_not_starts_with, $engineer_code_ends_with, $engineer_code_not_ends_with, $engineer_code_in, $engineer_code_between, $is_modification_not_equal, $is_modification_less, $is_modification_less_or_equal, $is_modification_greater, $is_modification_greater_or_equal, $is_modification_is_null, $is_modification_is_not_null, $is_modification_like, $is_modification_not_like, $is_modification_contains, $is_modification_not_contains, $is_modification_starts_with, $is_modification_not_starts_with, $is_modification_ends_with, $is_modification_not_ends_with, $is_modification_in, $is_modification_between, $job_code_not_equal, $job_code_less, $job_code_less_or_equal, $job_code_greater, $job_code_greater_or_equal, $job_code_is_null, $job_code_is_not_null, $job_code_like, $job_code_not_like, $job_code_contains, $job_code_not_contains, $job_code_starts_with, $job_code_not_starts_with, $job_code_ends_with, $job_code_not_ends_with, $job_code_in, $job_code_between, $lead_engineer_code_not_equal, $lead_engineer_code_less, $lead_engineer_code_less_or_equal, $lead_engineer_code_greater, $lead_engineer_code_greater_or_equal, $lead_engineer_code_is_null, $lead_engineer_code_is_not_null, $lead_engineer_code_like, $lead_engineer_code_not_like, $lead_engineer_code_contains, $lead_engineer_code_not_contains, $lead_engineer_code_starts_with, $lead_engineer_code_not_starts_with, $lead_engineer_code_ends_with, $lead_engineer_code_not_ends_with, $lead_engineer_code_in, $lead_engineer_code_between, $status_code_not_equal, $status_code_less, $status_code_less_or_equal, $status_code_greater, $status_code_greater_or_equal, $status_code_is_null, $status_code_is_not_null, $status_code_like, $status_code_not_like, $status_code_contains, $status_code_not_contains, $status_code_starts_with, $status_code_not_starts_with, $status_code_ends_with, $status_code_not_ends_with, $status_code_in, $status_code_between, $update_date_not_equal, $update_date_less, $update_date_less_or_equal, $update_date_greater, $update_date_greater_or_equal, $update_date_is_null, $update_date_is_not_null, $update_date_like, $update_date_not_like, $update_date_contains, $update_date_not_contains, $update_date_starts_with, $update_date_not_starts_with, $update_date_ends_with, $update_date_not_ends_with, $update_date_in, $update_date_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultSupportLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acsSearchSupportLogsAsync
     *
     * Get information for client support logs matching a search argument.
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $activity_category Filter on ATV-CAT using &#39;Equal&#39; operator (optional)
     * @param  string $analyst_code Filter on CSL-ANT using &#39;Equal&#39; operator (optional)
     * @param  string $creation_date Filter on CNTC-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $client_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $engineer_code Filter on CSL-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $is_modification Filter on MOD-FLG using &#39;Equal&#39; operator (optional)
     * @param  string $job_code Filter on CSL-JOB using &#39;Equal&#39; operator (optional)
     * @param  string $lead_engineer_code Filter on LEAD-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $status_code Filter on CSL-STA using &#39;Equal&#39; operator (optional)
     * @param  string $update_date Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $activity_category_not_equal Filter on ATV-CAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $activity_category_less Filter on ATV-CAT using &#39;Less&#39; operator (optional)
     * @param  string $activity_category_less_or_equal Filter on ATV-CAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $activity_category_greater Filter on ATV-CAT using &#39;Greater&#39; operator (optional)
     * @param  string $activity_category_greater_or_equal Filter on ATV-CAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $activity_category_is_null Filter on ATV-CAT using &#39;IsNull&#39; operator (optional)
     * @param  string $activity_category_is_not_null Filter on ATV-CAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $activity_category_like Filter on ATV-CAT using &#39;Like&#39; operator (optional)
     * @param  string $activity_category_not_like Filter on ATV-CAT using &#39;NotLike&#39; operator (optional)
     * @param  string $activity_category_contains Filter on ATV-CAT using &#39;Contains&#39; operator (optional)
     * @param  string $activity_category_not_contains Filter on ATV-CAT using &#39;NotContains&#39; operator (optional)
     * @param  string $activity_category_starts_with Filter on ATV-CAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $activity_category_not_starts_with Filter on ATV-CAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $activity_category_ends_with Filter on ATV-CAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $activity_category_not_ends_with Filter on ATV-CAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $activity_category_in Filter on ATV-CAT using &#39;In&#39; operator (optional)
     * @param  string $activity_category_between Filter on ATV-CAT using &#39;Between&#39; operator (optional)
     * @param  string $analyst_code_not_equal Filter on CSL-ANT using &#39;NotEqual&#39; operator (optional)
     * @param  string $analyst_code_less Filter on CSL-ANT using &#39;Less&#39; operator (optional)
     * @param  string $analyst_code_less_or_equal Filter on CSL-ANT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $analyst_code_greater Filter on CSL-ANT using &#39;Greater&#39; operator (optional)
     * @param  string $analyst_code_greater_or_equal Filter on CSL-ANT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $analyst_code_is_null Filter on CSL-ANT using &#39;IsNull&#39; operator (optional)
     * @param  string $analyst_code_is_not_null Filter on CSL-ANT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $analyst_code_like Filter on CSL-ANT using &#39;Like&#39; operator (optional)
     * @param  string $analyst_code_not_like Filter on CSL-ANT using &#39;NotLike&#39; operator (optional)
     * @param  string $analyst_code_contains Filter on CSL-ANT using &#39;Contains&#39; operator (optional)
     * @param  string $analyst_code_not_contains Filter on CSL-ANT using &#39;NotContains&#39; operator (optional)
     * @param  string $analyst_code_starts_with Filter on CSL-ANT using &#39;StartsWith&#39; operator (optional)
     * @param  string $analyst_code_not_starts_with Filter on CSL-ANT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $analyst_code_ends_with Filter on CSL-ANT using &#39;EndsWith&#39; operator (optional)
     * @param  string $analyst_code_not_ends_with Filter on CSL-ANT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $analyst_code_in Filter on CSL-ANT using &#39;In&#39; operator (optional)
     * @param  string $analyst_code_between Filter on CSL-ANT using &#39;Between&#39; operator (optional)
     * @param  string $creation_date_not_equal Filter on CNTC-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $creation_date_less Filter on CNTC-DTE using &#39;Less&#39; operator (optional)
     * @param  string $creation_date_less_or_equal Filter on CNTC-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $creation_date_greater Filter on CNTC-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $creation_date_greater_or_equal Filter on CNTC-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $creation_date_is_null Filter on CNTC-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $creation_date_is_not_null Filter on CNTC-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $creation_date_like Filter on CNTC-DTE using &#39;Like&#39; operator (optional)
     * @param  string $creation_date_not_like Filter on CNTC-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $creation_date_contains Filter on CNTC-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $creation_date_not_contains Filter on CNTC-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $creation_date_starts_with Filter on CNTC-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $creation_date_not_starts_with Filter on CNTC-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $creation_date_ends_with Filter on CNTC-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $creation_date_not_ends_with Filter on CNTC-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $creation_date_in Filter on CNTC-DTE using &#39;In&#39; operator (optional)
     * @param  string $creation_date_between Filter on CNTC-DTE using &#39;Between&#39; operator (optional)
     * @param  string $client_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $client_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $client_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $client_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $client_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $client_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $client_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $client_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $client_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $client_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $client_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $client_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $client_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $client_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $client_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $client_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $client_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $engineer_code_not_equal Filter on CSL-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $engineer_code_less Filter on CSL-ENG using &#39;Less&#39; operator (optional)
     * @param  string $engineer_code_less_or_equal Filter on CSL-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $engineer_code_greater Filter on CSL-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $engineer_code_greater_or_equal Filter on CSL-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $engineer_code_is_null Filter on CSL-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $engineer_code_is_not_null Filter on CSL-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $engineer_code_like Filter on CSL-ENG using &#39;Like&#39; operator (optional)
     * @param  string $engineer_code_not_like Filter on CSL-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $engineer_code_contains Filter on CSL-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $engineer_code_not_contains Filter on CSL-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $engineer_code_starts_with Filter on CSL-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $engineer_code_not_starts_with Filter on CSL-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $engineer_code_ends_with Filter on CSL-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $engineer_code_not_ends_with Filter on CSL-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $engineer_code_in Filter on CSL-ENG using &#39;In&#39; operator (optional)
     * @param  string $engineer_code_between Filter on CSL-ENG using &#39;Between&#39; operator (optional)
     * @param  string $is_modification_not_equal Filter on MOD-FLG using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_modification_less Filter on MOD-FLG using &#39;Less&#39; operator (optional)
     * @param  string $is_modification_less_or_equal Filter on MOD-FLG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_modification_greater Filter on MOD-FLG using &#39;Greater&#39; operator (optional)
     * @param  string $is_modification_greater_or_equal Filter on MOD-FLG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_modification_is_null Filter on MOD-FLG using &#39;IsNull&#39; operator (optional)
     * @param  string $is_modification_is_not_null Filter on MOD-FLG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_modification_like Filter on MOD-FLG using &#39;Like&#39; operator (optional)
     * @param  string $is_modification_not_like Filter on MOD-FLG using &#39;NotLike&#39; operator (optional)
     * @param  string $is_modification_contains Filter on MOD-FLG using &#39;Contains&#39; operator (optional)
     * @param  string $is_modification_not_contains Filter on MOD-FLG using &#39;NotContains&#39; operator (optional)
     * @param  string $is_modification_starts_with Filter on MOD-FLG using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_modification_not_starts_with Filter on MOD-FLG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_modification_ends_with Filter on MOD-FLG using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_modification_not_ends_with Filter on MOD-FLG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_modification_in Filter on MOD-FLG using &#39;In&#39; operator (optional)
     * @param  string $is_modification_between Filter on MOD-FLG using &#39;Between&#39; operator (optional)
     * @param  string $job_code_not_equal Filter on CSL-JOB using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_code_less Filter on CSL-JOB using &#39;Less&#39; operator (optional)
     * @param  string $job_code_less_or_equal Filter on CSL-JOB using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_code_greater Filter on CSL-JOB using &#39;Greater&#39; operator (optional)
     * @param  string $job_code_greater_or_equal Filter on CSL-JOB using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_code_is_null Filter on CSL-JOB using &#39;IsNull&#39; operator (optional)
     * @param  string $job_code_is_not_null Filter on CSL-JOB using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_code_like Filter on CSL-JOB using &#39;Like&#39; operator (optional)
     * @param  string $job_code_not_like Filter on CSL-JOB using &#39;NotLike&#39; operator (optional)
     * @param  string $job_code_contains Filter on CSL-JOB using &#39;Contains&#39; operator (optional)
     * @param  string $job_code_not_contains Filter on CSL-JOB using &#39;NotContains&#39; operator (optional)
     * @param  string $job_code_starts_with Filter on CSL-JOB using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_code_not_starts_with Filter on CSL-JOB using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_code_ends_with Filter on CSL-JOB using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_code_not_ends_with Filter on CSL-JOB using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_code_in Filter on CSL-JOB using &#39;In&#39; operator (optional)
     * @param  string $job_code_between Filter on CSL-JOB using &#39;Between&#39; operator (optional)
     * @param  string $lead_engineer_code_not_equal Filter on LEAD-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_less Filter on LEAD-ENG using &#39;Less&#39; operator (optional)
     * @param  string $lead_engineer_code_less_or_equal Filter on LEAD-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_greater Filter on LEAD-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $lead_engineer_code_greater_or_equal Filter on LEAD-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_is_null Filter on LEAD-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $lead_engineer_code_is_not_null Filter on LEAD-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $lead_engineer_code_like Filter on LEAD-ENG using &#39;Like&#39; operator (optional)
     * @param  string $lead_engineer_code_not_like Filter on LEAD-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $lead_engineer_code_contains Filter on LEAD-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $lead_engineer_code_not_contains Filter on LEAD-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $lead_engineer_code_starts_with Filter on LEAD-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_starts_with Filter on LEAD-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_ends_with Filter on LEAD-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_ends_with Filter on LEAD-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_in Filter on LEAD-ENG using &#39;In&#39; operator (optional)
     * @param  string $lead_engineer_code_between Filter on LEAD-ENG using &#39;Between&#39; operator (optional)
     * @param  string $status_code_not_equal Filter on CSL-STA using &#39;NotEqual&#39; operator (optional)
     * @param  string $status_code_less Filter on CSL-STA using &#39;Less&#39; operator (optional)
     * @param  string $status_code_less_or_equal Filter on CSL-STA using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $status_code_greater Filter on CSL-STA using &#39;Greater&#39; operator (optional)
     * @param  string $status_code_greater_or_equal Filter on CSL-STA using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $status_code_is_null Filter on CSL-STA using &#39;IsNull&#39; operator (optional)
     * @param  string $status_code_is_not_null Filter on CSL-STA using &#39;IsNotNull&#39; operator (optional)
     * @param  string $status_code_like Filter on CSL-STA using &#39;Like&#39; operator (optional)
     * @param  string $status_code_not_like Filter on CSL-STA using &#39;NotLike&#39; operator (optional)
     * @param  string $status_code_contains Filter on CSL-STA using &#39;Contains&#39; operator (optional)
     * @param  string $status_code_not_contains Filter on CSL-STA using &#39;NotContains&#39; operator (optional)
     * @param  string $status_code_starts_with Filter on CSL-STA using &#39;StartsWith&#39; operator (optional)
     * @param  string $status_code_not_starts_with Filter on CSL-STA using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $status_code_ends_with Filter on CSL-STA using &#39;EndsWith&#39; operator (optional)
     * @param  string $status_code_not_ends_with Filter on CSL-STA using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $status_code_in Filter on CSL-STA using &#39;In&#39; operator (optional)
     * @param  string $status_code_between Filter on CSL-STA using &#39;Between&#39; operator (optional)
     * @param  string $update_date_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $update_date_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $update_date_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $update_date_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $update_date_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $update_date_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $update_date_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $update_date_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $update_date_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $update_date_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $update_date_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $update_date_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $update_date_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $update_date_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $update_date_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $update_date_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $update_date_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsSearchSupportLogsAsync($pager_skip = null, $pager_take = null, $activity_category = null, $analyst_code = null, $creation_date = null, $client_number = null, $engineer_code = null, $is_modification = null, $job_code = null, $lead_engineer_code = null, $status_code = null, $update_date = null, $activity_category_not_equal = null, $activity_category_less = null, $activity_category_less_or_equal = null, $activity_category_greater = null, $activity_category_greater_or_equal = null, $activity_category_is_null = null, $activity_category_is_not_null = null, $activity_category_like = null, $activity_category_not_like = null, $activity_category_contains = null, $activity_category_not_contains = null, $activity_category_starts_with = null, $activity_category_not_starts_with = null, $activity_category_ends_with = null, $activity_category_not_ends_with = null, $activity_category_in = null, $activity_category_between = null, $analyst_code_not_equal = null, $analyst_code_less = null, $analyst_code_less_or_equal = null, $analyst_code_greater = null, $analyst_code_greater_or_equal = null, $analyst_code_is_null = null, $analyst_code_is_not_null = null, $analyst_code_like = null, $analyst_code_not_like = null, $analyst_code_contains = null, $analyst_code_not_contains = null, $analyst_code_starts_with = null, $analyst_code_not_starts_with = null, $analyst_code_ends_with = null, $analyst_code_not_ends_with = null, $analyst_code_in = null, $analyst_code_between = null, $creation_date_not_equal = null, $creation_date_less = null, $creation_date_less_or_equal = null, $creation_date_greater = null, $creation_date_greater_or_equal = null, $creation_date_is_null = null, $creation_date_is_not_null = null, $creation_date_like = null, $creation_date_not_like = null, $creation_date_contains = null, $creation_date_not_contains = null, $creation_date_starts_with = null, $creation_date_not_starts_with = null, $creation_date_ends_with = null, $creation_date_not_ends_with = null, $creation_date_in = null, $creation_date_between = null, $client_number_not_equal = null, $client_number_less = null, $client_number_less_or_equal = null, $client_number_greater = null, $client_number_greater_or_equal = null, $client_number_is_null = null, $client_number_is_not_null = null, $client_number_like = null, $client_number_not_like = null, $client_number_contains = null, $client_number_not_contains = null, $client_number_starts_with = null, $client_number_not_starts_with = null, $client_number_ends_with = null, $client_number_not_ends_with = null, $client_number_in = null, $client_number_between = null, $engineer_code_not_equal = null, $engineer_code_less = null, $engineer_code_less_or_equal = null, $engineer_code_greater = null, $engineer_code_greater_or_equal = null, $engineer_code_is_null = null, $engineer_code_is_not_null = null, $engineer_code_like = null, $engineer_code_not_like = null, $engineer_code_contains = null, $engineer_code_not_contains = null, $engineer_code_starts_with = null, $engineer_code_not_starts_with = null, $engineer_code_ends_with = null, $engineer_code_not_ends_with = null, $engineer_code_in = null, $engineer_code_between = null, $is_modification_not_equal = null, $is_modification_less = null, $is_modification_less_or_equal = null, $is_modification_greater = null, $is_modification_greater_or_equal = null, $is_modification_is_null = null, $is_modification_is_not_null = null, $is_modification_like = null, $is_modification_not_like = null, $is_modification_contains = null, $is_modification_not_contains = null, $is_modification_starts_with = null, $is_modification_not_starts_with = null, $is_modification_ends_with = null, $is_modification_not_ends_with = null, $is_modification_in = null, $is_modification_between = null, $job_code_not_equal = null, $job_code_less = null, $job_code_less_or_equal = null, $job_code_greater = null, $job_code_greater_or_equal = null, $job_code_is_null = null, $job_code_is_not_null = null, $job_code_like = null, $job_code_not_like = null, $job_code_contains = null, $job_code_not_contains = null, $job_code_starts_with = null, $job_code_not_starts_with = null, $job_code_ends_with = null, $job_code_not_ends_with = null, $job_code_in = null, $job_code_between = null, $lead_engineer_code_not_equal = null, $lead_engineer_code_less = null, $lead_engineer_code_less_or_equal = null, $lead_engineer_code_greater = null, $lead_engineer_code_greater_or_equal = null, $lead_engineer_code_is_null = null, $lead_engineer_code_is_not_null = null, $lead_engineer_code_like = null, $lead_engineer_code_not_like = null, $lead_engineer_code_contains = null, $lead_engineer_code_not_contains = null, $lead_engineer_code_starts_with = null, $lead_engineer_code_not_starts_with = null, $lead_engineer_code_ends_with = null, $lead_engineer_code_not_ends_with = null, $lead_engineer_code_in = null, $lead_engineer_code_between = null, $status_code_not_equal = null, $status_code_less = null, $status_code_less_or_equal = null, $status_code_greater = null, $status_code_greater_or_equal = null, $status_code_is_null = null, $status_code_is_not_null = null, $status_code_like = null, $status_code_not_like = null, $status_code_contains = null, $status_code_not_contains = null, $status_code_starts_with = null, $status_code_not_starts_with = null, $status_code_ends_with = null, $status_code_not_ends_with = null, $status_code_in = null, $status_code_between = null, $update_date_not_equal = null, $update_date_less = null, $update_date_less_or_equal = null, $update_date_greater = null, $update_date_greater_or_equal = null, $update_date_is_null = null, $update_date_is_not_null = null, $update_date_like = null, $update_date_not_like = null, $update_date_contains = null, $update_date_not_contains = null, $update_date_starts_with = null, $update_date_not_starts_with = null, $update_date_ends_with = null, $update_date_not_ends_with = null, $update_date_in = null, $update_date_between = null)
    {
        return $this->acsSearchSupportLogsAsyncWithHttpInfo($pager_skip, $pager_take, $activity_category, $analyst_code, $creation_date, $client_number, $engineer_code, $is_modification, $job_code, $lead_engineer_code, $status_code, $update_date, $activity_category_not_equal, $activity_category_less, $activity_category_less_or_equal, $activity_category_greater, $activity_category_greater_or_equal, $activity_category_is_null, $activity_category_is_not_null, $activity_category_like, $activity_category_not_like, $activity_category_contains, $activity_category_not_contains, $activity_category_starts_with, $activity_category_not_starts_with, $activity_category_ends_with, $activity_category_not_ends_with, $activity_category_in, $activity_category_between, $analyst_code_not_equal, $analyst_code_less, $analyst_code_less_or_equal, $analyst_code_greater, $analyst_code_greater_or_equal, $analyst_code_is_null, $analyst_code_is_not_null, $analyst_code_like, $analyst_code_not_like, $analyst_code_contains, $analyst_code_not_contains, $analyst_code_starts_with, $analyst_code_not_starts_with, $analyst_code_ends_with, $analyst_code_not_ends_with, $analyst_code_in, $analyst_code_between, $creation_date_not_equal, $creation_date_less, $creation_date_less_or_equal, $creation_date_greater, $creation_date_greater_or_equal, $creation_date_is_null, $creation_date_is_not_null, $creation_date_like, $creation_date_not_like, $creation_date_contains, $creation_date_not_contains, $creation_date_starts_with, $creation_date_not_starts_with, $creation_date_ends_with, $creation_date_not_ends_with, $creation_date_in, $creation_date_between, $client_number_not_equal, $client_number_less, $client_number_less_or_equal, $client_number_greater, $client_number_greater_or_equal, $client_number_is_null, $client_number_is_not_null, $client_number_like, $client_number_not_like, $client_number_contains, $client_number_not_contains, $client_number_starts_with, $client_number_not_starts_with, $client_number_ends_with, $client_number_not_ends_with, $client_number_in, $client_number_between, $engineer_code_not_equal, $engineer_code_less, $engineer_code_less_or_equal, $engineer_code_greater, $engineer_code_greater_or_equal, $engineer_code_is_null, $engineer_code_is_not_null, $engineer_code_like, $engineer_code_not_like, $engineer_code_contains, $engineer_code_not_contains, $engineer_code_starts_with, $engineer_code_not_starts_with, $engineer_code_ends_with, $engineer_code_not_ends_with, $engineer_code_in, $engineer_code_between, $is_modification_not_equal, $is_modification_less, $is_modification_less_or_equal, $is_modification_greater, $is_modification_greater_or_equal, $is_modification_is_null, $is_modification_is_not_null, $is_modification_like, $is_modification_not_like, $is_modification_contains, $is_modification_not_contains, $is_modification_starts_with, $is_modification_not_starts_with, $is_modification_ends_with, $is_modification_not_ends_with, $is_modification_in, $is_modification_between, $job_code_not_equal, $job_code_less, $job_code_less_or_equal, $job_code_greater, $job_code_greater_or_equal, $job_code_is_null, $job_code_is_not_null, $job_code_like, $job_code_not_like, $job_code_contains, $job_code_not_contains, $job_code_starts_with, $job_code_not_starts_with, $job_code_ends_with, $job_code_not_ends_with, $job_code_in, $job_code_between, $lead_engineer_code_not_equal, $lead_engineer_code_less, $lead_engineer_code_less_or_equal, $lead_engineer_code_greater, $lead_engineer_code_greater_or_equal, $lead_engineer_code_is_null, $lead_engineer_code_is_not_null, $lead_engineer_code_like, $lead_engineer_code_not_like, $lead_engineer_code_contains, $lead_engineer_code_not_contains, $lead_engineer_code_starts_with, $lead_engineer_code_not_starts_with, $lead_engineer_code_ends_with, $lead_engineer_code_not_ends_with, $lead_engineer_code_in, $lead_engineer_code_between, $status_code_not_equal, $status_code_less, $status_code_less_or_equal, $status_code_greater, $status_code_greater_or_equal, $status_code_is_null, $status_code_is_not_null, $status_code_like, $status_code_not_like, $status_code_contains, $status_code_not_contains, $status_code_starts_with, $status_code_not_starts_with, $status_code_ends_with, $status_code_not_ends_with, $status_code_in, $status_code_between, $update_date_not_equal, $update_date_less, $update_date_less_or_equal, $update_date_greater, $update_date_greater_or_equal, $update_date_is_null, $update_date_is_not_null, $update_date_like, $update_date_not_like, $update_date_contains, $update_date_not_contains, $update_date_starts_with, $update_date_not_starts_with, $update_date_ends_with, $update_date_not_ends_with, $update_date_in, $update_date_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acsSearchSupportLogsAsyncWithHttpInfo
     *
     * Get information for client support logs matching a search argument.
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $activity_category Filter on ATV-CAT using &#39;Equal&#39; operator (optional)
     * @param  string $analyst_code Filter on CSL-ANT using &#39;Equal&#39; operator (optional)
     * @param  string $creation_date Filter on CNTC-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $client_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $engineer_code Filter on CSL-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $is_modification Filter on MOD-FLG using &#39;Equal&#39; operator (optional)
     * @param  string $job_code Filter on CSL-JOB using &#39;Equal&#39; operator (optional)
     * @param  string $lead_engineer_code Filter on LEAD-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $status_code Filter on CSL-STA using &#39;Equal&#39; operator (optional)
     * @param  string $update_date Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $activity_category_not_equal Filter on ATV-CAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $activity_category_less Filter on ATV-CAT using &#39;Less&#39; operator (optional)
     * @param  string $activity_category_less_or_equal Filter on ATV-CAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $activity_category_greater Filter on ATV-CAT using &#39;Greater&#39; operator (optional)
     * @param  string $activity_category_greater_or_equal Filter on ATV-CAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $activity_category_is_null Filter on ATV-CAT using &#39;IsNull&#39; operator (optional)
     * @param  string $activity_category_is_not_null Filter on ATV-CAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $activity_category_like Filter on ATV-CAT using &#39;Like&#39; operator (optional)
     * @param  string $activity_category_not_like Filter on ATV-CAT using &#39;NotLike&#39; operator (optional)
     * @param  string $activity_category_contains Filter on ATV-CAT using &#39;Contains&#39; operator (optional)
     * @param  string $activity_category_not_contains Filter on ATV-CAT using &#39;NotContains&#39; operator (optional)
     * @param  string $activity_category_starts_with Filter on ATV-CAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $activity_category_not_starts_with Filter on ATV-CAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $activity_category_ends_with Filter on ATV-CAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $activity_category_not_ends_with Filter on ATV-CAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $activity_category_in Filter on ATV-CAT using &#39;In&#39; operator (optional)
     * @param  string $activity_category_between Filter on ATV-CAT using &#39;Between&#39; operator (optional)
     * @param  string $analyst_code_not_equal Filter on CSL-ANT using &#39;NotEqual&#39; operator (optional)
     * @param  string $analyst_code_less Filter on CSL-ANT using &#39;Less&#39; operator (optional)
     * @param  string $analyst_code_less_or_equal Filter on CSL-ANT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $analyst_code_greater Filter on CSL-ANT using &#39;Greater&#39; operator (optional)
     * @param  string $analyst_code_greater_or_equal Filter on CSL-ANT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $analyst_code_is_null Filter on CSL-ANT using &#39;IsNull&#39; operator (optional)
     * @param  string $analyst_code_is_not_null Filter on CSL-ANT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $analyst_code_like Filter on CSL-ANT using &#39;Like&#39; operator (optional)
     * @param  string $analyst_code_not_like Filter on CSL-ANT using &#39;NotLike&#39; operator (optional)
     * @param  string $analyst_code_contains Filter on CSL-ANT using &#39;Contains&#39; operator (optional)
     * @param  string $analyst_code_not_contains Filter on CSL-ANT using &#39;NotContains&#39; operator (optional)
     * @param  string $analyst_code_starts_with Filter on CSL-ANT using &#39;StartsWith&#39; operator (optional)
     * @param  string $analyst_code_not_starts_with Filter on CSL-ANT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $analyst_code_ends_with Filter on CSL-ANT using &#39;EndsWith&#39; operator (optional)
     * @param  string $analyst_code_not_ends_with Filter on CSL-ANT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $analyst_code_in Filter on CSL-ANT using &#39;In&#39; operator (optional)
     * @param  string $analyst_code_between Filter on CSL-ANT using &#39;Between&#39; operator (optional)
     * @param  string $creation_date_not_equal Filter on CNTC-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $creation_date_less Filter on CNTC-DTE using &#39;Less&#39; operator (optional)
     * @param  string $creation_date_less_or_equal Filter on CNTC-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $creation_date_greater Filter on CNTC-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $creation_date_greater_or_equal Filter on CNTC-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $creation_date_is_null Filter on CNTC-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $creation_date_is_not_null Filter on CNTC-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $creation_date_like Filter on CNTC-DTE using &#39;Like&#39; operator (optional)
     * @param  string $creation_date_not_like Filter on CNTC-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $creation_date_contains Filter on CNTC-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $creation_date_not_contains Filter on CNTC-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $creation_date_starts_with Filter on CNTC-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $creation_date_not_starts_with Filter on CNTC-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $creation_date_ends_with Filter on CNTC-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $creation_date_not_ends_with Filter on CNTC-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $creation_date_in Filter on CNTC-DTE using &#39;In&#39; operator (optional)
     * @param  string $creation_date_between Filter on CNTC-DTE using &#39;Between&#39; operator (optional)
     * @param  string $client_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $client_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $client_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $client_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $client_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $client_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $client_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $client_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $client_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $client_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $client_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $client_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $client_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $client_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $client_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $client_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $client_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $engineer_code_not_equal Filter on CSL-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $engineer_code_less Filter on CSL-ENG using &#39;Less&#39; operator (optional)
     * @param  string $engineer_code_less_or_equal Filter on CSL-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $engineer_code_greater Filter on CSL-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $engineer_code_greater_or_equal Filter on CSL-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $engineer_code_is_null Filter on CSL-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $engineer_code_is_not_null Filter on CSL-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $engineer_code_like Filter on CSL-ENG using &#39;Like&#39; operator (optional)
     * @param  string $engineer_code_not_like Filter on CSL-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $engineer_code_contains Filter on CSL-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $engineer_code_not_contains Filter on CSL-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $engineer_code_starts_with Filter on CSL-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $engineer_code_not_starts_with Filter on CSL-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $engineer_code_ends_with Filter on CSL-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $engineer_code_not_ends_with Filter on CSL-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $engineer_code_in Filter on CSL-ENG using &#39;In&#39; operator (optional)
     * @param  string $engineer_code_between Filter on CSL-ENG using &#39;Between&#39; operator (optional)
     * @param  string $is_modification_not_equal Filter on MOD-FLG using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_modification_less Filter on MOD-FLG using &#39;Less&#39; operator (optional)
     * @param  string $is_modification_less_or_equal Filter on MOD-FLG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_modification_greater Filter on MOD-FLG using &#39;Greater&#39; operator (optional)
     * @param  string $is_modification_greater_or_equal Filter on MOD-FLG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_modification_is_null Filter on MOD-FLG using &#39;IsNull&#39; operator (optional)
     * @param  string $is_modification_is_not_null Filter on MOD-FLG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_modification_like Filter on MOD-FLG using &#39;Like&#39; operator (optional)
     * @param  string $is_modification_not_like Filter on MOD-FLG using &#39;NotLike&#39; operator (optional)
     * @param  string $is_modification_contains Filter on MOD-FLG using &#39;Contains&#39; operator (optional)
     * @param  string $is_modification_not_contains Filter on MOD-FLG using &#39;NotContains&#39; operator (optional)
     * @param  string $is_modification_starts_with Filter on MOD-FLG using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_modification_not_starts_with Filter on MOD-FLG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_modification_ends_with Filter on MOD-FLG using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_modification_not_ends_with Filter on MOD-FLG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_modification_in Filter on MOD-FLG using &#39;In&#39; operator (optional)
     * @param  string $is_modification_between Filter on MOD-FLG using &#39;Between&#39; operator (optional)
     * @param  string $job_code_not_equal Filter on CSL-JOB using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_code_less Filter on CSL-JOB using &#39;Less&#39; operator (optional)
     * @param  string $job_code_less_or_equal Filter on CSL-JOB using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_code_greater Filter on CSL-JOB using &#39;Greater&#39; operator (optional)
     * @param  string $job_code_greater_or_equal Filter on CSL-JOB using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_code_is_null Filter on CSL-JOB using &#39;IsNull&#39; operator (optional)
     * @param  string $job_code_is_not_null Filter on CSL-JOB using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_code_like Filter on CSL-JOB using &#39;Like&#39; operator (optional)
     * @param  string $job_code_not_like Filter on CSL-JOB using &#39;NotLike&#39; operator (optional)
     * @param  string $job_code_contains Filter on CSL-JOB using &#39;Contains&#39; operator (optional)
     * @param  string $job_code_not_contains Filter on CSL-JOB using &#39;NotContains&#39; operator (optional)
     * @param  string $job_code_starts_with Filter on CSL-JOB using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_code_not_starts_with Filter on CSL-JOB using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_code_ends_with Filter on CSL-JOB using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_code_not_ends_with Filter on CSL-JOB using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_code_in Filter on CSL-JOB using &#39;In&#39; operator (optional)
     * @param  string $job_code_between Filter on CSL-JOB using &#39;Between&#39; operator (optional)
     * @param  string $lead_engineer_code_not_equal Filter on LEAD-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_less Filter on LEAD-ENG using &#39;Less&#39; operator (optional)
     * @param  string $lead_engineer_code_less_or_equal Filter on LEAD-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_greater Filter on LEAD-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $lead_engineer_code_greater_or_equal Filter on LEAD-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_is_null Filter on LEAD-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $lead_engineer_code_is_not_null Filter on LEAD-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $lead_engineer_code_like Filter on LEAD-ENG using &#39;Like&#39; operator (optional)
     * @param  string $lead_engineer_code_not_like Filter on LEAD-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $lead_engineer_code_contains Filter on LEAD-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $lead_engineer_code_not_contains Filter on LEAD-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $lead_engineer_code_starts_with Filter on LEAD-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_starts_with Filter on LEAD-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_ends_with Filter on LEAD-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_ends_with Filter on LEAD-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_in Filter on LEAD-ENG using &#39;In&#39; operator (optional)
     * @param  string $lead_engineer_code_between Filter on LEAD-ENG using &#39;Between&#39; operator (optional)
     * @param  string $status_code_not_equal Filter on CSL-STA using &#39;NotEqual&#39; operator (optional)
     * @param  string $status_code_less Filter on CSL-STA using &#39;Less&#39; operator (optional)
     * @param  string $status_code_less_or_equal Filter on CSL-STA using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $status_code_greater Filter on CSL-STA using &#39;Greater&#39; operator (optional)
     * @param  string $status_code_greater_or_equal Filter on CSL-STA using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $status_code_is_null Filter on CSL-STA using &#39;IsNull&#39; operator (optional)
     * @param  string $status_code_is_not_null Filter on CSL-STA using &#39;IsNotNull&#39; operator (optional)
     * @param  string $status_code_like Filter on CSL-STA using &#39;Like&#39; operator (optional)
     * @param  string $status_code_not_like Filter on CSL-STA using &#39;NotLike&#39; operator (optional)
     * @param  string $status_code_contains Filter on CSL-STA using &#39;Contains&#39; operator (optional)
     * @param  string $status_code_not_contains Filter on CSL-STA using &#39;NotContains&#39; operator (optional)
     * @param  string $status_code_starts_with Filter on CSL-STA using &#39;StartsWith&#39; operator (optional)
     * @param  string $status_code_not_starts_with Filter on CSL-STA using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $status_code_ends_with Filter on CSL-STA using &#39;EndsWith&#39; operator (optional)
     * @param  string $status_code_not_ends_with Filter on CSL-STA using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $status_code_in Filter on CSL-STA using &#39;In&#39; operator (optional)
     * @param  string $status_code_between Filter on CSL-STA using &#39;Between&#39; operator (optional)
     * @param  string $update_date_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $update_date_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $update_date_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $update_date_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $update_date_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $update_date_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $update_date_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $update_date_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $update_date_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $update_date_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $update_date_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $update_date_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $update_date_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $update_date_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $update_date_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $update_date_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $update_date_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acsSearchSupportLogsAsyncWithHttpInfo($pager_skip = null, $pager_take = null, $activity_category = null, $analyst_code = null, $creation_date = null, $client_number = null, $engineer_code = null, $is_modification = null, $job_code = null, $lead_engineer_code = null, $status_code = null, $update_date = null, $activity_category_not_equal = null, $activity_category_less = null, $activity_category_less_or_equal = null, $activity_category_greater = null, $activity_category_greater_or_equal = null, $activity_category_is_null = null, $activity_category_is_not_null = null, $activity_category_like = null, $activity_category_not_like = null, $activity_category_contains = null, $activity_category_not_contains = null, $activity_category_starts_with = null, $activity_category_not_starts_with = null, $activity_category_ends_with = null, $activity_category_not_ends_with = null, $activity_category_in = null, $activity_category_between = null, $analyst_code_not_equal = null, $analyst_code_less = null, $analyst_code_less_or_equal = null, $analyst_code_greater = null, $analyst_code_greater_or_equal = null, $analyst_code_is_null = null, $analyst_code_is_not_null = null, $analyst_code_like = null, $analyst_code_not_like = null, $analyst_code_contains = null, $analyst_code_not_contains = null, $analyst_code_starts_with = null, $analyst_code_not_starts_with = null, $analyst_code_ends_with = null, $analyst_code_not_ends_with = null, $analyst_code_in = null, $analyst_code_between = null, $creation_date_not_equal = null, $creation_date_less = null, $creation_date_less_or_equal = null, $creation_date_greater = null, $creation_date_greater_or_equal = null, $creation_date_is_null = null, $creation_date_is_not_null = null, $creation_date_like = null, $creation_date_not_like = null, $creation_date_contains = null, $creation_date_not_contains = null, $creation_date_starts_with = null, $creation_date_not_starts_with = null, $creation_date_ends_with = null, $creation_date_not_ends_with = null, $creation_date_in = null, $creation_date_between = null, $client_number_not_equal = null, $client_number_less = null, $client_number_less_or_equal = null, $client_number_greater = null, $client_number_greater_or_equal = null, $client_number_is_null = null, $client_number_is_not_null = null, $client_number_like = null, $client_number_not_like = null, $client_number_contains = null, $client_number_not_contains = null, $client_number_starts_with = null, $client_number_not_starts_with = null, $client_number_ends_with = null, $client_number_not_ends_with = null, $client_number_in = null, $client_number_between = null, $engineer_code_not_equal = null, $engineer_code_less = null, $engineer_code_less_or_equal = null, $engineer_code_greater = null, $engineer_code_greater_or_equal = null, $engineer_code_is_null = null, $engineer_code_is_not_null = null, $engineer_code_like = null, $engineer_code_not_like = null, $engineer_code_contains = null, $engineer_code_not_contains = null, $engineer_code_starts_with = null, $engineer_code_not_starts_with = null, $engineer_code_ends_with = null, $engineer_code_not_ends_with = null, $engineer_code_in = null, $engineer_code_between = null, $is_modification_not_equal = null, $is_modification_less = null, $is_modification_less_or_equal = null, $is_modification_greater = null, $is_modification_greater_or_equal = null, $is_modification_is_null = null, $is_modification_is_not_null = null, $is_modification_like = null, $is_modification_not_like = null, $is_modification_contains = null, $is_modification_not_contains = null, $is_modification_starts_with = null, $is_modification_not_starts_with = null, $is_modification_ends_with = null, $is_modification_not_ends_with = null, $is_modification_in = null, $is_modification_between = null, $job_code_not_equal = null, $job_code_less = null, $job_code_less_or_equal = null, $job_code_greater = null, $job_code_greater_or_equal = null, $job_code_is_null = null, $job_code_is_not_null = null, $job_code_like = null, $job_code_not_like = null, $job_code_contains = null, $job_code_not_contains = null, $job_code_starts_with = null, $job_code_not_starts_with = null, $job_code_ends_with = null, $job_code_not_ends_with = null, $job_code_in = null, $job_code_between = null, $lead_engineer_code_not_equal = null, $lead_engineer_code_less = null, $lead_engineer_code_less_or_equal = null, $lead_engineer_code_greater = null, $lead_engineer_code_greater_or_equal = null, $lead_engineer_code_is_null = null, $lead_engineer_code_is_not_null = null, $lead_engineer_code_like = null, $lead_engineer_code_not_like = null, $lead_engineer_code_contains = null, $lead_engineer_code_not_contains = null, $lead_engineer_code_starts_with = null, $lead_engineer_code_not_starts_with = null, $lead_engineer_code_ends_with = null, $lead_engineer_code_not_ends_with = null, $lead_engineer_code_in = null, $lead_engineer_code_between = null, $status_code_not_equal = null, $status_code_less = null, $status_code_less_or_equal = null, $status_code_greater = null, $status_code_greater_or_equal = null, $status_code_is_null = null, $status_code_is_not_null = null, $status_code_like = null, $status_code_not_like = null, $status_code_contains = null, $status_code_not_contains = null, $status_code_starts_with = null, $status_code_not_starts_with = null, $status_code_ends_with = null, $status_code_not_ends_with = null, $status_code_in = null, $status_code_between = null, $update_date_not_equal = null, $update_date_less = null, $update_date_less_or_equal = null, $update_date_greater = null, $update_date_greater_or_equal = null, $update_date_is_null = null, $update_date_is_not_null = null, $update_date_like = null, $update_date_not_like = null, $update_date_contains = null, $update_date_not_contains = null, $update_date_starts_with = null, $update_date_not_starts_with = null, $update_date_ends_with = null, $update_date_not_ends_with = null, $update_date_in = null, $update_date_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultSupportLog';
        $request = $this->acsSearchSupportLogsRequest($pager_skip, $pager_take, $activity_category, $analyst_code, $creation_date, $client_number, $engineer_code, $is_modification, $job_code, $lead_engineer_code, $status_code, $update_date, $activity_category_not_equal, $activity_category_less, $activity_category_less_or_equal, $activity_category_greater, $activity_category_greater_or_equal, $activity_category_is_null, $activity_category_is_not_null, $activity_category_like, $activity_category_not_like, $activity_category_contains, $activity_category_not_contains, $activity_category_starts_with, $activity_category_not_starts_with, $activity_category_ends_with, $activity_category_not_ends_with, $activity_category_in, $activity_category_between, $analyst_code_not_equal, $analyst_code_less, $analyst_code_less_or_equal, $analyst_code_greater, $analyst_code_greater_or_equal, $analyst_code_is_null, $analyst_code_is_not_null, $analyst_code_like, $analyst_code_not_like, $analyst_code_contains, $analyst_code_not_contains, $analyst_code_starts_with, $analyst_code_not_starts_with, $analyst_code_ends_with, $analyst_code_not_ends_with, $analyst_code_in, $analyst_code_between, $creation_date_not_equal, $creation_date_less, $creation_date_less_or_equal, $creation_date_greater, $creation_date_greater_or_equal, $creation_date_is_null, $creation_date_is_not_null, $creation_date_like, $creation_date_not_like, $creation_date_contains, $creation_date_not_contains, $creation_date_starts_with, $creation_date_not_starts_with, $creation_date_ends_with, $creation_date_not_ends_with, $creation_date_in, $creation_date_between, $client_number_not_equal, $client_number_less, $client_number_less_or_equal, $client_number_greater, $client_number_greater_or_equal, $client_number_is_null, $client_number_is_not_null, $client_number_like, $client_number_not_like, $client_number_contains, $client_number_not_contains, $client_number_starts_with, $client_number_not_starts_with, $client_number_ends_with, $client_number_not_ends_with, $client_number_in, $client_number_between, $engineer_code_not_equal, $engineer_code_less, $engineer_code_less_or_equal, $engineer_code_greater, $engineer_code_greater_or_equal, $engineer_code_is_null, $engineer_code_is_not_null, $engineer_code_like, $engineer_code_not_like, $engineer_code_contains, $engineer_code_not_contains, $engineer_code_starts_with, $engineer_code_not_starts_with, $engineer_code_ends_with, $engineer_code_not_ends_with, $engineer_code_in, $engineer_code_between, $is_modification_not_equal, $is_modification_less, $is_modification_less_or_equal, $is_modification_greater, $is_modification_greater_or_equal, $is_modification_is_null, $is_modification_is_not_null, $is_modification_like, $is_modification_not_like, $is_modification_contains, $is_modification_not_contains, $is_modification_starts_with, $is_modification_not_starts_with, $is_modification_ends_with, $is_modification_not_ends_with, $is_modification_in, $is_modification_between, $job_code_not_equal, $job_code_less, $job_code_less_or_equal, $job_code_greater, $job_code_greater_or_equal, $job_code_is_null, $job_code_is_not_null, $job_code_like, $job_code_not_like, $job_code_contains, $job_code_not_contains, $job_code_starts_with, $job_code_not_starts_with, $job_code_ends_with, $job_code_not_ends_with, $job_code_in, $job_code_between, $lead_engineer_code_not_equal, $lead_engineer_code_less, $lead_engineer_code_less_or_equal, $lead_engineer_code_greater, $lead_engineer_code_greater_or_equal, $lead_engineer_code_is_null, $lead_engineer_code_is_not_null, $lead_engineer_code_like, $lead_engineer_code_not_like, $lead_engineer_code_contains, $lead_engineer_code_not_contains, $lead_engineer_code_starts_with, $lead_engineer_code_not_starts_with, $lead_engineer_code_ends_with, $lead_engineer_code_not_ends_with, $lead_engineer_code_in, $lead_engineer_code_between, $status_code_not_equal, $status_code_less, $status_code_less_or_equal, $status_code_greater, $status_code_greater_or_equal, $status_code_is_null, $status_code_is_not_null, $status_code_like, $status_code_not_like, $status_code_contains, $status_code_not_contains, $status_code_starts_with, $status_code_not_starts_with, $status_code_ends_with, $status_code_not_ends_with, $status_code_in, $status_code_between, $update_date_not_equal, $update_date_less, $update_date_less_or_equal, $update_date_greater, $update_date_greater_or_equal, $update_date_is_null, $update_date_is_not_null, $update_date_like, $update_date_not_like, $update_date_contains, $update_date_not_contains, $update_date_starts_with, $update_date_not_starts_with, $update_date_ends_with, $update_date_not_ends_with, $update_date_in, $update_date_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acsSearchSupportLogs'
     *
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     * @param  string $activity_category Filter on ATV-CAT using &#39;Equal&#39; operator (optional)
     * @param  string $analyst_code Filter on CSL-ANT using &#39;Equal&#39; operator (optional)
     * @param  string $creation_date Filter on CNTC-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $client_number Filter on CTM-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $engineer_code Filter on CSL-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $is_modification Filter on MOD-FLG using &#39;Equal&#39; operator (optional)
     * @param  string $job_code Filter on CSL-JOB using &#39;Equal&#39; operator (optional)
     * @param  string $lead_engineer_code Filter on LEAD-ENG using &#39;Equal&#39; operator (optional)
     * @param  string $status_code Filter on CSL-STA using &#39;Equal&#39; operator (optional)
     * @param  string $update_date Filter on UPD-DTE using &#39;Equal&#39; operator (optional)
     * @param  string $activity_category_not_equal Filter on ATV-CAT using &#39;NotEqual&#39; operator (optional)
     * @param  string $activity_category_less Filter on ATV-CAT using &#39;Less&#39; operator (optional)
     * @param  string $activity_category_less_or_equal Filter on ATV-CAT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $activity_category_greater Filter on ATV-CAT using &#39;Greater&#39; operator (optional)
     * @param  string $activity_category_greater_or_equal Filter on ATV-CAT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $activity_category_is_null Filter on ATV-CAT using &#39;IsNull&#39; operator (optional)
     * @param  string $activity_category_is_not_null Filter on ATV-CAT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $activity_category_like Filter on ATV-CAT using &#39;Like&#39; operator (optional)
     * @param  string $activity_category_not_like Filter on ATV-CAT using &#39;NotLike&#39; operator (optional)
     * @param  string $activity_category_contains Filter on ATV-CAT using &#39;Contains&#39; operator (optional)
     * @param  string $activity_category_not_contains Filter on ATV-CAT using &#39;NotContains&#39; operator (optional)
     * @param  string $activity_category_starts_with Filter on ATV-CAT using &#39;StartsWith&#39; operator (optional)
     * @param  string $activity_category_not_starts_with Filter on ATV-CAT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $activity_category_ends_with Filter on ATV-CAT using &#39;EndsWith&#39; operator (optional)
     * @param  string $activity_category_not_ends_with Filter on ATV-CAT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $activity_category_in Filter on ATV-CAT using &#39;In&#39; operator (optional)
     * @param  string $activity_category_between Filter on ATV-CAT using &#39;Between&#39; operator (optional)
     * @param  string $analyst_code_not_equal Filter on CSL-ANT using &#39;NotEqual&#39; operator (optional)
     * @param  string $analyst_code_less Filter on CSL-ANT using &#39;Less&#39; operator (optional)
     * @param  string $analyst_code_less_or_equal Filter on CSL-ANT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $analyst_code_greater Filter on CSL-ANT using &#39;Greater&#39; operator (optional)
     * @param  string $analyst_code_greater_or_equal Filter on CSL-ANT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $analyst_code_is_null Filter on CSL-ANT using &#39;IsNull&#39; operator (optional)
     * @param  string $analyst_code_is_not_null Filter on CSL-ANT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $analyst_code_like Filter on CSL-ANT using &#39;Like&#39; operator (optional)
     * @param  string $analyst_code_not_like Filter on CSL-ANT using &#39;NotLike&#39; operator (optional)
     * @param  string $analyst_code_contains Filter on CSL-ANT using &#39;Contains&#39; operator (optional)
     * @param  string $analyst_code_not_contains Filter on CSL-ANT using &#39;NotContains&#39; operator (optional)
     * @param  string $analyst_code_starts_with Filter on CSL-ANT using &#39;StartsWith&#39; operator (optional)
     * @param  string $analyst_code_not_starts_with Filter on CSL-ANT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $analyst_code_ends_with Filter on CSL-ANT using &#39;EndsWith&#39; operator (optional)
     * @param  string $analyst_code_not_ends_with Filter on CSL-ANT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $analyst_code_in Filter on CSL-ANT using &#39;In&#39; operator (optional)
     * @param  string $analyst_code_between Filter on CSL-ANT using &#39;Between&#39; operator (optional)
     * @param  string $creation_date_not_equal Filter on CNTC-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $creation_date_less Filter on CNTC-DTE using &#39;Less&#39; operator (optional)
     * @param  string $creation_date_less_or_equal Filter on CNTC-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $creation_date_greater Filter on CNTC-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $creation_date_greater_or_equal Filter on CNTC-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $creation_date_is_null Filter on CNTC-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $creation_date_is_not_null Filter on CNTC-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $creation_date_like Filter on CNTC-DTE using &#39;Like&#39; operator (optional)
     * @param  string $creation_date_not_like Filter on CNTC-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $creation_date_contains Filter on CNTC-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $creation_date_not_contains Filter on CNTC-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $creation_date_starts_with Filter on CNTC-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $creation_date_not_starts_with Filter on CNTC-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $creation_date_ends_with Filter on CNTC-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $creation_date_not_ends_with Filter on CNTC-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $creation_date_in Filter on CNTC-DTE using &#39;In&#39; operator (optional)
     * @param  string $creation_date_between Filter on CNTC-DTE using &#39;Between&#39; operator (optional)
     * @param  string $client_number_not_equal Filter on CTM-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $client_number_less Filter on CTM-NBR using &#39;Less&#39; operator (optional)
     * @param  string $client_number_less_or_equal Filter on CTM-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $client_number_greater Filter on CTM-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $client_number_greater_or_equal Filter on CTM-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $client_number_is_null Filter on CTM-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $client_number_is_not_null Filter on CTM-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $client_number_like Filter on CTM-NBR using &#39;Like&#39; operator (optional)
     * @param  string $client_number_not_like Filter on CTM-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $client_number_contains Filter on CTM-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $client_number_not_contains Filter on CTM-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $client_number_starts_with Filter on CTM-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $client_number_not_starts_with Filter on CTM-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $client_number_ends_with Filter on CTM-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $client_number_not_ends_with Filter on CTM-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $client_number_in Filter on CTM-NBR using &#39;In&#39; operator (optional)
     * @param  string $client_number_between Filter on CTM-NBR using &#39;Between&#39; operator (optional)
     * @param  string $engineer_code_not_equal Filter on CSL-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $engineer_code_less Filter on CSL-ENG using &#39;Less&#39; operator (optional)
     * @param  string $engineer_code_less_or_equal Filter on CSL-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $engineer_code_greater Filter on CSL-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $engineer_code_greater_or_equal Filter on CSL-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $engineer_code_is_null Filter on CSL-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $engineer_code_is_not_null Filter on CSL-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $engineer_code_like Filter on CSL-ENG using &#39;Like&#39; operator (optional)
     * @param  string $engineer_code_not_like Filter on CSL-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $engineer_code_contains Filter on CSL-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $engineer_code_not_contains Filter on CSL-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $engineer_code_starts_with Filter on CSL-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $engineer_code_not_starts_with Filter on CSL-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $engineer_code_ends_with Filter on CSL-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $engineer_code_not_ends_with Filter on CSL-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $engineer_code_in Filter on CSL-ENG using &#39;In&#39; operator (optional)
     * @param  string $engineer_code_between Filter on CSL-ENG using &#39;Between&#39; operator (optional)
     * @param  string $is_modification_not_equal Filter on MOD-FLG using &#39;NotEqual&#39; operator (optional)
     * @param  string $is_modification_less Filter on MOD-FLG using &#39;Less&#39; operator (optional)
     * @param  string $is_modification_less_or_equal Filter on MOD-FLG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $is_modification_greater Filter on MOD-FLG using &#39;Greater&#39; operator (optional)
     * @param  string $is_modification_greater_or_equal Filter on MOD-FLG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $is_modification_is_null Filter on MOD-FLG using &#39;IsNull&#39; operator (optional)
     * @param  string $is_modification_is_not_null Filter on MOD-FLG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $is_modification_like Filter on MOD-FLG using &#39;Like&#39; operator (optional)
     * @param  string $is_modification_not_like Filter on MOD-FLG using &#39;NotLike&#39; operator (optional)
     * @param  string $is_modification_contains Filter on MOD-FLG using &#39;Contains&#39; operator (optional)
     * @param  string $is_modification_not_contains Filter on MOD-FLG using &#39;NotContains&#39; operator (optional)
     * @param  string $is_modification_starts_with Filter on MOD-FLG using &#39;StartsWith&#39; operator (optional)
     * @param  string $is_modification_not_starts_with Filter on MOD-FLG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $is_modification_ends_with Filter on MOD-FLG using &#39;EndsWith&#39; operator (optional)
     * @param  string $is_modification_not_ends_with Filter on MOD-FLG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $is_modification_in Filter on MOD-FLG using &#39;In&#39; operator (optional)
     * @param  string $is_modification_between Filter on MOD-FLG using &#39;Between&#39; operator (optional)
     * @param  string $job_code_not_equal Filter on CSL-JOB using &#39;NotEqual&#39; operator (optional)
     * @param  string $job_code_less Filter on CSL-JOB using &#39;Less&#39; operator (optional)
     * @param  string $job_code_less_or_equal Filter on CSL-JOB using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $job_code_greater Filter on CSL-JOB using &#39;Greater&#39; operator (optional)
     * @param  string $job_code_greater_or_equal Filter on CSL-JOB using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $job_code_is_null Filter on CSL-JOB using &#39;IsNull&#39; operator (optional)
     * @param  string $job_code_is_not_null Filter on CSL-JOB using &#39;IsNotNull&#39; operator (optional)
     * @param  string $job_code_like Filter on CSL-JOB using &#39;Like&#39; operator (optional)
     * @param  string $job_code_not_like Filter on CSL-JOB using &#39;NotLike&#39; operator (optional)
     * @param  string $job_code_contains Filter on CSL-JOB using &#39;Contains&#39; operator (optional)
     * @param  string $job_code_not_contains Filter on CSL-JOB using &#39;NotContains&#39; operator (optional)
     * @param  string $job_code_starts_with Filter on CSL-JOB using &#39;StartsWith&#39; operator (optional)
     * @param  string $job_code_not_starts_with Filter on CSL-JOB using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $job_code_ends_with Filter on CSL-JOB using &#39;EndsWith&#39; operator (optional)
     * @param  string $job_code_not_ends_with Filter on CSL-JOB using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $job_code_in Filter on CSL-JOB using &#39;In&#39; operator (optional)
     * @param  string $job_code_between Filter on CSL-JOB using &#39;Between&#39; operator (optional)
     * @param  string $lead_engineer_code_not_equal Filter on LEAD-ENG using &#39;NotEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_less Filter on LEAD-ENG using &#39;Less&#39; operator (optional)
     * @param  string $lead_engineer_code_less_or_equal Filter on LEAD-ENG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_greater Filter on LEAD-ENG using &#39;Greater&#39; operator (optional)
     * @param  string $lead_engineer_code_greater_or_equal Filter on LEAD-ENG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $lead_engineer_code_is_null Filter on LEAD-ENG using &#39;IsNull&#39; operator (optional)
     * @param  string $lead_engineer_code_is_not_null Filter on LEAD-ENG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $lead_engineer_code_like Filter on LEAD-ENG using &#39;Like&#39; operator (optional)
     * @param  string $lead_engineer_code_not_like Filter on LEAD-ENG using &#39;NotLike&#39; operator (optional)
     * @param  string $lead_engineer_code_contains Filter on LEAD-ENG using &#39;Contains&#39; operator (optional)
     * @param  string $lead_engineer_code_not_contains Filter on LEAD-ENG using &#39;NotContains&#39; operator (optional)
     * @param  string $lead_engineer_code_starts_with Filter on LEAD-ENG using &#39;StartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_starts_with Filter on LEAD-ENG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_ends_with Filter on LEAD-ENG using &#39;EndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_not_ends_with Filter on LEAD-ENG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $lead_engineer_code_in Filter on LEAD-ENG using &#39;In&#39; operator (optional)
     * @param  string $lead_engineer_code_between Filter on LEAD-ENG using &#39;Between&#39; operator (optional)
     * @param  string $status_code_not_equal Filter on CSL-STA using &#39;NotEqual&#39; operator (optional)
     * @param  string $status_code_less Filter on CSL-STA using &#39;Less&#39; operator (optional)
     * @param  string $status_code_less_or_equal Filter on CSL-STA using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $status_code_greater Filter on CSL-STA using &#39;Greater&#39; operator (optional)
     * @param  string $status_code_greater_or_equal Filter on CSL-STA using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $status_code_is_null Filter on CSL-STA using &#39;IsNull&#39; operator (optional)
     * @param  string $status_code_is_not_null Filter on CSL-STA using &#39;IsNotNull&#39; operator (optional)
     * @param  string $status_code_like Filter on CSL-STA using &#39;Like&#39; operator (optional)
     * @param  string $status_code_not_like Filter on CSL-STA using &#39;NotLike&#39; operator (optional)
     * @param  string $status_code_contains Filter on CSL-STA using &#39;Contains&#39; operator (optional)
     * @param  string $status_code_not_contains Filter on CSL-STA using &#39;NotContains&#39; operator (optional)
     * @param  string $status_code_starts_with Filter on CSL-STA using &#39;StartsWith&#39; operator (optional)
     * @param  string $status_code_not_starts_with Filter on CSL-STA using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $status_code_ends_with Filter on CSL-STA using &#39;EndsWith&#39; operator (optional)
     * @param  string $status_code_not_ends_with Filter on CSL-STA using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $status_code_in Filter on CSL-STA using &#39;In&#39; operator (optional)
     * @param  string $status_code_between Filter on CSL-STA using &#39;Between&#39; operator (optional)
     * @param  string $update_date_not_equal Filter on UPD-DTE using &#39;NotEqual&#39; operator (optional)
     * @param  string $update_date_less Filter on UPD-DTE using &#39;Less&#39; operator (optional)
     * @param  string $update_date_less_or_equal Filter on UPD-DTE using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $update_date_greater Filter on UPD-DTE using &#39;Greater&#39; operator (optional)
     * @param  string $update_date_greater_or_equal Filter on UPD-DTE using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $update_date_is_null Filter on UPD-DTE using &#39;IsNull&#39; operator (optional)
     * @param  string $update_date_is_not_null Filter on UPD-DTE using &#39;IsNotNull&#39; operator (optional)
     * @param  string $update_date_like Filter on UPD-DTE using &#39;Like&#39; operator (optional)
     * @param  string $update_date_not_like Filter on UPD-DTE using &#39;NotLike&#39; operator (optional)
     * @param  string $update_date_contains Filter on UPD-DTE using &#39;Contains&#39; operator (optional)
     * @param  string $update_date_not_contains Filter on UPD-DTE using &#39;NotContains&#39; operator (optional)
     * @param  string $update_date_starts_with Filter on UPD-DTE using &#39;StartsWith&#39; operator (optional)
     * @param  string $update_date_not_starts_with Filter on UPD-DTE using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $update_date_ends_with Filter on UPD-DTE using &#39;EndsWith&#39; operator (optional)
     * @param  string $update_date_not_ends_with Filter on UPD-DTE using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $update_date_in Filter on UPD-DTE using &#39;In&#39; operator (optional)
     * @param  string $update_date_between Filter on UPD-DTE using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acsSearchSupportLogsRequest($pager_skip = null, $pager_take = null, $activity_category = null, $analyst_code = null, $creation_date = null, $client_number = null, $engineer_code = null, $is_modification = null, $job_code = null, $lead_engineer_code = null, $status_code = null, $update_date = null, $activity_category_not_equal = null, $activity_category_less = null, $activity_category_less_or_equal = null, $activity_category_greater = null, $activity_category_greater_or_equal = null, $activity_category_is_null = null, $activity_category_is_not_null = null, $activity_category_like = null, $activity_category_not_like = null, $activity_category_contains = null, $activity_category_not_contains = null, $activity_category_starts_with = null, $activity_category_not_starts_with = null, $activity_category_ends_with = null, $activity_category_not_ends_with = null, $activity_category_in = null, $activity_category_between = null, $analyst_code_not_equal = null, $analyst_code_less = null, $analyst_code_less_or_equal = null, $analyst_code_greater = null, $analyst_code_greater_or_equal = null, $analyst_code_is_null = null, $analyst_code_is_not_null = null, $analyst_code_like = null, $analyst_code_not_like = null, $analyst_code_contains = null, $analyst_code_not_contains = null, $analyst_code_starts_with = null, $analyst_code_not_starts_with = null, $analyst_code_ends_with = null, $analyst_code_not_ends_with = null, $analyst_code_in = null, $analyst_code_between = null, $creation_date_not_equal = null, $creation_date_less = null, $creation_date_less_or_equal = null, $creation_date_greater = null, $creation_date_greater_or_equal = null, $creation_date_is_null = null, $creation_date_is_not_null = null, $creation_date_like = null, $creation_date_not_like = null, $creation_date_contains = null, $creation_date_not_contains = null, $creation_date_starts_with = null, $creation_date_not_starts_with = null, $creation_date_ends_with = null, $creation_date_not_ends_with = null, $creation_date_in = null, $creation_date_between = null, $client_number_not_equal = null, $client_number_less = null, $client_number_less_or_equal = null, $client_number_greater = null, $client_number_greater_or_equal = null, $client_number_is_null = null, $client_number_is_not_null = null, $client_number_like = null, $client_number_not_like = null, $client_number_contains = null, $client_number_not_contains = null, $client_number_starts_with = null, $client_number_not_starts_with = null, $client_number_ends_with = null, $client_number_not_ends_with = null, $client_number_in = null, $client_number_between = null, $engineer_code_not_equal = null, $engineer_code_less = null, $engineer_code_less_or_equal = null, $engineer_code_greater = null, $engineer_code_greater_or_equal = null, $engineer_code_is_null = null, $engineer_code_is_not_null = null, $engineer_code_like = null, $engineer_code_not_like = null, $engineer_code_contains = null, $engineer_code_not_contains = null, $engineer_code_starts_with = null, $engineer_code_not_starts_with = null, $engineer_code_ends_with = null, $engineer_code_not_ends_with = null, $engineer_code_in = null, $engineer_code_between = null, $is_modification_not_equal = null, $is_modification_less = null, $is_modification_less_or_equal = null, $is_modification_greater = null, $is_modification_greater_or_equal = null, $is_modification_is_null = null, $is_modification_is_not_null = null, $is_modification_like = null, $is_modification_not_like = null, $is_modification_contains = null, $is_modification_not_contains = null, $is_modification_starts_with = null, $is_modification_not_starts_with = null, $is_modification_ends_with = null, $is_modification_not_ends_with = null, $is_modification_in = null, $is_modification_between = null, $job_code_not_equal = null, $job_code_less = null, $job_code_less_or_equal = null, $job_code_greater = null, $job_code_greater_or_equal = null, $job_code_is_null = null, $job_code_is_not_null = null, $job_code_like = null, $job_code_not_like = null, $job_code_contains = null, $job_code_not_contains = null, $job_code_starts_with = null, $job_code_not_starts_with = null, $job_code_ends_with = null, $job_code_not_ends_with = null, $job_code_in = null, $job_code_between = null, $lead_engineer_code_not_equal = null, $lead_engineer_code_less = null, $lead_engineer_code_less_or_equal = null, $lead_engineer_code_greater = null, $lead_engineer_code_greater_or_equal = null, $lead_engineer_code_is_null = null, $lead_engineer_code_is_not_null = null, $lead_engineer_code_like = null, $lead_engineer_code_not_like = null, $lead_engineer_code_contains = null, $lead_engineer_code_not_contains = null, $lead_engineer_code_starts_with = null, $lead_engineer_code_not_starts_with = null, $lead_engineer_code_ends_with = null, $lead_engineer_code_not_ends_with = null, $lead_engineer_code_in = null, $lead_engineer_code_between = null, $status_code_not_equal = null, $status_code_less = null, $status_code_less_or_equal = null, $status_code_greater = null, $status_code_greater_or_equal = null, $status_code_is_null = null, $status_code_is_not_null = null, $status_code_like = null, $status_code_not_like = null, $status_code_contains = null, $status_code_not_contains = null, $status_code_starts_with = null, $status_code_not_starts_with = null, $status_code_ends_with = null, $status_code_not_ends_with = null, $status_code_in = null, $status_code_between = null, $update_date_not_equal = null, $update_date_less = null, $update_date_less_or_equal = null, $update_date_greater = null, $update_date_greater_or_equal = null, $update_date_is_null = null, $update_date_is_not_null = null, $update_date_like = null, $update_date_not_like = null, $update_date_contains = null, $update_date_not_contains = null, $update_date_starts_with = null, $update_date_not_starts_with = null, $update_date_ends_with = null, $update_date_not_ends_with = null, $update_date_in = null, $update_date_between = null)
    {

        $resourcePath = '/acs/support-logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }
        // query params
        if ($activity_category !== null) {
            $queryParams['ActivityCategory'] = ObjectSerializer::toQueryValue($activity_category);
        }
        // query params
        if ($analyst_code !== null) {
            $queryParams['AnalystCode'] = ObjectSerializer::toQueryValue($analyst_code);
        }
        // query params
        if ($creation_date !== null) {
            $queryParams['CreationDate'] = ObjectSerializer::toQueryValue($creation_date);
        }
        // query params
        if ($client_number !== null) {
            $queryParams['ClientNumber'] = ObjectSerializer::toQueryValue($client_number);
        }
        // query params
        if ($engineer_code !== null) {
            $queryParams['EngineerCode'] = ObjectSerializer::toQueryValue($engineer_code);
        }
        // query params
        if ($is_modification !== null) {
            $queryParams['IsModification'] = ObjectSerializer::toQueryValue($is_modification);
        }
        // query params
        if ($job_code !== null) {
            $queryParams['JobCode'] = ObjectSerializer::toQueryValue($job_code);
        }
        // query params
        if ($lead_engineer_code !== null) {
            $queryParams['LeadEngineerCode'] = ObjectSerializer::toQueryValue($lead_engineer_code);
        }
        // query params
        if ($status_code !== null) {
            $queryParams['StatusCode'] = ObjectSerializer::toQueryValue($status_code);
        }
        // query params
        if ($update_date !== null) {
            $queryParams['UpdateDate'] = ObjectSerializer::toQueryValue($update_date);
        }
        // query params
        if ($activity_category_not_equal !== null) {
            $queryParams['ActivityCategory.NotEqual'] = ObjectSerializer::toQueryValue($activity_category_not_equal);
        }
        // query params
        if ($activity_category_less !== null) {
            $queryParams['ActivityCategory.Less'] = ObjectSerializer::toQueryValue($activity_category_less);
        }
        // query params
        if ($activity_category_less_or_equal !== null) {
            $queryParams['ActivityCategory.LessOrEqual'] = ObjectSerializer::toQueryValue($activity_category_less_or_equal);
        }
        // query params
        if ($activity_category_greater !== null) {
            $queryParams['ActivityCategory.Greater'] = ObjectSerializer::toQueryValue($activity_category_greater);
        }
        // query params
        if ($activity_category_greater_or_equal !== null) {
            $queryParams['ActivityCategory.GreaterOrEqual'] = ObjectSerializer::toQueryValue($activity_category_greater_or_equal);
        }
        // query params
        if ($activity_category_is_null !== null) {
            $queryParams['ActivityCategory.IsNull'] = ObjectSerializer::toQueryValue($activity_category_is_null);
        }
        // query params
        if ($activity_category_is_not_null !== null) {
            $queryParams['ActivityCategory.IsNotNull'] = ObjectSerializer::toQueryValue($activity_category_is_not_null);
        }
        // query params
        if ($activity_category_like !== null) {
            $queryParams['ActivityCategory.Like'] = ObjectSerializer::toQueryValue($activity_category_like);
        }
        // query params
        if ($activity_category_not_like !== null) {
            $queryParams['ActivityCategory.NotLike'] = ObjectSerializer::toQueryValue($activity_category_not_like);
        }
        // query params
        if ($activity_category_contains !== null) {
            $queryParams['ActivityCategory.Contains'] = ObjectSerializer::toQueryValue($activity_category_contains);
        }
        // query params
        if ($activity_category_not_contains !== null) {
            $queryParams['ActivityCategory.NotContains'] = ObjectSerializer::toQueryValue($activity_category_not_contains);
        }
        // query params
        if ($activity_category_starts_with !== null) {
            $queryParams['ActivityCategory.StartsWith'] = ObjectSerializer::toQueryValue($activity_category_starts_with);
        }
        // query params
        if ($activity_category_not_starts_with !== null) {
            $queryParams['ActivityCategory.NotStartsWith'] = ObjectSerializer::toQueryValue($activity_category_not_starts_with);
        }
        // query params
        if ($activity_category_ends_with !== null) {
            $queryParams['ActivityCategory.EndsWith'] = ObjectSerializer::toQueryValue($activity_category_ends_with);
        }
        // query params
        if ($activity_category_not_ends_with !== null) {
            $queryParams['ActivityCategory.NotEndsWith'] = ObjectSerializer::toQueryValue($activity_category_not_ends_with);
        }
        // query params
        if ($activity_category_in !== null) {
            $queryParams['ActivityCategory.In'] = ObjectSerializer::toQueryValue($activity_category_in);
        }
        // query params
        if ($activity_category_between !== null) {
            $queryParams['ActivityCategory.Between'] = ObjectSerializer::toQueryValue($activity_category_between);
        }
        // query params
        if ($analyst_code_not_equal !== null) {
            $queryParams['AnalystCode.NotEqual'] = ObjectSerializer::toQueryValue($analyst_code_not_equal);
        }
        // query params
        if ($analyst_code_less !== null) {
            $queryParams['AnalystCode.Less'] = ObjectSerializer::toQueryValue($analyst_code_less);
        }
        // query params
        if ($analyst_code_less_or_equal !== null) {
            $queryParams['AnalystCode.LessOrEqual'] = ObjectSerializer::toQueryValue($analyst_code_less_or_equal);
        }
        // query params
        if ($analyst_code_greater !== null) {
            $queryParams['AnalystCode.Greater'] = ObjectSerializer::toQueryValue($analyst_code_greater);
        }
        // query params
        if ($analyst_code_greater_or_equal !== null) {
            $queryParams['AnalystCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($analyst_code_greater_or_equal);
        }
        // query params
        if ($analyst_code_is_null !== null) {
            $queryParams['AnalystCode.IsNull'] = ObjectSerializer::toQueryValue($analyst_code_is_null);
        }
        // query params
        if ($analyst_code_is_not_null !== null) {
            $queryParams['AnalystCode.IsNotNull'] = ObjectSerializer::toQueryValue($analyst_code_is_not_null);
        }
        // query params
        if ($analyst_code_like !== null) {
            $queryParams['AnalystCode.Like'] = ObjectSerializer::toQueryValue($analyst_code_like);
        }
        // query params
        if ($analyst_code_not_like !== null) {
            $queryParams['AnalystCode.NotLike'] = ObjectSerializer::toQueryValue($analyst_code_not_like);
        }
        // query params
        if ($analyst_code_contains !== null) {
            $queryParams['AnalystCode.Contains'] = ObjectSerializer::toQueryValue($analyst_code_contains);
        }
        // query params
        if ($analyst_code_not_contains !== null) {
            $queryParams['AnalystCode.NotContains'] = ObjectSerializer::toQueryValue($analyst_code_not_contains);
        }
        // query params
        if ($analyst_code_starts_with !== null) {
            $queryParams['AnalystCode.StartsWith'] = ObjectSerializer::toQueryValue($analyst_code_starts_with);
        }
        // query params
        if ($analyst_code_not_starts_with !== null) {
            $queryParams['AnalystCode.NotStartsWith'] = ObjectSerializer::toQueryValue($analyst_code_not_starts_with);
        }
        // query params
        if ($analyst_code_ends_with !== null) {
            $queryParams['AnalystCode.EndsWith'] = ObjectSerializer::toQueryValue($analyst_code_ends_with);
        }
        // query params
        if ($analyst_code_not_ends_with !== null) {
            $queryParams['AnalystCode.NotEndsWith'] = ObjectSerializer::toQueryValue($analyst_code_not_ends_with);
        }
        // query params
        if ($analyst_code_in !== null) {
            $queryParams['AnalystCode.In'] = ObjectSerializer::toQueryValue($analyst_code_in);
        }
        // query params
        if ($analyst_code_between !== null) {
            $queryParams['AnalystCode.Between'] = ObjectSerializer::toQueryValue($analyst_code_between);
        }
        // query params
        if ($creation_date_not_equal !== null) {
            $queryParams['CreationDate.NotEqual'] = ObjectSerializer::toQueryValue($creation_date_not_equal);
        }
        // query params
        if ($creation_date_less !== null) {
            $queryParams['CreationDate.Less'] = ObjectSerializer::toQueryValue($creation_date_less);
        }
        // query params
        if ($creation_date_less_or_equal !== null) {
            $queryParams['CreationDate.LessOrEqual'] = ObjectSerializer::toQueryValue($creation_date_less_or_equal);
        }
        // query params
        if ($creation_date_greater !== null) {
            $queryParams['CreationDate.Greater'] = ObjectSerializer::toQueryValue($creation_date_greater);
        }
        // query params
        if ($creation_date_greater_or_equal !== null) {
            $queryParams['CreationDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($creation_date_greater_or_equal);
        }
        // query params
        if ($creation_date_is_null !== null) {
            $queryParams['CreationDate.IsNull'] = ObjectSerializer::toQueryValue($creation_date_is_null);
        }
        // query params
        if ($creation_date_is_not_null !== null) {
            $queryParams['CreationDate.IsNotNull'] = ObjectSerializer::toQueryValue($creation_date_is_not_null);
        }
        // query params
        if ($creation_date_like !== null) {
            $queryParams['CreationDate.Like'] = ObjectSerializer::toQueryValue($creation_date_like);
        }
        // query params
        if ($creation_date_not_like !== null) {
            $queryParams['CreationDate.NotLike'] = ObjectSerializer::toQueryValue($creation_date_not_like);
        }
        // query params
        if ($creation_date_contains !== null) {
            $queryParams['CreationDate.Contains'] = ObjectSerializer::toQueryValue($creation_date_contains);
        }
        // query params
        if ($creation_date_not_contains !== null) {
            $queryParams['CreationDate.NotContains'] = ObjectSerializer::toQueryValue($creation_date_not_contains);
        }
        // query params
        if ($creation_date_starts_with !== null) {
            $queryParams['CreationDate.StartsWith'] = ObjectSerializer::toQueryValue($creation_date_starts_with);
        }
        // query params
        if ($creation_date_not_starts_with !== null) {
            $queryParams['CreationDate.NotStartsWith'] = ObjectSerializer::toQueryValue($creation_date_not_starts_with);
        }
        // query params
        if ($creation_date_ends_with !== null) {
            $queryParams['CreationDate.EndsWith'] = ObjectSerializer::toQueryValue($creation_date_ends_with);
        }
        // query params
        if ($creation_date_not_ends_with !== null) {
            $queryParams['CreationDate.NotEndsWith'] = ObjectSerializer::toQueryValue($creation_date_not_ends_with);
        }
        // query params
        if ($creation_date_in !== null) {
            $queryParams['CreationDate.In'] = ObjectSerializer::toQueryValue($creation_date_in);
        }
        // query params
        if ($creation_date_between !== null) {
            $queryParams['CreationDate.Between'] = ObjectSerializer::toQueryValue($creation_date_between);
        }
        // query params
        if ($client_number_not_equal !== null) {
            $queryParams['ClientNumber.NotEqual'] = ObjectSerializer::toQueryValue($client_number_not_equal);
        }
        // query params
        if ($client_number_less !== null) {
            $queryParams['ClientNumber.Less'] = ObjectSerializer::toQueryValue($client_number_less);
        }
        // query params
        if ($client_number_less_or_equal !== null) {
            $queryParams['ClientNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($client_number_less_or_equal);
        }
        // query params
        if ($client_number_greater !== null) {
            $queryParams['ClientNumber.Greater'] = ObjectSerializer::toQueryValue($client_number_greater);
        }
        // query params
        if ($client_number_greater_or_equal !== null) {
            $queryParams['ClientNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($client_number_greater_or_equal);
        }
        // query params
        if ($client_number_is_null !== null) {
            $queryParams['ClientNumber.IsNull'] = ObjectSerializer::toQueryValue($client_number_is_null);
        }
        // query params
        if ($client_number_is_not_null !== null) {
            $queryParams['ClientNumber.IsNotNull'] = ObjectSerializer::toQueryValue($client_number_is_not_null);
        }
        // query params
        if ($client_number_like !== null) {
            $queryParams['ClientNumber.Like'] = ObjectSerializer::toQueryValue($client_number_like);
        }
        // query params
        if ($client_number_not_like !== null) {
            $queryParams['ClientNumber.NotLike'] = ObjectSerializer::toQueryValue($client_number_not_like);
        }
        // query params
        if ($client_number_contains !== null) {
            $queryParams['ClientNumber.Contains'] = ObjectSerializer::toQueryValue($client_number_contains);
        }
        // query params
        if ($client_number_not_contains !== null) {
            $queryParams['ClientNumber.NotContains'] = ObjectSerializer::toQueryValue($client_number_not_contains);
        }
        // query params
        if ($client_number_starts_with !== null) {
            $queryParams['ClientNumber.StartsWith'] = ObjectSerializer::toQueryValue($client_number_starts_with);
        }
        // query params
        if ($client_number_not_starts_with !== null) {
            $queryParams['ClientNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($client_number_not_starts_with);
        }
        // query params
        if ($client_number_ends_with !== null) {
            $queryParams['ClientNumber.EndsWith'] = ObjectSerializer::toQueryValue($client_number_ends_with);
        }
        // query params
        if ($client_number_not_ends_with !== null) {
            $queryParams['ClientNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($client_number_not_ends_with);
        }
        // query params
        if ($client_number_in !== null) {
            $queryParams['ClientNumber.In'] = ObjectSerializer::toQueryValue($client_number_in);
        }
        // query params
        if ($client_number_between !== null) {
            $queryParams['ClientNumber.Between'] = ObjectSerializer::toQueryValue($client_number_between);
        }
        // query params
        if ($engineer_code_not_equal !== null) {
            $queryParams['EngineerCode.NotEqual'] = ObjectSerializer::toQueryValue($engineer_code_not_equal);
        }
        // query params
        if ($engineer_code_less !== null) {
            $queryParams['EngineerCode.Less'] = ObjectSerializer::toQueryValue($engineer_code_less);
        }
        // query params
        if ($engineer_code_less_or_equal !== null) {
            $queryParams['EngineerCode.LessOrEqual'] = ObjectSerializer::toQueryValue($engineer_code_less_or_equal);
        }
        // query params
        if ($engineer_code_greater !== null) {
            $queryParams['EngineerCode.Greater'] = ObjectSerializer::toQueryValue($engineer_code_greater);
        }
        // query params
        if ($engineer_code_greater_or_equal !== null) {
            $queryParams['EngineerCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($engineer_code_greater_or_equal);
        }
        // query params
        if ($engineer_code_is_null !== null) {
            $queryParams['EngineerCode.IsNull'] = ObjectSerializer::toQueryValue($engineer_code_is_null);
        }
        // query params
        if ($engineer_code_is_not_null !== null) {
            $queryParams['EngineerCode.IsNotNull'] = ObjectSerializer::toQueryValue($engineer_code_is_not_null);
        }
        // query params
        if ($engineer_code_like !== null) {
            $queryParams['EngineerCode.Like'] = ObjectSerializer::toQueryValue($engineer_code_like);
        }
        // query params
        if ($engineer_code_not_like !== null) {
            $queryParams['EngineerCode.NotLike'] = ObjectSerializer::toQueryValue($engineer_code_not_like);
        }
        // query params
        if ($engineer_code_contains !== null) {
            $queryParams['EngineerCode.Contains'] = ObjectSerializer::toQueryValue($engineer_code_contains);
        }
        // query params
        if ($engineer_code_not_contains !== null) {
            $queryParams['EngineerCode.NotContains'] = ObjectSerializer::toQueryValue($engineer_code_not_contains);
        }
        // query params
        if ($engineer_code_starts_with !== null) {
            $queryParams['EngineerCode.StartsWith'] = ObjectSerializer::toQueryValue($engineer_code_starts_with);
        }
        // query params
        if ($engineer_code_not_starts_with !== null) {
            $queryParams['EngineerCode.NotStartsWith'] = ObjectSerializer::toQueryValue($engineer_code_not_starts_with);
        }
        // query params
        if ($engineer_code_ends_with !== null) {
            $queryParams['EngineerCode.EndsWith'] = ObjectSerializer::toQueryValue($engineer_code_ends_with);
        }
        // query params
        if ($engineer_code_not_ends_with !== null) {
            $queryParams['EngineerCode.NotEndsWith'] = ObjectSerializer::toQueryValue($engineer_code_not_ends_with);
        }
        // query params
        if ($engineer_code_in !== null) {
            $queryParams['EngineerCode.In'] = ObjectSerializer::toQueryValue($engineer_code_in);
        }
        // query params
        if ($engineer_code_between !== null) {
            $queryParams['EngineerCode.Between'] = ObjectSerializer::toQueryValue($engineer_code_between);
        }
        // query params
        if ($is_modification_not_equal !== null) {
            $queryParams['IsModification.NotEqual'] = ObjectSerializer::toQueryValue($is_modification_not_equal);
        }
        // query params
        if ($is_modification_less !== null) {
            $queryParams['IsModification.Less'] = ObjectSerializer::toQueryValue($is_modification_less);
        }
        // query params
        if ($is_modification_less_or_equal !== null) {
            $queryParams['IsModification.LessOrEqual'] = ObjectSerializer::toQueryValue($is_modification_less_or_equal);
        }
        // query params
        if ($is_modification_greater !== null) {
            $queryParams['IsModification.Greater'] = ObjectSerializer::toQueryValue($is_modification_greater);
        }
        // query params
        if ($is_modification_greater_or_equal !== null) {
            $queryParams['IsModification.GreaterOrEqual'] = ObjectSerializer::toQueryValue($is_modification_greater_or_equal);
        }
        // query params
        if ($is_modification_is_null !== null) {
            $queryParams['IsModification.IsNull'] = ObjectSerializer::toQueryValue($is_modification_is_null);
        }
        // query params
        if ($is_modification_is_not_null !== null) {
            $queryParams['IsModification.IsNotNull'] = ObjectSerializer::toQueryValue($is_modification_is_not_null);
        }
        // query params
        if ($is_modification_like !== null) {
            $queryParams['IsModification.Like'] = ObjectSerializer::toQueryValue($is_modification_like);
        }
        // query params
        if ($is_modification_not_like !== null) {
            $queryParams['IsModification.NotLike'] = ObjectSerializer::toQueryValue($is_modification_not_like);
        }
        // query params
        if ($is_modification_contains !== null) {
            $queryParams['IsModification.Contains'] = ObjectSerializer::toQueryValue($is_modification_contains);
        }
        // query params
        if ($is_modification_not_contains !== null) {
            $queryParams['IsModification.NotContains'] = ObjectSerializer::toQueryValue($is_modification_not_contains);
        }
        // query params
        if ($is_modification_starts_with !== null) {
            $queryParams['IsModification.StartsWith'] = ObjectSerializer::toQueryValue($is_modification_starts_with);
        }
        // query params
        if ($is_modification_not_starts_with !== null) {
            $queryParams['IsModification.NotStartsWith'] = ObjectSerializer::toQueryValue($is_modification_not_starts_with);
        }
        // query params
        if ($is_modification_ends_with !== null) {
            $queryParams['IsModification.EndsWith'] = ObjectSerializer::toQueryValue($is_modification_ends_with);
        }
        // query params
        if ($is_modification_not_ends_with !== null) {
            $queryParams['IsModification.NotEndsWith'] = ObjectSerializer::toQueryValue($is_modification_not_ends_with);
        }
        // query params
        if ($is_modification_in !== null) {
            $queryParams['IsModification.In'] = ObjectSerializer::toQueryValue($is_modification_in);
        }
        // query params
        if ($is_modification_between !== null) {
            $queryParams['IsModification.Between'] = ObjectSerializer::toQueryValue($is_modification_between);
        }
        // query params
        if ($job_code_not_equal !== null) {
            $queryParams['JobCode.NotEqual'] = ObjectSerializer::toQueryValue($job_code_not_equal);
        }
        // query params
        if ($job_code_less !== null) {
            $queryParams['JobCode.Less'] = ObjectSerializer::toQueryValue($job_code_less);
        }
        // query params
        if ($job_code_less_or_equal !== null) {
            $queryParams['JobCode.LessOrEqual'] = ObjectSerializer::toQueryValue($job_code_less_or_equal);
        }
        // query params
        if ($job_code_greater !== null) {
            $queryParams['JobCode.Greater'] = ObjectSerializer::toQueryValue($job_code_greater);
        }
        // query params
        if ($job_code_greater_or_equal !== null) {
            $queryParams['JobCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($job_code_greater_or_equal);
        }
        // query params
        if ($job_code_is_null !== null) {
            $queryParams['JobCode.IsNull'] = ObjectSerializer::toQueryValue($job_code_is_null);
        }
        // query params
        if ($job_code_is_not_null !== null) {
            $queryParams['JobCode.IsNotNull'] = ObjectSerializer::toQueryValue($job_code_is_not_null);
        }
        // query params
        if ($job_code_like !== null) {
            $queryParams['JobCode.Like'] = ObjectSerializer::toQueryValue($job_code_like);
        }
        // query params
        if ($job_code_not_like !== null) {
            $queryParams['JobCode.NotLike'] = ObjectSerializer::toQueryValue($job_code_not_like);
        }
        // query params
        if ($job_code_contains !== null) {
            $queryParams['JobCode.Contains'] = ObjectSerializer::toQueryValue($job_code_contains);
        }
        // query params
        if ($job_code_not_contains !== null) {
            $queryParams['JobCode.NotContains'] = ObjectSerializer::toQueryValue($job_code_not_contains);
        }
        // query params
        if ($job_code_starts_with !== null) {
            $queryParams['JobCode.StartsWith'] = ObjectSerializer::toQueryValue($job_code_starts_with);
        }
        // query params
        if ($job_code_not_starts_with !== null) {
            $queryParams['JobCode.NotStartsWith'] = ObjectSerializer::toQueryValue($job_code_not_starts_with);
        }
        // query params
        if ($job_code_ends_with !== null) {
            $queryParams['JobCode.EndsWith'] = ObjectSerializer::toQueryValue($job_code_ends_with);
        }
        // query params
        if ($job_code_not_ends_with !== null) {
            $queryParams['JobCode.NotEndsWith'] = ObjectSerializer::toQueryValue($job_code_not_ends_with);
        }
        // query params
        if ($job_code_in !== null) {
            $queryParams['JobCode.In'] = ObjectSerializer::toQueryValue($job_code_in);
        }
        // query params
        if ($job_code_between !== null) {
            $queryParams['JobCode.Between'] = ObjectSerializer::toQueryValue($job_code_between);
        }
        // query params
        if ($lead_engineer_code_not_equal !== null) {
            $queryParams['LeadEngineerCode.NotEqual'] = ObjectSerializer::toQueryValue($lead_engineer_code_not_equal);
        }
        // query params
        if ($lead_engineer_code_less !== null) {
            $queryParams['LeadEngineerCode.Less'] = ObjectSerializer::toQueryValue($lead_engineer_code_less);
        }
        // query params
        if ($lead_engineer_code_less_or_equal !== null) {
            $queryParams['LeadEngineerCode.LessOrEqual'] = ObjectSerializer::toQueryValue($lead_engineer_code_less_or_equal);
        }
        // query params
        if ($lead_engineer_code_greater !== null) {
            $queryParams['LeadEngineerCode.Greater'] = ObjectSerializer::toQueryValue($lead_engineer_code_greater);
        }
        // query params
        if ($lead_engineer_code_greater_or_equal !== null) {
            $queryParams['LeadEngineerCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($lead_engineer_code_greater_or_equal);
        }
        // query params
        if ($lead_engineer_code_is_null !== null) {
            $queryParams['LeadEngineerCode.IsNull'] = ObjectSerializer::toQueryValue($lead_engineer_code_is_null);
        }
        // query params
        if ($lead_engineer_code_is_not_null !== null) {
            $queryParams['LeadEngineerCode.IsNotNull'] = ObjectSerializer::toQueryValue($lead_engineer_code_is_not_null);
        }
        // query params
        if ($lead_engineer_code_like !== null) {
            $queryParams['LeadEngineerCode.Like'] = ObjectSerializer::toQueryValue($lead_engineer_code_like);
        }
        // query params
        if ($lead_engineer_code_not_like !== null) {
            $queryParams['LeadEngineerCode.NotLike'] = ObjectSerializer::toQueryValue($lead_engineer_code_not_like);
        }
        // query params
        if ($lead_engineer_code_contains !== null) {
            $queryParams['LeadEngineerCode.Contains'] = ObjectSerializer::toQueryValue($lead_engineer_code_contains);
        }
        // query params
        if ($lead_engineer_code_not_contains !== null) {
            $queryParams['LeadEngineerCode.NotContains'] = ObjectSerializer::toQueryValue($lead_engineer_code_not_contains);
        }
        // query params
        if ($lead_engineer_code_starts_with !== null) {
            $queryParams['LeadEngineerCode.StartsWith'] = ObjectSerializer::toQueryValue($lead_engineer_code_starts_with);
        }
        // query params
        if ($lead_engineer_code_not_starts_with !== null) {
            $queryParams['LeadEngineerCode.NotStartsWith'] = ObjectSerializer::toQueryValue($lead_engineer_code_not_starts_with);
        }
        // query params
        if ($lead_engineer_code_ends_with !== null) {
            $queryParams['LeadEngineerCode.EndsWith'] = ObjectSerializer::toQueryValue($lead_engineer_code_ends_with);
        }
        // query params
        if ($lead_engineer_code_not_ends_with !== null) {
            $queryParams['LeadEngineerCode.NotEndsWith'] = ObjectSerializer::toQueryValue($lead_engineer_code_not_ends_with);
        }
        // query params
        if ($lead_engineer_code_in !== null) {
            $queryParams['LeadEngineerCode.In'] = ObjectSerializer::toQueryValue($lead_engineer_code_in);
        }
        // query params
        if ($lead_engineer_code_between !== null) {
            $queryParams['LeadEngineerCode.Between'] = ObjectSerializer::toQueryValue($lead_engineer_code_between);
        }
        // query params
        if ($status_code_not_equal !== null) {
            $queryParams['StatusCode.NotEqual'] = ObjectSerializer::toQueryValue($status_code_not_equal);
        }
        // query params
        if ($status_code_less !== null) {
            $queryParams['StatusCode.Less'] = ObjectSerializer::toQueryValue($status_code_less);
        }
        // query params
        if ($status_code_less_or_equal !== null) {
            $queryParams['StatusCode.LessOrEqual'] = ObjectSerializer::toQueryValue($status_code_less_or_equal);
        }
        // query params
        if ($status_code_greater !== null) {
            $queryParams['StatusCode.Greater'] = ObjectSerializer::toQueryValue($status_code_greater);
        }
        // query params
        if ($status_code_greater_or_equal !== null) {
            $queryParams['StatusCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($status_code_greater_or_equal);
        }
        // query params
        if ($status_code_is_null !== null) {
            $queryParams['StatusCode.IsNull'] = ObjectSerializer::toQueryValue($status_code_is_null);
        }
        // query params
        if ($status_code_is_not_null !== null) {
            $queryParams['StatusCode.IsNotNull'] = ObjectSerializer::toQueryValue($status_code_is_not_null);
        }
        // query params
        if ($status_code_like !== null) {
            $queryParams['StatusCode.Like'] = ObjectSerializer::toQueryValue($status_code_like);
        }
        // query params
        if ($status_code_not_like !== null) {
            $queryParams['StatusCode.NotLike'] = ObjectSerializer::toQueryValue($status_code_not_like);
        }
        // query params
        if ($status_code_contains !== null) {
            $queryParams['StatusCode.Contains'] = ObjectSerializer::toQueryValue($status_code_contains);
        }
        // query params
        if ($status_code_not_contains !== null) {
            $queryParams['StatusCode.NotContains'] = ObjectSerializer::toQueryValue($status_code_not_contains);
        }
        // query params
        if ($status_code_starts_with !== null) {
            $queryParams['StatusCode.StartsWith'] = ObjectSerializer::toQueryValue($status_code_starts_with);
        }
        // query params
        if ($status_code_not_starts_with !== null) {
            $queryParams['StatusCode.NotStartsWith'] = ObjectSerializer::toQueryValue($status_code_not_starts_with);
        }
        // query params
        if ($status_code_ends_with !== null) {
            $queryParams['StatusCode.EndsWith'] = ObjectSerializer::toQueryValue($status_code_ends_with);
        }
        // query params
        if ($status_code_not_ends_with !== null) {
            $queryParams['StatusCode.NotEndsWith'] = ObjectSerializer::toQueryValue($status_code_not_ends_with);
        }
        // query params
        if ($status_code_in !== null) {
            $queryParams['StatusCode.In'] = ObjectSerializer::toQueryValue($status_code_in);
        }
        // query params
        if ($status_code_between !== null) {
            $queryParams['StatusCode.Between'] = ObjectSerializer::toQueryValue($status_code_between);
        }
        // query params
        if ($update_date_not_equal !== null) {
            $queryParams['UpdateDate.NotEqual'] = ObjectSerializer::toQueryValue($update_date_not_equal);
        }
        // query params
        if ($update_date_less !== null) {
            $queryParams['UpdateDate.Less'] = ObjectSerializer::toQueryValue($update_date_less);
        }
        // query params
        if ($update_date_less_or_equal !== null) {
            $queryParams['UpdateDate.LessOrEqual'] = ObjectSerializer::toQueryValue($update_date_less_or_equal);
        }
        // query params
        if ($update_date_greater !== null) {
            $queryParams['UpdateDate.Greater'] = ObjectSerializer::toQueryValue($update_date_greater);
        }
        // query params
        if ($update_date_greater_or_equal !== null) {
            $queryParams['UpdateDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($update_date_greater_or_equal);
        }
        // query params
        if ($update_date_is_null !== null) {
            $queryParams['UpdateDate.IsNull'] = ObjectSerializer::toQueryValue($update_date_is_null);
        }
        // query params
        if ($update_date_is_not_null !== null) {
            $queryParams['UpdateDate.IsNotNull'] = ObjectSerializer::toQueryValue($update_date_is_not_null);
        }
        // query params
        if ($update_date_like !== null) {
            $queryParams['UpdateDate.Like'] = ObjectSerializer::toQueryValue($update_date_like);
        }
        // query params
        if ($update_date_not_like !== null) {
            $queryParams['UpdateDate.NotLike'] = ObjectSerializer::toQueryValue($update_date_not_like);
        }
        // query params
        if ($update_date_contains !== null) {
            $queryParams['UpdateDate.Contains'] = ObjectSerializer::toQueryValue($update_date_contains);
        }
        // query params
        if ($update_date_not_contains !== null) {
            $queryParams['UpdateDate.NotContains'] = ObjectSerializer::toQueryValue($update_date_not_contains);
        }
        // query params
        if ($update_date_starts_with !== null) {
            $queryParams['UpdateDate.StartsWith'] = ObjectSerializer::toQueryValue($update_date_starts_with);
        }
        // query params
        if ($update_date_not_starts_with !== null) {
            $queryParams['UpdateDate.NotStartsWith'] = ObjectSerializer::toQueryValue($update_date_not_starts_with);
        }
        // query params
        if ($update_date_ends_with !== null) {
            $queryParams['UpdateDate.EndsWith'] = ObjectSerializer::toQueryValue($update_date_ends_with);
        }
        // query params
        if ($update_date_not_ends_with !== null) {
            $queryParams['UpdateDate.NotEndsWith'] = ObjectSerializer::toQueryValue($update_date_not_ends_with);
        }
        // query params
        if ($update_date_in !== null) {
            $queryParams['UpdateDate.In'] = ObjectSerializer::toQueryValue($update_date_in);
        }
        // query params
        if ($update_date_between !== null) {
            $queryParams['UpdateDate.Between'] = ObjectSerializer::toQueryValue($update_date_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
