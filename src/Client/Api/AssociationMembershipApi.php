<?php
/**
 * AssociationMembershipApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * AssociationMembershipApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssociationMembershipApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation associationMembershipGetAssociationDiscountBenefit
     *
     * @param  string $discount_code discount_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AssociationDiscountBenefit
     */
    public function associationMembershipGetAssociationDiscountBenefit($discount_code)
    {
        list($response) = $this->associationMembershipGetAssociationDiscountBenefitWithHttpInfo($discount_code);
        return $response;
    }

    /**
     * Operation associationMembershipGetAssociationDiscountBenefitWithHttpInfo
     *
     * @param  string $discount_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AssociationDiscountBenefit, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipGetAssociationDiscountBenefitWithHttpInfo($discount_code)
    {
        $returnType = '\Advantage\Client\Model\AssociationDiscountBenefit';
        $request = $this->associationMembershipGetAssociationDiscountBenefitRequest($discount_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AssociationDiscountBenefit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipGetAssociationDiscountBenefitAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipGetAssociationDiscountBenefitAsync($discount_code)
    {
        return $this->associationMembershipGetAssociationDiscountBenefitAsyncWithHttpInfo($discount_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipGetAssociationDiscountBenefitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipGetAssociationDiscountBenefitAsyncWithHttpInfo($discount_code)
    {
        $returnType = '\Advantage\Client\Model\AssociationDiscountBenefit';
        $request = $this->associationMembershipGetAssociationDiscountBenefitRequest($discount_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipGetAssociationDiscountBenefit'
     *
     * @param  string $discount_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipGetAssociationDiscountBenefitRequest($discount_code)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling associationMembershipGetAssociationDiscountBenefit'
            );
        }

        $resourcePath = '/association-memberships/discounts/{discountCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation associationMembershipGetAssociationThirdPartyBenefit
     *
     * @param  string $benefit_code benefit_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\AssociationThirdPartyBenefit
     */
    public function associationMembershipGetAssociationThirdPartyBenefit($benefit_code)
    {
        list($response) = $this->associationMembershipGetAssociationThirdPartyBenefitWithHttpInfo($benefit_code);
        return $response;
    }

    /**
     * Operation associationMembershipGetAssociationThirdPartyBenefitWithHttpInfo
     *
     * @param  string $benefit_code (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\AssociationThirdPartyBenefit, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipGetAssociationThirdPartyBenefitWithHttpInfo($benefit_code)
    {
        $returnType = '\Advantage\Client\Model\AssociationThirdPartyBenefit';
        $request = $this->associationMembershipGetAssociationThirdPartyBenefitRequest($benefit_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\AssociationThirdPartyBenefit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipGetAssociationThirdPartyBenefitAsync
     *
     * 
     *
     * @param  string $benefit_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipGetAssociationThirdPartyBenefitAsync($benefit_code)
    {
        return $this->associationMembershipGetAssociationThirdPartyBenefitAsyncWithHttpInfo($benefit_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipGetAssociationThirdPartyBenefitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $benefit_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipGetAssociationThirdPartyBenefitAsyncWithHttpInfo($benefit_code)
    {
        $returnType = '\Advantage\Client\Model\AssociationThirdPartyBenefit';
        $request = $this->associationMembershipGetAssociationThirdPartyBenefitRequest($benefit_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipGetAssociationThirdPartyBenefit'
     *
     * @param  string $benefit_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipGetAssociationThirdPartyBenefitRequest($benefit_code)
    {
        // verify the required parameter 'benefit_code' is set
        if ($benefit_code === null || (is_array($benefit_code) && count($benefit_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benefit_code when calling associationMembershipGetAssociationThirdPartyBenefit'
            );
        }

        $resourcePath = '/association-memberships/benefits/{benefitCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($benefit_code !== null) {
            $resourcePath = str_replace(
                '{' . 'benefitCode' . '}',
                ObjectSerializer::toPathValue($benefit_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation associationMembershipSearchDirectory
     *
     * @param  string $association_item_number association_item_number (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box).  This term will be compared to the member&#39;s name. (optional)
     * @param  string $filter_structure_node_id The ID of a structure node.  Only members from this node or a descendant of this node will be returned. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultWithCountAssociationMemberSummary
     */
    public function associationMembershipSearchDirectory($association_item_number, $filter_search = null, $filter_structure_node_id = null, $pager_skip = null, $pager_take = null)
    {
        list($response) = $this->associationMembershipSearchDirectoryWithHttpInfo($association_item_number, $filter_search, $filter_structure_node_id, $pager_skip, $pager_take);
        return $response;
    }

    /**
     * Operation associationMembershipSearchDirectoryWithHttpInfo
     *
     * @param  string $association_item_number (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box).  This term will be compared to the member&#39;s name. (optional)
     * @param  string $filter_structure_node_id The ID of a structure node.  Only members from this node or a descendant of this node will be returned. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultWithCountAssociationMemberSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipSearchDirectoryWithHttpInfo($association_item_number, $filter_search = null, $filter_structure_node_id = null, $pager_skip = null, $pager_take = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountAssociationMemberSummary';
        $request = $this->associationMembershipSearchDirectoryRequest($association_item_number, $filter_search, $filter_structure_node_id, $pager_skip, $pager_take);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultWithCountAssociationMemberSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipSearchDirectoryAsync
     *
     * 
     *
     * @param  string $association_item_number (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box).  This term will be compared to the member&#39;s name. (optional)
     * @param  string $filter_structure_node_id The ID of a structure node.  Only members from this node or a descendant of this node will be returned. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipSearchDirectoryAsync($association_item_number, $filter_search = null, $filter_structure_node_id = null, $pager_skip = null, $pager_take = null)
    {
        return $this->associationMembershipSearchDirectoryAsyncWithHttpInfo($association_item_number, $filter_search, $filter_structure_node_id, $pager_skip, $pager_take)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipSearchDirectoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $association_item_number (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box).  This term will be compared to the member&#39;s name. (optional)
     * @param  string $filter_structure_node_id The ID of a structure node.  Only members from this node or a descendant of this node will be returned. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipSearchDirectoryAsyncWithHttpInfo($association_item_number, $filter_search = null, $filter_structure_node_id = null, $pager_skip = null, $pager_take = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultWithCountAssociationMemberSummary';
        $request = $this->associationMembershipSearchDirectoryRequest($association_item_number, $filter_search, $filter_structure_node_id, $pager_skip, $pager_take);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipSearchDirectory'
     *
     * @param  string $association_item_number (required)
     * @param  string $filter_search The generic search argument. (Typically from a search text box).  This term will be compared to the member&#39;s name. (optional)
     * @param  string $filter_structure_node_id The ID of a structure node.  Only members from this node or a descendant of this node will be returned. (optional)
     * @param  int $pager_skip The number of records to skip. (optional)
     * @param  int $pager_take The number of records to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipSearchDirectoryRequest($association_item_number, $filter_search = null, $filter_structure_node_id = null, $pager_skip = null, $pager_take = null)
    {
        // verify the required parameter 'association_item_number' is set
        if ($association_item_number === null || (is_array($association_item_number) && count($association_item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $association_item_number when calling associationMembershipSearchDirectory'
            );
        }

        $resourcePath = '/association-memberships/{associationItemNumber}/directory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            $queryParams['filter.search'] = ObjectSerializer::toQueryValue($filter_search);
        }
        // query params
        if ($filter_structure_node_id !== null) {
            $queryParams['filter.structureNodeId'] = ObjectSerializer::toQueryValue($filter_structure_node_id);
        }
        // query params
        if ($pager_skip !== null) {
            $queryParams['pager.skip'] = ObjectSerializer::toQueryValue($pager_skip);
        }
        // query params
        if ($pager_take !== null) {
            $queryParams['pager.take'] = ObjectSerializer::toQueryValue($pager_take);
        }

        // path params
        if ($association_item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'associationItemNumber' . '}',
                ObjectSerializer::toPathValue($association_item_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation associationMembershipUpdateBenefit
     *
     * @param  string $benefit_code benefit_code (required)
     * @param  \Advantage\Client\Model\AssociationBenefitUpdateRequest $benefit_update_request benefit_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function associationMembershipUpdateBenefit($benefit_code, $benefit_update_request)
    {
        $this->associationMembershipUpdateBenefitWithHttpInfo($benefit_code, $benefit_update_request);
    }

    /**
     * Operation associationMembershipUpdateBenefitWithHttpInfo
     *
     * @param  string $benefit_code (required)
     * @param  \Advantage\Client\Model\AssociationBenefitUpdateRequest $benefit_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipUpdateBenefitWithHttpInfo($benefit_code, $benefit_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateBenefitRequest($benefit_code, $benefit_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipUpdateBenefitAsync
     *
     * 
     *
     * @param  string $benefit_code (required)
     * @param  \Advantage\Client\Model\AssociationBenefitUpdateRequest $benefit_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateBenefitAsync($benefit_code, $benefit_update_request)
    {
        return $this->associationMembershipUpdateBenefitAsyncWithHttpInfo($benefit_code, $benefit_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipUpdateBenefitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $benefit_code (required)
     * @param  \Advantage\Client\Model\AssociationBenefitUpdateRequest $benefit_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateBenefitAsyncWithHttpInfo($benefit_code, $benefit_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateBenefitRequest($benefit_code, $benefit_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipUpdateBenefit'
     *
     * @param  string $benefit_code (required)
     * @param  \Advantage\Client\Model\AssociationBenefitUpdateRequest $benefit_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipUpdateBenefitRequest($benefit_code, $benefit_update_request)
    {
        // verify the required parameter 'benefit_code' is set
        if ($benefit_code === null || (is_array($benefit_code) && count($benefit_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benefit_code when calling associationMembershipUpdateBenefit'
            );
        }
        // verify the required parameter 'benefit_update_request' is set
        if ($benefit_update_request === null || (is_array($benefit_update_request) && count($benefit_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benefit_update_request when calling associationMembershipUpdateBenefit'
            );
        }

        $resourcePath = '/association-memberships/benefits/{benefitCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($benefit_code !== null) {
            $resourcePath = str_replace(
                '{' . 'benefitCode' . '}',
                ObjectSerializer::toPathValue($benefit_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($benefit_update_request)) {
            $_tempBody = $benefit_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation associationMembershipUpdateDiscount
     *
     * @param  string $discount_code discount_code (required)
     * @param  \Advantage\Client\Model\AssociationDiscountUpdateRequest $discount_update_request discount_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function associationMembershipUpdateDiscount($discount_code, $discount_update_request)
    {
        $this->associationMembershipUpdateDiscountWithHttpInfo($discount_code, $discount_update_request);
    }

    /**
     * Operation associationMembershipUpdateDiscountWithHttpInfo
     *
     * @param  string $discount_code (required)
     * @param  \Advantage\Client\Model\AssociationDiscountUpdateRequest $discount_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipUpdateDiscountWithHttpInfo($discount_code, $discount_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateDiscountRequest($discount_code, $discount_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipUpdateDiscountAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  \Advantage\Client\Model\AssociationDiscountUpdateRequest $discount_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateDiscountAsync($discount_code, $discount_update_request)
    {
        return $this->associationMembershipUpdateDiscountAsyncWithHttpInfo($discount_code, $discount_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipUpdateDiscountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  \Advantage\Client\Model\AssociationDiscountUpdateRequest $discount_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateDiscountAsyncWithHttpInfo($discount_code, $discount_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateDiscountRequest($discount_code, $discount_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipUpdateDiscount'
     *
     * @param  string $discount_code (required)
     * @param  \Advantage\Client\Model\AssociationDiscountUpdateRequest $discount_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipUpdateDiscountRequest($discount_code, $discount_update_request)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling associationMembershipUpdateDiscount'
            );
        }
        // verify the required parameter 'discount_update_request' is set
        if ($discount_update_request === null || (is_array($discount_update_request) && count($discount_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_update_request when calling associationMembershipUpdateDiscount'
            );
        }

        $resourcePath = '/association-memberships/discounts/{discountCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($discount_update_request)) {
            $_tempBody = $discount_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation associationMembershipUpdateLevel
     *
     * @param  string $item_number item_number (required)
     * @param  string $association_level association_level (required)
     * @param  \Advantage\Client\Model\AssociationLevelUpdateRequest $level_update_request level_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function associationMembershipUpdateLevel($item_number, $association_level, $level_update_request)
    {
        $this->associationMembershipUpdateLevelWithHttpInfo($item_number, $association_level, $level_update_request);
    }

    /**
     * Operation associationMembershipUpdateLevelWithHttpInfo
     *
     * @param  string $item_number (required)
     * @param  string $association_level (required)
     * @param  \Advantage\Client\Model\AssociationLevelUpdateRequest $level_update_request (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function associationMembershipUpdateLevelWithHttpInfo($item_number, $association_level, $level_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateLevelRequest($item_number, $association_level, $level_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation associationMembershipUpdateLevelAsync
     *
     * 
     *
     * @param  string $item_number (required)
     * @param  string $association_level (required)
     * @param  \Advantage\Client\Model\AssociationLevelUpdateRequest $level_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateLevelAsync($item_number, $association_level, $level_update_request)
    {
        return $this->associationMembershipUpdateLevelAsyncWithHttpInfo($item_number, $association_level, $level_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation associationMembershipUpdateLevelAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $item_number (required)
     * @param  string $association_level (required)
     * @param  \Advantage\Client\Model\AssociationLevelUpdateRequest $level_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function associationMembershipUpdateLevelAsyncWithHttpInfo($item_number, $association_level, $level_update_request)
    {
        $returnType = '';
        $request = $this->associationMembershipUpdateLevelRequest($item_number, $association_level, $level_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'associationMembershipUpdateLevel'
     *
     * @param  string $item_number (required)
     * @param  string $association_level (required)
     * @param  \Advantage\Client\Model\AssociationLevelUpdateRequest $level_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function associationMembershipUpdateLevelRequest($item_number, $association_level, $level_update_request)
    {
        // verify the required parameter 'item_number' is set
        if ($item_number === null || (is_array($item_number) && count($item_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_number when calling associationMembershipUpdateLevel'
            );
        }
        // verify the required parameter 'association_level' is set
        if ($association_level === null || (is_array($association_level) && count($association_level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $association_level when calling associationMembershipUpdateLevel'
            );
        }
        // verify the required parameter 'level_update_request' is set
        if ($level_update_request === null || (is_array($level_update_request) && count($level_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_update_request when calling associationMembershipUpdateLevel'
            );
        }

        $resourcePath = '/products/{itemNumber}/levels/{associationLevel}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                '{' . 'itemNumber' . '}',
                ObjectSerializer::toPathValue($item_number),
                $resourcePath
            );
        }
        // path params
        if ($association_level !== null) {
            $resourcePath = str_replace(
                '{' . 'associationLevel' . '}',
                ObjectSerializer::toPathValue($association_level),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($level_update_request)) {
            $_tempBody = $level_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
