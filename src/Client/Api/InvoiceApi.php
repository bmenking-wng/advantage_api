<?php
/**
 * InvoiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Advantage Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Advantage Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Advantage\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Advantage\Client\ApiException;
use Advantage\Client\Configuration;
use Advantage\Client\HeaderSelector;
use Advantage\Client\ObjectSerializer;

/**
 * InvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Advantage\Client
 * @author   Advantage Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation invoiceAddAvailableCreditPayment
     *
     * Add a payment to a given debit using the customer's available credit.  If a specific amount is specified to use but there is less than that available, an error will be thrown.  If a zero amount is specified, all or any available credit will be used up to the amount due.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderAvailableCreditPaymentRequest $payment An AvailableCreditPaymentRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddAvailableCreditPayment($debit_number, $payment)
    {
        list($response) = $this->invoiceAddAvailableCreditPaymentWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddAvailableCreditPaymentWithHttpInfo
     *
     * Add a payment to a given debit using the customer's available credit.  If a specific amount is specified to use but there is less than that available, an error will be thrown.  If a zero amount is specified, all or any available credit will be used up to the amount due.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderAvailableCreditPaymentRequest $payment An AvailableCreditPaymentRequest object. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddAvailableCreditPaymentWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddAvailableCreditPaymentRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddAvailableCreditPaymentAsync
     *
     * Add a payment to a given debit using the customer's available credit.  If a specific amount is specified to use but there is less than that available, an error will be thrown.  If a zero amount is specified, all or any available credit will be used up to the amount due.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderAvailableCreditPaymentRequest $payment An AvailableCreditPaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddAvailableCreditPaymentAsync($debit_number, $payment)
    {
        return $this->invoiceAddAvailableCreditPaymentAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddAvailableCreditPaymentAsyncWithHttpInfo
     *
     * Add a payment to a given debit using the customer's available credit.  If a specific amount is specified to use but there is less than that available, an error will be thrown.  If a zero amount is specified, all or any available credit will be used up to the amount due.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderAvailableCreditPaymentRequest $payment An AvailableCreditPaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddAvailableCreditPaymentAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddAvailableCreditPaymentRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddAvailableCreditPayment'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderAvailableCreditPaymentRequest $payment An AvailableCreditPaymentRequest object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddAvailableCreditPaymentRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddAvailableCreditPayment'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddAvailableCreditPayment'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/available-credits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddCreditCardPayment
     *
     * Adds credit card payments to an existing open invoice for an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderCreditCardPaymentRequest $payment The tokenized credit card payment details. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddCreditCardPayment($debit_number, $payment)
    {
        list($response) = $this->invoiceAddCreditCardPaymentWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddCreditCardPaymentWithHttpInfo
     *
     * Adds credit card payments to an existing open invoice for an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderCreditCardPaymentRequest $payment The tokenized credit card payment details. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddCreditCardPaymentWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddCreditCardPaymentRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddCreditCardPaymentAsync
     *
     * Adds credit card payments to an existing open invoice for an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderCreditCardPaymentRequest $payment The tokenized credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddCreditCardPaymentAsync($debit_number, $payment)
    {
        return $this->invoiceAddCreditCardPaymentAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddCreditCardPaymentAsyncWithHttpInfo
     *
     * Adds credit card payments to an existing open invoice for an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderCreditCardPaymentRequest $payment The tokenized credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddCreditCardPaymentAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddCreditCardPaymentRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddCreditCardPayment'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderCreditCardPaymentRequest $payment The tokenized credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddCreditCardPaymentRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddCreditCardPayment'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddCreditCardPayment'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/credit-cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddOrderPaymentCheck
     *
     * Add a check payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\CheckPaymentRequest $payment The check payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddOrderPaymentCheck($debit_number, $payment)
    {
        list($response) = $this->invoiceAddOrderPaymentCheckWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddOrderPaymentCheckWithHttpInfo
     *
     * Add a check payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\CheckPaymentRequest $payment The check payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddOrderPaymentCheckWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddOrderPaymentCheckRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddOrderPaymentCheckAsync
     *
     * Add a check payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\CheckPaymentRequest $payment The check payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentCheckAsync($debit_number, $payment)
    {
        return $this->invoiceAddOrderPaymentCheckAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddOrderPaymentCheckAsyncWithHttpInfo
     *
     * Add a check payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\CheckPaymentRequest $payment The check payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentCheckAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddOrderPaymentCheckRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddOrderPaymentCheck'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\CheckPaymentRequest $payment The check payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddOrderPaymentCheckRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddOrderPaymentCheck'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddOrderPaymentCheck'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/checks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddOrderPaymentCreditMemo
     *
     * Adds credit memo payments to existing invoices for the given order.  The amount will be applied to existing order until it has all been  used
     *
     * @param  string $debit_number debit_number (required)
     * @param  \Advantage\Client\Model\OrderCreditMemoPaymentRequest $payment payment (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddOrderPaymentCreditMemo($debit_number, $payment)
    {
        list($response) = $this->invoiceAddOrderPaymentCreditMemoWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddOrderPaymentCreditMemoWithHttpInfo
     *
     * Adds credit memo payments to existing invoices for the given order.  The amount will be applied to existing order until it has all been  used
     *
     * @param  string $debit_number (required)
     * @param  \Advantage\Client\Model\OrderCreditMemoPaymentRequest $payment (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddOrderPaymentCreditMemoWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddOrderPaymentCreditMemoRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddOrderPaymentCreditMemoAsync
     *
     * Adds credit memo payments to existing invoices for the given order.  The amount will be applied to existing order until it has all been  used
     *
     * @param  string $debit_number (required)
     * @param  \Advantage\Client\Model\OrderCreditMemoPaymentRequest $payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentCreditMemoAsync($debit_number, $payment)
    {
        return $this->invoiceAddOrderPaymentCreditMemoAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddOrderPaymentCreditMemoAsyncWithHttpInfo
     *
     * Adds credit memo payments to existing invoices for the given order.  The amount will be applied to existing order until it has all been  used
     *
     * @param  string $debit_number (required)
     * @param  \Advantage\Client\Model\OrderCreditMemoPaymentRequest $payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentCreditMemoAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddOrderPaymentCreditMemoRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddOrderPaymentCreditMemo'
     *
     * @param  string $debit_number (required)
     * @param  \Advantage\Client\Model\OrderCreditMemoPaymentRequest $payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddOrderPaymentCreditMemoRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddOrderPaymentCreditMemo'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddOrderPaymentCreditMemo'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/credit-memos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddOrderPaymentDigitalWallet
     *
     * Add a Digital Wallet payment to an existing order
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the payment to (required)
     * @param  \Advantage\Client\Model\DigitalWalletPaymentRequest $payment Digital Wallet payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoiceAddOrderPaymentDigitalWallet($debit_number, $payment)
    {
        $this->invoiceAddOrderPaymentDigitalWalletWithHttpInfo($debit_number, $payment);
    }

    /**
     * Operation invoiceAddOrderPaymentDigitalWalletWithHttpInfo
     *
     * Add a Digital Wallet payment to an existing order
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the payment to (required)
     * @param  \Advantage\Client\Model\DigitalWalletPaymentRequest $payment Digital Wallet payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddOrderPaymentDigitalWalletWithHttpInfo($debit_number, $payment)
    {
        $returnType = '';
        $request = $this->invoiceAddOrderPaymentDigitalWalletRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddOrderPaymentDigitalWalletAsync
     *
     * Add a Digital Wallet payment to an existing order
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the payment to (required)
     * @param  \Advantage\Client\Model\DigitalWalletPaymentRequest $payment Digital Wallet payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentDigitalWalletAsync($debit_number, $payment)
    {
        return $this->invoiceAddOrderPaymentDigitalWalletAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddOrderPaymentDigitalWalletAsyncWithHttpInfo
     *
     * Add a Digital Wallet payment to an existing order
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the payment to (required)
     * @param  \Advantage\Client\Model\DigitalWalletPaymentRequest $payment Digital Wallet payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddOrderPaymentDigitalWalletAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '';
        $request = $this->invoiceAddOrderPaymentDigitalWalletRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddOrderPaymentDigitalWallet'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the payment to (required)
     * @param  \Advantage\Client\Model\DigitalWalletPaymentRequest $payment Digital Wallet payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddOrderPaymentDigitalWalletRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddOrderPaymentDigitalWallet'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddOrderPaymentDigitalWallet'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/digital-wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddSavedCreditCardPayment
     *
     * Add a credit card payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedCreditCardPaymentRequest $payment An credit card payment details. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddSavedCreditCardPayment($debit_number, $payment)
    {
        list($response) = $this->invoiceAddSavedCreditCardPaymentWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddSavedCreditCardPaymentWithHttpInfo
     *
     * Add a credit card payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedCreditCardPaymentRequest $payment An credit card payment details. (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddSavedCreditCardPaymentWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddSavedCreditCardPaymentRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddSavedCreditCardPaymentAsync
     *
     * Add a credit card payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedCreditCardPaymentRequest $payment An credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddSavedCreditCardPaymentAsync($debit_number, $payment)
    {
        return $this->invoiceAddSavedCreditCardPaymentAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddSavedCreditCardPaymentAsyncWithHttpInfo
     *
     * Add a credit card payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedCreditCardPaymentRequest $payment An credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddSavedCreditCardPaymentAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddSavedCreditCardPaymentRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddSavedCreditCardPayment'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedCreditCardPaymentRequest $payment An credit card payment details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddSavedCreditCardPaymentRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddSavedCreditCardPayment'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddSavedCreditCardPayment'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/saved-credit-cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceAddSavedDirectDebitPayment
     *
     * Add a direct debit payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedDirectDebitPaymentRequest $payment The direct debit payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\PaymentResponse
     */
    public function invoiceAddSavedDirectDebitPayment($debit_number, $payment)
    {
        list($response) = $this->invoiceAddSavedDirectDebitPaymentWithHttpInfo($debit_number, $payment);
        return $response;
    }

    /**
     * Operation invoiceAddSavedDirectDebitPaymentWithHttpInfo
     *
     * Add a direct debit payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedDirectDebitPaymentRequest $payment The direct debit payment details (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceAddSavedDirectDebitPaymentWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddSavedDirectDebitPaymentRequest($debit_number, $payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceAddSavedDirectDebitPaymentAsync
     *
     * Add a direct debit payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedDirectDebitPaymentRequest $payment The direct debit payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddSavedDirectDebitPaymentAsync($debit_number, $payment)
    {
        return $this->invoiceAddSavedDirectDebitPaymentAsyncWithHttpInfo($debit_number, $payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceAddSavedDirectDebitPaymentAsyncWithHttpInfo
     *
     * Add a direct debit payment to an existing order.
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedDirectDebitPaymentRequest $payment The direct debit payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceAddSavedDirectDebitPaymentAsyncWithHttpInfo($debit_number, $payment)
    {
        $returnType = '\Advantage\Client\Model\PaymentResponse';
        $request = $this->invoiceAddSavedDirectDebitPaymentRequest($debit_number, $payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceAddSavedDirectDebitPayment'
     *
     * @param  string $debit_number The debit number (usually an order number) to apply the credit to. (required)
     * @param  \Advantage\Client\Model\OrderSavedDirectDebitPaymentRequest $payment The direct debit payment details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceAddSavedDirectDebitPaymentRequest($debit_number, $payment)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceAddSavedDirectDebitPayment'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling invoiceAddSavedDirectDebitPayment'
            );
        }

        $resourcePath = '/invoices/{debitNumber}/payments/saved-bank-accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetInvoice
     *
     * Gets an invoice.
     *
     * @param  string $debit_number The debit number identifying the invoice to return (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\OrderInvoice
     */
    public function invoiceGetInvoice($debit_number)
    {
        list($response) = $this->invoiceGetInvoiceWithHttpInfo($debit_number);
        return $response;
    }

    /**
     * Operation invoiceGetInvoiceWithHttpInfo
     *
     * Gets an invoice.
     *
     * @param  string $debit_number The debit number identifying the invoice to return (required)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\OrderInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetInvoiceWithHttpInfo($debit_number)
    {
        $returnType = '\Advantage\Client\Model\OrderInvoice';
        $request = $this->invoiceGetInvoiceRequest($debit_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\OrderInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetInvoiceAsync
     *
     * Gets an invoice.
     *
     * @param  string $debit_number The debit number identifying the invoice to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetInvoiceAsync($debit_number)
    {
        return $this->invoiceGetInvoiceAsyncWithHttpInfo($debit_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetInvoiceAsyncWithHttpInfo
     *
     * Gets an invoice.
     *
     * @param  string $debit_number The debit number identifying the invoice to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetInvoiceAsyncWithHttpInfo($debit_number)
    {
        $returnType = '\Advantage\Client\Model\OrderInvoice';
        $request = $this->invoiceGetInvoiceRequest($debit_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetInvoice'
     *
     * @param  string $debit_number The debit number identifying the invoice to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceGetInvoiceRequest($debit_number)
    {
        // verify the required parameter 'debit_number' is set
        if ($debit_number === null || (is_array($debit_number) && count($debit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debit_number when calling invoiceGetInvoice'
            );
        }

        $resourcePath = '/invoices/{debitNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($debit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debitNumber' . '}',
                ObjectSerializer::toPathValue($debit_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceSearch
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultOrderInvoice
     */
    public function invoiceSearch($order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        list($response) = $this->invoiceSearchWithHttpInfo($order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);
        return $response;
    }

    /**
     * Operation invoiceSearchWithHttpInfo
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultOrderInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceSearchWithHttpInfo($order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultOrderInvoice';
        $request = $this->invoiceSearchRequest($order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultOrderInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceSearchAsync
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceSearchAsync($order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        return $this->invoiceSearchAsyncWithHttpInfo($order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceSearchAsyncWithHttpInfo
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceSearchAsyncWithHttpInfo($order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultOrderInvoice';
        $request = $this->invoiceSearchRequest($order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceSearch'
     *
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceSearchRequest($order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {

        $resourcePath = '/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_number !== null) {
            $queryParams['OrderNumber'] = ObjectSerializer::toQueryValue($order_number);
        }
        // query params
        if ($order_total !== null) {
            $queryParams['OrderTotal'] = ObjectSerializer::toQueryValue($order_total);
        }
        // query params
        if ($amount_paid !== null) {
            $queryParams['AmountPaid'] = ObjectSerializer::toQueryValue($amount_paid);
        }
        // query params
        if ($debit_fully_paid_flag !== null) {
            $queryParams['DebitFullyPaidFlag'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag);
        }
        // query params
        if ($due_date !== null) {
            $queryParams['DueDate'] = ObjectSerializer::toQueryValue($due_date);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['CurrencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }
        // query params
        if ($customer_number !== null) {
            $queryParams['CustomerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($order_number_not_equal !== null) {
            $queryParams['OrderNumber.NotEqual'] = ObjectSerializer::toQueryValue($order_number_not_equal);
        }
        // query params
        if ($order_number_less !== null) {
            $queryParams['OrderNumber.Less'] = ObjectSerializer::toQueryValue($order_number_less);
        }
        // query params
        if ($order_number_less_or_equal !== null) {
            $queryParams['OrderNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($order_number_less_or_equal);
        }
        // query params
        if ($order_number_greater !== null) {
            $queryParams['OrderNumber.Greater'] = ObjectSerializer::toQueryValue($order_number_greater);
        }
        // query params
        if ($order_number_greater_or_equal !== null) {
            $queryParams['OrderNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_number_greater_or_equal);
        }
        // query params
        if ($order_number_is_null !== null) {
            $queryParams['OrderNumber.IsNull'] = ObjectSerializer::toQueryValue($order_number_is_null);
        }
        // query params
        if ($order_number_is_not_null !== null) {
            $queryParams['OrderNumber.IsNotNull'] = ObjectSerializer::toQueryValue($order_number_is_not_null);
        }
        // query params
        if ($order_number_like !== null) {
            $queryParams['OrderNumber.Like'] = ObjectSerializer::toQueryValue($order_number_like);
        }
        // query params
        if ($order_number_not_like !== null) {
            $queryParams['OrderNumber.NotLike'] = ObjectSerializer::toQueryValue($order_number_not_like);
        }
        // query params
        if ($order_number_contains !== null) {
            $queryParams['OrderNumber.Contains'] = ObjectSerializer::toQueryValue($order_number_contains);
        }
        // query params
        if ($order_number_not_contains !== null) {
            $queryParams['OrderNumber.NotContains'] = ObjectSerializer::toQueryValue($order_number_not_contains);
        }
        // query params
        if ($order_number_starts_with !== null) {
            $queryParams['OrderNumber.StartsWith'] = ObjectSerializer::toQueryValue($order_number_starts_with);
        }
        // query params
        if ($order_number_not_starts_with !== null) {
            $queryParams['OrderNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($order_number_not_starts_with);
        }
        // query params
        if ($order_number_ends_with !== null) {
            $queryParams['OrderNumber.EndsWith'] = ObjectSerializer::toQueryValue($order_number_ends_with);
        }
        // query params
        if ($order_number_not_ends_with !== null) {
            $queryParams['OrderNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($order_number_not_ends_with);
        }
        // query params
        if ($order_number_in !== null) {
            $queryParams['OrderNumber.In'] = ObjectSerializer::toQueryValue($order_number_in);
        }
        // query params
        if ($order_number_between !== null) {
            $queryParams['OrderNumber.Between'] = ObjectSerializer::toQueryValue($order_number_between);
        }
        // query params
        if ($order_total_not_equal !== null) {
            $queryParams['OrderTotal.NotEqual'] = ObjectSerializer::toQueryValue($order_total_not_equal);
        }
        // query params
        if ($order_total_less !== null) {
            $queryParams['OrderTotal.Less'] = ObjectSerializer::toQueryValue($order_total_less);
        }
        // query params
        if ($order_total_less_or_equal !== null) {
            $queryParams['OrderTotal.LessOrEqual'] = ObjectSerializer::toQueryValue($order_total_less_or_equal);
        }
        // query params
        if ($order_total_greater !== null) {
            $queryParams['OrderTotal.Greater'] = ObjectSerializer::toQueryValue($order_total_greater);
        }
        // query params
        if ($order_total_greater_or_equal !== null) {
            $queryParams['OrderTotal.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_total_greater_or_equal);
        }
        // query params
        if ($order_total_is_null !== null) {
            $queryParams['OrderTotal.IsNull'] = ObjectSerializer::toQueryValue($order_total_is_null);
        }
        // query params
        if ($order_total_is_not_null !== null) {
            $queryParams['OrderTotal.IsNotNull'] = ObjectSerializer::toQueryValue($order_total_is_not_null);
        }
        // query params
        if ($order_total_like !== null) {
            $queryParams['OrderTotal.Like'] = ObjectSerializer::toQueryValue($order_total_like);
        }
        // query params
        if ($order_total_not_like !== null) {
            $queryParams['OrderTotal.NotLike'] = ObjectSerializer::toQueryValue($order_total_not_like);
        }
        // query params
        if ($order_total_contains !== null) {
            $queryParams['OrderTotal.Contains'] = ObjectSerializer::toQueryValue($order_total_contains);
        }
        // query params
        if ($order_total_not_contains !== null) {
            $queryParams['OrderTotal.NotContains'] = ObjectSerializer::toQueryValue($order_total_not_contains);
        }
        // query params
        if ($order_total_starts_with !== null) {
            $queryParams['OrderTotal.StartsWith'] = ObjectSerializer::toQueryValue($order_total_starts_with);
        }
        // query params
        if ($order_total_not_starts_with !== null) {
            $queryParams['OrderTotal.NotStartsWith'] = ObjectSerializer::toQueryValue($order_total_not_starts_with);
        }
        // query params
        if ($order_total_ends_with !== null) {
            $queryParams['OrderTotal.EndsWith'] = ObjectSerializer::toQueryValue($order_total_ends_with);
        }
        // query params
        if ($order_total_not_ends_with !== null) {
            $queryParams['OrderTotal.NotEndsWith'] = ObjectSerializer::toQueryValue($order_total_not_ends_with);
        }
        // query params
        if ($order_total_in !== null) {
            $queryParams['OrderTotal.In'] = ObjectSerializer::toQueryValue($order_total_in);
        }
        // query params
        if ($order_total_between !== null) {
            $queryParams['OrderTotal.Between'] = ObjectSerializer::toQueryValue($order_total_between);
        }
        // query params
        if ($amount_paid_not_equal !== null) {
            $queryParams['AmountPaid.NotEqual'] = ObjectSerializer::toQueryValue($amount_paid_not_equal);
        }
        // query params
        if ($amount_paid_less !== null) {
            $queryParams['AmountPaid.Less'] = ObjectSerializer::toQueryValue($amount_paid_less);
        }
        // query params
        if ($amount_paid_less_or_equal !== null) {
            $queryParams['AmountPaid.LessOrEqual'] = ObjectSerializer::toQueryValue($amount_paid_less_or_equal);
        }
        // query params
        if ($amount_paid_greater !== null) {
            $queryParams['AmountPaid.Greater'] = ObjectSerializer::toQueryValue($amount_paid_greater);
        }
        // query params
        if ($amount_paid_greater_or_equal !== null) {
            $queryParams['AmountPaid.GreaterOrEqual'] = ObjectSerializer::toQueryValue($amount_paid_greater_or_equal);
        }
        // query params
        if ($amount_paid_is_null !== null) {
            $queryParams['AmountPaid.IsNull'] = ObjectSerializer::toQueryValue($amount_paid_is_null);
        }
        // query params
        if ($amount_paid_is_not_null !== null) {
            $queryParams['AmountPaid.IsNotNull'] = ObjectSerializer::toQueryValue($amount_paid_is_not_null);
        }
        // query params
        if ($amount_paid_like !== null) {
            $queryParams['AmountPaid.Like'] = ObjectSerializer::toQueryValue($amount_paid_like);
        }
        // query params
        if ($amount_paid_not_like !== null) {
            $queryParams['AmountPaid.NotLike'] = ObjectSerializer::toQueryValue($amount_paid_not_like);
        }
        // query params
        if ($amount_paid_contains !== null) {
            $queryParams['AmountPaid.Contains'] = ObjectSerializer::toQueryValue($amount_paid_contains);
        }
        // query params
        if ($amount_paid_not_contains !== null) {
            $queryParams['AmountPaid.NotContains'] = ObjectSerializer::toQueryValue($amount_paid_not_contains);
        }
        // query params
        if ($amount_paid_starts_with !== null) {
            $queryParams['AmountPaid.StartsWith'] = ObjectSerializer::toQueryValue($amount_paid_starts_with);
        }
        // query params
        if ($amount_paid_not_starts_with !== null) {
            $queryParams['AmountPaid.NotStartsWith'] = ObjectSerializer::toQueryValue($amount_paid_not_starts_with);
        }
        // query params
        if ($amount_paid_ends_with !== null) {
            $queryParams['AmountPaid.EndsWith'] = ObjectSerializer::toQueryValue($amount_paid_ends_with);
        }
        // query params
        if ($amount_paid_not_ends_with !== null) {
            $queryParams['AmountPaid.NotEndsWith'] = ObjectSerializer::toQueryValue($amount_paid_not_ends_with);
        }
        // query params
        if ($amount_paid_in !== null) {
            $queryParams['AmountPaid.In'] = ObjectSerializer::toQueryValue($amount_paid_in);
        }
        // query params
        if ($amount_paid_between !== null) {
            $queryParams['AmountPaid.Between'] = ObjectSerializer::toQueryValue($amount_paid_between);
        }
        // query params
        if ($debit_fully_paid_flag_not_equal !== null) {
            $queryParams['DebitFullyPaidFlag.NotEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_equal);
        }
        // query params
        if ($debit_fully_paid_flag_less !== null) {
            $queryParams['DebitFullyPaidFlag.Less'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_less);
        }
        // query params
        if ($debit_fully_paid_flag_less_or_equal !== null) {
            $queryParams['DebitFullyPaidFlag.LessOrEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_less_or_equal);
        }
        // query params
        if ($debit_fully_paid_flag_greater !== null) {
            $queryParams['DebitFullyPaidFlag.Greater'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_greater);
        }
        // query params
        if ($debit_fully_paid_flag_greater_or_equal !== null) {
            $queryParams['DebitFullyPaidFlag.GreaterOrEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_greater_or_equal);
        }
        // query params
        if ($debit_fully_paid_flag_is_null !== null) {
            $queryParams['DebitFullyPaidFlag.IsNull'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_is_null);
        }
        // query params
        if ($debit_fully_paid_flag_is_not_null !== null) {
            $queryParams['DebitFullyPaidFlag.IsNotNull'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_is_not_null);
        }
        // query params
        if ($debit_fully_paid_flag_like !== null) {
            $queryParams['DebitFullyPaidFlag.Like'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_like);
        }
        // query params
        if ($debit_fully_paid_flag_not_like !== null) {
            $queryParams['DebitFullyPaidFlag.NotLike'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_like);
        }
        // query params
        if ($debit_fully_paid_flag_contains !== null) {
            $queryParams['DebitFullyPaidFlag.Contains'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_contains);
        }
        // query params
        if ($debit_fully_paid_flag_not_contains !== null) {
            $queryParams['DebitFullyPaidFlag.NotContains'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_contains);
        }
        // query params
        if ($debit_fully_paid_flag_starts_with !== null) {
            $queryParams['DebitFullyPaidFlag.StartsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_starts_with);
        }
        // query params
        if ($debit_fully_paid_flag_not_starts_with !== null) {
            $queryParams['DebitFullyPaidFlag.NotStartsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_starts_with);
        }
        // query params
        if ($debit_fully_paid_flag_ends_with !== null) {
            $queryParams['DebitFullyPaidFlag.EndsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_ends_with);
        }
        // query params
        if ($debit_fully_paid_flag_not_ends_with !== null) {
            $queryParams['DebitFullyPaidFlag.NotEndsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_ends_with);
        }
        // query params
        if ($debit_fully_paid_flag_in !== null) {
            $queryParams['DebitFullyPaidFlag.In'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_in);
        }
        // query params
        if ($debit_fully_paid_flag_between !== null) {
            $queryParams['DebitFullyPaidFlag.Between'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_between);
        }
        // query params
        if ($due_date_not_equal !== null) {
            $queryParams['DueDate.NotEqual'] = ObjectSerializer::toQueryValue($due_date_not_equal);
        }
        // query params
        if ($due_date_less !== null) {
            $queryParams['DueDate.Less'] = ObjectSerializer::toQueryValue($due_date_less);
        }
        // query params
        if ($due_date_less_or_equal !== null) {
            $queryParams['DueDate.LessOrEqual'] = ObjectSerializer::toQueryValue($due_date_less_or_equal);
        }
        // query params
        if ($due_date_greater !== null) {
            $queryParams['DueDate.Greater'] = ObjectSerializer::toQueryValue($due_date_greater);
        }
        // query params
        if ($due_date_greater_or_equal !== null) {
            $queryParams['DueDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($due_date_greater_or_equal);
        }
        // query params
        if ($due_date_is_null !== null) {
            $queryParams['DueDate.IsNull'] = ObjectSerializer::toQueryValue($due_date_is_null);
        }
        // query params
        if ($due_date_is_not_null !== null) {
            $queryParams['DueDate.IsNotNull'] = ObjectSerializer::toQueryValue($due_date_is_not_null);
        }
        // query params
        if ($due_date_like !== null) {
            $queryParams['DueDate.Like'] = ObjectSerializer::toQueryValue($due_date_like);
        }
        // query params
        if ($due_date_not_like !== null) {
            $queryParams['DueDate.NotLike'] = ObjectSerializer::toQueryValue($due_date_not_like);
        }
        // query params
        if ($due_date_contains !== null) {
            $queryParams['DueDate.Contains'] = ObjectSerializer::toQueryValue($due_date_contains);
        }
        // query params
        if ($due_date_not_contains !== null) {
            $queryParams['DueDate.NotContains'] = ObjectSerializer::toQueryValue($due_date_not_contains);
        }
        // query params
        if ($due_date_starts_with !== null) {
            $queryParams['DueDate.StartsWith'] = ObjectSerializer::toQueryValue($due_date_starts_with);
        }
        // query params
        if ($due_date_not_starts_with !== null) {
            $queryParams['DueDate.NotStartsWith'] = ObjectSerializer::toQueryValue($due_date_not_starts_with);
        }
        // query params
        if ($due_date_ends_with !== null) {
            $queryParams['DueDate.EndsWith'] = ObjectSerializer::toQueryValue($due_date_ends_with);
        }
        // query params
        if ($due_date_not_ends_with !== null) {
            $queryParams['DueDate.NotEndsWith'] = ObjectSerializer::toQueryValue($due_date_not_ends_with);
        }
        // query params
        if ($due_date_in !== null) {
            $queryParams['DueDate.In'] = ObjectSerializer::toQueryValue($due_date_in);
        }
        // query params
        if ($due_date_between !== null) {
            $queryParams['DueDate.Between'] = ObjectSerializer::toQueryValue($due_date_between);
        }
        // query params
        if ($currency_code_not_equal !== null) {
            $queryParams['CurrencyCode.NotEqual'] = ObjectSerializer::toQueryValue($currency_code_not_equal);
        }
        // query params
        if ($currency_code_less !== null) {
            $queryParams['CurrencyCode.Less'] = ObjectSerializer::toQueryValue($currency_code_less);
        }
        // query params
        if ($currency_code_less_or_equal !== null) {
            $queryParams['CurrencyCode.LessOrEqual'] = ObjectSerializer::toQueryValue($currency_code_less_or_equal);
        }
        // query params
        if ($currency_code_greater !== null) {
            $queryParams['CurrencyCode.Greater'] = ObjectSerializer::toQueryValue($currency_code_greater);
        }
        // query params
        if ($currency_code_greater_or_equal !== null) {
            $queryParams['CurrencyCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($currency_code_greater_or_equal);
        }
        // query params
        if ($currency_code_is_null !== null) {
            $queryParams['CurrencyCode.IsNull'] = ObjectSerializer::toQueryValue($currency_code_is_null);
        }
        // query params
        if ($currency_code_is_not_null !== null) {
            $queryParams['CurrencyCode.IsNotNull'] = ObjectSerializer::toQueryValue($currency_code_is_not_null);
        }
        // query params
        if ($currency_code_like !== null) {
            $queryParams['CurrencyCode.Like'] = ObjectSerializer::toQueryValue($currency_code_like);
        }
        // query params
        if ($currency_code_not_like !== null) {
            $queryParams['CurrencyCode.NotLike'] = ObjectSerializer::toQueryValue($currency_code_not_like);
        }
        // query params
        if ($currency_code_contains !== null) {
            $queryParams['CurrencyCode.Contains'] = ObjectSerializer::toQueryValue($currency_code_contains);
        }
        // query params
        if ($currency_code_not_contains !== null) {
            $queryParams['CurrencyCode.NotContains'] = ObjectSerializer::toQueryValue($currency_code_not_contains);
        }
        // query params
        if ($currency_code_starts_with !== null) {
            $queryParams['CurrencyCode.StartsWith'] = ObjectSerializer::toQueryValue($currency_code_starts_with);
        }
        // query params
        if ($currency_code_not_starts_with !== null) {
            $queryParams['CurrencyCode.NotStartsWith'] = ObjectSerializer::toQueryValue($currency_code_not_starts_with);
        }
        // query params
        if ($currency_code_ends_with !== null) {
            $queryParams['CurrencyCode.EndsWith'] = ObjectSerializer::toQueryValue($currency_code_ends_with);
        }
        // query params
        if ($currency_code_not_ends_with !== null) {
            $queryParams['CurrencyCode.NotEndsWith'] = ObjectSerializer::toQueryValue($currency_code_not_ends_with);
        }
        // query params
        if ($currency_code_in !== null) {
            $queryParams['CurrencyCode.In'] = ObjectSerializer::toQueryValue($currency_code_in);
        }
        // query params
        if ($currency_code_between !== null) {
            $queryParams['CurrencyCode.Between'] = ObjectSerializer::toQueryValue($currency_code_between);
        }
        // query params
        if ($customer_number_not_equal !== null) {
            $queryParams['CustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($customer_number_not_equal);
        }
        // query params
        if ($customer_number_less !== null) {
            $queryParams['CustomerNumber.Less'] = ObjectSerializer::toQueryValue($customer_number_less);
        }
        // query params
        if ($customer_number_less_or_equal !== null) {
            $queryParams['CustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_number_less_or_equal);
        }
        // query params
        if ($customer_number_greater !== null) {
            $queryParams['CustomerNumber.Greater'] = ObjectSerializer::toQueryValue($customer_number_greater);
        }
        // query params
        if ($customer_number_greater_or_equal !== null) {
            $queryParams['CustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_number_greater_or_equal);
        }
        // query params
        if ($customer_number_is_null !== null) {
            $queryParams['CustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($customer_number_is_null);
        }
        // query params
        if ($customer_number_is_not_null !== null) {
            $queryParams['CustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($customer_number_is_not_null);
        }
        // query params
        if ($customer_number_like !== null) {
            $queryParams['CustomerNumber.Like'] = ObjectSerializer::toQueryValue($customer_number_like);
        }
        // query params
        if ($customer_number_not_like !== null) {
            $queryParams['CustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($customer_number_not_like);
        }
        // query params
        if ($customer_number_contains !== null) {
            $queryParams['CustomerNumber.Contains'] = ObjectSerializer::toQueryValue($customer_number_contains);
        }
        // query params
        if ($customer_number_not_contains !== null) {
            $queryParams['CustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($customer_number_not_contains);
        }
        // query params
        if ($customer_number_starts_with !== null) {
            $queryParams['CustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($customer_number_starts_with);
        }
        // query params
        if ($customer_number_not_starts_with !== null) {
            $queryParams['CustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_number_not_starts_with);
        }
        // query params
        if ($customer_number_ends_with !== null) {
            $queryParams['CustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($customer_number_ends_with);
        }
        // query params
        if ($customer_number_not_ends_with !== null) {
            $queryParams['CustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_number_not_ends_with);
        }
        // query params
        if ($customer_number_in !== null) {
            $queryParams['CustomerNumber.In'] = ObjectSerializer::toQueryValue($customer_number_in);
        }
        // query params
        if ($customer_number_between !== null) {
            $queryParams['CustomerNumber.Between'] = ObjectSerializer::toQueryValue($customer_number_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceSearchByCustomer
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $customer_number Customer number (required)
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number2 Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Advantage\Client\Model\SearchResultOrderInvoice
     */
    public function invoiceSearchByCustomer($customer_number, $order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number2 = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        list($response) = $this->invoiceSearchByCustomerWithHttpInfo($customer_number, $order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number2, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);
        return $response;
    }

    /**
     * Operation invoiceSearchByCustomerWithHttpInfo
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $customer_number Customer number (required)
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number2 Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \Advantage\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Advantage\Client\Model\SearchResultOrderInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceSearchByCustomerWithHttpInfo($customer_number, $order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number2 = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultOrderInvoice';
        $request = $this->invoiceSearchByCustomerRequest($customer_number, $order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number2, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Advantage\Client\Model\SearchResultOrderInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceSearchByCustomerAsync
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $customer_number Customer number (required)
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number2 Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceSearchByCustomerAsync($customer_number, $order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number2 = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        return $this->invoiceSearchByCustomerAsyncWithHttpInfo($customer_number, $order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number2, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceSearchByCustomerAsyncWithHttpInfo
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1
     *
     * @param  string $customer_number Customer number (required)
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number2 Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceSearchByCustomerAsyncWithHttpInfo($customer_number, $order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number2 = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        $returnType = '\Advantage\Client\Model\SearchResultOrderInvoice';
        $request = $this->invoiceSearchByCustomerRequest($customer_number, $order_number, $order_total, $amount_paid, $debit_fully_paid_flag, $due_date, $currency_code, $customer_number2, $billing_organization_code, $order_number_not_equal, $order_number_less, $order_number_less_or_equal, $order_number_greater, $order_number_greater_or_equal, $order_number_is_null, $order_number_is_not_null, $order_number_like, $order_number_not_like, $order_number_contains, $order_number_not_contains, $order_number_starts_with, $order_number_not_starts_with, $order_number_ends_with, $order_number_not_ends_with, $order_number_in, $order_number_between, $order_total_not_equal, $order_total_less, $order_total_less_or_equal, $order_total_greater, $order_total_greater_or_equal, $order_total_is_null, $order_total_is_not_null, $order_total_like, $order_total_not_like, $order_total_contains, $order_total_not_contains, $order_total_starts_with, $order_total_not_starts_with, $order_total_ends_with, $order_total_not_ends_with, $order_total_in, $order_total_between, $amount_paid_not_equal, $amount_paid_less, $amount_paid_less_or_equal, $amount_paid_greater, $amount_paid_greater_or_equal, $amount_paid_is_null, $amount_paid_is_not_null, $amount_paid_like, $amount_paid_not_like, $amount_paid_contains, $amount_paid_not_contains, $amount_paid_starts_with, $amount_paid_not_starts_with, $amount_paid_ends_with, $amount_paid_not_ends_with, $amount_paid_in, $amount_paid_between, $debit_fully_paid_flag_not_equal, $debit_fully_paid_flag_less, $debit_fully_paid_flag_less_or_equal, $debit_fully_paid_flag_greater, $debit_fully_paid_flag_greater_or_equal, $debit_fully_paid_flag_is_null, $debit_fully_paid_flag_is_not_null, $debit_fully_paid_flag_like, $debit_fully_paid_flag_not_like, $debit_fully_paid_flag_contains, $debit_fully_paid_flag_not_contains, $debit_fully_paid_flag_starts_with, $debit_fully_paid_flag_not_starts_with, $debit_fully_paid_flag_ends_with, $debit_fully_paid_flag_not_ends_with, $debit_fully_paid_flag_in, $debit_fully_paid_flag_between, $due_date_not_equal, $due_date_less, $due_date_less_or_equal, $due_date_greater, $due_date_greater_or_equal, $due_date_is_null, $due_date_is_not_null, $due_date_like, $due_date_not_like, $due_date_contains, $due_date_not_contains, $due_date_starts_with, $due_date_not_starts_with, $due_date_ends_with, $due_date_not_ends_with, $due_date_in, $due_date_between, $currency_code_not_equal, $currency_code_less, $currency_code_less_or_equal, $currency_code_greater, $currency_code_greater_or_equal, $currency_code_is_null, $currency_code_is_not_null, $currency_code_like, $currency_code_not_like, $currency_code_contains, $currency_code_not_contains, $currency_code_starts_with, $currency_code_not_starts_with, $currency_code_ends_with, $currency_code_not_ends_with, $currency_code_in, $currency_code_between, $customer_number_not_equal, $customer_number_less, $customer_number_less_or_equal, $customer_number_greater, $customer_number_greater_or_equal, $customer_number_is_null, $customer_number_is_not_null, $customer_number_like, $customer_number_not_like, $customer_number_contains, $customer_number_not_contains, $customer_number_starts_with, $customer_number_not_starts_with, $customer_number_ends_with, $customer_number_not_ends_with, $customer_number_in, $customer_number_between, $billing_organization_code_not_equal, $billing_organization_code_less, $billing_organization_code_less_or_equal, $billing_organization_code_greater, $billing_organization_code_greater_or_equal, $billing_organization_code_is_null, $billing_organization_code_is_not_null, $billing_organization_code_like, $billing_organization_code_not_like, $billing_organization_code_contains, $billing_organization_code_not_contains, $billing_organization_code_starts_with, $billing_organization_code_not_starts_with, $billing_organization_code_ends_with, $billing_organization_code_not_ends_with, $billing_organization_code_in, $billing_organization_code_between);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceSearchByCustomer'
     *
     * @param  string $customer_number Customer number (required)
     * @param  string $order_number Filter on DBT-NBR using &#39;Equal&#39; operator (optional)
     * @param  string $order_total Filter on TOT-DBT using &#39;Equal&#39; operator (optional)
     * @param  string $amount_paid Filter on TOT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $debit_fully_paid_flag Filter on DBT-PAD using &#39;Equal&#39; operator (optional)
     * @param  string $due_date Filter on DUE-INF using &#39;Equal&#39; operator (optional)
     * @param  string $currency_code Filter on BIL-CUR using &#39;Equal&#39; operator (optional)
     * @param  string $customer_number2 Filter on SRC-CTM using &#39;Equal&#39; operator (optional)
     * @param  string $billing_organization_code Filter on BIL-ORG using &#39;Equal&#39; operator (optional)
     * @param  string $order_number_not_equal Filter on DBT-NBR using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_number_less Filter on DBT-NBR using &#39;Less&#39; operator (optional)
     * @param  string $order_number_less_or_equal Filter on DBT-NBR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_number_greater Filter on DBT-NBR using &#39;Greater&#39; operator (optional)
     * @param  string $order_number_greater_or_equal Filter on DBT-NBR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_number_is_null Filter on DBT-NBR using &#39;IsNull&#39; operator (optional)
     * @param  string $order_number_is_not_null Filter on DBT-NBR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_number_like Filter on DBT-NBR using &#39;Like&#39; operator (optional)
     * @param  string $order_number_not_like Filter on DBT-NBR using &#39;NotLike&#39; operator (optional)
     * @param  string $order_number_contains Filter on DBT-NBR using &#39;Contains&#39; operator (optional)
     * @param  string $order_number_not_contains Filter on DBT-NBR using &#39;NotContains&#39; operator (optional)
     * @param  string $order_number_starts_with Filter on DBT-NBR using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_number_not_starts_with Filter on DBT-NBR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_number_ends_with Filter on DBT-NBR using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_number_not_ends_with Filter on DBT-NBR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_number_in Filter on DBT-NBR using &#39;In&#39; operator (optional)
     * @param  string $order_number_between Filter on DBT-NBR using &#39;Between&#39; operator (optional)
     * @param  string $order_total_not_equal Filter on TOT-DBT using &#39;NotEqual&#39; operator (optional)
     * @param  string $order_total_less Filter on TOT-DBT using &#39;Less&#39; operator (optional)
     * @param  string $order_total_less_or_equal Filter on TOT-DBT using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $order_total_greater Filter on TOT-DBT using &#39;Greater&#39; operator (optional)
     * @param  string $order_total_greater_or_equal Filter on TOT-DBT using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $order_total_is_null Filter on TOT-DBT using &#39;IsNull&#39; operator (optional)
     * @param  string $order_total_is_not_null Filter on TOT-DBT using &#39;IsNotNull&#39; operator (optional)
     * @param  string $order_total_like Filter on TOT-DBT using &#39;Like&#39; operator (optional)
     * @param  string $order_total_not_like Filter on TOT-DBT using &#39;NotLike&#39; operator (optional)
     * @param  string $order_total_contains Filter on TOT-DBT using &#39;Contains&#39; operator (optional)
     * @param  string $order_total_not_contains Filter on TOT-DBT using &#39;NotContains&#39; operator (optional)
     * @param  string $order_total_starts_with Filter on TOT-DBT using &#39;StartsWith&#39; operator (optional)
     * @param  string $order_total_not_starts_with Filter on TOT-DBT using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $order_total_ends_with Filter on TOT-DBT using &#39;EndsWith&#39; operator (optional)
     * @param  string $order_total_not_ends_with Filter on TOT-DBT using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $order_total_in Filter on TOT-DBT using &#39;In&#39; operator (optional)
     * @param  string $order_total_between Filter on TOT-DBT using &#39;Between&#39; operator (optional)
     * @param  string $amount_paid_not_equal Filter on TOT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $amount_paid_less Filter on TOT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $amount_paid_less_or_equal Filter on TOT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $amount_paid_greater Filter on TOT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $amount_paid_greater_or_equal Filter on TOT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $amount_paid_is_null Filter on TOT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $amount_paid_is_not_null Filter on TOT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $amount_paid_like Filter on TOT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $amount_paid_not_like Filter on TOT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $amount_paid_contains Filter on TOT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $amount_paid_not_contains Filter on TOT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $amount_paid_starts_with Filter on TOT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $amount_paid_not_starts_with Filter on TOT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $amount_paid_ends_with Filter on TOT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $amount_paid_not_ends_with Filter on TOT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $amount_paid_in Filter on TOT-PAD using &#39;In&#39; operator (optional)
     * @param  string $amount_paid_between Filter on TOT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_equal Filter on DBT-PAD using &#39;NotEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less Filter on DBT-PAD using &#39;Less&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_less_or_equal Filter on DBT-PAD using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater Filter on DBT-PAD using &#39;Greater&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_greater_or_equal Filter on DBT-PAD using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_null Filter on DBT-PAD using &#39;IsNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_is_not_null Filter on DBT-PAD using &#39;IsNotNull&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_like Filter on DBT-PAD using &#39;Like&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_like Filter on DBT-PAD using &#39;NotLike&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_contains Filter on DBT-PAD using &#39;Contains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_contains Filter on DBT-PAD using &#39;NotContains&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_starts_with Filter on DBT-PAD using &#39;StartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_starts_with Filter on DBT-PAD using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_ends_with Filter on DBT-PAD using &#39;EndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_not_ends_with Filter on DBT-PAD using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_in Filter on DBT-PAD using &#39;In&#39; operator (optional)
     * @param  string $debit_fully_paid_flag_between Filter on DBT-PAD using &#39;Between&#39; operator (optional)
     * @param  string $due_date_not_equal Filter on DUE-INF using &#39;NotEqual&#39; operator (optional)
     * @param  string $due_date_less Filter on DUE-INF using &#39;Less&#39; operator (optional)
     * @param  string $due_date_less_or_equal Filter on DUE-INF using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $due_date_greater Filter on DUE-INF using &#39;Greater&#39; operator (optional)
     * @param  string $due_date_greater_or_equal Filter on DUE-INF using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $due_date_is_null Filter on DUE-INF using &#39;IsNull&#39; operator (optional)
     * @param  string $due_date_is_not_null Filter on DUE-INF using &#39;IsNotNull&#39; operator (optional)
     * @param  string $due_date_like Filter on DUE-INF using &#39;Like&#39; operator (optional)
     * @param  string $due_date_not_like Filter on DUE-INF using &#39;NotLike&#39; operator (optional)
     * @param  string $due_date_contains Filter on DUE-INF using &#39;Contains&#39; operator (optional)
     * @param  string $due_date_not_contains Filter on DUE-INF using &#39;NotContains&#39; operator (optional)
     * @param  string $due_date_starts_with Filter on DUE-INF using &#39;StartsWith&#39; operator (optional)
     * @param  string $due_date_not_starts_with Filter on DUE-INF using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $due_date_ends_with Filter on DUE-INF using &#39;EndsWith&#39; operator (optional)
     * @param  string $due_date_not_ends_with Filter on DUE-INF using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $due_date_in Filter on DUE-INF using &#39;In&#39; operator (optional)
     * @param  string $due_date_between Filter on DUE-INF using &#39;Between&#39; operator (optional)
     * @param  string $currency_code_not_equal Filter on BIL-CUR using &#39;NotEqual&#39; operator (optional)
     * @param  string $currency_code_less Filter on BIL-CUR using &#39;Less&#39; operator (optional)
     * @param  string $currency_code_less_or_equal Filter on BIL-CUR using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $currency_code_greater Filter on BIL-CUR using &#39;Greater&#39; operator (optional)
     * @param  string $currency_code_greater_or_equal Filter on BIL-CUR using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $currency_code_is_null Filter on BIL-CUR using &#39;IsNull&#39; operator (optional)
     * @param  string $currency_code_is_not_null Filter on BIL-CUR using &#39;IsNotNull&#39; operator (optional)
     * @param  string $currency_code_like Filter on BIL-CUR using &#39;Like&#39; operator (optional)
     * @param  string $currency_code_not_like Filter on BIL-CUR using &#39;NotLike&#39; operator (optional)
     * @param  string $currency_code_contains Filter on BIL-CUR using &#39;Contains&#39; operator (optional)
     * @param  string $currency_code_not_contains Filter on BIL-CUR using &#39;NotContains&#39; operator (optional)
     * @param  string $currency_code_starts_with Filter on BIL-CUR using &#39;StartsWith&#39; operator (optional)
     * @param  string $currency_code_not_starts_with Filter on BIL-CUR using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $currency_code_ends_with Filter on BIL-CUR using &#39;EndsWith&#39; operator (optional)
     * @param  string $currency_code_not_ends_with Filter on BIL-CUR using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $currency_code_in Filter on BIL-CUR using &#39;In&#39; operator (optional)
     * @param  string $currency_code_between Filter on BIL-CUR using &#39;Between&#39; operator (optional)
     * @param  string $customer_number_not_equal Filter on SRC-CTM using &#39;NotEqual&#39; operator (optional)
     * @param  string $customer_number_less Filter on SRC-CTM using &#39;Less&#39; operator (optional)
     * @param  string $customer_number_less_or_equal Filter on SRC-CTM using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $customer_number_greater Filter on SRC-CTM using &#39;Greater&#39; operator (optional)
     * @param  string $customer_number_greater_or_equal Filter on SRC-CTM using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $customer_number_is_null Filter on SRC-CTM using &#39;IsNull&#39; operator (optional)
     * @param  string $customer_number_is_not_null Filter on SRC-CTM using &#39;IsNotNull&#39; operator (optional)
     * @param  string $customer_number_like Filter on SRC-CTM using &#39;Like&#39; operator (optional)
     * @param  string $customer_number_not_like Filter on SRC-CTM using &#39;NotLike&#39; operator (optional)
     * @param  string $customer_number_contains Filter on SRC-CTM using &#39;Contains&#39; operator (optional)
     * @param  string $customer_number_not_contains Filter on SRC-CTM using &#39;NotContains&#39; operator (optional)
     * @param  string $customer_number_starts_with Filter on SRC-CTM using &#39;StartsWith&#39; operator (optional)
     * @param  string $customer_number_not_starts_with Filter on SRC-CTM using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $customer_number_ends_with Filter on SRC-CTM using &#39;EndsWith&#39; operator (optional)
     * @param  string $customer_number_not_ends_with Filter on SRC-CTM using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $customer_number_in Filter on SRC-CTM using &#39;In&#39; operator (optional)
     * @param  string $customer_number_between Filter on SRC-CTM using &#39;Between&#39; operator (optional)
     * @param  string $billing_organization_code_not_equal Filter on BIL-ORG using &#39;NotEqual&#39; operator (optional)
     * @param  string $billing_organization_code_less Filter on BIL-ORG using &#39;Less&#39; operator (optional)
     * @param  string $billing_organization_code_less_or_equal Filter on BIL-ORG using &#39;LessOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_greater Filter on BIL-ORG using &#39;Greater&#39; operator (optional)
     * @param  string $billing_organization_code_greater_or_equal Filter on BIL-ORG using &#39;GreaterOrEqual&#39; operator (optional)
     * @param  string $billing_organization_code_is_null Filter on BIL-ORG using &#39;IsNull&#39; operator (optional)
     * @param  string $billing_organization_code_is_not_null Filter on BIL-ORG using &#39;IsNotNull&#39; operator (optional)
     * @param  string $billing_organization_code_like Filter on BIL-ORG using &#39;Like&#39; operator (optional)
     * @param  string $billing_organization_code_not_like Filter on BIL-ORG using &#39;NotLike&#39; operator (optional)
     * @param  string $billing_organization_code_contains Filter on BIL-ORG using &#39;Contains&#39; operator (optional)
     * @param  string $billing_organization_code_not_contains Filter on BIL-ORG using &#39;NotContains&#39; operator (optional)
     * @param  string $billing_organization_code_starts_with Filter on BIL-ORG using &#39;StartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_starts_with Filter on BIL-ORG using &#39;NotStartsWith&#39; operator (optional)
     * @param  string $billing_organization_code_ends_with Filter on BIL-ORG using &#39;EndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_not_ends_with Filter on BIL-ORG using &#39;NotEndsWith&#39; operator (optional)
     * @param  string $billing_organization_code_in Filter on BIL-ORG using &#39;In&#39; operator (optional)
     * @param  string $billing_organization_code_between Filter on BIL-ORG using &#39;Between&#39; operator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceSearchByCustomerRequest($customer_number, $order_number = null, $order_total = null, $amount_paid = null, $debit_fully_paid_flag = null, $due_date = null, $currency_code = null, $customer_number2 = null, $billing_organization_code = null, $order_number_not_equal = null, $order_number_less = null, $order_number_less_or_equal = null, $order_number_greater = null, $order_number_greater_or_equal = null, $order_number_is_null = null, $order_number_is_not_null = null, $order_number_like = null, $order_number_not_like = null, $order_number_contains = null, $order_number_not_contains = null, $order_number_starts_with = null, $order_number_not_starts_with = null, $order_number_ends_with = null, $order_number_not_ends_with = null, $order_number_in = null, $order_number_between = null, $order_total_not_equal = null, $order_total_less = null, $order_total_less_or_equal = null, $order_total_greater = null, $order_total_greater_or_equal = null, $order_total_is_null = null, $order_total_is_not_null = null, $order_total_like = null, $order_total_not_like = null, $order_total_contains = null, $order_total_not_contains = null, $order_total_starts_with = null, $order_total_not_starts_with = null, $order_total_ends_with = null, $order_total_not_ends_with = null, $order_total_in = null, $order_total_between = null, $amount_paid_not_equal = null, $amount_paid_less = null, $amount_paid_less_or_equal = null, $amount_paid_greater = null, $amount_paid_greater_or_equal = null, $amount_paid_is_null = null, $amount_paid_is_not_null = null, $amount_paid_like = null, $amount_paid_not_like = null, $amount_paid_contains = null, $amount_paid_not_contains = null, $amount_paid_starts_with = null, $amount_paid_not_starts_with = null, $amount_paid_ends_with = null, $amount_paid_not_ends_with = null, $amount_paid_in = null, $amount_paid_between = null, $debit_fully_paid_flag_not_equal = null, $debit_fully_paid_flag_less = null, $debit_fully_paid_flag_less_or_equal = null, $debit_fully_paid_flag_greater = null, $debit_fully_paid_flag_greater_or_equal = null, $debit_fully_paid_flag_is_null = null, $debit_fully_paid_flag_is_not_null = null, $debit_fully_paid_flag_like = null, $debit_fully_paid_flag_not_like = null, $debit_fully_paid_flag_contains = null, $debit_fully_paid_flag_not_contains = null, $debit_fully_paid_flag_starts_with = null, $debit_fully_paid_flag_not_starts_with = null, $debit_fully_paid_flag_ends_with = null, $debit_fully_paid_flag_not_ends_with = null, $debit_fully_paid_flag_in = null, $debit_fully_paid_flag_between = null, $due_date_not_equal = null, $due_date_less = null, $due_date_less_or_equal = null, $due_date_greater = null, $due_date_greater_or_equal = null, $due_date_is_null = null, $due_date_is_not_null = null, $due_date_like = null, $due_date_not_like = null, $due_date_contains = null, $due_date_not_contains = null, $due_date_starts_with = null, $due_date_not_starts_with = null, $due_date_ends_with = null, $due_date_not_ends_with = null, $due_date_in = null, $due_date_between = null, $currency_code_not_equal = null, $currency_code_less = null, $currency_code_less_or_equal = null, $currency_code_greater = null, $currency_code_greater_or_equal = null, $currency_code_is_null = null, $currency_code_is_not_null = null, $currency_code_like = null, $currency_code_not_like = null, $currency_code_contains = null, $currency_code_not_contains = null, $currency_code_starts_with = null, $currency_code_not_starts_with = null, $currency_code_ends_with = null, $currency_code_not_ends_with = null, $currency_code_in = null, $currency_code_between = null, $customer_number_not_equal = null, $customer_number_less = null, $customer_number_less_or_equal = null, $customer_number_greater = null, $customer_number_greater_or_equal = null, $customer_number_is_null = null, $customer_number_is_not_null = null, $customer_number_like = null, $customer_number_not_like = null, $customer_number_contains = null, $customer_number_not_contains = null, $customer_number_starts_with = null, $customer_number_not_starts_with = null, $customer_number_ends_with = null, $customer_number_not_ends_with = null, $customer_number_in = null, $customer_number_between = null, $billing_organization_code_not_equal = null, $billing_organization_code_less = null, $billing_organization_code_less_or_equal = null, $billing_organization_code_greater = null, $billing_organization_code_greater_or_equal = null, $billing_organization_code_is_null = null, $billing_organization_code_is_not_null = null, $billing_organization_code_like = null, $billing_organization_code_not_like = null, $billing_organization_code_contains = null, $billing_organization_code_not_contains = null, $billing_organization_code_starts_with = null, $billing_organization_code_not_starts_with = null, $billing_organization_code_ends_with = null, $billing_organization_code_not_ends_with = null, $billing_organization_code_in = null, $billing_organization_code_between = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling invoiceSearchByCustomer'
            );
        }

        $resourcePath = '/customers/{customerNumber}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_number !== null) {
            $queryParams['OrderNumber'] = ObjectSerializer::toQueryValue($order_number);
        }
        // query params
        if ($order_total !== null) {
            $queryParams['OrderTotal'] = ObjectSerializer::toQueryValue($order_total);
        }
        // query params
        if ($amount_paid !== null) {
            $queryParams['AmountPaid'] = ObjectSerializer::toQueryValue($amount_paid);
        }
        // query params
        if ($debit_fully_paid_flag !== null) {
            $queryParams['DebitFullyPaidFlag'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag);
        }
        // query params
        if ($due_date !== null) {
            $queryParams['DueDate'] = ObjectSerializer::toQueryValue($due_date);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['CurrencyCode'] = ObjectSerializer::toQueryValue($currency_code);
        }
        // query params
        if ($customer_number2 !== null) {
            $queryParams['CustomerNumber'] = ObjectSerializer::toQueryValue($customer_number2);
        }
        // query params
        if ($billing_organization_code !== null) {
            $queryParams['BillingOrganizationCode'] = ObjectSerializer::toQueryValue($billing_organization_code);
        }
        // query params
        if ($order_number_not_equal !== null) {
            $queryParams['OrderNumber.NotEqual'] = ObjectSerializer::toQueryValue($order_number_not_equal);
        }
        // query params
        if ($order_number_less !== null) {
            $queryParams['OrderNumber.Less'] = ObjectSerializer::toQueryValue($order_number_less);
        }
        // query params
        if ($order_number_less_or_equal !== null) {
            $queryParams['OrderNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($order_number_less_or_equal);
        }
        // query params
        if ($order_number_greater !== null) {
            $queryParams['OrderNumber.Greater'] = ObjectSerializer::toQueryValue($order_number_greater);
        }
        // query params
        if ($order_number_greater_or_equal !== null) {
            $queryParams['OrderNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_number_greater_or_equal);
        }
        // query params
        if ($order_number_is_null !== null) {
            $queryParams['OrderNumber.IsNull'] = ObjectSerializer::toQueryValue($order_number_is_null);
        }
        // query params
        if ($order_number_is_not_null !== null) {
            $queryParams['OrderNumber.IsNotNull'] = ObjectSerializer::toQueryValue($order_number_is_not_null);
        }
        // query params
        if ($order_number_like !== null) {
            $queryParams['OrderNumber.Like'] = ObjectSerializer::toQueryValue($order_number_like);
        }
        // query params
        if ($order_number_not_like !== null) {
            $queryParams['OrderNumber.NotLike'] = ObjectSerializer::toQueryValue($order_number_not_like);
        }
        // query params
        if ($order_number_contains !== null) {
            $queryParams['OrderNumber.Contains'] = ObjectSerializer::toQueryValue($order_number_contains);
        }
        // query params
        if ($order_number_not_contains !== null) {
            $queryParams['OrderNumber.NotContains'] = ObjectSerializer::toQueryValue($order_number_not_contains);
        }
        // query params
        if ($order_number_starts_with !== null) {
            $queryParams['OrderNumber.StartsWith'] = ObjectSerializer::toQueryValue($order_number_starts_with);
        }
        // query params
        if ($order_number_not_starts_with !== null) {
            $queryParams['OrderNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($order_number_not_starts_with);
        }
        // query params
        if ($order_number_ends_with !== null) {
            $queryParams['OrderNumber.EndsWith'] = ObjectSerializer::toQueryValue($order_number_ends_with);
        }
        // query params
        if ($order_number_not_ends_with !== null) {
            $queryParams['OrderNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($order_number_not_ends_with);
        }
        // query params
        if ($order_number_in !== null) {
            $queryParams['OrderNumber.In'] = ObjectSerializer::toQueryValue($order_number_in);
        }
        // query params
        if ($order_number_between !== null) {
            $queryParams['OrderNumber.Between'] = ObjectSerializer::toQueryValue($order_number_between);
        }
        // query params
        if ($order_total_not_equal !== null) {
            $queryParams['OrderTotal.NotEqual'] = ObjectSerializer::toQueryValue($order_total_not_equal);
        }
        // query params
        if ($order_total_less !== null) {
            $queryParams['OrderTotal.Less'] = ObjectSerializer::toQueryValue($order_total_less);
        }
        // query params
        if ($order_total_less_or_equal !== null) {
            $queryParams['OrderTotal.LessOrEqual'] = ObjectSerializer::toQueryValue($order_total_less_or_equal);
        }
        // query params
        if ($order_total_greater !== null) {
            $queryParams['OrderTotal.Greater'] = ObjectSerializer::toQueryValue($order_total_greater);
        }
        // query params
        if ($order_total_greater_or_equal !== null) {
            $queryParams['OrderTotal.GreaterOrEqual'] = ObjectSerializer::toQueryValue($order_total_greater_or_equal);
        }
        // query params
        if ($order_total_is_null !== null) {
            $queryParams['OrderTotal.IsNull'] = ObjectSerializer::toQueryValue($order_total_is_null);
        }
        // query params
        if ($order_total_is_not_null !== null) {
            $queryParams['OrderTotal.IsNotNull'] = ObjectSerializer::toQueryValue($order_total_is_not_null);
        }
        // query params
        if ($order_total_like !== null) {
            $queryParams['OrderTotal.Like'] = ObjectSerializer::toQueryValue($order_total_like);
        }
        // query params
        if ($order_total_not_like !== null) {
            $queryParams['OrderTotal.NotLike'] = ObjectSerializer::toQueryValue($order_total_not_like);
        }
        // query params
        if ($order_total_contains !== null) {
            $queryParams['OrderTotal.Contains'] = ObjectSerializer::toQueryValue($order_total_contains);
        }
        // query params
        if ($order_total_not_contains !== null) {
            $queryParams['OrderTotal.NotContains'] = ObjectSerializer::toQueryValue($order_total_not_contains);
        }
        // query params
        if ($order_total_starts_with !== null) {
            $queryParams['OrderTotal.StartsWith'] = ObjectSerializer::toQueryValue($order_total_starts_with);
        }
        // query params
        if ($order_total_not_starts_with !== null) {
            $queryParams['OrderTotal.NotStartsWith'] = ObjectSerializer::toQueryValue($order_total_not_starts_with);
        }
        // query params
        if ($order_total_ends_with !== null) {
            $queryParams['OrderTotal.EndsWith'] = ObjectSerializer::toQueryValue($order_total_ends_with);
        }
        // query params
        if ($order_total_not_ends_with !== null) {
            $queryParams['OrderTotal.NotEndsWith'] = ObjectSerializer::toQueryValue($order_total_not_ends_with);
        }
        // query params
        if ($order_total_in !== null) {
            $queryParams['OrderTotal.In'] = ObjectSerializer::toQueryValue($order_total_in);
        }
        // query params
        if ($order_total_between !== null) {
            $queryParams['OrderTotal.Between'] = ObjectSerializer::toQueryValue($order_total_between);
        }
        // query params
        if ($amount_paid_not_equal !== null) {
            $queryParams['AmountPaid.NotEqual'] = ObjectSerializer::toQueryValue($amount_paid_not_equal);
        }
        // query params
        if ($amount_paid_less !== null) {
            $queryParams['AmountPaid.Less'] = ObjectSerializer::toQueryValue($amount_paid_less);
        }
        // query params
        if ($amount_paid_less_or_equal !== null) {
            $queryParams['AmountPaid.LessOrEqual'] = ObjectSerializer::toQueryValue($amount_paid_less_or_equal);
        }
        // query params
        if ($amount_paid_greater !== null) {
            $queryParams['AmountPaid.Greater'] = ObjectSerializer::toQueryValue($amount_paid_greater);
        }
        // query params
        if ($amount_paid_greater_or_equal !== null) {
            $queryParams['AmountPaid.GreaterOrEqual'] = ObjectSerializer::toQueryValue($amount_paid_greater_or_equal);
        }
        // query params
        if ($amount_paid_is_null !== null) {
            $queryParams['AmountPaid.IsNull'] = ObjectSerializer::toQueryValue($amount_paid_is_null);
        }
        // query params
        if ($amount_paid_is_not_null !== null) {
            $queryParams['AmountPaid.IsNotNull'] = ObjectSerializer::toQueryValue($amount_paid_is_not_null);
        }
        // query params
        if ($amount_paid_like !== null) {
            $queryParams['AmountPaid.Like'] = ObjectSerializer::toQueryValue($amount_paid_like);
        }
        // query params
        if ($amount_paid_not_like !== null) {
            $queryParams['AmountPaid.NotLike'] = ObjectSerializer::toQueryValue($amount_paid_not_like);
        }
        // query params
        if ($amount_paid_contains !== null) {
            $queryParams['AmountPaid.Contains'] = ObjectSerializer::toQueryValue($amount_paid_contains);
        }
        // query params
        if ($amount_paid_not_contains !== null) {
            $queryParams['AmountPaid.NotContains'] = ObjectSerializer::toQueryValue($amount_paid_not_contains);
        }
        // query params
        if ($amount_paid_starts_with !== null) {
            $queryParams['AmountPaid.StartsWith'] = ObjectSerializer::toQueryValue($amount_paid_starts_with);
        }
        // query params
        if ($amount_paid_not_starts_with !== null) {
            $queryParams['AmountPaid.NotStartsWith'] = ObjectSerializer::toQueryValue($amount_paid_not_starts_with);
        }
        // query params
        if ($amount_paid_ends_with !== null) {
            $queryParams['AmountPaid.EndsWith'] = ObjectSerializer::toQueryValue($amount_paid_ends_with);
        }
        // query params
        if ($amount_paid_not_ends_with !== null) {
            $queryParams['AmountPaid.NotEndsWith'] = ObjectSerializer::toQueryValue($amount_paid_not_ends_with);
        }
        // query params
        if ($amount_paid_in !== null) {
            $queryParams['AmountPaid.In'] = ObjectSerializer::toQueryValue($amount_paid_in);
        }
        // query params
        if ($amount_paid_between !== null) {
            $queryParams['AmountPaid.Between'] = ObjectSerializer::toQueryValue($amount_paid_between);
        }
        // query params
        if ($debit_fully_paid_flag_not_equal !== null) {
            $queryParams['DebitFullyPaidFlag.NotEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_equal);
        }
        // query params
        if ($debit_fully_paid_flag_less !== null) {
            $queryParams['DebitFullyPaidFlag.Less'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_less);
        }
        // query params
        if ($debit_fully_paid_flag_less_or_equal !== null) {
            $queryParams['DebitFullyPaidFlag.LessOrEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_less_or_equal);
        }
        // query params
        if ($debit_fully_paid_flag_greater !== null) {
            $queryParams['DebitFullyPaidFlag.Greater'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_greater);
        }
        // query params
        if ($debit_fully_paid_flag_greater_or_equal !== null) {
            $queryParams['DebitFullyPaidFlag.GreaterOrEqual'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_greater_or_equal);
        }
        // query params
        if ($debit_fully_paid_flag_is_null !== null) {
            $queryParams['DebitFullyPaidFlag.IsNull'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_is_null);
        }
        // query params
        if ($debit_fully_paid_flag_is_not_null !== null) {
            $queryParams['DebitFullyPaidFlag.IsNotNull'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_is_not_null);
        }
        // query params
        if ($debit_fully_paid_flag_like !== null) {
            $queryParams['DebitFullyPaidFlag.Like'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_like);
        }
        // query params
        if ($debit_fully_paid_flag_not_like !== null) {
            $queryParams['DebitFullyPaidFlag.NotLike'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_like);
        }
        // query params
        if ($debit_fully_paid_flag_contains !== null) {
            $queryParams['DebitFullyPaidFlag.Contains'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_contains);
        }
        // query params
        if ($debit_fully_paid_flag_not_contains !== null) {
            $queryParams['DebitFullyPaidFlag.NotContains'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_contains);
        }
        // query params
        if ($debit_fully_paid_flag_starts_with !== null) {
            $queryParams['DebitFullyPaidFlag.StartsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_starts_with);
        }
        // query params
        if ($debit_fully_paid_flag_not_starts_with !== null) {
            $queryParams['DebitFullyPaidFlag.NotStartsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_starts_with);
        }
        // query params
        if ($debit_fully_paid_flag_ends_with !== null) {
            $queryParams['DebitFullyPaidFlag.EndsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_ends_with);
        }
        // query params
        if ($debit_fully_paid_flag_not_ends_with !== null) {
            $queryParams['DebitFullyPaidFlag.NotEndsWith'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_not_ends_with);
        }
        // query params
        if ($debit_fully_paid_flag_in !== null) {
            $queryParams['DebitFullyPaidFlag.In'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_in);
        }
        // query params
        if ($debit_fully_paid_flag_between !== null) {
            $queryParams['DebitFullyPaidFlag.Between'] = ObjectSerializer::toQueryValue($debit_fully_paid_flag_between);
        }
        // query params
        if ($due_date_not_equal !== null) {
            $queryParams['DueDate.NotEqual'] = ObjectSerializer::toQueryValue($due_date_not_equal);
        }
        // query params
        if ($due_date_less !== null) {
            $queryParams['DueDate.Less'] = ObjectSerializer::toQueryValue($due_date_less);
        }
        // query params
        if ($due_date_less_or_equal !== null) {
            $queryParams['DueDate.LessOrEqual'] = ObjectSerializer::toQueryValue($due_date_less_or_equal);
        }
        // query params
        if ($due_date_greater !== null) {
            $queryParams['DueDate.Greater'] = ObjectSerializer::toQueryValue($due_date_greater);
        }
        // query params
        if ($due_date_greater_or_equal !== null) {
            $queryParams['DueDate.GreaterOrEqual'] = ObjectSerializer::toQueryValue($due_date_greater_or_equal);
        }
        // query params
        if ($due_date_is_null !== null) {
            $queryParams['DueDate.IsNull'] = ObjectSerializer::toQueryValue($due_date_is_null);
        }
        // query params
        if ($due_date_is_not_null !== null) {
            $queryParams['DueDate.IsNotNull'] = ObjectSerializer::toQueryValue($due_date_is_not_null);
        }
        // query params
        if ($due_date_like !== null) {
            $queryParams['DueDate.Like'] = ObjectSerializer::toQueryValue($due_date_like);
        }
        // query params
        if ($due_date_not_like !== null) {
            $queryParams['DueDate.NotLike'] = ObjectSerializer::toQueryValue($due_date_not_like);
        }
        // query params
        if ($due_date_contains !== null) {
            $queryParams['DueDate.Contains'] = ObjectSerializer::toQueryValue($due_date_contains);
        }
        // query params
        if ($due_date_not_contains !== null) {
            $queryParams['DueDate.NotContains'] = ObjectSerializer::toQueryValue($due_date_not_contains);
        }
        // query params
        if ($due_date_starts_with !== null) {
            $queryParams['DueDate.StartsWith'] = ObjectSerializer::toQueryValue($due_date_starts_with);
        }
        // query params
        if ($due_date_not_starts_with !== null) {
            $queryParams['DueDate.NotStartsWith'] = ObjectSerializer::toQueryValue($due_date_not_starts_with);
        }
        // query params
        if ($due_date_ends_with !== null) {
            $queryParams['DueDate.EndsWith'] = ObjectSerializer::toQueryValue($due_date_ends_with);
        }
        // query params
        if ($due_date_not_ends_with !== null) {
            $queryParams['DueDate.NotEndsWith'] = ObjectSerializer::toQueryValue($due_date_not_ends_with);
        }
        // query params
        if ($due_date_in !== null) {
            $queryParams['DueDate.In'] = ObjectSerializer::toQueryValue($due_date_in);
        }
        // query params
        if ($due_date_between !== null) {
            $queryParams['DueDate.Between'] = ObjectSerializer::toQueryValue($due_date_between);
        }
        // query params
        if ($currency_code_not_equal !== null) {
            $queryParams['CurrencyCode.NotEqual'] = ObjectSerializer::toQueryValue($currency_code_not_equal);
        }
        // query params
        if ($currency_code_less !== null) {
            $queryParams['CurrencyCode.Less'] = ObjectSerializer::toQueryValue($currency_code_less);
        }
        // query params
        if ($currency_code_less_or_equal !== null) {
            $queryParams['CurrencyCode.LessOrEqual'] = ObjectSerializer::toQueryValue($currency_code_less_or_equal);
        }
        // query params
        if ($currency_code_greater !== null) {
            $queryParams['CurrencyCode.Greater'] = ObjectSerializer::toQueryValue($currency_code_greater);
        }
        // query params
        if ($currency_code_greater_or_equal !== null) {
            $queryParams['CurrencyCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($currency_code_greater_or_equal);
        }
        // query params
        if ($currency_code_is_null !== null) {
            $queryParams['CurrencyCode.IsNull'] = ObjectSerializer::toQueryValue($currency_code_is_null);
        }
        // query params
        if ($currency_code_is_not_null !== null) {
            $queryParams['CurrencyCode.IsNotNull'] = ObjectSerializer::toQueryValue($currency_code_is_not_null);
        }
        // query params
        if ($currency_code_like !== null) {
            $queryParams['CurrencyCode.Like'] = ObjectSerializer::toQueryValue($currency_code_like);
        }
        // query params
        if ($currency_code_not_like !== null) {
            $queryParams['CurrencyCode.NotLike'] = ObjectSerializer::toQueryValue($currency_code_not_like);
        }
        // query params
        if ($currency_code_contains !== null) {
            $queryParams['CurrencyCode.Contains'] = ObjectSerializer::toQueryValue($currency_code_contains);
        }
        // query params
        if ($currency_code_not_contains !== null) {
            $queryParams['CurrencyCode.NotContains'] = ObjectSerializer::toQueryValue($currency_code_not_contains);
        }
        // query params
        if ($currency_code_starts_with !== null) {
            $queryParams['CurrencyCode.StartsWith'] = ObjectSerializer::toQueryValue($currency_code_starts_with);
        }
        // query params
        if ($currency_code_not_starts_with !== null) {
            $queryParams['CurrencyCode.NotStartsWith'] = ObjectSerializer::toQueryValue($currency_code_not_starts_with);
        }
        // query params
        if ($currency_code_ends_with !== null) {
            $queryParams['CurrencyCode.EndsWith'] = ObjectSerializer::toQueryValue($currency_code_ends_with);
        }
        // query params
        if ($currency_code_not_ends_with !== null) {
            $queryParams['CurrencyCode.NotEndsWith'] = ObjectSerializer::toQueryValue($currency_code_not_ends_with);
        }
        // query params
        if ($currency_code_in !== null) {
            $queryParams['CurrencyCode.In'] = ObjectSerializer::toQueryValue($currency_code_in);
        }
        // query params
        if ($currency_code_between !== null) {
            $queryParams['CurrencyCode.Between'] = ObjectSerializer::toQueryValue($currency_code_between);
        }
        // query params
        if ($customer_number_not_equal !== null) {
            $queryParams['CustomerNumber.NotEqual'] = ObjectSerializer::toQueryValue($customer_number_not_equal);
        }
        // query params
        if ($customer_number_less !== null) {
            $queryParams['CustomerNumber.Less'] = ObjectSerializer::toQueryValue($customer_number_less);
        }
        // query params
        if ($customer_number_less_or_equal !== null) {
            $queryParams['CustomerNumber.LessOrEqual'] = ObjectSerializer::toQueryValue($customer_number_less_or_equal);
        }
        // query params
        if ($customer_number_greater !== null) {
            $queryParams['CustomerNumber.Greater'] = ObjectSerializer::toQueryValue($customer_number_greater);
        }
        // query params
        if ($customer_number_greater_or_equal !== null) {
            $queryParams['CustomerNumber.GreaterOrEqual'] = ObjectSerializer::toQueryValue($customer_number_greater_or_equal);
        }
        // query params
        if ($customer_number_is_null !== null) {
            $queryParams['CustomerNumber.IsNull'] = ObjectSerializer::toQueryValue($customer_number_is_null);
        }
        // query params
        if ($customer_number_is_not_null !== null) {
            $queryParams['CustomerNumber.IsNotNull'] = ObjectSerializer::toQueryValue($customer_number_is_not_null);
        }
        // query params
        if ($customer_number_like !== null) {
            $queryParams['CustomerNumber.Like'] = ObjectSerializer::toQueryValue($customer_number_like);
        }
        // query params
        if ($customer_number_not_like !== null) {
            $queryParams['CustomerNumber.NotLike'] = ObjectSerializer::toQueryValue($customer_number_not_like);
        }
        // query params
        if ($customer_number_contains !== null) {
            $queryParams['CustomerNumber.Contains'] = ObjectSerializer::toQueryValue($customer_number_contains);
        }
        // query params
        if ($customer_number_not_contains !== null) {
            $queryParams['CustomerNumber.NotContains'] = ObjectSerializer::toQueryValue($customer_number_not_contains);
        }
        // query params
        if ($customer_number_starts_with !== null) {
            $queryParams['CustomerNumber.StartsWith'] = ObjectSerializer::toQueryValue($customer_number_starts_with);
        }
        // query params
        if ($customer_number_not_starts_with !== null) {
            $queryParams['CustomerNumber.NotStartsWith'] = ObjectSerializer::toQueryValue($customer_number_not_starts_with);
        }
        // query params
        if ($customer_number_ends_with !== null) {
            $queryParams['CustomerNumber.EndsWith'] = ObjectSerializer::toQueryValue($customer_number_ends_with);
        }
        // query params
        if ($customer_number_not_ends_with !== null) {
            $queryParams['CustomerNumber.NotEndsWith'] = ObjectSerializer::toQueryValue($customer_number_not_ends_with);
        }
        // query params
        if ($customer_number_in !== null) {
            $queryParams['CustomerNumber.In'] = ObjectSerializer::toQueryValue($customer_number_in);
        }
        // query params
        if ($customer_number_between !== null) {
            $queryParams['CustomerNumber.Between'] = ObjectSerializer::toQueryValue($customer_number_between);
        }
        // query params
        if ($billing_organization_code_not_equal !== null) {
            $queryParams['BillingOrganizationCode.NotEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_not_equal);
        }
        // query params
        if ($billing_organization_code_less !== null) {
            $queryParams['BillingOrganizationCode.Less'] = ObjectSerializer::toQueryValue($billing_organization_code_less);
        }
        // query params
        if ($billing_organization_code_less_or_equal !== null) {
            $queryParams['BillingOrganizationCode.LessOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_less_or_equal);
        }
        // query params
        if ($billing_organization_code_greater !== null) {
            $queryParams['BillingOrganizationCode.Greater'] = ObjectSerializer::toQueryValue($billing_organization_code_greater);
        }
        // query params
        if ($billing_organization_code_greater_or_equal !== null) {
            $queryParams['BillingOrganizationCode.GreaterOrEqual'] = ObjectSerializer::toQueryValue($billing_organization_code_greater_or_equal);
        }
        // query params
        if ($billing_organization_code_is_null !== null) {
            $queryParams['BillingOrganizationCode.IsNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_null);
        }
        // query params
        if ($billing_organization_code_is_not_null !== null) {
            $queryParams['BillingOrganizationCode.IsNotNull'] = ObjectSerializer::toQueryValue($billing_organization_code_is_not_null);
        }
        // query params
        if ($billing_organization_code_like !== null) {
            $queryParams['BillingOrganizationCode.Like'] = ObjectSerializer::toQueryValue($billing_organization_code_like);
        }
        // query params
        if ($billing_organization_code_not_like !== null) {
            $queryParams['BillingOrganizationCode.NotLike'] = ObjectSerializer::toQueryValue($billing_organization_code_not_like);
        }
        // query params
        if ($billing_organization_code_contains !== null) {
            $queryParams['BillingOrganizationCode.Contains'] = ObjectSerializer::toQueryValue($billing_organization_code_contains);
        }
        // query params
        if ($billing_organization_code_not_contains !== null) {
            $queryParams['BillingOrganizationCode.NotContains'] = ObjectSerializer::toQueryValue($billing_organization_code_not_contains);
        }
        // query params
        if ($billing_organization_code_starts_with !== null) {
            $queryParams['BillingOrganizationCode.StartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_starts_with);
        }
        // query params
        if ($billing_organization_code_not_starts_with !== null) {
            $queryParams['BillingOrganizationCode.NotStartsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_starts_with);
        }
        // query params
        if ($billing_organization_code_ends_with !== null) {
            $queryParams['BillingOrganizationCode.EndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_ends_with);
        }
        // query params
        if ($billing_organization_code_not_ends_with !== null) {
            $queryParams['BillingOrganizationCode.NotEndsWith'] = ObjectSerializer::toQueryValue($billing_organization_code_not_ends_with);
        }
        // query params
        if ($billing_organization_code_in !== null) {
            $queryParams['BillingOrganizationCode.In'] = ObjectSerializer::toQueryValue($billing_organization_code_in);
        }
        // query params
        if ($billing_organization_code_between !== null) {
            $queryParams['BillingOrganizationCode.Between'] = ObjectSerializer::toQueryValue($billing_organization_code_between);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
