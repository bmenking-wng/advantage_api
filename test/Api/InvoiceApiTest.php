<?php
/**
 * InvoiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for invoiceAddAvailableCreditPayment
     *
     * Add a payment to a given debit using the customer's available credit.  If a specific amount is specified to use but there is less than that available, an error will be thrown.  If a zero amount is specified, all or any available credit will be used up to the amount due..
     *
     */
    public function testInvoiceAddAvailableCreditPayment()
    {
    }

    /**
     * Test case for invoiceAddCreditCardPayment
     *
     * Adds credit card payments to an existing open invoice for an existing order..
     *
     */
    public function testInvoiceAddCreditCardPayment()
    {
    }

    /**
     * Test case for invoiceAddOrderPaymentCheck
     *
     * Add a check payment to an existing order..
     *
     */
    public function testInvoiceAddOrderPaymentCheck()
    {
    }

    /**
     * Test case for invoiceAddOrderPaymentCreditMemo
     *
     * Adds credit memo payments to existing invoices for the given order.  The amount will be applied to existing order until it has all been  used.
     *
     */
    public function testInvoiceAddOrderPaymentCreditMemo()
    {
    }

    /**
     * Test case for invoiceAddOrderPaymentDigitalWallet
     *
     * Add a Digital Wallet payment to an existing order.
     *
     */
    public function testInvoiceAddOrderPaymentDigitalWallet()
    {
    }

    /**
     * Test case for invoiceAddSavedCreditCardPayment
     *
     * Add a credit card payment to an existing order..
     *
     */
    public function testInvoiceAddSavedCreditCardPayment()
    {
    }

    /**
     * Test case for invoiceAddSavedDirectDebitPayment
     *
     * Add a direct debit payment to an existing order..
     *
     */
    public function testInvoiceAddSavedDirectDebitPayment()
    {
    }

    /**
     * Test case for invoiceGetInvoice
     *
     * Gets an invoice..
     *
     */
    public function testInvoiceGetInvoice()
    {
    }

    /**
     * Test case for invoiceSearch
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1.
     *
     */
    public function testInvoiceSearch()
    {
    }

    /**
     * Test case for invoiceSearchByCustomer
     *
     * Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1.
     *
     */
    public function testInvoiceSearchByCustomer()
    {
    }
}
