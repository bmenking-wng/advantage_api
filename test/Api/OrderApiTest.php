<?php
/**
 * OrderApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for orderAddCoupons
     *
     * Add coupons to an order..
     *
     */
    public function testOrderAddCoupons()
    {
    }

    /**
     * Test case for orderAddPayments
     *
     * Add payments to an order.  Credit cards payments may be authorized immediately depending on your  system settings..
     *
     */
    public function testOrderAddPayments()
    {
    }

    /**
     * Test case for orderCommit
     *
     * Commit an order and payment. Committing the order commits the inventory and  releases the order for fulfillment.  Any access agreements on the order will  be released if the control group auto-release setting is set to release  at order completion..
     *
     */
    public function testOrderCommit()
    {
    }

    /**
     * Test case for orderCreate
     *
     * Create a new order. This method takes the incoming order create request object and uses it to create a new   Advantage order. The new Advantage order has a new order line created for each OrderLineIn object   contained in the order create request object..
     *
     */
    public function testOrderCreate()
    {
    }

    /**
     * Test case for orderCreateAppliedReturnOrder
     *
     * .
     *
     */
    public function testOrderCreateAppliedReturnOrder()
    {
    }

    /**
     * Test case for orderCreateOrderTracking
     *
     * Create a shipment tracking record for an order.
     *
     */
    public function testOrderCreateOrderTracking()
    {
    }

    /**
     * Test case for orderDeleteCommittedOrder
     *
     * Deletes a committed order..
     *
     */
    public function testOrderDeleteCommittedOrder()
    {
    }

    /**
     * Test case for orderDeleteCommittedOrderLine
     *
     * Deletes a committed order line..
     *
     */
    public function testOrderDeleteCommittedOrderLine()
    {
    }

    /**
     * Test case for orderDeletePendingByCustomer
     *
     * Delete all uncommitted orders for a given bill-to customer and order source..
     *
     */
    public function testOrderDeletePendingByCustomer()
    {
    }

    /**
     * Test case for orderGet
     *
     * Get an order's information given the order number and   a few options specified about how you'd like that order information..
     *
     */
    public function testOrderGet()
    {
    }

    /**
     * Test case for orderGetDefaultCurrency
     *
     * Gets default currency for adding an order line.
     *
     */
    public function testOrderGetDefaultCurrency()
    {
    }

    /**
     * Test case for orderGetOrderLineDefaults
     *
     * Gets default values for adding an order line.
     *
     */
    public function testOrderGetOrderLineDefaults()
    {
    }

    /**
     * Test case for orderGetPaymentDefaults
     *
     * Gets default values for entering a payment for this given order.  Assumes the order has already been submitted (though not necessarily committed)..
     *
     */
    public function testOrderGetPaymentDefaults()
    {
    }

    /**
     * Test case for orderGetPendingPremiums
     *
     * Gets a list of pending premium items on this order..
     *
     */
    public function testOrderGetPendingPremiums()
    {
    }

    /**
     * Test case for orderGetShippingChoices
     *
     * Get a list of valid shipping options for a given order..
     *
     */
    public function testOrderGetShippingChoices()
    {
    }

    /**
     * Test case for orderGetValidCardTypes
     *
     * Get a list of valid card types for a given order..
     *
     */
    public function testOrderGetValidCardTypes()
    {
    }

    /**
     * Test case for orderGetValidCardsForOrder
     *
     * Get the valid credit cards for a given order..
     *
     */
    public function testOrderGetValidCardsForOrder()
    {
    }

    /**
     * Test case for orderGetValidDirectDebitTypes
     *
     * Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for   a more filtered result..
     *
     */
    public function testOrderGetValidDirectDebitTypes()
    {
    }

    /**
     * Test case for orderGetValidGiftCertificatesForOrder
     *
     * .
     *
     */
    public function testOrderGetValidGiftCertificatesForOrder()
    {
    }

    /**
     * Test case for orderPost
     *
     * Post an activated web order..
     *
     */
    public function testOrderPost()
    {
    }

    /**
     * Test case for orderPutCoupons
     *
     * Replace coupons for an order..
     *
     */
    public function testOrderPutCoupons()
    {
    }

    /**
     * Test case for orderRemovePayment
     *
     * Removes the specified payments from the specified order..
     *
     */
    public function testOrderRemovePayment()
    {
    }

    /**
     * Test case for orderSetPendingPremiumItemNumber
     *
     * Sets the item number on a premium set item. This method is not applicable for premium items..
     *
     */
    public function testOrderSetPendingPremiumItemNumber()
    {
    }

    /**
     * Test case for orderUpdate
     *
     * Update an existing order..
     *
     */
    public function testOrderUpdate()
    {
    }
}
