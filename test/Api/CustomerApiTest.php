<?php
/**
 * CustomerApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advantage.Rest.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomerApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApiTest extends \PHPUnit_Framework_TestCase
{
	private $api;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for customerActivate
     *
     * Create a login and attach it to an already existing customer..
     *
     */
    public function testCustomerActivate()
    {
    }

    /**
     * Test case for customerAddOrUpdateCustomerEmails
     *
     * Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.  If it does exist, is updated with the information provided. The email address value must be provided in each element  in the list. The email Id will be ignored if not provided.  Values in the list which are null will not be updated. On a new record, IsEmailValid will default to true..
     *
     */
    public function testCustomerAddOrUpdateCustomerEmails()
    {
    }

    /**
     * Test case for customerCreate
     *
     * Creates a new customer and optionally assigns a username/password to register the customer  on a website.  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead.  By default, a search is made to see if this customer would be considered a duplicate.  If an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)  then a new customer is NOT created.  Instead, the existing customer number is returned.  Examine the address code in the response to see which address code was used.  The address code may  not be the same as the requested address code if a duplicate customer was found..
     *
     */
    public function testCustomerCreate()
    {
    }

    /**
     * Test case for customerCreateRelationship
     *
     * Creates a new customer relationship in Advantage.
     *
     */
    public function testCustomerCreateRelationship()
    {
    }

    /**
     * Test case for customerGet
     *
     * Gets customer and address information for a given customer number..
     *
     */
    public function testCustomerGet()
    {
    }

    /**
     * Test case for customerGetAccountBalance
     *
     * Get the account balance for the given customer..
     *
     */
    public function testCustomerGetAccountBalance()
    {
    }

    /**
     * Test case for customerGetActivity
     *
     * Gets all activity for a given customer..
     *
     */
    public function testCustomerGetActivity()
    {
    }

    /**
     * Test case for customerGetAddress
     *
     * Find and return addresses for a given customer number and address code..
     *
     */
    public function testCustomerGetAddress()
    {
    }

    /**
     * Test case for customerGetAddresses
     *
     * Gets all of the addresses for a given customer..
     *
     */
    public function testCustomerGetAddresses()
    {
    }

    /**
     * Test case for customerGetAvailableCreditAmount
     *
     * Gets the amount of credits available on the customers account..
     *
     */
    public function testCustomerGetAvailableCreditAmount()
    {
    }

    /**
     * Test case for customerGetByBankAccount
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change..
     *
     */
    public function testCustomerGetByBankAccount()
    {
    }

    /**
     * Test case for customerGetByCreditCard
     *
     * Search for customers by bank account.  This is a preliminary API, subject to change..
     *
     */
    public function testCustomerGetByCreditCard()
    {
    }

    /**
     * Test case for customerGetCustomerActivityAr
     *
     * Gets all A/R tied to a specific customer activity..
     *
     */
    public function testCustomerGetCustomerActivityAr()
    {
    }

    /**
     * Test case for customerGetCustomerCalls
     *
     * Gets list of calls for the given customer.
     *
     */
    public function testCustomerGetCustomerCalls()
    {
    }

    /**
     * Test case for customerGetCustomerDefaults
     *
     * Get customer defaults by customer type..
     *
     */
    public function testCustomerGetCustomerDefaults()
    {
    }

    /**
     * Test case for customerGetDefaultAddress
     *
     * Find and return default address information for a given customer number..
     *
     */
    public function testCustomerGetDefaultAddress()
    {
    }

    /**
     * Test case for customerGetEmails
     *
     * Gets all of the email addresses for a given customer..
     *
     */
    public function testCustomerGetEmails()
    {
    }

    /**
     * Test case for customerGetPendingPremiums
     *
     * Get a list of pending premium items for this customer..
     *
     */
    public function testCustomerGetPendingPremiums()
    {
    }

    /**
     * Test case for customerGetRelationships
     *
     * Get a list of relationships for this customer..
     *
     */
    public function testCustomerGetRelationships()
    {
    }

    /**
     * Test case for customerGetSavedCreditCards
     *
     * Get a list of saved credit cards for this customer.  This is a preliminary API, subject to change..
     *
     */
    public function testCustomerGetSavedCreditCards()
    {
    }

    /**
     * Test case for customerGetSavedPayments
     *
     * Get saved payments for the given customer.
     *
     */
    public function testCustomerGetSavedPayments()
    {
    }

    /**
     * Test case for customerGetUnpaidDebits
     *
     * Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.  This includes debits that have unposted credit applications for the remaining balance..
     *
     */
    public function testCustomerGetUnpaidDebits()
    {
    }

    /**
     * Test case for customerGetUsers
     *
     * Gets all users for the given customer..
     *
     */
    public function testCustomerGetUsers()
    {
    }

    /**
     * Test case for customerGetUsers_0
     *
     * Gets all users for the given customer..
     *
     */
    public function testCustomerGetUsers0()
    {
    }

    /**
     * Test case for customerSearch
     *
     * Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe.
     *
     */
    public function testCustomerSearch()
    {

    }

    /**
     * Test case for customerSearchAddresses
     *
     * Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.  For example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe.
     *
     */
    public function testCustomerSearchAddresses()
    {
    }

    /**
     * Test case for customerSearchAvailableCredits
     *
     * Gets the unapplied credits available on the customers account..
     *
     */
    public function testCustomerSearchAvailableCredits()
    {
    }

    /**
     * Test case for customerSearchOrderedForProducts
     *
     * .
     *
     */
    public function testCustomerSearchOrderedForProducts()
    {
    }

    /**
     * Test case for customerSearchOrderedProducts
     *
     * Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change..
     *
     */
    public function testCustomerSearchOrderedProducts()
    {
    }

    /**
     * Test case for customerUpdate
     *
     * Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.  If it does exist, is updated with the information provided.  In the case of an address update:  If the address is a temporary address that is currently in effect, changes to the  address will not become effective until the CDS750 address swapping process runs.  In the case of a new address:  If the customer name is provided then the individual name fields (i.e. name title,  name first, etc.) are ignored; their values will be derived by parsing the  customer name parameter.  If the customer name is not provided then the individual  name fields will be used to populate the customer address record instead..
     *
     */
    public function testCustomerUpdate()
    {
    }

    /**
     * Test case for customerUpdateCustomerAddress
     *
     * Update a customer address.
     *
     */
    public function testCustomerUpdateCustomerAddress()
    {
    }

    /**
     * Test case for customerValidateLastName
     *
     * Validate that a customer number identifies a customer with the specified last name (surname).  A 404 Not Found status is returned if validation fails..
     *
     */
    public function testCustomerValidateLastName()
    {
    }

    /**
     * Test case for customerValidatePostalCode
     *
     * Validate that a customer number identifies a customer with the specified country and postal code.  A 404 Not Found status is returned if validation fails..
     *
     */
    public function testCustomerValidatePostalCode()
    {
    }
}
